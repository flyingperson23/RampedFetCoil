
STM-Interrupter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08006aa4  08006aa4  00007aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba8  08006ba8  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ba8  08006ba8  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ba8  08006ba8  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba8  08006ba8  00007ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bac  08006bac  00007bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006bb0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  2000000c  08006bbc  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08006bbc  00008338  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135a9  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000288e  00000000  00000000  0001b5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0001de70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d08  00000000  00000000  0001ef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014903  00000000  00000000  0001fc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139b4  00000000  00000000  0003451b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000851d8  00000000  00000000  00047ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd0a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef0  00000000  00000000  000cd0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d0fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006a8c 	.word	0x08006a8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08006a8c 	.word	0x08006a8c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fb55 	bl	8000aac <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fad5 	bl	80009bc <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb47 	bl	8000aac <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb3d 	bl	8000aac <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fae3 	bl	8000a0c <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fad9 	bl	8000a0c <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_fadd>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	46ce      	mov	lr, r9
 800046c:	4647      	mov	r7, r8
 800046e:	0243      	lsls	r3, r0, #9
 8000470:	0a5a      	lsrs	r2, r3, #9
 8000472:	024e      	lsls	r6, r1, #9
 8000474:	0045      	lsls	r5, r0, #1
 8000476:	0fc4      	lsrs	r4, r0, #31
 8000478:	0048      	lsls	r0, r1, #1
 800047a:	4691      	mov	r9, r2
 800047c:	0e2d      	lsrs	r5, r5, #24
 800047e:	0a72      	lsrs	r2, r6, #9
 8000480:	0e00      	lsrs	r0, r0, #24
 8000482:	4694      	mov	ip, r2
 8000484:	b580      	push	{r7, lr}
 8000486:	099b      	lsrs	r3, r3, #6
 8000488:	0fc9      	lsrs	r1, r1, #31
 800048a:	09b6      	lsrs	r6, r6, #6
 800048c:	1a2a      	subs	r2, r5, r0
 800048e:	428c      	cmp	r4, r1
 8000490:	d021      	beq.n	80004d6 <__aeabi_fadd+0x6e>
 8000492:	2a00      	cmp	r2, #0
 8000494:	dd0d      	ble.n	80004b2 <__aeabi_fadd+0x4a>
 8000496:	2800      	cmp	r0, #0
 8000498:	d12d      	bne.n	80004f6 <__aeabi_fadd+0x8e>
 800049a:	2e00      	cmp	r6, #0
 800049c:	d100      	bne.n	80004a0 <__aeabi_fadd+0x38>
 800049e:	e08d      	b.n	80005bc <__aeabi_fadd+0x154>
 80004a0:	1e51      	subs	r1, r2, #1
 80004a2:	2a01      	cmp	r2, #1
 80004a4:	d100      	bne.n	80004a8 <__aeabi_fadd+0x40>
 80004a6:	e11d      	b.n	80006e4 <__aeabi_fadd+0x27c>
 80004a8:	2aff      	cmp	r2, #255	@ 0xff
 80004aa:	d100      	bne.n	80004ae <__aeabi_fadd+0x46>
 80004ac:	e0ab      	b.n	8000606 <__aeabi_fadd+0x19e>
 80004ae:	000a      	movs	r2, r1
 80004b0:	e027      	b.n	8000502 <__aeabi_fadd+0x9a>
 80004b2:	2a00      	cmp	r2, #0
 80004b4:	d04d      	beq.n	8000552 <__aeabi_fadd+0xea>
 80004b6:	1b42      	subs	r2, r0, r5
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	d000      	beq.n	80004be <__aeabi_fadd+0x56>
 80004bc:	e0cc      	b.n	8000658 <__aeabi_fadd+0x1f0>
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fadd+0x5c>
 80004c2:	e079      	b.n	80005b8 <__aeabi_fadd+0x150>
 80004c4:	1e54      	subs	r4, r2, #1
 80004c6:	2a01      	cmp	r2, #1
 80004c8:	d100      	bne.n	80004cc <__aeabi_fadd+0x64>
 80004ca:	e128      	b.n	800071e <__aeabi_fadd+0x2b6>
 80004cc:	2aff      	cmp	r2, #255	@ 0xff
 80004ce:	d100      	bne.n	80004d2 <__aeabi_fadd+0x6a>
 80004d0:	e097      	b.n	8000602 <__aeabi_fadd+0x19a>
 80004d2:	0022      	movs	r2, r4
 80004d4:	e0c5      	b.n	8000662 <__aeabi_fadd+0x1fa>
 80004d6:	2a00      	cmp	r2, #0
 80004d8:	dc00      	bgt.n	80004dc <__aeabi_fadd+0x74>
 80004da:	e096      	b.n	800060a <__aeabi_fadd+0x1a2>
 80004dc:	2800      	cmp	r0, #0
 80004de:	d04f      	beq.n	8000580 <__aeabi_fadd+0x118>
 80004e0:	2dff      	cmp	r5, #255	@ 0xff
 80004e2:	d100      	bne.n	80004e6 <__aeabi_fadd+0x7e>
 80004e4:	e08f      	b.n	8000606 <__aeabi_fadd+0x19e>
 80004e6:	2180      	movs	r1, #128	@ 0x80
 80004e8:	04c9      	lsls	r1, r1, #19
 80004ea:	430e      	orrs	r6, r1
 80004ec:	2a1b      	cmp	r2, #27
 80004ee:	dd51      	ble.n	8000594 <__aeabi_fadd+0x12c>
 80004f0:	002a      	movs	r2, r5
 80004f2:	3301      	adds	r3, #1
 80004f4:	e018      	b.n	8000528 <__aeabi_fadd+0xc0>
 80004f6:	2dff      	cmp	r5, #255	@ 0xff
 80004f8:	d100      	bne.n	80004fc <__aeabi_fadd+0x94>
 80004fa:	e084      	b.n	8000606 <__aeabi_fadd+0x19e>
 80004fc:	2180      	movs	r1, #128	@ 0x80
 80004fe:	04c9      	lsls	r1, r1, #19
 8000500:	430e      	orrs	r6, r1
 8000502:	2101      	movs	r1, #1
 8000504:	2a1b      	cmp	r2, #27
 8000506:	dc08      	bgt.n	800051a <__aeabi_fadd+0xb2>
 8000508:	0031      	movs	r1, r6
 800050a:	2020      	movs	r0, #32
 800050c:	40d1      	lsrs	r1, r2
 800050e:	1a82      	subs	r2, r0, r2
 8000510:	4096      	lsls	r6, r2
 8000512:	0032      	movs	r2, r6
 8000514:	1e50      	subs	r0, r2, #1
 8000516:	4182      	sbcs	r2, r0
 8000518:	4311      	orrs	r1, r2
 800051a:	1a5b      	subs	r3, r3, r1
 800051c:	015a      	lsls	r2, r3, #5
 800051e:	d459      	bmi.n	80005d4 <__aeabi_fadd+0x16c>
 8000520:	2107      	movs	r1, #7
 8000522:	002a      	movs	r2, r5
 8000524:	4019      	ands	r1, r3
 8000526:	d049      	beq.n	80005bc <__aeabi_fadd+0x154>
 8000528:	210f      	movs	r1, #15
 800052a:	4019      	ands	r1, r3
 800052c:	2904      	cmp	r1, #4
 800052e:	d000      	beq.n	8000532 <__aeabi_fadd+0xca>
 8000530:	3304      	adds	r3, #4
 8000532:	0159      	lsls	r1, r3, #5
 8000534:	d542      	bpl.n	80005bc <__aeabi_fadd+0x154>
 8000536:	1c50      	adds	r0, r2, #1
 8000538:	2afe      	cmp	r2, #254	@ 0xfe
 800053a:	d03a      	beq.n	80005b2 <__aeabi_fadd+0x14a>
 800053c:	019b      	lsls	r3, r3, #6
 800053e:	b2c0      	uxtb	r0, r0
 8000540:	0a5b      	lsrs	r3, r3, #9
 8000542:	05c0      	lsls	r0, r0, #23
 8000544:	4318      	orrs	r0, r3
 8000546:	07e4      	lsls	r4, r4, #31
 8000548:	4320      	orrs	r0, r4
 800054a:	bcc0      	pop	{r6, r7}
 800054c:	46b9      	mov	r9, r7
 800054e:	46b0      	mov	r8, r6
 8000550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000552:	20fe      	movs	r0, #254	@ 0xfe
 8000554:	4680      	mov	r8, r0
 8000556:	1c6f      	adds	r7, r5, #1
 8000558:	0038      	movs	r0, r7
 800055a:	4647      	mov	r7, r8
 800055c:	4207      	tst	r7, r0
 800055e:	d000      	beq.n	8000562 <__aeabi_fadd+0xfa>
 8000560:	e08e      	b.n	8000680 <__aeabi_fadd+0x218>
 8000562:	2d00      	cmp	r5, #0
 8000564:	d000      	beq.n	8000568 <__aeabi_fadd+0x100>
 8000566:	e0b4      	b.n	80006d2 <__aeabi_fadd+0x26a>
 8000568:	2b00      	cmp	r3, #0
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x106>
 800056c:	e0db      	b.n	8000726 <__aeabi_fadd+0x2be>
 800056e:	2e00      	cmp	r6, #0
 8000570:	d06c      	beq.n	800064c <__aeabi_fadd+0x1e4>
 8000572:	1b98      	subs	r0, r3, r6
 8000574:	0145      	lsls	r5, r0, #5
 8000576:	d400      	bmi.n	800057a <__aeabi_fadd+0x112>
 8000578:	e0f7      	b.n	800076a <__aeabi_fadd+0x302>
 800057a:	000c      	movs	r4, r1
 800057c:	1af3      	subs	r3, r6, r3
 800057e:	e03d      	b.n	80005fc <__aeabi_fadd+0x194>
 8000580:	2e00      	cmp	r6, #0
 8000582:	d01b      	beq.n	80005bc <__aeabi_fadd+0x154>
 8000584:	1e51      	subs	r1, r2, #1
 8000586:	2a01      	cmp	r2, #1
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x124>
 800058a:	e082      	b.n	8000692 <__aeabi_fadd+0x22a>
 800058c:	2aff      	cmp	r2, #255	@ 0xff
 800058e:	d03a      	beq.n	8000606 <__aeabi_fadd+0x19e>
 8000590:	000a      	movs	r2, r1
 8000592:	e7ab      	b.n	80004ec <__aeabi_fadd+0x84>
 8000594:	0031      	movs	r1, r6
 8000596:	2020      	movs	r0, #32
 8000598:	40d1      	lsrs	r1, r2
 800059a:	1a82      	subs	r2, r0, r2
 800059c:	4096      	lsls	r6, r2
 800059e:	0032      	movs	r2, r6
 80005a0:	1e50      	subs	r0, r2, #1
 80005a2:	4182      	sbcs	r2, r0
 80005a4:	430a      	orrs	r2, r1
 80005a6:	189b      	adds	r3, r3, r2
 80005a8:	015a      	lsls	r2, r3, #5
 80005aa:	d5b9      	bpl.n	8000520 <__aeabi_fadd+0xb8>
 80005ac:	1c6a      	adds	r2, r5, #1
 80005ae:	2dfe      	cmp	r5, #254	@ 0xfe
 80005b0:	d175      	bne.n	800069e <__aeabi_fadd+0x236>
 80005b2:	20ff      	movs	r0, #255	@ 0xff
 80005b4:	2300      	movs	r3, #0
 80005b6:	e7c4      	b.n	8000542 <__aeabi_fadd+0xda>
 80005b8:	000c      	movs	r4, r1
 80005ba:	0033      	movs	r3, r6
 80005bc:	08db      	lsrs	r3, r3, #3
 80005be:	2aff      	cmp	r2, #255	@ 0xff
 80005c0:	d146      	bne.n	8000650 <__aeabi_fadd+0x1e8>
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f5      	beq.n	80005b2 <__aeabi_fadd+0x14a>
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	03d2      	lsls	r2, r2, #15
 80005ca:	4313      	orrs	r3, r2
 80005cc:	025b      	lsls	r3, r3, #9
 80005ce:	20ff      	movs	r0, #255	@ 0xff
 80005d0:	0a5b      	lsrs	r3, r3, #9
 80005d2:	e7b6      	b.n	8000542 <__aeabi_fadd+0xda>
 80005d4:	019f      	lsls	r7, r3, #6
 80005d6:	09bf      	lsrs	r7, r7, #6
 80005d8:	0038      	movs	r0, r7
 80005da:	f001 f98d 	bl	80018f8 <__clzsi2>
 80005de:	3805      	subs	r0, #5
 80005e0:	4087      	lsls	r7, r0
 80005e2:	4285      	cmp	r5, r0
 80005e4:	dc24      	bgt.n	8000630 <__aeabi_fadd+0x1c8>
 80005e6:	003b      	movs	r3, r7
 80005e8:	2120      	movs	r1, #32
 80005ea:	1b42      	subs	r2, r0, r5
 80005ec:	3201      	adds	r2, #1
 80005ee:	40d3      	lsrs	r3, r2
 80005f0:	1a8a      	subs	r2, r1, r2
 80005f2:	4097      	lsls	r7, r2
 80005f4:	1e7a      	subs	r2, r7, #1
 80005f6:	4197      	sbcs	r7, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	433b      	orrs	r3, r7
 80005fc:	0759      	lsls	r1, r3, #29
 80005fe:	d193      	bne.n	8000528 <__aeabi_fadd+0xc0>
 8000600:	e797      	b.n	8000532 <__aeabi_fadd+0xca>
 8000602:	000c      	movs	r4, r1
 8000604:	0033      	movs	r3, r6
 8000606:	08db      	lsrs	r3, r3, #3
 8000608:	e7db      	b.n	80005c2 <__aeabi_fadd+0x15a>
 800060a:	2a00      	cmp	r2, #0
 800060c:	d014      	beq.n	8000638 <__aeabi_fadd+0x1d0>
 800060e:	1b42      	subs	r2, r0, r5
 8000610:	2d00      	cmp	r5, #0
 8000612:	d14b      	bne.n	80006ac <__aeabi_fadd+0x244>
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0d0      	beq.n	80005ba <__aeabi_fadd+0x152>
 8000618:	1e51      	subs	r1, r2, #1
 800061a:	2a01      	cmp	r2, #1
 800061c:	d100      	bne.n	8000620 <__aeabi_fadd+0x1b8>
 800061e:	e09e      	b.n	800075e <__aeabi_fadd+0x2f6>
 8000620:	2aff      	cmp	r2, #255	@ 0xff
 8000622:	d0ef      	beq.n	8000604 <__aeabi_fadd+0x19c>
 8000624:	000a      	movs	r2, r1
 8000626:	2a1b      	cmp	r2, #27
 8000628:	dd5f      	ble.n	80006ea <__aeabi_fadd+0x282>
 800062a:	0002      	movs	r2, r0
 800062c:	1c73      	adds	r3, r6, #1
 800062e:	e77b      	b.n	8000528 <__aeabi_fadd+0xc0>
 8000630:	4b50      	ldr	r3, [pc, #320]	@ (8000774 <__aeabi_fadd+0x30c>)
 8000632:	1a2a      	subs	r2, r5, r0
 8000634:	403b      	ands	r3, r7
 8000636:	e7e1      	b.n	80005fc <__aeabi_fadd+0x194>
 8000638:	21fe      	movs	r1, #254	@ 0xfe
 800063a:	1c6a      	adds	r2, r5, #1
 800063c:	4211      	tst	r1, r2
 800063e:	d13b      	bne.n	80006b8 <__aeabi_fadd+0x250>
 8000640:	2d00      	cmp	r5, #0
 8000642:	d15d      	bne.n	8000700 <__aeabi_fadd+0x298>
 8000644:	2b00      	cmp	r3, #0
 8000646:	d07f      	beq.n	8000748 <__aeabi_fadd+0x2e0>
 8000648:	2e00      	cmp	r6, #0
 800064a:	d17f      	bne.n	800074c <__aeabi_fadd+0x2e4>
 800064c:	2200      	movs	r2, #0
 800064e:	08db      	lsrs	r3, r3, #3
 8000650:	025b      	lsls	r3, r3, #9
 8000652:	0a5b      	lsrs	r3, r3, #9
 8000654:	b2d0      	uxtb	r0, r2
 8000656:	e774      	b.n	8000542 <__aeabi_fadd+0xda>
 8000658:	28ff      	cmp	r0, #255	@ 0xff
 800065a:	d0d2      	beq.n	8000602 <__aeabi_fadd+0x19a>
 800065c:	2480      	movs	r4, #128	@ 0x80
 800065e:	04e4      	lsls	r4, r4, #19
 8000660:	4323      	orrs	r3, r4
 8000662:	2401      	movs	r4, #1
 8000664:	2a1b      	cmp	r2, #27
 8000666:	dc07      	bgt.n	8000678 <__aeabi_fadd+0x210>
 8000668:	001c      	movs	r4, r3
 800066a:	2520      	movs	r5, #32
 800066c:	40d4      	lsrs	r4, r2
 800066e:	1aaa      	subs	r2, r5, r2
 8000670:	4093      	lsls	r3, r2
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	4193      	sbcs	r3, r2
 8000676:	431c      	orrs	r4, r3
 8000678:	1b33      	subs	r3, r6, r4
 800067a:	0005      	movs	r5, r0
 800067c:	000c      	movs	r4, r1
 800067e:	e74d      	b.n	800051c <__aeabi_fadd+0xb4>
 8000680:	1b9f      	subs	r7, r3, r6
 8000682:	017a      	lsls	r2, r7, #5
 8000684:	d422      	bmi.n	80006cc <__aeabi_fadd+0x264>
 8000686:	2f00      	cmp	r7, #0
 8000688:	d1a6      	bne.n	80005d8 <__aeabi_fadd+0x170>
 800068a:	2400      	movs	r4, #0
 800068c:	2000      	movs	r0, #0
 800068e:	2300      	movs	r3, #0
 8000690:	e757      	b.n	8000542 <__aeabi_fadd+0xda>
 8000692:	199b      	adds	r3, r3, r6
 8000694:	2501      	movs	r5, #1
 8000696:	3201      	adds	r2, #1
 8000698:	0159      	lsls	r1, r3, #5
 800069a:	d400      	bmi.n	800069e <__aeabi_fadd+0x236>
 800069c:	e740      	b.n	8000520 <__aeabi_fadd+0xb8>
 800069e:	2101      	movs	r1, #1
 80006a0:	4835      	ldr	r0, [pc, #212]	@ (8000778 <__aeabi_fadd+0x310>)
 80006a2:	4019      	ands	r1, r3
 80006a4:	085b      	lsrs	r3, r3, #1
 80006a6:	4003      	ands	r3, r0
 80006a8:	430b      	orrs	r3, r1
 80006aa:	e7a7      	b.n	80005fc <__aeabi_fadd+0x194>
 80006ac:	28ff      	cmp	r0, #255	@ 0xff
 80006ae:	d0a9      	beq.n	8000604 <__aeabi_fadd+0x19c>
 80006b0:	2180      	movs	r1, #128	@ 0x80
 80006b2:	04c9      	lsls	r1, r1, #19
 80006b4:	430b      	orrs	r3, r1
 80006b6:	e7b6      	b.n	8000626 <__aeabi_fadd+0x1be>
 80006b8:	2aff      	cmp	r2, #255	@ 0xff
 80006ba:	d100      	bne.n	80006be <__aeabi_fadd+0x256>
 80006bc:	e779      	b.n	80005b2 <__aeabi_fadd+0x14a>
 80006be:	199b      	adds	r3, r3, r6
 80006c0:	085b      	lsrs	r3, r3, #1
 80006c2:	0759      	lsls	r1, r3, #29
 80006c4:	d000      	beq.n	80006c8 <__aeabi_fadd+0x260>
 80006c6:	e72f      	b.n	8000528 <__aeabi_fadd+0xc0>
 80006c8:	08db      	lsrs	r3, r3, #3
 80006ca:	e7c1      	b.n	8000650 <__aeabi_fadd+0x1e8>
 80006cc:	000c      	movs	r4, r1
 80006ce:	1af7      	subs	r7, r6, r3
 80006d0:	e782      	b.n	80005d8 <__aeabi_fadd+0x170>
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d12c      	bne.n	8000730 <__aeabi_fadd+0x2c8>
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d193      	bne.n	8000602 <__aeabi_fadd+0x19a>
 80006da:	2380      	movs	r3, #128	@ 0x80
 80006dc:	2400      	movs	r4, #0
 80006de:	20ff      	movs	r0, #255	@ 0xff
 80006e0:	03db      	lsls	r3, r3, #15
 80006e2:	e72e      	b.n	8000542 <__aeabi_fadd+0xda>
 80006e4:	2501      	movs	r5, #1
 80006e6:	1b9b      	subs	r3, r3, r6
 80006e8:	e718      	b.n	800051c <__aeabi_fadd+0xb4>
 80006ea:	0019      	movs	r1, r3
 80006ec:	2520      	movs	r5, #32
 80006ee:	40d1      	lsrs	r1, r2
 80006f0:	1aaa      	subs	r2, r5, r2
 80006f2:	4093      	lsls	r3, r2
 80006f4:	1e5a      	subs	r2, r3, #1
 80006f6:	4193      	sbcs	r3, r2
 80006f8:	430b      	orrs	r3, r1
 80006fa:	0005      	movs	r5, r0
 80006fc:	199b      	adds	r3, r3, r6
 80006fe:	e753      	b.n	80005a8 <__aeabi_fadd+0x140>
 8000700:	2b00      	cmp	r3, #0
 8000702:	d100      	bne.n	8000706 <__aeabi_fadd+0x29e>
 8000704:	e77e      	b.n	8000604 <__aeabi_fadd+0x19c>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d100      	bne.n	800070c <__aeabi_fadd+0x2a4>
 800070a:	e77c      	b.n	8000606 <__aeabi_fadd+0x19e>
 800070c:	2280      	movs	r2, #128	@ 0x80
 800070e:	03d2      	lsls	r2, r2, #15
 8000710:	4591      	cmp	r9, r2
 8000712:	d302      	bcc.n	800071a <__aeabi_fadd+0x2b2>
 8000714:	4594      	cmp	ip, r2
 8000716:	d200      	bcs.n	800071a <__aeabi_fadd+0x2b2>
 8000718:	0033      	movs	r3, r6
 800071a:	08db      	lsrs	r3, r3, #3
 800071c:	e753      	b.n	80005c6 <__aeabi_fadd+0x15e>
 800071e:	000c      	movs	r4, r1
 8000720:	1af3      	subs	r3, r6, r3
 8000722:	3501      	adds	r5, #1
 8000724:	e6fa      	b.n	800051c <__aeabi_fadd+0xb4>
 8000726:	2e00      	cmp	r6, #0
 8000728:	d0af      	beq.n	800068a <__aeabi_fadd+0x222>
 800072a:	000c      	movs	r4, r1
 800072c:	0033      	movs	r3, r6
 800072e:	e78d      	b.n	800064c <__aeabi_fadd+0x1e4>
 8000730:	2e00      	cmp	r6, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x2ce>
 8000734:	e767      	b.n	8000606 <__aeabi_fadd+0x19e>
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	03d2      	lsls	r2, r2, #15
 800073a:	4591      	cmp	r9, r2
 800073c:	d3ed      	bcc.n	800071a <__aeabi_fadd+0x2b2>
 800073e:	4594      	cmp	ip, r2
 8000740:	d2eb      	bcs.n	800071a <__aeabi_fadd+0x2b2>
 8000742:	000c      	movs	r4, r1
 8000744:	0033      	movs	r3, r6
 8000746:	e7e8      	b.n	800071a <__aeabi_fadd+0x2b2>
 8000748:	0033      	movs	r3, r6
 800074a:	e77f      	b.n	800064c <__aeabi_fadd+0x1e4>
 800074c:	199b      	adds	r3, r3, r6
 800074e:	2200      	movs	r2, #0
 8000750:	0159      	lsls	r1, r3, #5
 8000752:	d5b9      	bpl.n	80006c8 <__aeabi_fadd+0x260>
 8000754:	4a07      	ldr	r2, [pc, #28]	@ (8000774 <__aeabi_fadd+0x30c>)
 8000756:	4013      	ands	r3, r2
 8000758:	08db      	lsrs	r3, r3, #3
 800075a:	2201      	movs	r2, #1
 800075c:	e778      	b.n	8000650 <__aeabi_fadd+0x1e8>
 800075e:	199b      	adds	r3, r3, r6
 8000760:	3201      	adds	r2, #1
 8000762:	3501      	adds	r5, #1
 8000764:	0159      	lsls	r1, r3, #5
 8000766:	d49a      	bmi.n	800069e <__aeabi_fadd+0x236>
 8000768:	e6da      	b.n	8000520 <__aeabi_fadd+0xb8>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d08d      	beq.n	800068a <__aeabi_fadd+0x222>
 800076e:	08db      	lsrs	r3, r3, #3
 8000770:	e76e      	b.n	8000650 <__aeabi_fadd+0x1e8>
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	fbffffff 	.word	0xfbffffff
 8000778:	7dffffff 	.word	0x7dffffff

0800077c <__aeabi_fdiv>:
 800077c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077e:	464f      	mov	r7, r9
 8000780:	4646      	mov	r6, r8
 8000782:	46d6      	mov	lr, sl
 8000784:	0244      	lsls	r4, r0, #9
 8000786:	b5c0      	push	{r6, r7, lr}
 8000788:	0047      	lsls	r7, r0, #1
 800078a:	1c0e      	adds	r6, r1, #0
 800078c:	0a64      	lsrs	r4, r4, #9
 800078e:	0e3f      	lsrs	r7, r7, #24
 8000790:	0fc5      	lsrs	r5, r0, #31
 8000792:	2f00      	cmp	r7, #0
 8000794:	d03c      	beq.n	8000810 <__aeabi_fdiv+0x94>
 8000796:	2fff      	cmp	r7, #255	@ 0xff
 8000798:	d042      	beq.n	8000820 <__aeabi_fdiv+0xa4>
 800079a:	2300      	movs	r3, #0
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	4699      	mov	r9, r3
 80007a0:	469a      	mov	sl, r3
 80007a2:	00e4      	lsls	r4, r4, #3
 80007a4:	04d2      	lsls	r2, r2, #19
 80007a6:	4314      	orrs	r4, r2
 80007a8:	3f7f      	subs	r7, #127	@ 0x7f
 80007aa:	0273      	lsls	r3, r6, #9
 80007ac:	0a5b      	lsrs	r3, r3, #9
 80007ae:	4698      	mov	r8, r3
 80007b0:	0073      	lsls	r3, r6, #1
 80007b2:	0e1b      	lsrs	r3, r3, #24
 80007b4:	0ff6      	lsrs	r6, r6, #31
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d01b      	beq.n	80007f2 <__aeabi_fdiv+0x76>
 80007ba:	2bff      	cmp	r3, #255	@ 0xff
 80007bc:	d013      	beq.n	80007e6 <__aeabi_fdiv+0x6a>
 80007be:	4642      	mov	r2, r8
 80007c0:	2180      	movs	r1, #128	@ 0x80
 80007c2:	00d2      	lsls	r2, r2, #3
 80007c4:	04c9      	lsls	r1, r1, #19
 80007c6:	4311      	orrs	r1, r2
 80007c8:	4688      	mov	r8, r1
 80007ca:	2000      	movs	r0, #0
 80007cc:	3b7f      	subs	r3, #127	@ 0x7f
 80007ce:	0029      	movs	r1, r5
 80007d0:	1aff      	subs	r7, r7, r3
 80007d2:	464b      	mov	r3, r9
 80007d4:	4071      	eors	r1, r6
 80007d6:	b2c9      	uxtb	r1, r1
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d900      	bls.n	80007de <__aeabi_fdiv+0x62>
 80007dc:	e0b5      	b.n	800094a <__aeabi_fdiv+0x1ce>
 80007de:	4a74      	ldr	r2, [pc, #464]	@ (80009b0 <__aeabi_fdiv+0x234>)
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	58d3      	ldr	r3, [r2, r3]
 80007e4:	469f      	mov	pc, r3
 80007e6:	4643      	mov	r3, r8
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d13f      	bne.n	800086c <__aeabi_fdiv+0xf0>
 80007ec:	3fff      	subs	r7, #255	@ 0xff
 80007ee:	3302      	adds	r3, #2
 80007f0:	e003      	b.n	80007fa <__aeabi_fdiv+0x7e>
 80007f2:	4643      	mov	r3, r8
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d12d      	bne.n	8000854 <__aeabi_fdiv+0xd8>
 80007f8:	2301      	movs	r3, #1
 80007fa:	0029      	movs	r1, r5
 80007fc:	464a      	mov	r2, r9
 80007fe:	4071      	eors	r1, r6
 8000800:	b2c9      	uxtb	r1, r1
 8000802:	431a      	orrs	r2, r3
 8000804:	2a0e      	cmp	r2, #14
 8000806:	d838      	bhi.n	800087a <__aeabi_fdiv+0xfe>
 8000808:	486a      	ldr	r0, [pc, #424]	@ (80009b4 <__aeabi_fdiv+0x238>)
 800080a:	0092      	lsls	r2, r2, #2
 800080c:	5882      	ldr	r2, [r0, r2]
 800080e:	4697      	mov	pc, r2
 8000810:	2c00      	cmp	r4, #0
 8000812:	d113      	bne.n	800083c <__aeabi_fdiv+0xc0>
 8000814:	2304      	movs	r3, #4
 8000816:	4699      	mov	r9, r3
 8000818:	3b03      	subs	r3, #3
 800081a:	2700      	movs	r7, #0
 800081c:	469a      	mov	sl, r3
 800081e:	e7c4      	b.n	80007aa <__aeabi_fdiv+0x2e>
 8000820:	2c00      	cmp	r4, #0
 8000822:	d105      	bne.n	8000830 <__aeabi_fdiv+0xb4>
 8000824:	2308      	movs	r3, #8
 8000826:	4699      	mov	r9, r3
 8000828:	3b06      	subs	r3, #6
 800082a:	27ff      	movs	r7, #255	@ 0xff
 800082c:	469a      	mov	sl, r3
 800082e:	e7bc      	b.n	80007aa <__aeabi_fdiv+0x2e>
 8000830:	230c      	movs	r3, #12
 8000832:	4699      	mov	r9, r3
 8000834:	3b09      	subs	r3, #9
 8000836:	27ff      	movs	r7, #255	@ 0xff
 8000838:	469a      	mov	sl, r3
 800083a:	e7b6      	b.n	80007aa <__aeabi_fdiv+0x2e>
 800083c:	0020      	movs	r0, r4
 800083e:	f001 f85b 	bl	80018f8 <__clzsi2>
 8000842:	2776      	movs	r7, #118	@ 0x76
 8000844:	1f43      	subs	r3, r0, #5
 8000846:	409c      	lsls	r4, r3
 8000848:	2300      	movs	r3, #0
 800084a:	427f      	negs	r7, r7
 800084c:	4699      	mov	r9, r3
 800084e:	469a      	mov	sl, r3
 8000850:	1a3f      	subs	r7, r7, r0
 8000852:	e7aa      	b.n	80007aa <__aeabi_fdiv+0x2e>
 8000854:	4640      	mov	r0, r8
 8000856:	f001 f84f 	bl	80018f8 <__clzsi2>
 800085a:	4642      	mov	r2, r8
 800085c:	1f43      	subs	r3, r0, #5
 800085e:	409a      	lsls	r2, r3
 8000860:	2376      	movs	r3, #118	@ 0x76
 8000862:	425b      	negs	r3, r3
 8000864:	1a1b      	subs	r3, r3, r0
 8000866:	4690      	mov	r8, r2
 8000868:	2000      	movs	r0, #0
 800086a:	e7b0      	b.n	80007ce <__aeabi_fdiv+0x52>
 800086c:	2303      	movs	r3, #3
 800086e:	464a      	mov	r2, r9
 8000870:	431a      	orrs	r2, r3
 8000872:	4691      	mov	r9, r2
 8000874:	2003      	movs	r0, #3
 8000876:	33fc      	adds	r3, #252	@ 0xfc
 8000878:	e7a9      	b.n	80007ce <__aeabi_fdiv+0x52>
 800087a:	000d      	movs	r5, r1
 800087c:	20ff      	movs	r0, #255	@ 0xff
 800087e:	2200      	movs	r2, #0
 8000880:	05c0      	lsls	r0, r0, #23
 8000882:	07ed      	lsls	r5, r5, #31
 8000884:	4310      	orrs	r0, r2
 8000886:	4328      	orrs	r0, r5
 8000888:	bce0      	pop	{r5, r6, r7}
 800088a:	46ba      	mov	sl, r7
 800088c:	46b1      	mov	r9, r6
 800088e:	46a8      	mov	r8, r5
 8000890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000892:	000d      	movs	r5, r1
 8000894:	2000      	movs	r0, #0
 8000896:	2200      	movs	r2, #0
 8000898:	e7f2      	b.n	8000880 <__aeabi_fdiv+0x104>
 800089a:	4653      	mov	r3, sl
 800089c:	2b02      	cmp	r3, #2
 800089e:	d0ed      	beq.n	800087c <__aeabi_fdiv+0x100>
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d033      	beq.n	800090c <__aeabi_fdiv+0x190>
 80008a4:	46a0      	mov	r8, r4
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d105      	bne.n	80008b6 <__aeabi_fdiv+0x13a>
 80008aa:	2000      	movs	r0, #0
 80008ac:	2200      	movs	r2, #0
 80008ae:	e7e7      	b.n	8000880 <__aeabi_fdiv+0x104>
 80008b0:	0035      	movs	r5, r6
 80008b2:	2803      	cmp	r0, #3
 80008b4:	d07a      	beq.n	80009ac <__aeabi_fdiv+0x230>
 80008b6:	003b      	movs	r3, r7
 80008b8:	337f      	adds	r3, #127	@ 0x7f
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	dd2d      	ble.n	800091a <__aeabi_fdiv+0x19e>
 80008be:	4642      	mov	r2, r8
 80008c0:	0752      	lsls	r2, r2, #29
 80008c2:	d007      	beq.n	80008d4 <__aeabi_fdiv+0x158>
 80008c4:	220f      	movs	r2, #15
 80008c6:	4641      	mov	r1, r8
 80008c8:	400a      	ands	r2, r1
 80008ca:	2a04      	cmp	r2, #4
 80008cc:	d002      	beq.n	80008d4 <__aeabi_fdiv+0x158>
 80008ce:	2204      	movs	r2, #4
 80008d0:	4694      	mov	ip, r2
 80008d2:	44e0      	add	r8, ip
 80008d4:	4642      	mov	r2, r8
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	d505      	bpl.n	80008e6 <__aeabi_fdiv+0x16a>
 80008da:	4642      	mov	r2, r8
 80008dc:	4b36      	ldr	r3, [pc, #216]	@ (80009b8 <__aeabi_fdiv+0x23c>)
 80008de:	401a      	ands	r2, r3
 80008e0:	003b      	movs	r3, r7
 80008e2:	4690      	mov	r8, r2
 80008e4:	3380      	adds	r3, #128	@ 0x80
 80008e6:	2bfe      	cmp	r3, #254	@ 0xfe
 80008e8:	dcc8      	bgt.n	800087c <__aeabi_fdiv+0x100>
 80008ea:	4642      	mov	r2, r8
 80008ec:	0192      	lsls	r2, r2, #6
 80008ee:	0a52      	lsrs	r2, r2, #9
 80008f0:	b2d8      	uxtb	r0, r3
 80008f2:	e7c5      	b.n	8000880 <__aeabi_fdiv+0x104>
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	2500      	movs	r5, #0
 80008f8:	20ff      	movs	r0, #255	@ 0xff
 80008fa:	03d2      	lsls	r2, r2, #15
 80008fc:	e7c0      	b.n	8000880 <__aeabi_fdiv+0x104>
 80008fe:	2280      	movs	r2, #128	@ 0x80
 8000900:	03d2      	lsls	r2, r2, #15
 8000902:	4214      	tst	r4, r2
 8000904:	d002      	beq.n	800090c <__aeabi_fdiv+0x190>
 8000906:	4643      	mov	r3, r8
 8000908:	4213      	tst	r3, r2
 800090a:	d049      	beq.n	80009a0 <__aeabi_fdiv+0x224>
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	03d2      	lsls	r2, r2, #15
 8000910:	4322      	orrs	r2, r4
 8000912:	0252      	lsls	r2, r2, #9
 8000914:	20ff      	movs	r0, #255	@ 0xff
 8000916:	0a52      	lsrs	r2, r2, #9
 8000918:	e7b2      	b.n	8000880 <__aeabi_fdiv+0x104>
 800091a:	2201      	movs	r2, #1
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	2b1b      	cmp	r3, #27
 8000920:	dcc3      	bgt.n	80008aa <__aeabi_fdiv+0x12e>
 8000922:	4642      	mov	r2, r8
 8000924:	40da      	lsrs	r2, r3
 8000926:	4643      	mov	r3, r8
 8000928:	379e      	adds	r7, #158	@ 0x9e
 800092a:	40bb      	lsls	r3, r7
 800092c:	1e59      	subs	r1, r3, #1
 800092e:	418b      	sbcs	r3, r1
 8000930:	431a      	orrs	r2, r3
 8000932:	0753      	lsls	r3, r2, #29
 8000934:	d004      	beq.n	8000940 <__aeabi_fdiv+0x1c4>
 8000936:	230f      	movs	r3, #15
 8000938:	4013      	ands	r3, r2
 800093a:	2b04      	cmp	r3, #4
 800093c:	d000      	beq.n	8000940 <__aeabi_fdiv+0x1c4>
 800093e:	3204      	adds	r2, #4
 8000940:	0153      	lsls	r3, r2, #5
 8000942:	d529      	bpl.n	8000998 <__aeabi_fdiv+0x21c>
 8000944:	2001      	movs	r0, #1
 8000946:	2200      	movs	r2, #0
 8000948:	e79a      	b.n	8000880 <__aeabi_fdiv+0x104>
 800094a:	4642      	mov	r2, r8
 800094c:	0163      	lsls	r3, r4, #5
 800094e:	0155      	lsls	r5, r2, #5
 8000950:	42ab      	cmp	r3, r5
 8000952:	d215      	bcs.n	8000980 <__aeabi_fdiv+0x204>
 8000954:	201b      	movs	r0, #27
 8000956:	2200      	movs	r2, #0
 8000958:	3f01      	subs	r7, #1
 800095a:	2601      	movs	r6, #1
 800095c:	001c      	movs	r4, r3
 800095e:	0052      	lsls	r2, r2, #1
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2c00      	cmp	r4, #0
 8000964:	db01      	blt.n	800096a <__aeabi_fdiv+0x1ee>
 8000966:	429d      	cmp	r5, r3
 8000968:	d801      	bhi.n	800096e <__aeabi_fdiv+0x1f2>
 800096a:	1b5b      	subs	r3, r3, r5
 800096c:	4332      	orrs	r2, r6
 800096e:	3801      	subs	r0, #1
 8000970:	2800      	cmp	r0, #0
 8000972:	d1f3      	bne.n	800095c <__aeabi_fdiv+0x1e0>
 8000974:	1e58      	subs	r0, r3, #1
 8000976:	4183      	sbcs	r3, r0
 8000978:	4313      	orrs	r3, r2
 800097a:	4698      	mov	r8, r3
 800097c:	000d      	movs	r5, r1
 800097e:	e79a      	b.n	80008b6 <__aeabi_fdiv+0x13a>
 8000980:	201a      	movs	r0, #26
 8000982:	2201      	movs	r2, #1
 8000984:	1b5b      	subs	r3, r3, r5
 8000986:	e7e8      	b.n	800095a <__aeabi_fdiv+0x1de>
 8000988:	3b02      	subs	r3, #2
 800098a:	425a      	negs	r2, r3
 800098c:	4153      	adcs	r3, r2
 800098e:	425b      	negs	r3, r3
 8000990:	0035      	movs	r5, r6
 8000992:	2200      	movs	r2, #0
 8000994:	b2d8      	uxtb	r0, r3
 8000996:	e773      	b.n	8000880 <__aeabi_fdiv+0x104>
 8000998:	0192      	lsls	r2, r2, #6
 800099a:	2000      	movs	r0, #0
 800099c:	0a52      	lsrs	r2, r2, #9
 800099e:	e76f      	b.n	8000880 <__aeabi_fdiv+0x104>
 80009a0:	431a      	orrs	r2, r3
 80009a2:	0252      	lsls	r2, r2, #9
 80009a4:	0035      	movs	r5, r6
 80009a6:	20ff      	movs	r0, #255	@ 0xff
 80009a8:	0a52      	lsrs	r2, r2, #9
 80009aa:	e769      	b.n	8000880 <__aeabi_fdiv+0x104>
 80009ac:	4644      	mov	r4, r8
 80009ae:	e7ad      	b.n	800090c <__aeabi_fdiv+0x190>
 80009b0:	08006aa4 	.word	0x08006aa4
 80009b4:	08006ae4 	.word	0x08006ae4
 80009b8:	f7ffffff 	.word	0xf7ffffff

080009bc <__eqsf2>:
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	0042      	lsls	r2, r0, #1
 80009c0:	024e      	lsls	r6, r1, #9
 80009c2:	004c      	lsls	r4, r1, #1
 80009c4:	0245      	lsls	r5, r0, #9
 80009c6:	0a6d      	lsrs	r5, r5, #9
 80009c8:	0e12      	lsrs	r2, r2, #24
 80009ca:	0fc3      	lsrs	r3, r0, #31
 80009cc:	0a76      	lsrs	r6, r6, #9
 80009ce:	0e24      	lsrs	r4, r4, #24
 80009d0:	0fc9      	lsrs	r1, r1, #31
 80009d2:	2aff      	cmp	r2, #255	@ 0xff
 80009d4:	d010      	beq.n	80009f8 <__eqsf2+0x3c>
 80009d6:	2cff      	cmp	r4, #255	@ 0xff
 80009d8:	d00c      	beq.n	80009f4 <__eqsf2+0x38>
 80009da:	2001      	movs	r0, #1
 80009dc:	42a2      	cmp	r2, r4
 80009de:	d10a      	bne.n	80009f6 <__eqsf2+0x3a>
 80009e0:	42b5      	cmp	r5, r6
 80009e2:	d108      	bne.n	80009f6 <__eqsf2+0x3a>
 80009e4:	428b      	cmp	r3, r1
 80009e6:	d00f      	beq.n	8000a08 <__eqsf2+0x4c>
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	d104      	bne.n	80009f6 <__eqsf2+0x3a>
 80009ec:	0028      	movs	r0, r5
 80009ee:	1e43      	subs	r3, r0, #1
 80009f0:	4198      	sbcs	r0, r3
 80009f2:	e000      	b.n	80009f6 <__eqsf2+0x3a>
 80009f4:	2001      	movs	r0, #1
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	2001      	movs	r0, #1
 80009fa:	2cff      	cmp	r4, #255	@ 0xff
 80009fc:	d1fb      	bne.n	80009f6 <__eqsf2+0x3a>
 80009fe:	4335      	orrs	r5, r6
 8000a00:	d1f9      	bne.n	80009f6 <__eqsf2+0x3a>
 8000a02:	404b      	eors	r3, r1
 8000a04:	0018      	movs	r0, r3
 8000a06:	e7f6      	b.n	80009f6 <__eqsf2+0x3a>
 8000a08:	2000      	movs	r0, #0
 8000a0a:	e7f4      	b.n	80009f6 <__eqsf2+0x3a>

08000a0c <__gesf2>:
 8000a0c:	b530      	push	{r4, r5, lr}
 8000a0e:	0042      	lsls	r2, r0, #1
 8000a10:	0244      	lsls	r4, r0, #9
 8000a12:	024d      	lsls	r5, r1, #9
 8000a14:	0fc3      	lsrs	r3, r0, #31
 8000a16:	0048      	lsls	r0, r1, #1
 8000a18:	0a64      	lsrs	r4, r4, #9
 8000a1a:	0e12      	lsrs	r2, r2, #24
 8000a1c:	0a6d      	lsrs	r5, r5, #9
 8000a1e:	0e00      	lsrs	r0, r0, #24
 8000a20:	0fc9      	lsrs	r1, r1, #31
 8000a22:	2aff      	cmp	r2, #255	@ 0xff
 8000a24:	d019      	beq.n	8000a5a <__gesf2+0x4e>
 8000a26:	28ff      	cmp	r0, #255	@ 0xff
 8000a28:	d00b      	beq.n	8000a42 <__gesf2+0x36>
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	d11e      	bne.n	8000a6c <__gesf2+0x60>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	d10b      	bne.n	8000a4a <__gesf2+0x3e>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d027      	beq.n	8000a86 <__gesf2+0x7a>
 8000a36:	2c00      	cmp	r4, #0
 8000a38:	d134      	bne.n	8000aa4 <__gesf2+0x98>
 8000a3a:	2900      	cmp	r1, #0
 8000a3c:	d02f      	beq.n	8000a9e <__gesf2+0x92>
 8000a3e:	0008      	movs	r0, r1
 8000a40:	bd30      	pop	{r4, r5, pc}
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d128      	bne.n	8000a98 <__gesf2+0x8c>
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	d101      	bne.n	8000a4e <__gesf2+0x42>
 8000a4a:	2c00      	cmp	r4, #0
 8000a4c:	d0f5      	beq.n	8000a3a <__gesf2+0x2e>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d107      	bne.n	8000a62 <__gesf2+0x56>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d023      	beq.n	8000a9e <__gesf2+0x92>
 8000a56:	0018      	movs	r0, r3
 8000a58:	e7f2      	b.n	8000a40 <__gesf2+0x34>
 8000a5a:	2c00      	cmp	r4, #0
 8000a5c:	d11c      	bne.n	8000a98 <__gesf2+0x8c>
 8000a5e:	28ff      	cmp	r0, #255	@ 0xff
 8000a60:	d014      	beq.n	8000a8c <__gesf2+0x80>
 8000a62:	1e58      	subs	r0, r3, #1
 8000a64:	2302      	movs	r3, #2
 8000a66:	4018      	ands	r0, r3
 8000a68:	3801      	subs	r0, #1
 8000a6a:	e7e9      	b.n	8000a40 <__gesf2+0x34>
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	d0f8      	beq.n	8000a62 <__gesf2+0x56>
 8000a70:	428b      	cmp	r3, r1
 8000a72:	d1f6      	bne.n	8000a62 <__gesf2+0x56>
 8000a74:	4282      	cmp	r2, r0
 8000a76:	dcf4      	bgt.n	8000a62 <__gesf2+0x56>
 8000a78:	dbeb      	blt.n	8000a52 <__gesf2+0x46>
 8000a7a:	42ac      	cmp	r4, r5
 8000a7c:	d8f1      	bhi.n	8000a62 <__gesf2+0x56>
 8000a7e:	2000      	movs	r0, #0
 8000a80:	42ac      	cmp	r4, r5
 8000a82:	d2dd      	bcs.n	8000a40 <__gesf2+0x34>
 8000a84:	e7e5      	b.n	8000a52 <__gesf2+0x46>
 8000a86:	2c00      	cmp	r4, #0
 8000a88:	d0da      	beq.n	8000a40 <__gesf2+0x34>
 8000a8a:	e7ea      	b.n	8000a62 <__gesf2+0x56>
 8000a8c:	2d00      	cmp	r5, #0
 8000a8e:	d103      	bne.n	8000a98 <__gesf2+0x8c>
 8000a90:	428b      	cmp	r3, r1
 8000a92:	d1e6      	bne.n	8000a62 <__gesf2+0x56>
 8000a94:	2000      	movs	r0, #0
 8000a96:	e7d3      	b.n	8000a40 <__gesf2+0x34>
 8000a98:	2002      	movs	r0, #2
 8000a9a:	4240      	negs	r0, r0
 8000a9c:	e7d0      	b.n	8000a40 <__gesf2+0x34>
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	4240      	negs	r0, r0
 8000aa2:	e7cd      	b.n	8000a40 <__gesf2+0x34>
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d0e8      	beq.n	8000a7a <__gesf2+0x6e>
 8000aa8:	e7db      	b.n	8000a62 <__gesf2+0x56>
 8000aaa:	46c0      	nop			@ (mov r8, r8)

08000aac <__lesf2>:
 8000aac:	b530      	push	{r4, r5, lr}
 8000aae:	0042      	lsls	r2, r0, #1
 8000ab0:	0244      	lsls	r4, r0, #9
 8000ab2:	024d      	lsls	r5, r1, #9
 8000ab4:	0fc3      	lsrs	r3, r0, #31
 8000ab6:	0048      	lsls	r0, r1, #1
 8000ab8:	0a64      	lsrs	r4, r4, #9
 8000aba:	0e12      	lsrs	r2, r2, #24
 8000abc:	0a6d      	lsrs	r5, r5, #9
 8000abe:	0e00      	lsrs	r0, r0, #24
 8000ac0:	0fc9      	lsrs	r1, r1, #31
 8000ac2:	2aff      	cmp	r2, #255	@ 0xff
 8000ac4:	d01a      	beq.n	8000afc <__lesf2+0x50>
 8000ac6:	28ff      	cmp	r0, #255	@ 0xff
 8000ac8:	d00e      	beq.n	8000ae8 <__lesf2+0x3c>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d11e      	bne.n	8000b0c <__lesf2+0x60>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	d10e      	bne.n	8000af0 <__lesf2+0x44>
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d02a      	beq.n	8000b2c <__lesf2+0x80>
 8000ad6:	2c00      	cmp	r4, #0
 8000ad8:	d00c      	beq.n	8000af4 <__lesf2+0x48>
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d01d      	beq.n	8000b1a <__lesf2+0x6e>
 8000ade:	1e58      	subs	r0, r3, #1
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	4018      	ands	r0, r3
 8000ae4:	3801      	subs	r0, #1
 8000ae6:	e010      	b.n	8000b0a <__lesf2+0x5e>
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d10d      	bne.n	8000b08 <__lesf2+0x5c>
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d120      	bne.n	8000b32 <__lesf2+0x86>
 8000af0:	2c00      	cmp	r4, #0
 8000af2:	d11e      	bne.n	8000b32 <__lesf2+0x86>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d023      	beq.n	8000b40 <__lesf2+0x94>
 8000af8:	0008      	movs	r0, r1
 8000afa:	e006      	b.n	8000b0a <__lesf2+0x5e>
 8000afc:	2c00      	cmp	r4, #0
 8000afe:	d103      	bne.n	8000b08 <__lesf2+0x5c>
 8000b00:	28ff      	cmp	r0, #255	@ 0xff
 8000b02:	d1ec      	bne.n	8000ade <__lesf2+0x32>
 8000b04:	2d00      	cmp	r5, #0
 8000b06:	d017      	beq.n	8000b38 <__lesf2+0x8c>
 8000b08:	2002      	movs	r0, #2
 8000b0a:	bd30      	pop	{r4, r5, pc}
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	d0e6      	beq.n	8000ade <__lesf2+0x32>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d1e4      	bne.n	8000ade <__lesf2+0x32>
 8000b14:	4282      	cmp	r2, r0
 8000b16:	dce2      	bgt.n	8000ade <__lesf2+0x32>
 8000b18:	db04      	blt.n	8000b24 <__lesf2+0x78>
 8000b1a:	42ac      	cmp	r4, r5
 8000b1c:	d8df      	bhi.n	8000ade <__lesf2+0x32>
 8000b1e:	2000      	movs	r0, #0
 8000b20:	42ac      	cmp	r4, r5
 8000b22:	d2f2      	bcs.n	8000b0a <__lesf2+0x5e>
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00b      	beq.n	8000b40 <__lesf2+0x94>
 8000b28:	0018      	movs	r0, r3
 8000b2a:	e7ee      	b.n	8000b0a <__lesf2+0x5e>
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d0ec      	beq.n	8000b0a <__lesf2+0x5e>
 8000b30:	e7d5      	b.n	8000ade <__lesf2+0x32>
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d1d3      	bne.n	8000ade <__lesf2+0x32>
 8000b36:	e7f5      	b.n	8000b24 <__lesf2+0x78>
 8000b38:	2000      	movs	r0, #0
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d0e5      	beq.n	8000b0a <__lesf2+0x5e>
 8000b3e:	e7ce      	b.n	8000ade <__lesf2+0x32>
 8000b40:	2001      	movs	r0, #1
 8000b42:	4240      	negs	r0, r0
 8000b44:	e7e1      	b.n	8000b0a <__lesf2+0x5e>
 8000b46:	46c0      	nop			@ (mov r8, r8)

08000b48 <__aeabi_fmul>:
 8000b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4a:	464f      	mov	r7, r9
 8000b4c:	4646      	mov	r6, r8
 8000b4e:	46d6      	mov	lr, sl
 8000b50:	0243      	lsls	r3, r0, #9
 8000b52:	0a5b      	lsrs	r3, r3, #9
 8000b54:	0045      	lsls	r5, r0, #1
 8000b56:	b5c0      	push	{r6, r7, lr}
 8000b58:	4699      	mov	r9, r3
 8000b5a:	1c0f      	adds	r7, r1, #0
 8000b5c:	0e2d      	lsrs	r5, r5, #24
 8000b5e:	0fc6      	lsrs	r6, r0, #31
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d100      	bne.n	8000b66 <__aeabi_fmul+0x1e>
 8000b64:	e088      	b.n	8000c78 <__aeabi_fmul+0x130>
 8000b66:	2dff      	cmp	r5, #255	@ 0xff
 8000b68:	d100      	bne.n	8000b6c <__aeabi_fmul+0x24>
 8000b6a:	e08d      	b.n	8000c88 <__aeabi_fmul+0x140>
 8000b6c:	2280      	movs	r2, #128	@ 0x80
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	04d2      	lsls	r2, r2, #19
 8000b72:	431a      	orrs	r2, r3
 8000b74:	2300      	movs	r3, #0
 8000b76:	4691      	mov	r9, r2
 8000b78:	4698      	mov	r8, r3
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	3d7f      	subs	r5, #127	@ 0x7f
 8000b7e:	027c      	lsls	r4, r7, #9
 8000b80:	007b      	lsls	r3, r7, #1
 8000b82:	0a64      	lsrs	r4, r4, #9
 8000b84:	0e1b      	lsrs	r3, r3, #24
 8000b86:	0fff      	lsrs	r7, r7, #31
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d068      	beq.n	8000c5e <__aeabi_fmul+0x116>
 8000b8c:	2bff      	cmp	r3, #255	@ 0xff
 8000b8e:	d021      	beq.n	8000bd4 <__aeabi_fmul+0x8c>
 8000b90:	2280      	movs	r2, #128	@ 0x80
 8000b92:	00e4      	lsls	r4, r4, #3
 8000b94:	04d2      	lsls	r2, r2, #19
 8000b96:	4314      	orrs	r4, r2
 8000b98:	4642      	mov	r2, r8
 8000b9a:	3b7f      	subs	r3, #127	@ 0x7f
 8000b9c:	195b      	adds	r3, r3, r5
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	1c5d      	adds	r5, r3, #1
 8000ba2:	2a0a      	cmp	r2, #10
 8000ba4:	dc2e      	bgt.n	8000c04 <__aeabi_fmul+0xbc>
 8000ba6:	407e      	eors	r6, r7
 8000ba8:	4642      	mov	r2, r8
 8000baa:	2a02      	cmp	r2, #2
 8000bac:	dc23      	bgt.n	8000bf6 <__aeabi_fmul+0xae>
 8000bae:	3a01      	subs	r2, #1
 8000bb0:	2a01      	cmp	r2, #1
 8000bb2:	d900      	bls.n	8000bb6 <__aeabi_fmul+0x6e>
 8000bb4:	e0bd      	b.n	8000d32 <__aeabi_fmul+0x1ea>
 8000bb6:	2902      	cmp	r1, #2
 8000bb8:	d06e      	beq.n	8000c98 <__aeabi_fmul+0x150>
 8000bba:	2901      	cmp	r1, #1
 8000bbc:	d12c      	bne.n	8000c18 <__aeabi_fmul+0xd0>
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	05c0      	lsls	r0, r0, #23
 8000bc4:	07f6      	lsls	r6, r6, #31
 8000bc6:	4310      	orrs	r0, r2
 8000bc8:	4330      	orrs	r0, r6
 8000bca:	bce0      	pop	{r5, r6, r7}
 8000bcc:	46ba      	mov	sl, r7
 8000bce:	46b1      	mov	r9, r6
 8000bd0:	46a8      	mov	r8, r5
 8000bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bd4:	002b      	movs	r3, r5
 8000bd6:	33ff      	adds	r3, #255	@ 0xff
 8000bd8:	2c00      	cmp	r4, #0
 8000bda:	d065      	beq.n	8000ca8 <__aeabi_fmul+0x160>
 8000bdc:	2203      	movs	r2, #3
 8000bde:	4641      	mov	r1, r8
 8000be0:	4311      	orrs	r1, r2
 8000be2:	0032      	movs	r2, r6
 8000be4:	3501      	adds	r5, #1
 8000be6:	4688      	mov	r8, r1
 8000be8:	407a      	eors	r2, r7
 8000bea:	35ff      	adds	r5, #255	@ 0xff
 8000bec:	290a      	cmp	r1, #10
 8000bee:	dd00      	ble.n	8000bf2 <__aeabi_fmul+0xaa>
 8000bf0:	e0d8      	b.n	8000da4 <__aeabi_fmul+0x25c>
 8000bf2:	0016      	movs	r6, r2
 8000bf4:	2103      	movs	r1, #3
 8000bf6:	4640      	mov	r0, r8
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4082      	lsls	r2, r0
 8000bfc:	20a6      	movs	r0, #166	@ 0xa6
 8000bfe:	00c0      	lsls	r0, r0, #3
 8000c00:	4202      	tst	r2, r0
 8000c02:	d020      	beq.n	8000c46 <__aeabi_fmul+0xfe>
 8000c04:	4653      	mov	r3, sl
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d046      	beq.n	8000c98 <__aeabi_fmul+0x150>
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fmul+0xc8>
 8000c0e:	e0bb      	b.n	8000d88 <__aeabi_fmul+0x240>
 8000c10:	4651      	mov	r1, sl
 8000c12:	464c      	mov	r4, r9
 8000c14:	2901      	cmp	r1, #1
 8000c16:	d0d2      	beq.n	8000bbe <__aeabi_fmul+0x76>
 8000c18:	002b      	movs	r3, r5
 8000c1a:	337f      	adds	r3, #127	@ 0x7f
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	dd70      	ble.n	8000d02 <__aeabi_fmul+0x1ba>
 8000c20:	0762      	lsls	r2, r4, #29
 8000c22:	d004      	beq.n	8000c2e <__aeabi_fmul+0xe6>
 8000c24:	220f      	movs	r2, #15
 8000c26:	4022      	ands	r2, r4
 8000c28:	2a04      	cmp	r2, #4
 8000c2a:	d000      	beq.n	8000c2e <__aeabi_fmul+0xe6>
 8000c2c:	3404      	adds	r4, #4
 8000c2e:	0122      	lsls	r2, r4, #4
 8000c30:	d503      	bpl.n	8000c3a <__aeabi_fmul+0xf2>
 8000c32:	4b63      	ldr	r3, [pc, #396]	@ (8000dc0 <__aeabi_fmul+0x278>)
 8000c34:	401c      	ands	r4, r3
 8000c36:	002b      	movs	r3, r5
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dc2c      	bgt.n	8000c98 <__aeabi_fmul+0x150>
 8000c3e:	01a2      	lsls	r2, r4, #6
 8000c40:	0a52      	lsrs	r2, r2, #9
 8000c42:	b2d8      	uxtb	r0, r3
 8000c44:	e7bd      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000c46:	2090      	movs	r0, #144	@ 0x90
 8000c48:	0080      	lsls	r0, r0, #2
 8000c4a:	4202      	tst	r2, r0
 8000c4c:	d127      	bne.n	8000c9e <__aeabi_fmul+0x156>
 8000c4e:	38b9      	subs	r0, #185	@ 0xb9
 8000c50:	38ff      	subs	r0, #255	@ 0xff
 8000c52:	4210      	tst	r0, r2
 8000c54:	d06d      	beq.n	8000d32 <__aeabi_fmul+0x1ea>
 8000c56:	003e      	movs	r6, r7
 8000c58:	46a1      	mov	r9, r4
 8000c5a:	468a      	mov	sl, r1
 8000c5c:	e7d2      	b.n	8000c04 <__aeabi_fmul+0xbc>
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d141      	bne.n	8000ce6 <__aeabi_fmul+0x19e>
 8000c62:	2301      	movs	r3, #1
 8000c64:	4642      	mov	r2, r8
 8000c66:	431a      	orrs	r2, r3
 8000c68:	4690      	mov	r8, r2
 8000c6a:	002b      	movs	r3, r5
 8000c6c:	4642      	mov	r2, r8
 8000c6e:	2101      	movs	r1, #1
 8000c70:	1c5d      	adds	r5, r3, #1
 8000c72:	2a0a      	cmp	r2, #10
 8000c74:	dd97      	ble.n	8000ba6 <__aeabi_fmul+0x5e>
 8000c76:	e7c5      	b.n	8000c04 <__aeabi_fmul+0xbc>
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d126      	bne.n	8000cca <__aeabi_fmul+0x182>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	4698      	mov	r8, r3
 8000c80:	3b03      	subs	r3, #3
 8000c82:	2500      	movs	r5, #0
 8000c84:	469a      	mov	sl, r3
 8000c86:	e77a      	b.n	8000b7e <__aeabi_fmul+0x36>
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d118      	bne.n	8000cbe <__aeabi_fmul+0x176>
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	4698      	mov	r8, r3
 8000c90:	3b06      	subs	r3, #6
 8000c92:	25ff      	movs	r5, #255	@ 0xff
 8000c94:	469a      	mov	sl, r3
 8000c96:	e772      	b.n	8000b7e <__aeabi_fmul+0x36>
 8000c98:	20ff      	movs	r0, #255	@ 0xff
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e791      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000c9e:	2280      	movs	r2, #128	@ 0x80
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	20ff      	movs	r0, #255	@ 0xff
 8000ca4:	03d2      	lsls	r2, r2, #15
 8000ca6:	e78c      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000ca8:	4641      	mov	r1, r8
 8000caa:	2202      	movs	r2, #2
 8000cac:	3501      	adds	r5, #1
 8000cae:	4311      	orrs	r1, r2
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	35ff      	adds	r5, #255	@ 0xff
 8000cb4:	290a      	cmp	r1, #10
 8000cb6:	dca5      	bgt.n	8000c04 <__aeabi_fmul+0xbc>
 8000cb8:	2102      	movs	r1, #2
 8000cba:	407e      	eors	r6, r7
 8000cbc:	e774      	b.n	8000ba8 <__aeabi_fmul+0x60>
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	3b09      	subs	r3, #9
 8000cc4:	25ff      	movs	r5, #255	@ 0xff
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	e759      	b.n	8000b7e <__aeabi_fmul+0x36>
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 fe14 	bl	80018f8 <__clzsi2>
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	1f43      	subs	r3, r0, #5
 8000cd4:	2576      	movs	r5, #118	@ 0x76
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	426d      	negs	r5, r5
 8000cdc:	4691      	mov	r9, r2
 8000cde:	4698      	mov	r8, r3
 8000ce0:	469a      	mov	sl, r3
 8000ce2:	1a2d      	subs	r5, r5, r0
 8000ce4:	e74b      	b.n	8000b7e <__aeabi_fmul+0x36>
 8000ce6:	0020      	movs	r0, r4
 8000ce8:	f000 fe06 	bl	80018f8 <__clzsi2>
 8000cec:	4642      	mov	r2, r8
 8000cee:	1f43      	subs	r3, r0, #5
 8000cf0:	409c      	lsls	r4, r3
 8000cf2:	1a2b      	subs	r3, r5, r0
 8000cf4:	3b76      	subs	r3, #118	@ 0x76
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	1c5d      	adds	r5, r3, #1
 8000cfa:	2a0a      	cmp	r2, #10
 8000cfc:	dc00      	bgt.n	8000d00 <__aeabi_fmul+0x1b8>
 8000cfe:	e752      	b.n	8000ba6 <__aeabi_fmul+0x5e>
 8000d00:	e780      	b.n	8000c04 <__aeabi_fmul+0xbc>
 8000d02:	2201      	movs	r2, #1
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b1b      	cmp	r3, #27
 8000d08:	dd00      	ble.n	8000d0c <__aeabi_fmul+0x1c4>
 8000d0a:	e758      	b.n	8000bbe <__aeabi_fmul+0x76>
 8000d0c:	359e      	adds	r5, #158	@ 0x9e
 8000d0e:	0022      	movs	r2, r4
 8000d10:	40ac      	lsls	r4, r5
 8000d12:	40da      	lsrs	r2, r3
 8000d14:	1e63      	subs	r3, r4, #1
 8000d16:	419c      	sbcs	r4, r3
 8000d18:	4322      	orrs	r2, r4
 8000d1a:	0753      	lsls	r3, r2, #29
 8000d1c:	d004      	beq.n	8000d28 <__aeabi_fmul+0x1e0>
 8000d1e:	230f      	movs	r3, #15
 8000d20:	4013      	ands	r3, r2
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	d000      	beq.n	8000d28 <__aeabi_fmul+0x1e0>
 8000d26:	3204      	adds	r2, #4
 8000d28:	0153      	lsls	r3, r2, #5
 8000d2a:	d537      	bpl.n	8000d9c <__aeabi_fmul+0x254>
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	2200      	movs	r2, #0
 8000d30:	e747      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000d32:	0c21      	lsrs	r1, r4, #16
 8000d34:	464a      	mov	r2, r9
 8000d36:	0424      	lsls	r4, r4, #16
 8000d38:	0c24      	lsrs	r4, r4, #16
 8000d3a:	0027      	movs	r7, r4
 8000d3c:	0c10      	lsrs	r0, r2, #16
 8000d3e:	0412      	lsls	r2, r2, #16
 8000d40:	0c12      	lsrs	r2, r2, #16
 8000d42:	4344      	muls	r4, r0
 8000d44:	4357      	muls	r7, r2
 8000d46:	4348      	muls	r0, r1
 8000d48:	4351      	muls	r1, r2
 8000d4a:	0c3a      	lsrs	r2, r7, #16
 8000d4c:	1909      	adds	r1, r1, r4
 8000d4e:	1852      	adds	r2, r2, r1
 8000d50:	4294      	cmp	r4, r2
 8000d52:	d903      	bls.n	8000d5c <__aeabi_fmul+0x214>
 8000d54:	2180      	movs	r1, #128	@ 0x80
 8000d56:	0249      	lsls	r1, r1, #9
 8000d58:	468c      	mov	ip, r1
 8000d5a:	4460      	add	r0, ip
 8000d5c:	043f      	lsls	r7, r7, #16
 8000d5e:	0411      	lsls	r1, r2, #16
 8000d60:	0c3f      	lsrs	r7, r7, #16
 8000d62:	19c9      	adds	r1, r1, r7
 8000d64:	018c      	lsls	r4, r1, #6
 8000d66:	1e67      	subs	r7, r4, #1
 8000d68:	41bc      	sbcs	r4, r7
 8000d6a:	0c12      	lsrs	r2, r2, #16
 8000d6c:	0e89      	lsrs	r1, r1, #26
 8000d6e:	1812      	adds	r2, r2, r0
 8000d70:	430c      	orrs	r4, r1
 8000d72:	0192      	lsls	r2, r2, #6
 8000d74:	4314      	orrs	r4, r2
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	d50e      	bpl.n	8000d98 <__aeabi_fmul+0x250>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	0862      	lsrs	r2, r4, #1
 8000d7e:	401c      	ands	r4, r3
 8000d80:	4314      	orrs	r4, r2
 8000d82:	e749      	b.n	8000c18 <__aeabi_fmul+0xd0>
 8000d84:	003e      	movs	r6, r7
 8000d86:	46a1      	mov	r9, r4
 8000d88:	2280      	movs	r2, #128	@ 0x80
 8000d8a:	464b      	mov	r3, r9
 8000d8c:	03d2      	lsls	r2, r2, #15
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	0252      	lsls	r2, r2, #9
 8000d92:	20ff      	movs	r0, #255	@ 0xff
 8000d94:	0a52      	lsrs	r2, r2, #9
 8000d96:	e714      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000d98:	001d      	movs	r5, r3
 8000d9a:	e73d      	b.n	8000c18 <__aeabi_fmul+0xd0>
 8000d9c:	0192      	lsls	r2, r2, #6
 8000d9e:	2000      	movs	r0, #0
 8000da0:	0a52      	lsrs	r2, r2, #9
 8000da2:	e70e      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000da4:	290f      	cmp	r1, #15
 8000da6:	d1ed      	bne.n	8000d84 <__aeabi_fmul+0x23c>
 8000da8:	2280      	movs	r2, #128	@ 0x80
 8000daa:	464b      	mov	r3, r9
 8000dac:	03d2      	lsls	r2, r2, #15
 8000dae:	4213      	tst	r3, r2
 8000db0:	d0ea      	beq.n	8000d88 <__aeabi_fmul+0x240>
 8000db2:	4214      	tst	r4, r2
 8000db4:	d1e8      	bne.n	8000d88 <__aeabi_fmul+0x240>
 8000db6:	003e      	movs	r6, r7
 8000db8:	20ff      	movs	r0, #255	@ 0xff
 8000dba:	4322      	orrs	r2, r4
 8000dbc:	e701      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	f7ffffff 	.word	0xf7ffffff

08000dc4 <__aeabi_fsub>:
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	4647      	mov	r7, r8
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	024e      	lsls	r6, r1, #9
 8000dcc:	0243      	lsls	r3, r0, #9
 8000dce:	0045      	lsls	r5, r0, #1
 8000dd0:	0a72      	lsrs	r2, r6, #9
 8000dd2:	0fc4      	lsrs	r4, r0, #31
 8000dd4:	0048      	lsls	r0, r1, #1
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	4694      	mov	ip, r2
 8000dda:	0a5f      	lsrs	r7, r3, #9
 8000ddc:	0e2d      	lsrs	r5, r5, #24
 8000dde:	099b      	lsrs	r3, r3, #6
 8000de0:	0e00      	lsrs	r0, r0, #24
 8000de2:	0fc9      	lsrs	r1, r1, #31
 8000de4:	09b6      	lsrs	r6, r6, #6
 8000de6:	28ff      	cmp	r0, #255	@ 0xff
 8000de8:	d024      	beq.n	8000e34 <__aeabi_fsub+0x70>
 8000dea:	2201      	movs	r2, #1
 8000dec:	4051      	eors	r1, r2
 8000dee:	1a2a      	subs	r2, r5, r0
 8000df0:	428c      	cmp	r4, r1
 8000df2:	d00f      	beq.n	8000e14 <__aeabi_fsub+0x50>
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	dc00      	bgt.n	8000dfa <__aeabi_fsub+0x36>
 8000df8:	e16a      	b.n	80010d0 <__aeabi_fsub+0x30c>
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	d135      	bne.n	8000e6a <__aeabi_fsub+0xa6>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d100      	bne.n	8000e04 <__aeabi_fsub+0x40>
 8000e02:	e0a2      	b.n	8000f4a <__aeabi_fsub+0x186>
 8000e04:	1e51      	subs	r1, r2, #1
 8000e06:	2a01      	cmp	r2, #1
 8000e08:	d100      	bne.n	8000e0c <__aeabi_fsub+0x48>
 8000e0a:	e124      	b.n	8001056 <__aeabi_fsub+0x292>
 8000e0c:	2aff      	cmp	r2, #255	@ 0xff
 8000e0e:	d021      	beq.n	8000e54 <__aeabi_fsub+0x90>
 8000e10:	000a      	movs	r2, r1
 8000e12:	e02f      	b.n	8000e74 <__aeabi_fsub+0xb0>
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	dc00      	bgt.n	8000e1a <__aeabi_fsub+0x56>
 8000e18:	e167      	b.n	80010ea <__aeabi_fsub+0x326>
 8000e1a:	2800      	cmp	r0, #0
 8000e1c:	d05e      	beq.n	8000edc <__aeabi_fsub+0x118>
 8000e1e:	2dff      	cmp	r5, #255	@ 0xff
 8000e20:	d018      	beq.n	8000e54 <__aeabi_fsub+0x90>
 8000e22:	2180      	movs	r1, #128	@ 0x80
 8000e24:	04c9      	lsls	r1, r1, #19
 8000e26:	430e      	orrs	r6, r1
 8000e28:	2a1b      	cmp	r2, #27
 8000e2a:	dc00      	bgt.n	8000e2e <__aeabi_fsub+0x6a>
 8000e2c:	e076      	b.n	8000f1c <__aeabi_fsub+0x158>
 8000e2e:	002a      	movs	r2, r5
 8000e30:	3301      	adds	r3, #1
 8000e32:	e032      	b.n	8000e9a <__aeabi_fsub+0xd6>
 8000e34:	002a      	movs	r2, r5
 8000e36:	3aff      	subs	r2, #255	@ 0xff
 8000e38:	4691      	mov	r9, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d042      	beq.n	8000ec4 <__aeabi_fsub+0x100>
 8000e3e:	428c      	cmp	r4, r1
 8000e40:	d055      	beq.n	8000eee <__aeabi_fsub+0x12a>
 8000e42:	464a      	mov	r2, r9
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	d100      	bne.n	8000e4a <__aeabi_fsub+0x86>
 8000e48:	e09c      	b.n	8000f84 <__aeabi_fsub+0x1c0>
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_fsub+0x8c>
 8000e4e:	e077      	b.n	8000f40 <__aeabi_fsub+0x17c>
 8000e50:	000c      	movs	r4, r1
 8000e52:	0033      	movs	r3, r6
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d100      	bne.n	8000e5c <__aeabi_fsub+0x98>
 8000e5a:	e06e      	b.n	8000f3a <__aeabi_fsub+0x176>
 8000e5c:	2280      	movs	r2, #128	@ 0x80
 8000e5e:	03d2      	lsls	r2, r2, #15
 8000e60:	4313      	orrs	r3, r2
 8000e62:	025b      	lsls	r3, r3, #9
 8000e64:	20ff      	movs	r0, #255	@ 0xff
 8000e66:	0a5b      	lsrs	r3, r3, #9
 8000e68:	e024      	b.n	8000eb4 <__aeabi_fsub+0xf0>
 8000e6a:	2dff      	cmp	r5, #255	@ 0xff
 8000e6c:	d0f2      	beq.n	8000e54 <__aeabi_fsub+0x90>
 8000e6e:	2180      	movs	r1, #128	@ 0x80
 8000e70:	04c9      	lsls	r1, r1, #19
 8000e72:	430e      	orrs	r6, r1
 8000e74:	2101      	movs	r1, #1
 8000e76:	2a1b      	cmp	r2, #27
 8000e78:	dc08      	bgt.n	8000e8c <__aeabi_fsub+0xc8>
 8000e7a:	0031      	movs	r1, r6
 8000e7c:	2020      	movs	r0, #32
 8000e7e:	40d1      	lsrs	r1, r2
 8000e80:	1a82      	subs	r2, r0, r2
 8000e82:	4096      	lsls	r6, r2
 8000e84:	0032      	movs	r2, r6
 8000e86:	1e50      	subs	r0, r2, #1
 8000e88:	4182      	sbcs	r2, r0
 8000e8a:	4311      	orrs	r1, r2
 8000e8c:	1a5b      	subs	r3, r3, r1
 8000e8e:	015a      	lsls	r2, r3, #5
 8000e90:	d460      	bmi.n	8000f54 <__aeabi_fsub+0x190>
 8000e92:	2107      	movs	r1, #7
 8000e94:	002a      	movs	r2, r5
 8000e96:	4019      	ands	r1, r3
 8000e98:	d057      	beq.n	8000f4a <__aeabi_fsub+0x186>
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	4019      	ands	r1, r3
 8000e9e:	2904      	cmp	r1, #4
 8000ea0:	d000      	beq.n	8000ea4 <__aeabi_fsub+0xe0>
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	0159      	lsls	r1, r3, #5
 8000ea6:	d550      	bpl.n	8000f4a <__aeabi_fsub+0x186>
 8000ea8:	1c50      	adds	r0, r2, #1
 8000eaa:	2afe      	cmp	r2, #254	@ 0xfe
 8000eac:	d045      	beq.n	8000f3a <__aeabi_fsub+0x176>
 8000eae:	019b      	lsls	r3, r3, #6
 8000eb0:	b2c0      	uxtb	r0, r0
 8000eb2:	0a5b      	lsrs	r3, r3, #9
 8000eb4:	05c0      	lsls	r0, r0, #23
 8000eb6:	4318      	orrs	r0, r3
 8000eb8:	07e4      	lsls	r4, r4, #31
 8000eba:	4320      	orrs	r0, r4
 8000ebc:	bcc0      	pop	{r6, r7}
 8000ebe:	46b9      	mov	r9, r7
 8000ec0:	46b0      	mov	r8, r6
 8000ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4051      	eors	r1, r2
 8000ec8:	428c      	cmp	r4, r1
 8000eca:	d1ba      	bne.n	8000e42 <__aeabi_fsub+0x7e>
 8000ecc:	464a      	mov	r2, r9
 8000ece:	2a00      	cmp	r2, #0
 8000ed0:	d010      	beq.n	8000ef4 <__aeabi_fsub+0x130>
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_fsub+0x114>
 8000ed6:	e098      	b.n	800100a <__aeabi_fsub+0x246>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e7bb      	b.n	8000e54 <__aeabi_fsub+0x90>
 8000edc:	2e00      	cmp	r6, #0
 8000ede:	d034      	beq.n	8000f4a <__aeabi_fsub+0x186>
 8000ee0:	1e51      	subs	r1, r2, #1
 8000ee2:	2a01      	cmp	r2, #1
 8000ee4:	d06e      	beq.n	8000fc4 <__aeabi_fsub+0x200>
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d0b4      	beq.n	8000e54 <__aeabi_fsub+0x90>
 8000eea:	000a      	movs	r2, r1
 8000eec:	e79c      	b.n	8000e28 <__aeabi_fsub+0x64>
 8000eee:	2a00      	cmp	r2, #0
 8000ef0:	d000      	beq.n	8000ef4 <__aeabi_fsub+0x130>
 8000ef2:	e088      	b.n	8001006 <__aeabi_fsub+0x242>
 8000ef4:	20fe      	movs	r0, #254	@ 0xfe
 8000ef6:	1c6a      	adds	r2, r5, #1
 8000ef8:	4210      	tst	r0, r2
 8000efa:	d000      	beq.n	8000efe <__aeabi_fsub+0x13a>
 8000efc:	e092      	b.n	8001024 <__aeabi_fsub+0x260>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	d000      	beq.n	8000f04 <__aeabi_fsub+0x140>
 8000f02:	e0a4      	b.n	800104e <__aeabi_fsub+0x28a>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d100      	bne.n	8000f0a <__aeabi_fsub+0x146>
 8000f08:	e0cb      	b.n	80010a2 <__aeabi_fsub+0x2de>
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fsub+0x14c>
 8000f0e:	e0ca      	b.n	80010a6 <__aeabi_fsub+0x2e2>
 8000f10:	2200      	movs	r2, #0
 8000f12:	08db      	lsrs	r3, r3, #3
 8000f14:	025b      	lsls	r3, r3, #9
 8000f16:	0a5b      	lsrs	r3, r3, #9
 8000f18:	b2d0      	uxtb	r0, r2
 8000f1a:	e7cb      	b.n	8000eb4 <__aeabi_fsub+0xf0>
 8000f1c:	0031      	movs	r1, r6
 8000f1e:	2020      	movs	r0, #32
 8000f20:	40d1      	lsrs	r1, r2
 8000f22:	1a82      	subs	r2, r0, r2
 8000f24:	4096      	lsls	r6, r2
 8000f26:	0032      	movs	r2, r6
 8000f28:	1e50      	subs	r0, r2, #1
 8000f2a:	4182      	sbcs	r2, r0
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	189b      	adds	r3, r3, r2
 8000f30:	015a      	lsls	r2, r3, #5
 8000f32:	d5ae      	bpl.n	8000e92 <__aeabi_fsub+0xce>
 8000f34:	1c6a      	adds	r2, r5, #1
 8000f36:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f38:	d14a      	bne.n	8000fd0 <__aeabi_fsub+0x20c>
 8000f3a:	20ff      	movs	r0, #255	@ 0xff
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e7b9      	b.n	8000eb4 <__aeabi_fsub+0xf0>
 8000f40:	22ff      	movs	r2, #255	@ 0xff
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d14b      	bne.n	8000fde <__aeabi_fsub+0x21a>
 8000f46:	000c      	movs	r4, r1
 8000f48:	0033      	movs	r3, r6
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	2aff      	cmp	r2, #255	@ 0xff
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_fsub+0x18e>
 8000f50:	e781      	b.n	8000e56 <__aeabi_fsub+0x92>
 8000f52:	e7df      	b.n	8000f14 <__aeabi_fsub+0x150>
 8000f54:	019f      	lsls	r7, r3, #6
 8000f56:	09bf      	lsrs	r7, r7, #6
 8000f58:	0038      	movs	r0, r7
 8000f5a:	f000 fccd 	bl	80018f8 <__clzsi2>
 8000f5e:	3805      	subs	r0, #5
 8000f60:	4087      	lsls	r7, r0
 8000f62:	4285      	cmp	r5, r0
 8000f64:	dc21      	bgt.n	8000faa <__aeabi_fsub+0x1e6>
 8000f66:	003b      	movs	r3, r7
 8000f68:	2120      	movs	r1, #32
 8000f6a:	1b42      	subs	r2, r0, r5
 8000f6c:	3201      	adds	r2, #1
 8000f6e:	40d3      	lsrs	r3, r2
 8000f70:	1a8a      	subs	r2, r1, r2
 8000f72:	4097      	lsls	r7, r2
 8000f74:	1e7a      	subs	r2, r7, #1
 8000f76:	4197      	sbcs	r7, r2
 8000f78:	2200      	movs	r2, #0
 8000f7a:	433b      	orrs	r3, r7
 8000f7c:	0759      	lsls	r1, r3, #29
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fsub+0x1be>
 8000f80:	e78b      	b.n	8000e9a <__aeabi_fsub+0xd6>
 8000f82:	e78f      	b.n	8000ea4 <__aeabi_fsub+0xe0>
 8000f84:	20fe      	movs	r0, #254	@ 0xfe
 8000f86:	1c6a      	adds	r2, r5, #1
 8000f88:	4210      	tst	r0, r2
 8000f8a:	d112      	bne.n	8000fb2 <__aeabi_fsub+0x1ee>
 8000f8c:	2d00      	cmp	r5, #0
 8000f8e:	d152      	bne.n	8001036 <__aeabi_fsub+0x272>
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d07c      	beq.n	800108e <__aeabi_fsub+0x2ca>
 8000f94:	2e00      	cmp	r6, #0
 8000f96:	d0bb      	beq.n	8000f10 <__aeabi_fsub+0x14c>
 8000f98:	1b9a      	subs	r2, r3, r6
 8000f9a:	0150      	lsls	r0, r2, #5
 8000f9c:	d400      	bmi.n	8000fa0 <__aeabi_fsub+0x1dc>
 8000f9e:	e08b      	b.n	80010b8 <__aeabi_fsub+0x2f4>
 8000fa0:	2401      	movs	r4, #1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	1af3      	subs	r3, r6, r3
 8000fa6:	400c      	ands	r4, r1
 8000fa8:	e7e8      	b.n	8000f7c <__aeabi_fsub+0x1b8>
 8000faa:	4b56      	ldr	r3, [pc, #344]	@ (8001104 <__aeabi_fsub+0x340>)
 8000fac:	1a2a      	subs	r2, r5, r0
 8000fae:	403b      	ands	r3, r7
 8000fb0:	e7e4      	b.n	8000f7c <__aeabi_fsub+0x1b8>
 8000fb2:	1b9f      	subs	r7, r3, r6
 8000fb4:	017a      	lsls	r2, r7, #5
 8000fb6:	d446      	bmi.n	8001046 <__aeabi_fsub+0x282>
 8000fb8:	2f00      	cmp	r7, #0
 8000fba:	d1cd      	bne.n	8000f58 <__aeabi_fsub+0x194>
 8000fbc:	2400      	movs	r4, #0
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e777      	b.n	8000eb4 <__aeabi_fsub+0xf0>
 8000fc4:	199b      	adds	r3, r3, r6
 8000fc6:	2501      	movs	r5, #1
 8000fc8:	3201      	adds	r2, #1
 8000fca:	0159      	lsls	r1, r3, #5
 8000fcc:	d400      	bmi.n	8000fd0 <__aeabi_fsub+0x20c>
 8000fce:	e760      	b.n	8000e92 <__aeabi_fsub+0xce>
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	484d      	ldr	r0, [pc, #308]	@ (8001108 <__aeabi_fsub+0x344>)
 8000fd4:	4019      	ands	r1, r3
 8000fd6:	085b      	lsrs	r3, r3, #1
 8000fd8:	4003      	ands	r3, r0
 8000fda:	430b      	orrs	r3, r1
 8000fdc:	e7ce      	b.n	8000f7c <__aeabi_fsub+0x1b8>
 8000fde:	1e57      	subs	r7, r2, #1
 8000fe0:	2a01      	cmp	r2, #1
 8000fe2:	d05a      	beq.n	800109a <__aeabi_fsub+0x2d6>
 8000fe4:	000c      	movs	r4, r1
 8000fe6:	2aff      	cmp	r2, #255	@ 0xff
 8000fe8:	d033      	beq.n	8001052 <__aeabi_fsub+0x28e>
 8000fea:	2201      	movs	r2, #1
 8000fec:	2f1b      	cmp	r7, #27
 8000fee:	dc07      	bgt.n	8001000 <__aeabi_fsub+0x23c>
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	1bc9      	subs	r1, r1, r7
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	408b      	lsls	r3, r1
 8000ff8:	40fa      	lsrs	r2, r7
 8000ffa:	1e59      	subs	r1, r3, #1
 8000ffc:	418b      	sbcs	r3, r1
 8000ffe:	431a      	orrs	r2, r3
 8001000:	0005      	movs	r5, r0
 8001002:	1ab3      	subs	r3, r6, r2
 8001004:	e743      	b.n	8000e8e <__aeabi_fsub+0xca>
 8001006:	2d00      	cmp	r5, #0
 8001008:	d123      	bne.n	8001052 <__aeabi_fsub+0x28e>
 800100a:	22ff      	movs	r2, #255	@ 0xff
 800100c:	2b00      	cmp	r3, #0
 800100e:	d09b      	beq.n	8000f48 <__aeabi_fsub+0x184>
 8001010:	1e51      	subs	r1, r2, #1
 8001012:	2a01      	cmp	r2, #1
 8001014:	d0d6      	beq.n	8000fc4 <__aeabi_fsub+0x200>
 8001016:	2aff      	cmp	r2, #255	@ 0xff
 8001018:	d01b      	beq.n	8001052 <__aeabi_fsub+0x28e>
 800101a:	291b      	cmp	r1, #27
 800101c:	dd2c      	ble.n	8001078 <__aeabi_fsub+0x2b4>
 800101e:	0002      	movs	r2, r0
 8001020:	1c73      	adds	r3, r6, #1
 8001022:	e73a      	b.n	8000e9a <__aeabi_fsub+0xd6>
 8001024:	2aff      	cmp	r2, #255	@ 0xff
 8001026:	d088      	beq.n	8000f3a <__aeabi_fsub+0x176>
 8001028:	199b      	adds	r3, r3, r6
 800102a:	085b      	lsrs	r3, r3, #1
 800102c:	0759      	lsls	r1, r3, #29
 800102e:	d000      	beq.n	8001032 <__aeabi_fsub+0x26e>
 8001030:	e733      	b.n	8000e9a <__aeabi_fsub+0xd6>
 8001032:	08db      	lsrs	r3, r3, #3
 8001034:	e76e      	b.n	8000f14 <__aeabi_fsub+0x150>
 8001036:	2b00      	cmp	r3, #0
 8001038:	d110      	bne.n	800105c <__aeabi_fsub+0x298>
 800103a:	2e00      	cmp	r6, #0
 800103c:	d043      	beq.n	80010c6 <__aeabi_fsub+0x302>
 800103e:	2401      	movs	r4, #1
 8001040:	0033      	movs	r3, r6
 8001042:	400c      	ands	r4, r1
 8001044:	e706      	b.n	8000e54 <__aeabi_fsub+0x90>
 8001046:	2401      	movs	r4, #1
 8001048:	1af7      	subs	r7, r6, r3
 800104a:	400c      	ands	r4, r1
 800104c:	e784      	b.n	8000f58 <__aeabi_fsub+0x194>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d104      	bne.n	800105c <__aeabi_fsub+0x298>
 8001052:	0033      	movs	r3, r6
 8001054:	e6fe      	b.n	8000e54 <__aeabi_fsub+0x90>
 8001056:	2501      	movs	r5, #1
 8001058:	1b9b      	subs	r3, r3, r6
 800105a:	e718      	b.n	8000e8e <__aeabi_fsub+0xca>
 800105c:	2e00      	cmp	r6, #0
 800105e:	d100      	bne.n	8001062 <__aeabi_fsub+0x29e>
 8001060:	e6f8      	b.n	8000e54 <__aeabi_fsub+0x90>
 8001062:	2280      	movs	r2, #128	@ 0x80
 8001064:	03d2      	lsls	r2, r2, #15
 8001066:	4297      	cmp	r7, r2
 8001068:	d304      	bcc.n	8001074 <__aeabi_fsub+0x2b0>
 800106a:	4594      	cmp	ip, r2
 800106c:	d202      	bcs.n	8001074 <__aeabi_fsub+0x2b0>
 800106e:	2401      	movs	r4, #1
 8001070:	0033      	movs	r3, r6
 8001072:	400c      	ands	r4, r1
 8001074:	08db      	lsrs	r3, r3, #3
 8001076:	e6f1      	b.n	8000e5c <__aeabi_fsub+0x98>
 8001078:	001a      	movs	r2, r3
 800107a:	2520      	movs	r5, #32
 800107c:	40ca      	lsrs	r2, r1
 800107e:	1a69      	subs	r1, r5, r1
 8001080:	408b      	lsls	r3, r1
 8001082:	1e59      	subs	r1, r3, #1
 8001084:	418b      	sbcs	r3, r1
 8001086:	4313      	orrs	r3, r2
 8001088:	0005      	movs	r5, r0
 800108a:	199b      	adds	r3, r3, r6
 800108c:	e750      	b.n	8000f30 <__aeabi_fsub+0x16c>
 800108e:	2e00      	cmp	r6, #0
 8001090:	d094      	beq.n	8000fbc <__aeabi_fsub+0x1f8>
 8001092:	2401      	movs	r4, #1
 8001094:	0033      	movs	r3, r6
 8001096:	400c      	ands	r4, r1
 8001098:	e73a      	b.n	8000f10 <__aeabi_fsub+0x14c>
 800109a:	000c      	movs	r4, r1
 800109c:	2501      	movs	r5, #1
 800109e:	1af3      	subs	r3, r6, r3
 80010a0:	e6f5      	b.n	8000e8e <__aeabi_fsub+0xca>
 80010a2:	0033      	movs	r3, r6
 80010a4:	e734      	b.n	8000f10 <__aeabi_fsub+0x14c>
 80010a6:	199b      	adds	r3, r3, r6
 80010a8:	2200      	movs	r2, #0
 80010aa:	0159      	lsls	r1, r3, #5
 80010ac:	d5c1      	bpl.n	8001032 <__aeabi_fsub+0x26e>
 80010ae:	4a15      	ldr	r2, [pc, #84]	@ (8001104 <__aeabi_fsub+0x340>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	2201      	movs	r2, #1
 80010b6:	e72d      	b.n	8000f14 <__aeabi_fsub+0x150>
 80010b8:	2a00      	cmp	r2, #0
 80010ba:	d100      	bne.n	80010be <__aeabi_fsub+0x2fa>
 80010bc:	e77e      	b.n	8000fbc <__aeabi_fsub+0x1f8>
 80010be:	0013      	movs	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	08db      	lsrs	r3, r3, #3
 80010c4:	e726      	b.n	8000f14 <__aeabi_fsub+0x150>
 80010c6:	2380      	movs	r3, #128	@ 0x80
 80010c8:	2400      	movs	r4, #0
 80010ca:	20ff      	movs	r0, #255	@ 0xff
 80010cc:	03db      	lsls	r3, r3, #15
 80010ce:	e6f1      	b.n	8000eb4 <__aeabi_fsub+0xf0>
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	d100      	bne.n	80010d6 <__aeabi_fsub+0x312>
 80010d4:	e756      	b.n	8000f84 <__aeabi_fsub+0x1c0>
 80010d6:	1b47      	subs	r7, r0, r5
 80010d8:	003a      	movs	r2, r7
 80010da:	2d00      	cmp	r5, #0
 80010dc:	d100      	bne.n	80010e0 <__aeabi_fsub+0x31c>
 80010de:	e730      	b.n	8000f42 <__aeabi_fsub+0x17e>
 80010e0:	2280      	movs	r2, #128	@ 0x80
 80010e2:	04d2      	lsls	r2, r2, #19
 80010e4:	000c      	movs	r4, r1
 80010e6:	4313      	orrs	r3, r2
 80010e8:	e77f      	b.n	8000fea <__aeabi_fsub+0x226>
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d100      	bne.n	80010f0 <__aeabi_fsub+0x32c>
 80010ee:	e701      	b.n	8000ef4 <__aeabi_fsub+0x130>
 80010f0:	1b41      	subs	r1, r0, r5
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d101      	bne.n	80010fa <__aeabi_fsub+0x336>
 80010f6:	000a      	movs	r2, r1
 80010f8:	e788      	b.n	800100c <__aeabi_fsub+0x248>
 80010fa:	2280      	movs	r2, #128	@ 0x80
 80010fc:	04d2      	lsls	r2, r2, #19
 80010fe:	4313      	orrs	r3, r2
 8001100:	e78b      	b.n	800101a <__aeabi_fsub+0x256>
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	fbffffff 	.word	0xfbffffff
 8001108:	7dffffff 	.word	0x7dffffff

0800110c <__aeabi_f2iz>:
 800110c:	0241      	lsls	r1, r0, #9
 800110e:	0042      	lsls	r2, r0, #1
 8001110:	0fc3      	lsrs	r3, r0, #31
 8001112:	0a49      	lsrs	r1, r1, #9
 8001114:	2000      	movs	r0, #0
 8001116:	0e12      	lsrs	r2, r2, #24
 8001118:	2a7e      	cmp	r2, #126	@ 0x7e
 800111a:	dd03      	ble.n	8001124 <__aeabi_f2iz+0x18>
 800111c:	2a9d      	cmp	r2, #157	@ 0x9d
 800111e:	dd02      	ble.n	8001126 <__aeabi_f2iz+0x1a>
 8001120:	4a09      	ldr	r2, [pc, #36]	@ (8001148 <__aeabi_f2iz+0x3c>)
 8001122:	1898      	adds	r0, r3, r2
 8001124:	4770      	bx	lr
 8001126:	2080      	movs	r0, #128	@ 0x80
 8001128:	0400      	lsls	r0, r0, #16
 800112a:	4301      	orrs	r1, r0
 800112c:	2a95      	cmp	r2, #149	@ 0x95
 800112e:	dc07      	bgt.n	8001140 <__aeabi_f2iz+0x34>
 8001130:	2096      	movs	r0, #150	@ 0x96
 8001132:	1a82      	subs	r2, r0, r2
 8001134:	40d1      	lsrs	r1, r2
 8001136:	4248      	negs	r0, r1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f3      	bne.n	8001124 <__aeabi_f2iz+0x18>
 800113c:	0008      	movs	r0, r1
 800113e:	e7f1      	b.n	8001124 <__aeabi_f2iz+0x18>
 8001140:	3a96      	subs	r2, #150	@ 0x96
 8001142:	4091      	lsls	r1, r2
 8001144:	e7f7      	b.n	8001136 <__aeabi_f2iz+0x2a>
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	7fffffff 	.word	0x7fffffff

0800114c <__aeabi_ui2f>:
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	1e04      	subs	r4, r0, #0
 8001150:	d00e      	beq.n	8001170 <__aeabi_ui2f+0x24>
 8001152:	f000 fbd1 	bl	80018f8 <__clzsi2>
 8001156:	239e      	movs	r3, #158	@ 0x9e
 8001158:	0001      	movs	r1, r0
 800115a:	1a1b      	subs	r3, r3, r0
 800115c:	2b96      	cmp	r3, #150	@ 0x96
 800115e:	dc0c      	bgt.n	800117a <__aeabi_ui2f+0x2e>
 8001160:	2808      	cmp	r0, #8
 8001162:	d02f      	beq.n	80011c4 <__aeabi_ui2f+0x78>
 8001164:	3908      	subs	r1, #8
 8001166:	408c      	lsls	r4, r1
 8001168:	0264      	lsls	r4, r4, #9
 800116a:	0a64      	lsrs	r4, r4, #9
 800116c:	b2d8      	uxtb	r0, r3
 800116e:	e001      	b.n	8001174 <__aeabi_ui2f+0x28>
 8001170:	2000      	movs	r0, #0
 8001172:	2400      	movs	r4, #0
 8001174:	05c0      	lsls	r0, r0, #23
 8001176:	4320      	orrs	r0, r4
 8001178:	bd70      	pop	{r4, r5, r6, pc}
 800117a:	2b99      	cmp	r3, #153	@ 0x99
 800117c:	dc16      	bgt.n	80011ac <__aeabi_ui2f+0x60>
 800117e:	1f42      	subs	r2, r0, #5
 8001180:	2805      	cmp	r0, #5
 8001182:	d000      	beq.n	8001186 <__aeabi_ui2f+0x3a>
 8001184:	4094      	lsls	r4, r2
 8001186:	0022      	movs	r2, r4
 8001188:	4810      	ldr	r0, [pc, #64]	@ (80011cc <__aeabi_ui2f+0x80>)
 800118a:	4002      	ands	r2, r0
 800118c:	0765      	lsls	r5, r4, #29
 800118e:	d009      	beq.n	80011a4 <__aeabi_ui2f+0x58>
 8001190:	250f      	movs	r5, #15
 8001192:	402c      	ands	r4, r5
 8001194:	2c04      	cmp	r4, #4
 8001196:	d005      	beq.n	80011a4 <__aeabi_ui2f+0x58>
 8001198:	3204      	adds	r2, #4
 800119a:	0154      	lsls	r4, r2, #5
 800119c:	d502      	bpl.n	80011a4 <__aeabi_ui2f+0x58>
 800119e:	239f      	movs	r3, #159	@ 0x9f
 80011a0:	4002      	ands	r2, r0
 80011a2:	1a5b      	subs	r3, r3, r1
 80011a4:	0192      	lsls	r2, r2, #6
 80011a6:	0a54      	lsrs	r4, r2, #9
 80011a8:	b2d8      	uxtb	r0, r3
 80011aa:	e7e3      	b.n	8001174 <__aeabi_ui2f+0x28>
 80011ac:	0002      	movs	r2, r0
 80011ae:	0020      	movs	r0, r4
 80011b0:	321b      	adds	r2, #27
 80011b2:	4090      	lsls	r0, r2
 80011b4:	0002      	movs	r2, r0
 80011b6:	1e50      	subs	r0, r2, #1
 80011b8:	4182      	sbcs	r2, r0
 80011ba:	2005      	movs	r0, #5
 80011bc:	1a40      	subs	r0, r0, r1
 80011be:	40c4      	lsrs	r4, r0
 80011c0:	4314      	orrs	r4, r2
 80011c2:	e7e0      	b.n	8001186 <__aeabi_ui2f+0x3a>
 80011c4:	0264      	lsls	r4, r4, #9
 80011c6:	2096      	movs	r0, #150	@ 0x96
 80011c8:	0a64      	lsrs	r4, r4, #9
 80011ca:	e7d3      	b.n	8001174 <__aeabi_ui2f+0x28>
 80011cc:	fbffffff 	.word	0xfbffffff

080011d0 <__aeabi_dmul>:
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d2:	4657      	mov	r7, sl
 80011d4:	46de      	mov	lr, fp
 80011d6:	464e      	mov	r6, r9
 80011d8:	4645      	mov	r5, r8
 80011da:	b5e0      	push	{r5, r6, r7, lr}
 80011dc:	001f      	movs	r7, r3
 80011de:	030b      	lsls	r3, r1, #12
 80011e0:	0b1b      	lsrs	r3, r3, #12
 80011e2:	0016      	movs	r6, r2
 80011e4:	469a      	mov	sl, r3
 80011e6:	0fca      	lsrs	r2, r1, #31
 80011e8:	004b      	lsls	r3, r1, #1
 80011ea:	0004      	movs	r4, r0
 80011ec:	4693      	mov	fp, r2
 80011ee:	b087      	sub	sp, #28
 80011f0:	0d5b      	lsrs	r3, r3, #21
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dmul+0x26>
 80011f4:	e0d5      	b.n	80013a2 <__aeabi_dmul+0x1d2>
 80011f6:	4abb      	ldr	r2, [pc, #748]	@ (80014e4 <__aeabi_dmul+0x314>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d100      	bne.n	80011fe <__aeabi_dmul+0x2e>
 80011fc:	e0f8      	b.n	80013f0 <__aeabi_dmul+0x220>
 80011fe:	4651      	mov	r1, sl
 8001200:	0f42      	lsrs	r2, r0, #29
 8001202:	00c9      	lsls	r1, r1, #3
 8001204:	430a      	orrs	r2, r1
 8001206:	2180      	movs	r1, #128	@ 0x80
 8001208:	0409      	lsls	r1, r1, #16
 800120a:	4311      	orrs	r1, r2
 800120c:	00c2      	lsls	r2, r0, #3
 800120e:	4691      	mov	r9, r2
 8001210:	4ab5      	ldr	r2, [pc, #724]	@ (80014e8 <__aeabi_dmul+0x318>)
 8001212:	468a      	mov	sl, r1
 8001214:	189d      	adds	r5, r3, r2
 8001216:	2300      	movs	r3, #0
 8001218:	4698      	mov	r8, r3
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	033c      	lsls	r4, r7, #12
 800121e:	007b      	lsls	r3, r7, #1
 8001220:	0ffa      	lsrs	r2, r7, #31
 8001222:	0030      	movs	r0, r6
 8001224:	0b24      	lsrs	r4, r4, #12
 8001226:	0d5b      	lsrs	r3, r3, #21
 8001228:	9200      	str	r2, [sp, #0]
 800122a:	d100      	bne.n	800122e <__aeabi_dmul+0x5e>
 800122c:	e096      	b.n	800135c <__aeabi_dmul+0x18c>
 800122e:	4aad      	ldr	r2, [pc, #692]	@ (80014e4 <__aeabi_dmul+0x314>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d031      	beq.n	8001298 <__aeabi_dmul+0xc8>
 8001234:	0f72      	lsrs	r2, r6, #29
 8001236:	00e4      	lsls	r4, r4, #3
 8001238:	4322      	orrs	r2, r4
 800123a:	2480      	movs	r4, #128	@ 0x80
 800123c:	0424      	lsls	r4, r4, #16
 800123e:	4314      	orrs	r4, r2
 8001240:	4aa9      	ldr	r2, [pc, #676]	@ (80014e8 <__aeabi_dmul+0x318>)
 8001242:	00f0      	lsls	r0, r6, #3
 8001244:	4694      	mov	ip, r2
 8001246:	4463      	add	r3, ip
 8001248:	195b      	adds	r3, r3, r5
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	9201      	str	r2, [sp, #4]
 800124e:	4642      	mov	r2, r8
 8001250:	2600      	movs	r6, #0
 8001252:	2a0a      	cmp	r2, #10
 8001254:	dc42      	bgt.n	80012dc <__aeabi_dmul+0x10c>
 8001256:	465a      	mov	r2, fp
 8001258:	9900      	ldr	r1, [sp, #0]
 800125a:	404a      	eors	r2, r1
 800125c:	4693      	mov	fp, r2
 800125e:	4642      	mov	r2, r8
 8001260:	2a02      	cmp	r2, #2
 8001262:	dc32      	bgt.n	80012ca <__aeabi_dmul+0xfa>
 8001264:	3a01      	subs	r2, #1
 8001266:	2a01      	cmp	r2, #1
 8001268:	d900      	bls.n	800126c <__aeabi_dmul+0x9c>
 800126a:	e149      	b.n	8001500 <__aeabi_dmul+0x330>
 800126c:	2e02      	cmp	r6, #2
 800126e:	d100      	bne.n	8001272 <__aeabi_dmul+0xa2>
 8001270:	e0ca      	b.n	8001408 <__aeabi_dmul+0x238>
 8001272:	2e01      	cmp	r6, #1
 8001274:	d13d      	bne.n	80012f2 <__aeabi_dmul+0x122>
 8001276:	2300      	movs	r3, #0
 8001278:	2400      	movs	r4, #0
 800127a:	2200      	movs	r2, #0
 800127c:	0010      	movs	r0, r2
 800127e:	465a      	mov	r2, fp
 8001280:	051b      	lsls	r3, r3, #20
 8001282:	4323      	orrs	r3, r4
 8001284:	07d2      	lsls	r2, r2, #31
 8001286:	4313      	orrs	r3, r2
 8001288:	0019      	movs	r1, r3
 800128a:	b007      	add	sp, #28
 800128c:	bcf0      	pop	{r4, r5, r6, r7}
 800128e:	46bb      	mov	fp, r7
 8001290:	46b2      	mov	sl, r6
 8001292:	46a9      	mov	r9, r5
 8001294:	46a0      	mov	r8, r4
 8001296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001298:	4b92      	ldr	r3, [pc, #584]	@ (80014e4 <__aeabi_dmul+0x314>)
 800129a:	4326      	orrs	r6, r4
 800129c:	18eb      	adds	r3, r5, r3
 800129e:	2e00      	cmp	r6, #0
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dmul+0xd4>
 80012a2:	e0bb      	b.n	800141c <__aeabi_dmul+0x24c>
 80012a4:	2203      	movs	r2, #3
 80012a6:	4641      	mov	r1, r8
 80012a8:	4311      	orrs	r1, r2
 80012aa:	465a      	mov	r2, fp
 80012ac:	4688      	mov	r8, r1
 80012ae:	9900      	ldr	r1, [sp, #0]
 80012b0:	404a      	eors	r2, r1
 80012b2:	2180      	movs	r1, #128	@ 0x80
 80012b4:	0109      	lsls	r1, r1, #4
 80012b6:	468c      	mov	ip, r1
 80012b8:	0029      	movs	r1, r5
 80012ba:	4461      	add	r1, ip
 80012bc:	9101      	str	r1, [sp, #4]
 80012be:	4641      	mov	r1, r8
 80012c0:	290a      	cmp	r1, #10
 80012c2:	dd00      	ble.n	80012c6 <__aeabi_dmul+0xf6>
 80012c4:	e233      	b.n	800172e <__aeabi_dmul+0x55e>
 80012c6:	4693      	mov	fp, r2
 80012c8:	2603      	movs	r6, #3
 80012ca:	4642      	mov	r2, r8
 80012cc:	2701      	movs	r7, #1
 80012ce:	4097      	lsls	r7, r2
 80012d0:	21a6      	movs	r1, #166	@ 0xa6
 80012d2:	003a      	movs	r2, r7
 80012d4:	00c9      	lsls	r1, r1, #3
 80012d6:	400a      	ands	r2, r1
 80012d8:	420f      	tst	r7, r1
 80012da:	d031      	beq.n	8001340 <__aeabi_dmul+0x170>
 80012dc:	9e02      	ldr	r6, [sp, #8]
 80012de:	2e02      	cmp	r6, #2
 80012e0:	d100      	bne.n	80012e4 <__aeabi_dmul+0x114>
 80012e2:	e235      	b.n	8001750 <__aeabi_dmul+0x580>
 80012e4:	2e03      	cmp	r6, #3
 80012e6:	d100      	bne.n	80012ea <__aeabi_dmul+0x11a>
 80012e8:	e1d2      	b.n	8001690 <__aeabi_dmul+0x4c0>
 80012ea:	4654      	mov	r4, sl
 80012ec:	4648      	mov	r0, r9
 80012ee:	2e01      	cmp	r6, #1
 80012f0:	d0c1      	beq.n	8001276 <__aeabi_dmul+0xa6>
 80012f2:	9a01      	ldr	r2, [sp, #4]
 80012f4:	4b7d      	ldr	r3, [pc, #500]	@ (80014ec <__aeabi_dmul+0x31c>)
 80012f6:	4694      	mov	ip, r2
 80012f8:	4463      	add	r3, ip
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	dc00      	bgt.n	8001300 <__aeabi_dmul+0x130>
 80012fe:	e0c0      	b.n	8001482 <__aeabi_dmul+0x2b2>
 8001300:	0742      	lsls	r2, r0, #29
 8001302:	d009      	beq.n	8001318 <__aeabi_dmul+0x148>
 8001304:	220f      	movs	r2, #15
 8001306:	4002      	ands	r2, r0
 8001308:	2a04      	cmp	r2, #4
 800130a:	d005      	beq.n	8001318 <__aeabi_dmul+0x148>
 800130c:	1d02      	adds	r2, r0, #4
 800130e:	4282      	cmp	r2, r0
 8001310:	4180      	sbcs	r0, r0
 8001312:	4240      	negs	r0, r0
 8001314:	1824      	adds	r4, r4, r0
 8001316:	0010      	movs	r0, r2
 8001318:	01e2      	lsls	r2, r4, #7
 800131a:	d506      	bpl.n	800132a <__aeabi_dmul+0x15a>
 800131c:	4b74      	ldr	r3, [pc, #464]	@ (80014f0 <__aeabi_dmul+0x320>)
 800131e:	9a01      	ldr	r2, [sp, #4]
 8001320:	401c      	ands	r4, r3
 8001322:	2380      	movs	r3, #128	@ 0x80
 8001324:	4694      	mov	ip, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4463      	add	r3, ip
 800132a:	4a72      	ldr	r2, [pc, #456]	@ (80014f4 <__aeabi_dmul+0x324>)
 800132c:	4293      	cmp	r3, r2
 800132e:	dc6b      	bgt.n	8001408 <__aeabi_dmul+0x238>
 8001330:	0762      	lsls	r2, r4, #29
 8001332:	08c0      	lsrs	r0, r0, #3
 8001334:	0264      	lsls	r4, r4, #9
 8001336:	055b      	lsls	r3, r3, #21
 8001338:	4302      	orrs	r2, r0
 800133a:	0b24      	lsrs	r4, r4, #12
 800133c:	0d5b      	lsrs	r3, r3, #21
 800133e:	e79d      	b.n	800127c <__aeabi_dmul+0xac>
 8001340:	2190      	movs	r1, #144	@ 0x90
 8001342:	0089      	lsls	r1, r1, #2
 8001344:	420f      	tst	r7, r1
 8001346:	d163      	bne.n	8001410 <__aeabi_dmul+0x240>
 8001348:	2288      	movs	r2, #136	@ 0x88
 800134a:	423a      	tst	r2, r7
 800134c:	d100      	bne.n	8001350 <__aeabi_dmul+0x180>
 800134e:	e0d7      	b.n	8001500 <__aeabi_dmul+0x330>
 8001350:	9b00      	ldr	r3, [sp, #0]
 8001352:	46a2      	mov	sl, r4
 8001354:	469b      	mov	fp, r3
 8001356:	4681      	mov	r9, r0
 8001358:	9602      	str	r6, [sp, #8]
 800135a:	e7bf      	b.n	80012dc <__aeabi_dmul+0x10c>
 800135c:	0023      	movs	r3, r4
 800135e:	4333      	orrs	r3, r6
 8001360:	d100      	bne.n	8001364 <__aeabi_dmul+0x194>
 8001362:	e07f      	b.n	8001464 <__aeabi_dmul+0x294>
 8001364:	2c00      	cmp	r4, #0
 8001366:	d100      	bne.n	800136a <__aeabi_dmul+0x19a>
 8001368:	e1ad      	b.n	80016c6 <__aeabi_dmul+0x4f6>
 800136a:	0020      	movs	r0, r4
 800136c:	f000 fac4 	bl	80018f8 <__clzsi2>
 8001370:	0002      	movs	r2, r0
 8001372:	0003      	movs	r3, r0
 8001374:	3a0b      	subs	r2, #11
 8001376:	201d      	movs	r0, #29
 8001378:	0019      	movs	r1, r3
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	0030      	movs	r0, r6
 800137e:	3908      	subs	r1, #8
 8001380:	40d0      	lsrs	r0, r2
 8001382:	408c      	lsls	r4, r1
 8001384:	4304      	orrs	r4, r0
 8001386:	0030      	movs	r0, r6
 8001388:	4088      	lsls	r0, r1
 800138a:	4a5b      	ldr	r2, [pc, #364]	@ (80014f8 <__aeabi_dmul+0x328>)
 800138c:	1aeb      	subs	r3, r5, r3
 800138e:	4694      	mov	ip, r2
 8001390:	4463      	add	r3, ip
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	9201      	str	r2, [sp, #4]
 8001396:	4642      	mov	r2, r8
 8001398:	2600      	movs	r6, #0
 800139a:	2a0a      	cmp	r2, #10
 800139c:	dc00      	bgt.n	80013a0 <__aeabi_dmul+0x1d0>
 800139e:	e75a      	b.n	8001256 <__aeabi_dmul+0x86>
 80013a0:	e79c      	b.n	80012dc <__aeabi_dmul+0x10c>
 80013a2:	4653      	mov	r3, sl
 80013a4:	4303      	orrs	r3, r0
 80013a6:	4699      	mov	r9, r3
 80013a8:	d054      	beq.n	8001454 <__aeabi_dmul+0x284>
 80013aa:	4653      	mov	r3, sl
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d100      	bne.n	80013b2 <__aeabi_dmul+0x1e2>
 80013b0:	e177      	b.n	80016a2 <__aeabi_dmul+0x4d2>
 80013b2:	4650      	mov	r0, sl
 80013b4:	f000 faa0 	bl	80018f8 <__clzsi2>
 80013b8:	230b      	movs	r3, #11
 80013ba:	425b      	negs	r3, r3
 80013bc:	469c      	mov	ip, r3
 80013be:	0002      	movs	r2, r0
 80013c0:	4484      	add	ip, r0
 80013c2:	0011      	movs	r1, r2
 80013c4:	4650      	mov	r0, sl
 80013c6:	3908      	subs	r1, #8
 80013c8:	4088      	lsls	r0, r1
 80013ca:	231d      	movs	r3, #29
 80013cc:	4680      	mov	r8, r0
 80013ce:	4660      	mov	r0, ip
 80013d0:	1a1b      	subs	r3, r3, r0
 80013d2:	0020      	movs	r0, r4
 80013d4:	40d8      	lsrs	r0, r3
 80013d6:	0003      	movs	r3, r0
 80013d8:	4640      	mov	r0, r8
 80013da:	4303      	orrs	r3, r0
 80013dc:	469a      	mov	sl, r3
 80013de:	0023      	movs	r3, r4
 80013e0:	408b      	lsls	r3, r1
 80013e2:	4699      	mov	r9, r3
 80013e4:	2300      	movs	r3, #0
 80013e6:	4d44      	ldr	r5, [pc, #272]	@ (80014f8 <__aeabi_dmul+0x328>)
 80013e8:	4698      	mov	r8, r3
 80013ea:	1aad      	subs	r5, r5, r2
 80013ec:	9302      	str	r3, [sp, #8]
 80013ee:	e715      	b.n	800121c <__aeabi_dmul+0x4c>
 80013f0:	4652      	mov	r2, sl
 80013f2:	4302      	orrs	r2, r0
 80013f4:	4691      	mov	r9, r2
 80013f6:	d126      	bne.n	8001446 <__aeabi_dmul+0x276>
 80013f8:	2200      	movs	r2, #0
 80013fa:	001d      	movs	r5, r3
 80013fc:	2302      	movs	r3, #2
 80013fe:	4692      	mov	sl, r2
 8001400:	3208      	adds	r2, #8
 8001402:	4690      	mov	r8, r2
 8001404:	9302      	str	r3, [sp, #8]
 8001406:	e709      	b.n	800121c <__aeabi_dmul+0x4c>
 8001408:	2400      	movs	r4, #0
 800140a:	2200      	movs	r2, #0
 800140c:	4b35      	ldr	r3, [pc, #212]	@ (80014e4 <__aeabi_dmul+0x314>)
 800140e:	e735      	b.n	800127c <__aeabi_dmul+0xac>
 8001410:	2300      	movs	r3, #0
 8001412:	2480      	movs	r4, #128	@ 0x80
 8001414:	469b      	mov	fp, r3
 8001416:	0324      	lsls	r4, r4, #12
 8001418:	4b32      	ldr	r3, [pc, #200]	@ (80014e4 <__aeabi_dmul+0x314>)
 800141a:	e72f      	b.n	800127c <__aeabi_dmul+0xac>
 800141c:	2202      	movs	r2, #2
 800141e:	4641      	mov	r1, r8
 8001420:	4311      	orrs	r1, r2
 8001422:	2280      	movs	r2, #128	@ 0x80
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	4694      	mov	ip, r2
 8001428:	002a      	movs	r2, r5
 800142a:	4462      	add	r2, ip
 800142c:	4688      	mov	r8, r1
 800142e:	9201      	str	r2, [sp, #4]
 8001430:	290a      	cmp	r1, #10
 8001432:	dd00      	ble.n	8001436 <__aeabi_dmul+0x266>
 8001434:	e752      	b.n	80012dc <__aeabi_dmul+0x10c>
 8001436:	465a      	mov	r2, fp
 8001438:	2000      	movs	r0, #0
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	0004      	movs	r4, r0
 800143e:	404a      	eors	r2, r1
 8001440:	4693      	mov	fp, r2
 8001442:	2602      	movs	r6, #2
 8001444:	e70b      	b.n	800125e <__aeabi_dmul+0x8e>
 8001446:	220c      	movs	r2, #12
 8001448:	001d      	movs	r5, r3
 800144a:	2303      	movs	r3, #3
 800144c:	4681      	mov	r9, r0
 800144e:	4690      	mov	r8, r2
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	e6e3      	b.n	800121c <__aeabi_dmul+0x4c>
 8001454:	2300      	movs	r3, #0
 8001456:	469a      	mov	sl, r3
 8001458:	3304      	adds	r3, #4
 800145a:	4698      	mov	r8, r3
 800145c:	3b03      	subs	r3, #3
 800145e:	2500      	movs	r5, #0
 8001460:	9302      	str	r3, [sp, #8]
 8001462:	e6db      	b.n	800121c <__aeabi_dmul+0x4c>
 8001464:	4642      	mov	r2, r8
 8001466:	3301      	adds	r3, #1
 8001468:	431a      	orrs	r2, r3
 800146a:	002b      	movs	r3, r5
 800146c:	4690      	mov	r8, r2
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	9201      	str	r2, [sp, #4]
 8001472:	4642      	mov	r2, r8
 8001474:	2400      	movs	r4, #0
 8001476:	2000      	movs	r0, #0
 8001478:	2601      	movs	r6, #1
 800147a:	2a0a      	cmp	r2, #10
 800147c:	dc00      	bgt.n	8001480 <__aeabi_dmul+0x2b0>
 800147e:	e6ea      	b.n	8001256 <__aeabi_dmul+0x86>
 8001480:	e72c      	b.n	80012dc <__aeabi_dmul+0x10c>
 8001482:	2201      	movs	r2, #1
 8001484:	1ad2      	subs	r2, r2, r3
 8001486:	2a38      	cmp	r2, #56	@ 0x38
 8001488:	dd00      	ble.n	800148c <__aeabi_dmul+0x2bc>
 800148a:	e6f4      	b.n	8001276 <__aeabi_dmul+0xa6>
 800148c:	2a1f      	cmp	r2, #31
 800148e:	dc00      	bgt.n	8001492 <__aeabi_dmul+0x2c2>
 8001490:	e12a      	b.n	80016e8 <__aeabi_dmul+0x518>
 8001492:	211f      	movs	r1, #31
 8001494:	4249      	negs	r1, r1
 8001496:	1acb      	subs	r3, r1, r3
 8001498:	0021      	movs	r1, r4
 800149a:	40d9      	lsrs	r1, r3
 800149c:	000b      	movs	r3, r1
 800149e:	2a20      	cmp	r2, #32
 80014a0:	d005      	beq.n	80014ae <__aeabi_dmul+0x2de>
 80014a2:	4a16      	ldr	r2, [pc, #88]	@ (80014fc <__aeabi_dmul+0x32c>)
 80014a4:	9d01      	ldr	r5, [sp, #4]
 80014a6:	4694      	mov	ip, r2
 80014a8:	4465      	add	r5, ip
 80014aa:	40ac      	lsls	r4, r5
 80014ac:	4320      	orrs	r0, r4
 80014ae:	1e42      	subs	r2, r0, #1
 80014b0:	4190      	sbcs	r0, r2
 80014b2:	4318      	orrs	r0, r3
 80014b4:	2307      	movs	r3, #7
 80014b6:	0019      	movs	r1, r3
 80014b8:	2400      	movs	r4, #0
 80014ba:	4001      	ands	r1, r0
 80014bc:	4203      	tst	r3, r0
 80014be:	d00c      	beq.n	80014da <__aeabi_dmul+0x30a>
 80014c0:	230f      	movs	r3, #15
 80014c2:	4003      	ands	r3, r0
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d100      	bne.n	80014ca <__aeabi_dmul+0x2fa>
 80014c8:	e140      	b.n	800174c <__aeabi_dmul+0x57c>
 80014ca:	1d03      	adds	r3, r0, #4
 80014cc:	4283      	cmp	r3, r0
 80014ce:	41a4      	sbcs	r4, r4
 80014d0:	0018      	movs	r0, r3
 80014d2:	4264      	negs	r4, r4
 80014d4:	0761      	lsls	r1, r4, #29
 80014d6:	0264      	lsls	r4, r4, #9
 80014d8:	0b24      	lsrs	r4, r4, #12
 80014da:	08c2      	lsrs	r2, r0, #3
 80014dc:	2300      	movs	r3, #0
 80014de:	430a      	orrs	r2, r1
 80014e0:	e6cc      	b.n	800127c <__aeabi_dmul+0xac>
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	000007ff 	.word	0x000007ff
 80014e8:	fffffc01 	.word	0xfffffc01
 80014ec:	000003ff 	.word	0x000003ff
 80014f0:	feffffff 	.word	0xfeffffff
 80014f4:	000007fe 	.word	0x000007fe
 80014f8:	fffffc0d 	.word	0xfffffc0d
 80014fc:	0000043e 	.word	0x0000043e
 8001500:	4649      	mov	r1, r9
 8001502:	464a      	mov	r2, r9
 8001504:	0409      	lsls	r1, r1, #16
 8001506:	0c09      	lsrs	r1, r1, #16
 8001508:	000d      	movs	r5, r1
 800150a:	0c16      	lsrs	r6, r2, #16
 800150c:	0c02      	lsrs	r2, r0, #16
 800150e:	0400      	lsls	r0, r0, #16
 8001510:	0c00      	lsrs	r0, r0, #16
 8001512:	4345      	muls	r5, r0
 8001514:	46ac      	mov	ip, r5
 8001516:	0005      	movs	r5, r0
 8001518:	4375      	muls	r5, r6
 800151a:	46a8      	mov	r8, r5
 800151c:	0015      	movs	r5, r2
 800151e:	000f      	movs	r7, r1
 8001520:	4375      	muls	r5, r6
 8001522:	9200      	str	r2, [sp, #0]
 8001524:	9502      	str	r5, [sp, #8]
 8001526:	002a      	movs	r2, r5
 8001528:	9d00      	ldr	r5, [sp, #0]
 800152a:	436f      	muls	r7, r5
 800152c:	4665      	mov	r5, ip
 800152e:	0c2d      	lsrs	r5, r5, #16
 8001530:	46a9      	mov	r9, r5
 8001532:	4447      	add	r7, r8
 8001534:	444f      	add	r7, r9
 8001536:	45b8      	cmp	r8, r7
 8001538:	d905      	bls.n	8001546 <__aeabi_dmul+0x376>
 800153a:	0015      	movs	r5, r2
 800153c:	2280      	movs	r2, #128	@ 0x80
 800153e:	0252      	lsls	r2, r2, #9
 8001540:	4690      	mov	r8, r2
 8001542:	4445      	add	r5, r8
 8001544:	9502      	str	r5, [sp, #8]
 8001546:	0c3d      	lsrs	r5, r7, #16
 8001548:	9503      	str	r5, [sp, #12]
 800154a:	4665      	mov	r5, ip
 800154c:	042d      	lsls	r5, r5, #16
 800154e:	043f      	lsls	r7, r7, #16
 8001550:	0c2d      	lsrs	r5, r5, #16
 8001552:	46ac      	mov	ip, r5
 8001554:	003d      	movs	r5, r7
 8001556:	4465      	add	r5, ip
 8001558:	9504      	str	r5, [sp, #16]
 800155a:	0c25      	lsrs	r5, r4, #16
 800155c:	0424      	lsls	r4, r4, #16
 800155e:	0c24      	lsrs	r4, r4, #16
 8001560:	46ac      	mov	ip, r5
 8001562:	0025      	movs	r5, r4
 8001564:	4375      	muls	r5, r6
 8001566:	46a8      	mov	r8, r5
 8001568:	4665      	mov	r5, ip
 800156a:	000f      	movs	r7, r1
 800156c:	4369      	muls	r1, r5
 800156e:	4441      	add	r1, r8
 8001570:	4689      	mov	r9, r1
 8001572:	4367      	muls	r7, r4
 8001574:	0c39      	lsrs	r1, r7, #16
 8001576:	4449      	add	r1, r9
 8001578:	436e      	muls	r6, r5
 800157a:	4588      	cmp	r8, r1
 800157c:	d903      	bls.n	8001586 <__aeabi_dmul+0x3b6>
 800157e:	2280      	movs	r2, #128	@ 0x80
 8001580:	0252      	lsls	r2, r2, #9
 8001582:	4690      	mov	r8, r2
 8001584:	4446      	add	r6, r8
 8001586:	0c0d      	lsrs	r5, r1, #16
 8001588:	46a8      	mov	r8, r5
 800158a:	0035      	movs	r5, r6
 800158c:	4445      	add	r5, r8
 800158e:	9505      	str	r5, [sp, #20]
 8001590:	9d03      	ldr	r5, [sp, #12]
 8001592:	043f      	lsls	r7, r7, #16
 8001594:	46a8      	mov	r8, r5
 8001596:	0c3f      	lsrs	r7, r7, #16
 8001598:	0409      	lsls	r1, r1, #16
 800159a:	19c9      	adds	r1, r1, r7
 800159c:	4488      	add	r8, r1
 800159e:	4645      	mov	r5, r8
 80015a0:	9503      	str	r5, [sp, #12]
 80015a2:	4655      	mov	r5, sl
 80015a4:	042e      	lsls	r6, r5, #16
 80015a6:	0c36      	lsrs	r6, r6, #16
 80015a8:	0c2f      	lsrs	r7, r5, #16
 80015aa:	0035      	movs	r5, r6
 80015ac:	4345      	muls	r5, r0
 80015ae:	4378      	muls	r0, r7
 80015b0:	4681      	mov	r9, r0
 80015b2:	0038      	movs	r0, r7
 80015b4:	46a8      	mov	r8, r5
 80015b6:	0c2d      	lsrs	r5, r5, #16
 80015b8:	46aa      	mov	sl, r5
 80015ba:	9a00      	ldr	r2, [sp, #0]
 80015bc:	4350      	muls	r0, r2
 80015be:	4372      	muls	r2, r6
 80015c0:	444a      	add	r2, r9
 80015c2:	4452      	add	r2, sl
 80015c4:	4591      	cmp	r9, r2
 80015c6:	d903      	bls.n	80015d0 <__aeabi_dmul+0x400>
 80015c8:	2580      	movs	r5, #128	@ 0x80
 80015ca:	026d      	lsls	r5, r5, #9
 80015cc:	46a9      	mov	r9, r5
 80015ce:	4448      	add	r0, r9
 80015d0:	0c15      	lsrs	r5, r2, #16
 80015d2:	46a9      	mov	r9, r5
 80015d4:	4645      	mov	r5, r8
 80015d6:	042d      	lsls	r5, r5, #16
 80015d8:	0c2d      	lsrs	r5, r5, #16
 80015da:	46a8      	mov	r8, r5
 80015dc:	4665      	mov	r5, ip
 80015de:	437d      	muls	r5, r7
 80015e0:	0412      	lsls	r2, r2, #16
 80015e2:	4448      	add	r0, r9
 80015e4:	4490      	add	r8, r2
 80015e6:	46a9      	mov	r9, r5
 80015e8:	0032      	movs	r2, r6
 80015ea:	4665      	mov	r5, ip
 80015ec:	4362      	muls	r2, r4
 80015ee:	436e      	muls	r6, r5
 80015f0:	437c      	muls	r4, r7
 80015f2:	0c17      	lsrs	r7, r2, #16
 80015f4:	1936      	adds	r6, r6, r4
 80015f6:	19bf      	adds	r7, r7, r6
 80015f8:	42bc      	cmp	r4, r7
 80015fa:	d903      	bls.n	8001604 <__aeabi_dmul+0x434>
 80015fc:	2480      	movs	r4, #128	@ 0x80
 80015fe:	0264      	lsls	r4, r4, #9
 8001600:	46a4      	mov	ip, r4
 8001602:	44e1      	add	r9, ip
 8001604:	9c02      	ldr	r4, [sp, #8]
 8001606:	9e03      	ldr	r6, [sp, #12]
 8001608:	46a4      	mov	ip, r4
 800160a:	9d05      	ldr	r5, [sp, #20]
 800160c:	4466      	add	r6, ip
 800160e:	428e      	cmp	r6, r1
 8001610:	4189      	sbcs	r1, r1
 8001612:	46ac      	mov	ip, r5
 8001614:	0412      	lsls	r2, r2, #16
 8001616:	043c      	lsls	r4, r7, #16
 8001618:	0c12      	lsrs	r2, r2, #16
 800161a:	18a2      	adds	r2, r4, r2
 800161c:	4462      	add	r2, ip
 800161e:	4249      	negs	r1, r1
 8001620:	1854      	adds	r4, r2, r1
 8001622:	4446      	add	r6, r8
 8001624:	46a4      	mov	ip, r4
 8001626:	4546      	cmp	r6, r8
 8001628:	41a4      	sbcs	r4, r4
 800162a:	4682      	mov	sl, r0
 800162c:	4264      	negs	r4, r4
 800162e:	46a0      	mov	r8, r4
 8001630:	42aa      	cmp	r2, r5
 8001632:	4192      	sbcs	r2, r2
 8001634:	458c      	cmp	ip, r1
 8001636:	4189      	sbcs	r1, r1
 8001638:	44e2      	add	sl, ip
 800163a:	44d0      	add	r8, sl
 800163c:	4249      	negs	r1, r1
 800163e:	4252      	negs	r2, r2
 8001640:	430a      	orrs	r2, r1
 8001642:	45a0      	cmp	r8, r4
 8001644:	41a4      	sbcs	r4, r4
 8001646:	4582      	cmp	sl, r0
 8001648:	4189      	sbcs	r1, r1
 800164a:	4264      	negs	r4, r4
 800164c:	4249      	negs	r1, r1
 800164e:	430c      	orrs	r4, r1
 8001650:	4641      	mov	r1, r8
 8001652:	0c3f      	lsrs	r7, r7, #16
 8001654:	19d2      	adds	r2, r2, r7
 8001656:	1912      	adds	r2, r2, r4
 8001658:	0dcc      	lsrs	r4, r1, #23
 800165a:	9904      	ldr	r1, [sp, #16]
 800165c:	0270      	lsls	r0, r6, #9
 800165e:	4308      	orrs	r0, r1
 8001660:	1e41      	subs	r1, r0, #1
 8001662:	4188      	sbcs	r0, r1
 8001664:	4641      	mov	r1, r8
 8001666:	444a      	add	r2, r9
 8001668:	0df6      	lsrs	r6, r6, #23
 800166a:	0252      	lsls	r2, r2, #9
 800166c:	4330      	orrs	r0, r6
 800166e:	0249      	lsls	r1, r1, #9
 8001670:	4314      	orrs	r4, r2
 8001672:	4308      	orrs	r0, r1
 8001674:	01d2      	lsls	r2, r2, #7
 8001676:	d535      	bpl.n	80016e4 <__aeabi_dmul+0x514>
 8001678:	2201      	movs	r2, #1
 800167a:	0843      	lsrs	r3, r0, #1
 800167c:	4002      	ands	r2, r0
 800167e:	4313      	orrs	r3, r2
 8001680:	07e0      	lsls	r0, r4, #31
 8001682:	4318      	orrs	r0, r3
 8001684:	0864      	lsrs	r4, r4, #1
 8001686:	e634      	b.n	80012f2 <__aeabi_dmul+0x122>
 8001688:	9b00      	ldr	r3, [sp, #0]
 800168a:	46a2      	mov	sl, r4
 800168c:	469b      	mov	fp, r3
 800168e:	4681      	mov	r9, r0
 8001690:	2480      	movs	r4, #128	@ 0x80
 8001692:	4653      	mov	r3, sl
 8001694:	0324      	lsls	r4, r4, #12
 8001696:	431c      	orrs	r4, r3
 8001698:	0324      	lsls	r4, r4, #12
 800169a:	464a      	mov	r2, r9
 800169c:	4b2e      	ldr	r3, [pc, #184]	@ (8001758 <__aeabi_dmul+0x588>)
 800169e:	0b24      	lsrs	r4, r4, #12
 80016a0:	e5ec      	b.n	800127c <__aeabi_dmul+0xac>
 80016a2:	f000 f929 	bl	80018f8 <__clzsi2>
 80016a6:	2315      	movs	r3, #21
 80016a8:	469c      	mov	ip, r3
 80016aa:	4484      	add	ip, r0
 80016ac:	0002      	movs	r2, r0
 80016ae:	4663      	mov	r3, ip
 80016b0:	3220      	adds	r2, #32
 80016b2:	2b1c      	cmp	r3, #28
 80016b4:	dc00      	bgt.n	80016b8 <__aeabi_dmul+0x4e8>
 80016b6:	e684      	b.n	80013c2 <__aeabi_dmul+0x1f2>
 80016b8:	2300      	movs	r3, #0
 80016ba:	4699      	mov	r9, r3
 80016bc:	0023      	movs	r3, r4
 80016be:	3808      	subs	r0, #8
 80016c0:	4083      	lsls	r3, r0
 80016c2:	469a      	mov	sl, r3
 80016c4:	e68e      	b.n	80013e4 <__aeabi_dmul+0x214>
 80016c6:	f000 f917 	bl	80018f8 <__clzsi2>
 80016ca:	0002      	movs	r2, r0
 80016cc:	0003      	movs	r3, r0
 80016ce:	3215      	adds	r2, #21
 80016d0:	3320      	adds	r3, #32
 80016d2:	2a1c      	cmp	r2, #28
 80016d4:	dc00      	bgt.n	80016d8 <__aeabi_dmul+0x508>
 80016d6:	e64e      	b.n	8001376 <__aeabi_dmul+0x1a6>
 80016d8:	0002      	movs	r2, r0
 80016da:	0034      	movs	r4, r6
 80016dc:	3a08      	subs	r2, #8
 80016de:	2000      	movs	r0, #0
 80016e0:	4094      	lsls	r4, r2
 80016e2:	e652      	b.n	800138a <__aeabi_dmul+0x1ba>
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	e604      	b.n	80012f2 <__aeabi_dmul+0x122>
 80016e8:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <__aeabi_dmul+0x58c>)
 80016ea:	0021      	movs	r1, r4
 80016ec:	469c      	mov	ip, r3
 80016ee:	0003      	movs	r3, r0
 80016f0:	9d01      	ldr	r5, [sp, #4]
 80016f2:	40d3      	lsrs	r3, r2
 80016f4:	4465      	add	r5, ip
 80016f6:	40a9      	lsls	r1, r5
 80016f8:	4319      	orrs	r1, r3
 80016fa:	0003      	movs	r3, r0
 80016fc:	40ab      	lsls	r3, r5
 80016fe:	1e58      	subs	r0, r3, #1
 8001700:	4183      	sbcs	r3, r0
 8001702:	4319      	orrs	r1, r3
 8001704:	0008      	movs	r0, r1
 8001706:	40d4      	lsrs	r4, r2
 8001708:	074b      	lsls	r3, r1, #29
 800170a:	d009      	beq.n	8001720 <__aeabi_dmul+0x550>
 800170c:	230f      	movs	r3, #15
 800170e:	400b      	ands	r3, r1
 8001710:	2b04      	cmp	r3, #4
 8001712:	d005      	beq.n	8001720 <__aeabi_dmul+0x550>
 8001714:	1d0b      	adds	r3, r1, #4
 8001716:	428b      	cmp	r3, r1
 8001718:	4180      	sbcs	r0, r0
 800171a:	4240      	negs	r0, r0
 800171c:	1824      	adds	r4, r4, r0
 800171e:	0018      	movs	r0, r3
 8001720:	0223      	lsls	r3, r4, #8
 8001722:	d400      	bmi.n	8001726 <__aeabi_dmul+0x556>
 8001724:	e6d6      	b.n	80014d4 <__aeabi_dmul+0x304>
 8001726:	2301      	movs	r3, #1
 8001728:	2400      	movs	r4, #0
 800172a:	2200      	movs	r2, #0
 800172c:	e5a6      	b.n	800127c <__aeabi_dmul+0xac>
 800172e:	290f      	cmp	r1, #15
 8001730:	d1aa      	bne.n	8001688 <__aeabi_dmul+0x4b8>
 8001732:	2380      	movs	r3, #128	@ 0x80
 8001734:	4652      	mov	r2, sl
 8001736:	031b      	lsls	r3, r3, #12
 8001738:	421a      	tst	r2, r3
 800173a:	d0a9      	beq.n	8001690 <__aeabi_dmul+0x4c0>
 800173c:	421c      	tst	r4, r3
 800173e:	d1a7      	bne.n	8001690 <__aeabi_dmul+0x4c0>
 8001740:	431c      	orrs	r4, r3
 8001742:	9b00      	ldr	r3, [sp, #0]
 8001744:	0002      	movs	r2, r0
 8001746:	469b      	mov	fp, r3
 8001748:	4b03      	ldr	r3, [pc, #12]	@ (8001758 <__aeabi_dmul+0x588>)
 800174a:	e597      	b.n	800127c <__aeabi_dmul+0xac>
 800174c:	2400      	movs	r4, #0
 800174e:	e6c1      	b.n	80014d4 <__aeabi_dmul+0x304>
 8001750:	2400      	movs	r4, #0
 8001752:	4b01      	ldr	r3, [pc, #4]	@ (8001758 <__aeabi_dmul+0x588>)
 8001754:	0022      	movs	r2, r4
 8001756:	e591      	b.n	800127c <__aeabi_dmul+0xac>
 8001758:	000007ff 	.word	0x000007ff
 800175c:	0000041e 	.word	0x0000041e

08001760 <__aeabi_f2d>:
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	0242      	lsls	r2, r0, #9
 8001764:	0043      	lsls	r3, r0, #1
 8001766:	0fc4      	lsrs	r4, r0, #31
 8001768:	20fe      	movs	r0, #254	@ 0xfe
 800176a:	0e1b      	lsrs	r3, r3, #24
 800176c:	1c59      	adds	r1, r3, #1
 800176e:	0a55      	lsrs	r5, r2, #9
 8001770:	4208      	tst	r0, r1
 8001772:	d00c      	beq.n	800178e <__aeabi_f2d+0x2e>
 8001774:	21e0      	movs	r1, #224	@ 0xe0
 8001776:	0089      	lsls	r1, r1, #2
 8001778:	468c      	mov	ip, r1
 800177a:	076d      	lsls	r5, r5, #29
 800177c:	0b12      	lsrs	r2, r2, #12
 800177e:	4463      	add	r3, ip
 8001780:	051b      	lsls	r3, r3, #20
 8001782:	4313      	orrs	r3, r2
 8001784:	07e4      	lsls	r4, r4, #31
 8001786:	4323      	orrs	r3, r4
 8001788:	0028      	movs	r0, r5
 800178a:	0019      	movs	r1, r3
 800178c:	bd70      	pop	{r4, r5, r6, pc}
 800178e:	2b00      	cmp	r3, #0
 8001790:	d114      	bne.n	80017bc <__aeabi_f2d+0x5c>
 8001792:	2d00      	cmp	r5, #0
 8001794:	d01b      	beq.n	80017ce <__aeabi_f2d+0x6e>
 8001796:	0028      	movs	r0, r5
 8001798:	f000 f8ae 	bl	80018f8 <__clzsi2>
 800179c:	280a      	cmp	r0, #10
 800179e:	dc1c      	bgt.n	80017da <__aeabi_f2d+0x7a>
 80017a0:	230b      	movs	r3, #11
 80017a2:	002a      	movs	r2, r5
 80017a4:	1a1b      	subs	r3, r3, r0
 80017a6:	40da      	lsrs	r2, r3
 80017a8:	0003      	movs	r3, r0
 80017aa:	3315      	adds	r3, #21
 80017ac:	409d      	lsls	r5, r3
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <__aeabi_f2d+0x88>)
 80017b0:	0312      	lsls	r2, r2, #12
 80017b2:	1a1b      	subs	r3, r3, r0
 80017b4:	055b      	lsls	r3, r3, #21
 80017b6:	0b12      	lsrs	r2, r2, #12
 80017b8:	0d5b      	lsrs	r3, r3, #21
 80017ba:	e7e1      	b.n	8001780 <__aeabi_f2d+0x20>
 80017bc:	2d00      	cmp	r5, #0
 80017be:	d009      	beq.n	80017d4 <__aeabi_f2d+0x74>
 80017c0:	0b13      	lsrs	r3, r2, #12
 80017c2:	2280      	movs	r2, #128	@ 0x80
 80017c4:	0312      	lsls	r2, r2, #12
 80017c6:	431a      	orrs	r2, r3
 80017c8:	076d      	lsls	r5, r5, #29
 80017ca:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <__aeabi_f2d+0x8c>)
 80017cc:	e7d8      	b.n	8001780 <__aeabi_f2d+0x20>
 80017ce:	2300      	movs	r3, #0
 80017d0:	2200      	movs	r2, #0
 80017d2:	e7d5      	b.n	8001780 <__aeabi_f2d+0x20>
 80017d4:	2200      	movs	r2, #0
 80017d6:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <__aeabi_f2d+0x8c>)
 80017d8:	e7d2      	b.n	8001780 <__aeabi_f2d+0x20>
 80017da:	0003      	movs	r3, r0
 80017dc:	002a      	movs	r2, r5
 80017de:	3b0b      	subs	r3, #11
 80017e0:	409a      	lsls	r2, r3
 80017e2:	2500      	movs	r5, #0
 80017e4:	e7e3      	b.n	80017ae <__aeabi_f2d+0x4e>
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	00000389 	.word	0x00000389
 80017ec:	000007ff 	.word	0x000007ff

080017f0 <__aeabi_d2f>:
 80017f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f2:	004b      	lsls	r3, r1, #1
 80017f4:	030f      	lsls	r7, r1, #12
 80017f6:	0d5b      	lsrs	r3, r3, #21
 80017f8:	4c3b      	ldr	r4, [pc, #236]	@ (80018e8 <__aeabi_d2f+0xf8>)
 80017fa:	0f45      	lsrs	r5, r0, #29
 80017fc:	b083      	sub	sp, #12
 80017fe:	0a7f      	lsrs	r7, r7, #9
 8001800:	1c5e      	adds	r6, r3, #1
 8001802:	432f      	orrs	r7, r5
 8001804:	9000      	str	r0, [sp, #0]
 8001806:	9101      	str	r1, [sp, #4]
 8001808:	0fca      	lsrs	r2, r1, #31
 800180a:	00c5      	lsls	r5, r0, #3
 800180c:	4226      	tst	r6, r4
 800180e:	d00b      	beq.n	8001828 <__aeabi_d2f+0x38>
 8001810:	4936      	ldr	r1, [pc, #216]	@ (80018ec <__aeabi_d2f+0xfc>)
 8001812:	185c      	adds	r4, r3, r1
 8001814:	2cfe      	cmp	r4, #254	@ 0xfe
 8001816:	dd13      	ble.n	8001840 <__aeabi_d2f+0x50>
 8001818:	20ff      	movs	r0, #255	@ 0xff
 800181a:	2300      	movs	r3, #0
 800181c:	05c0      	lsls	r0, r0, #23
 800181e:	4318      	orrs	r0, r3
 8001820:	07d2      	lsls	r2, r2, #31
 8001822:	4310      	orrs	r0, r2
 8001824:	b003      	add	sp, #12
 8001826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <__aeabi_d2f+0x42>
 800182c:	2000      	movs	r0, #0
 800182e:	2300      	movs	r3, #0
 8001830:	e7f4      	b.n	800181c <__aeabi_d2f+0x2c>
 8001832:	433d      	orrs	r5, r7
 8001834:	d0f0      	beq.n	8001818 <__aeabi_d2f+0x28>
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	03db      	lsls	r3, r3, #15
 800183a:	20ff      	movs	r0, #255	@ 0xff
 800183c:	433b      	orrs	r3, r7
 800183e:	e7ed      	b.n	800181c <__aeabi_d2f+0x2c>
 8001840:	2c00      	cmp	r4, #0
 8001842:	dd14      	ble.n	800186e <__aeabi_d2f+0x7e>
 8001844:	9b00      	ldr	r3, [sp, #0]
 8001846:	00ff      	lsls	r7, r7, #3
 8001848:	019b      	lsls	r3, r3, #6
 800184a:	1e58      	subs	r0, r3, #1
 800184c:	4183      	sbcs	r3, r0
 800184e:	0f69      	lsrs	r1, r5, #29
 8001850:	433b      	orrs	r3, r7
 8001852:	430b      	orrs	r3, r1
 8001854:	0759      	lsls	r1, r3, #29
 8001856:	d041      	beq.n	80018dc <__aeabi_d2f+0xec>
 8001858:	210f      	movs	r1, #15
 800185a:	4019      	ands	r1, r3
 800185c:	2904      	cmp	r1, #4
 800185e:	d028      	beq.n	80018b2 <__aeabi_d2f+0xc2>
 8001860:	3304      	adds	r3, #4
 8001862:	0159      	lsls	r1, r3, #5
 8001864:	d525      	bpl.n	80018b2 <__aeabi_d2f+0xc2>
 8001866:	3401      	adds	r4, #1
 8001868:	2300      	movs	r3, #0
 800186a:	b2e0      	uxtb	r0, r4
 800186c:	e7d6      	b.n	800181c <__aeabi_d2f+0x2c>
 800186e:	0021      	movs	r1, r4
 8001870:	3117      	adds	r1, #23
 8001872:	dbdb      	blt.n	800182c <__aeabi_d2f+0x3c>
 8001874:	2180      	movs	r1, #128	@ 0x80
 8001876:	201e      	movs	r0, #30
 8001878:	0409      	lsls	r1, r1, #16
 800187a:	4339      	orrs	r1, r7
 800187c:	1b00      	subs	r0, r0, r4
 800187e:	281f      	cmp	r0, #31
 8001880:	dd1b      	ble.n	80018ba <__aeabi_d2f+0xca>
 8001882:	2602      	movs	r6, #2
 8001884:	4276      	negs	r6, r6
 8001886:	1b34      	subs	r4, r6, r4
 8001888:	000e      	movs	r6, r1
 800188a:	40e6      	lsrs	r6, r4
 800188c:	0034      	movs	r4, r6
 800188e:	2820      	cmp	r0, #32
 8001890:	d004      	beq.n	800189c <__aeabi_d2f+0xac>
 8001892:	4817      	ldr	r0, [pc, #92]	@ (80018f0 <__aeabi_d2f+0x100>)
 8001894:	4684      	mov	ip, r0
 8001896:	4463      	add	r3, ip
 8001898:	4099      	lsls	r1, r3
 800189a:	430d      	orrs	r5, r1
 800189c:	002b      	movs	r3, r5
 800189e:	1e59      	subs	r1, r3, #1
 80018a0:	418b      	sbcs	r3, r1
 80018a2:	4323      	orrs	r3, r4
 80018a4:	0759      	lsls	r1, r3, #29
 80018a6:	d015      	beq.n	80018d4 <__aeabi_d2f+0xe4>
 80018a8:	210f      	movs	r1, #15
 80018aa:	2400      	movs	r4, #0
 80018ac:	4019      	ands	r1, r3
 80018ae:	2904      	cmp	r1, #4
 80018b0:	d117      	bne.n	80018e2 <__aeabi_d2f+0xf2>
 80018b2:	019b      	lsls	r3, r3, #6
 80018b4:	0a5b      	lsrs	r3, r3, #9
 80018b6:	b2e0      	uxtb	r0, r4
 80018b8:	e7b0      	b.n	800181c <__aeabi_d2f+0x2c>
 80018ba:	4c0e      	ldr	r4, [pc, #56]	@ (80018f4 <__aeabi_d2f+0x104>)
 80018bc:	191c      	adds	r4, r3, r4
 80018be:	002b      	movs	r3, r5
 80018c0:	40a5      	lsls	r5, r4
 80018c2:	40c3      	lsrs	r3, r0
 80018c4:	40a1      	lsls	r1, r4
 80018c6:	1e68      	subs	r0, r5, #1
 80018c8:	4185      	sbcs	r5, r0
 80018ca:	4329      	orrs	r1, r5
 80018cc:	430b      	orrs	r3, r1
 80018ce:	2400      	movs	r4, #0
 80018d0:	0759      	lsls	r1, r3, #29
 80018d2:	d1c1      	bne.n	8001858 <__aeabi_d2f+0x68>
 80018d4:	019b      	lsls	r3, r3, #6
 80018d6:	2000      	movs	r0, #0
 80018d8:	0a5b      	lsrs	r3, r3, #9
 80018da:	e79f      	b.n	800181c <__aeabi_d2f+0x2c>
 80018dc:	08db      	lsrs	r3, r3, #3
 80018de:	b2e0      	uxtb	r0, r4
 80018e0:	e79c      	b.n	800181c <__aeabi_d2f+0x2c>
 80018e2:	3304      	adds	r3, #4
 80018e4:	e7e5      	b.n	80018b2 <__aeabi_d2f+0xc2>
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	000007fe 	.word	0x000007fe
 80018ec:	fffffc80 	.word	0xfffffc80
 80018f0:	fffffca2 	.word	0xfffffca2
 80018f4:	fffffc82 	.word	0xfffffc82

080018f8 <__clzsi2>:
 80018f8:	211c      	movs	r1, #28
 80018fa:	2301      	movs	r3, #1
 80018fc:	041b      	lsls	r3, r3, #16
 80018fe:	4298      	cmp	r0, r3
 8001900:	d301      	bcc.n	8001906 <__clzsi2+0xe>
 8001902:	0c00      	lsrs	r0, r0, #16
 8001904:	3910      	subs	r1, #16
 8001906:	0a1b      	lsrs	r3, r3, #8
 8001908:	4298      	cmp	r0, r3
 800190a:	d301      	bcc.n	8001910 <__clzsi2+0x18>
 800190c:	0a00      	lsrs	r0, r0, #8
 800190e:	3908      	subs	r1, #8
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	4298      	cmp	r0, r3
 8001914:	d301      	bcc.n	800191a <__clzsi2+0x22>
 8001916:	0900      	lsrs	r0, r0, #4
 8001918:	3904      	subs	r1, #4
 800191a:	a202      	add	r2, pc, #8	@ (adr r2, 8001924 <__clzsi2+0x2c>)
 800191c:	5c10      	ldrb	r0, [r2, r0]
 800191e:	1840      	adds	r0, r0, r1
 8001920:	4770      	bx	lr
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	02020304 	.word	0x02020304
 8001928:	01010101 	.word	0x01010101
	...

08001934 <IntInit>:
 *  5 - dtc
 *  6 - temp
 *  7 - vref
*/

void IntInit() {
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	TS_CAL1 = *((uint16_t *) 0x1FFF7568);
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <IntInit+0x4c>)
 800193a:	881a      	ldrh	r2, [r3, #0]
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <IntInit+0x50>)
 800193e:	801a      	strh	r2, [r3, #0]
	VREFINT = *((uint16_t *) 0x1FFF756A);
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <IntInit+0x54>)
 8001942:	881a      	ldrh	r2, [r3, #0]
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <IntInit+0x58>)
 8001946:	801a      	strh	r2, [r3, #0]

	HAL_ADCEx_Calibration_Start(&hadc1);
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <IntInit+0x5c>)
 800194a:	0018      	movs	r0, r3
 800194c:	f002 f81e 	bl	800398c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_buf, 8);
 8001950:	4910      	ldr	r1, [pc, #64]	@ (8001994 <IntInit+0x60>)
 8001952:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <IntInit+0x5c>)
 8001954:	2208      	movs	r2, #8
 8001956:	0018      	movs	r0, r3
 8001958:	f001 fba0 	bl	800309c <HAL_ADC_Start_DMA>

	HAL_Delay(100);
 800195c:	2064      	movs	r0, #100	@ 0x64
 800195e:	f001 f87b 	bl	8002a58 <HAL_Delay>

	HAL_TIM_Base_Start_IT(&htim17); // start main loop timer
 8001962:	4b0d      	ldr	r3, [pc, #52]	@ (8001998 <IntInit+0x64>)
 8001964:	0018      	movs	r0, r3
 8001966:	f003 fb75 	bl	8005054 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16); // start output timer
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <IntInit+0x68>)
 800196c:	0018      	movs	r0, r3
 800196e:	f003 fb71 	bl	8005054 <HAL_TIM_Base_Start_IT>

	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8001972:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <IntInit+0x6c>)
 8001974:	0018      	movs	r0, r3
 8001976:	f004 fae2 	bl	8005f3e <HAL_HalfDuplex_EnableTransmitter>
}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	1fff7568 	.word	0x1fff7568
 8001984:	20000028 	.word	0x20000028
 8001988:	1fff756a 	.word	0x1fff756a
 800198c:	2000002a 	.word	0x2000002a
 8001990:	20000068 	.word	0x20000068
 8001994:	20000038 	.word	0x20000038
 8001998:	200001c0 	.word	0x200001c0
 800199c:	20000174 	.word	0x20000174
 80019a0:	2000020c 	.word	0x2000020c

080019a4 <MainLoop>:
float bps = 0;
float dtc = 0;
float ontime = 0;
float ontime_limited = 0;

void MainLoop() {
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0

	if (HAL_GetTick() - lasttick >= 100) {
 80019aa:	f001 f84b 	bl	8002a44 <HAL_GetTick>
 80019ae:	0002      	movs	r2, r0
 80019b0:	4bd9      	ldr	r3, [pc, #868]	@ (8001d18 <MainLoop+0x374>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b63      	cmp	r3, #99	@ 0x63
 80019b8:	d905      	bls.n	80019c6 <MainLoop+0x22>
		HAL_GPIO_WritePin(BLED_GPIO_Port, BLED_Pin, GPIO_PIN_RESET);
 80019ba:	4bd8      	ldr	r3, [pc, #864]	@ (8001d1c <MainLoop+0x378>)
 80019bc:	2200      	movs	r2, #0
 80019be:	2180      	movs	r1, #128	@ 0x80
 80019c0:	0018      	movs	r0, r3
 80019c2:	f002 fe72 	bl	80046aa <HAL_GPIO_WritePin>
	}

	float VREF_NEW = 3.0f * (float) VREFINT / (float) adc_buf[7];
 80019c6:	4bd6      	ldr	r3, [pc, #856]	@ (8001d20 <MainLoop+0x37c>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7ff fbbe 	bl	800114c <__aeabi_ui2f>
 80019d0:	1c03      	adds	r3, r0, #0
 80019d2:	49d4      	ldr	r1, [pc, #848]	@ (8001d24 <MainLoop+0x380>)
 80019d4:	1c18      	adds	r0, r3, #0
 80019d6:	f7ff f8b7 	bl	8000b48 <__aeabi_fmul>
 80019da:	1c03      	adds	r3, r0, #0
 80019dc:	1c1c      	adds	r4, r3, #0
 80019de:	4bd2      	ldr	r3, [pc, #840]	@ (8001d28 <MainLoop+0x384>)
 80019e0:	89db      	ldrh	r3, [r3, #14]
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7ff fbb2 	bl	800114c <__aeabi_ui2f>
 80019e8:	1c03      	adds	r3, r0, #0
 80019ea:	1c19      	adds	r1, r3, #0
 80019ec:	1c20      	adds	r0, r4, #0
 80019ee:	f7fe fec5 	bl	800077c <__aeabi_fdiv>
 80019f2:	1c03      	adds	r3, r0, #0
 80019f4:	60fb      	str	r3, [r7, #12]
	if (VREF_NEW < 5.0f && VREF_NEW > 2.0f) {
 80019f6:	49cd      	ldr	r1, [pc, #820]	@ (8001d2c <MainLoop+0x388>)
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f7fe fd0d 	bl	8000418 <__aeabi_fcmplt>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d016      	beq.n	8001a30 <MainLoop+0x8c>
 8001a02:	2180      	movs	r1, #128	@ 0x80
 8001a04:	05c9      	lsls	r1, r1, #23
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7fe fd1a 	bl	8000440 <__aeabi_fcmpgt>
 8001a0c:	1e03      	subs	r3, r0, #0
 8001a0e:	d00f      	beq.n	8001a30 <MainLoop+0x8c>
		VREF = (VREF + VREF_NEW) / 2.0f;
 8001a10:	4bc7      	ldr	r3, [pc, #796]	@ (8001d30 <MainLoop+0x38c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	1c18      	adds	r0, r3, #0
 8001a18:	f7fe fd26 	bl	8000468 <__aeabi_fadd>
 8001a1c:	1c03      	adds	r3, r0, #0
 8001a1e:	2180      	movs	r1, #128	@ 0x80
 8001a20:	05c9      	lsls	r1, r1, #23
 8001a22:	1c18      	adds	r0, r3, #0
 8001a24:	f7fe feaa 	bl	800077c <__aeabi_fdiv>
 8001a28:	1c03      	adds	r3, r0, #0
 8001a2a:	1c1a      	adds	r2, r3, #0
 8001a2c:	4bc0      	ldr	r3, [pc, #768]	@ (8001d30 <MainLoop+0x38c>)
 8001a2e:	601a      	str	r2, [r3, #0]
	}

	float sense_data = (float) adc_buf[6] * VREF / 3.0f;
 8001a30:	4bbd      	ldr	r3, [pc, #756]	@ (8001d28 <MainLoop+0x384>)
 8001a32:	899b      	ldrh	r3, [r3, #12]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff fb89 	bl	800114c <__aeabi_ui2f>
 8001a3a:	1c02      	adds	r2, r0, #0
 8001a3c:	4bbc      	ldr	r3, [pc, #752]	@ (8001d30 <MainLoop+0x38c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	1c19      	adds	r1, r3, #0
 8001a42:	1c10      	adds	r0, r2, #0
 8001a44:	f7ff f880 	bl	8000b48 <__aeabi_fmul>
 8001a48:	1c03      	adds	r3, r0, #0
 8001a4a:	49b6      	ldr	r1, [pc, #728]	@ (8001d24 <MainLoop+0x380>)
 8001a4c:	1c18      	adds	r0, r3, #0
 8001a4e:	f7fe fe95 	bl	800077c <__aeabi_fdiv>
 8001a52:	1c03      	adds	r3, r0, #0
 8001a54:	60bb      	str	r3, [r7, #8]
	float avg_slope_code = 2.53f * 4096.0f / 3000.0f;
 8001a56:	4bb7      	ldr	r3, [pc, #732]	@ (8001d34 <MainLoop+0x390>)
 8001a58:	607b      	str	r3, [r7, #4]
	temp = (temp + ((sense_data - (float) TS_CAL1) / avg_slope_code - 30.0f)) / 2.0f;
 8001a5a:	4bb7      	ldr	r3, [pc, #732]	@ (8001d38 <MainLoop+0x394>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f7ff fb74 	bl	800114c <__aeabi_ui2f>
 8001a64:	1c03      	adds	r3, r0, #0
 8001a66:	1c19      	adds	r1, r3, #0
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f7ff f9ab 	bl	8000dc4 <__aeabi_fsub>
 8001a6e:	1c03      	adds	r3, r0, #0
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	1c18      	adds	r0, r3, #0
 8001a74:	f7fe fe82 	bl	800077c <__aeabi_fdiv>
 8001a78:	1c03      	adds	r3, r0, #0
 8001a7a:	49b0      	ldr	r1, [pc, #704]	@ (8001d3c <MainLoop+0x398>)
 8001a7c:	1c18      	adds	r0, r3, #0
 8001a7e:	f7ff f9a1 	bl	8000dc4 <__aeabi_fsub>
 8001a82:	1c03      	adds	r3, r0, #0
 8001a84:	1c1a      	adds	r2, r3, #0
 8001a86:	4bae      	ldr	r3, [pc, #696]	@ (8001d40 <MainLoop+0x39c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	1c19      	adds	r1, r3, #0
 8001a8c:	1c10      	adds	r0, r2, #0
 8001a8e:	f7fe fceb 	bl	8000468 <__aeabi_fadd>
 8001a92:	1c03      	adds	r3, r0, #0
 8001a94:	2180      	movs	r1, #128	@ 0x80
 8001a96:	05c9      	lsls	r1, r1, #23
 8001a98:	1c18      	adds	r0, r3, #0
 8001a9a:	f7fe fe6f 	bl	800077c <__aeabi_fdiv>
 8001a9e:	1c03      	adds	r3, r0, #0
 8001aa0:	1c1a      	adds	r2, r3, #0
 8001aa2:	4ba7      	ldr	r3, [pc, #668]	@ (8001d40 <MainLoop+0x39c>)
 8001aa4:	601a      	str	r2, [r3, #0]

	batt_v = (batt_v + 2.0f * (float) adc_buf[0] * VREF / 4096.0f) / 2.0f;
 8001aa6:	4ba0      	ldr	r3, [pc, #640]	@ (8001d28 <MainLoop+0x384>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f7ff fb4e 	bl	800114c <__aeabi_ui2f>
 8001ab0:	1c03      	adds	r3, r0, #0
 8001ab2:	1c19      	adds	r1, r3, #0
 8001ab4:	1c18      	adds	r0, r3, #0
 8001ab6:	f7fe fcd7 	bl	8000468 <__aeabi_fadd>
 8001aba:	1c03      	adds	r3, r0, #0
 8001abc:	1c1a      	adds	r2, r3, #0
 8001abe:	4b9c      	ldr	r3, [pc, #624]	@ (8001d30 <MainLoop+0x38c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	1c19      	adds	r1, r3, #0
 8001ac4:	1c10      	adds	r0, r2, #0
 8001ac6:	f7ff f83f 	bl	8000b48 <__aeabi_fmul>
 8001aca:	1c03      	adds	r3, r0, #0
 8001acc:	218b      	movs	r1, #139	@ 0x8b
 8001ace:	05c9      	lsls	r1, r1, #23
 8001ad0:	1c18      	adds	r0, r3, #0
 8001ad2:	f7fe fe53 	bl	800077c <__aeabi_fdiv>
 8001ad6:	1c03      	adds	r3, r0, #0
 8001ad8:	1c1a      	adds	r2, r3, #0
 8001ada:	4b9a      	ldr	r3, [pc, #616]	@ (8001d44 <MainLoop+0x3a0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	1c19      	adds	r1, r3, #0
 8001ae0:	1c10      	adds	r0, r2, #0
 8001ae2:	f7fe fcc1 	bl	8000468 <__aeabi_fadd>
 8001ae6:	1c03      	adds	r3, r0, #0
 8001ae8:	2180      	movs	r1, #128	@ 0x80
 8001aea:	05c9      	lsls	r1, r1, #23
 8001aec:	1c18      	adds	r0, r3, #0
 8001aee:	f7fe fe45 	bl	800077c <__aeabi_fdiv>
 8001af2:	1c03      	adds	r3, r0, #0
 8001af4:	1c1a      	adds	r2, r3, #0
 8001af6:	4b93      	ldr	r3, [pc, #588]	@ (8001d44 <MainLoop+0x3a0>)
 8001af8:	601a      	str	r2, [r3, #0]
	if (batt_v < SHUTDOWN_THRESHOLD) {
 8001afa:	4b92      	ldr	r3, [pc, #584]	@ (8001d44 <MainLoop+0x3a0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4989      	ldr	r1, [pc, #548]	@ (8001d24 <MainLoop+0x380>)
 8001b00:	1c18      	adds	r0, r3, #0
 8001b02:	f7fe fc89 	bl	8000418 <__aeabi_fcmplt>
 8001b06:	1e03      	subs	r3, r0, #0
 8001b08:	d007      	beq.n	8001b1a <MainLoop+0x176>
		HAL_GPIO_WritePin(BATT_LED_GPIO_Port, BATT_LED_Pin, GPIO_PIN_RESET);
 8001b0a:	23a0      	movs	r3, #160	@ 0xa0
 8001b0c:	05db      	lsls	r3, r3, #23
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2101      	movs	r1, #1
 8001b12:	0018      	movs	r0, r3
 8001b14:	f002 fdc9 	bl	80046aa <HAL_GPIO_WritePin>
 8001b18:	e006      	b.n	8001b28 <MainLoop+0x184>

		//HAL_PWREx_EnterSHUTDOWNMode(); // TODO: test
	} else {
		HAL_GPIO_WritePin(BATT_LED_GPIO_Port, BATT_LED_Pin, GPIO_PIN_SET);
 8001b1a:	23a0      	movs	r3, #160	@ 0xa0
 8001b1c:	05db      	lsls	r3, r3, #23
 8001b1e:	2201      	movs	r2, #1
 8001b20:	2101      	movs	r1, #1
 8001b22:	0018      	movs	r0, r3
 8001b24:	f002 fdc1 	bl	80046aa <HAL_GPIO_WritePin>
	}

	ontime = (float) adc_buf[1] / 4095.0f * MAX_OT; // ms
 8001b28:	4b7f      	ldr	r3, [pc, #508]	@ (8001d28 <MainLoop+0x384>)
 8001b2a:	885b      	ldrh	r3, [r3, #2]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff fb0d 	bl	800114c <__aeabi_ui2f>
 8001b32:	1c03      	adds	r3, r0, #0
 8001b34:	4984      	ldr	r1, [pc, #528]	@ (8001d48 <MainLoop+0x3a4>)
 8001b36:	1c18      	adds	r0, r3, #0
 8001b38:	f7fe fe20 	bl	800077c <__aeabi_fdiv>
 8001b3c:	1c03      	adds	r3, r0, #0
 8001b3e:	4983      	ldr	r1, [pc, #524]	@ (8001d4c <MainLoop+0x3a8>)
 8001b40:	1c18      	adds	r0, r3, #0
 8001b42:	f7ff f801 	bl	8000b48 <__aeabi_fmul>
 8001b46:	1c03      	adds	r3, r0, #0
 8001b48:	1c1a      	adds	r2, r3, #0
 8001b4a:	4b81      	ldr	r3, [pc, #516]	@ (8001d50 <MainLoop+0x3ac>)
 8001b4c:	601a      	str	r2, [r3, #0]
	bps = (float) adc_buf[2] / 4095.0f * MAX_BPS; // bps
 8001b4e:	4b76      	ldr	r3, [pc, #472]	@ (8001d28 <MainLoop+0x384>)
 8001b50:	889b      	ldrh	r3, [r3, #4]
 8001b52:	0018      	movs	r0, r3
 8001b54:	f7ff fafa 	bl	800114c <__aeabi_ui2f>
 8001b58:	1c03      	adds	r3, r0, #0
 8001b5a:	497b      	ldr	r1, [pc, #492]	@ (8001d48 <MainLoop+0x3a4>)
 8001b5c:	1c18      	adds	r0, r3, #0
 8001b5e:	f7fe fe0d 	bl	800077c <__aeabi_fdiv>
 8001b62:	1c03      	adds	r3, r0, #0
 8001b64:	4979      	ldr	r1, [pc, #484]	@ (8001d4c <MainLoop+0x3a8>)
 8001b66:	1c18      	adds	r0, r3, #0
 8001b68:	f7fe ffee 	bl	8000b48 <__aeabi_fmul>
 8001b6c:	1c03      	adds	r3, r0, #0
 8001b6e:	1c1a      	adds	r2, r3, #0
 8001b70:	4b78      	ldr	r3, [pc, #480]	@ (8001d54 <MainLoop+0x3b0>)
 8001b72:	601a      	str	r2, [r3, #0]
	v_max = (float) adc_buf[3] / 4095.0f * MAX_V; // V
 8001b74:	4b6c      	ldr	r3, [pc, #432]	@ (8001d28 <MainLoop+0x384>)
 8001b76:	88db      	ldrh	r3, [r3, #6]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7ff fae7 	bl	800114c <__aeabi_ui2f>
 8001b7e:	1c03      	adds	r3, r0, #0
 8001b80:	4971      	ldr	r1, [pc, #452]	@ (8001d48 <MainLoop+0x3a4>)
 8001b82:	1c18      	adds	r0, r3, #0
 8001b84:	f7fe fdfa 	bl	800077c <__aeabi_fdiv>
 8001b88:	1c03      	adds	r3, r0, #0
 8001b8a:	4973      	ldr	r1, [pc, #460]	@ (8001d58 <MainLoop+0x3b4>)
 8001b8c:	1c18      	adds	r0, r3, #0
 8001b8e:	f7fe ffdb 	bl	8000b48 <__aeabi_fmul>
 8001b92:	1c03      	adds	r3, r0, #0
 8001b94:	1c1a      	adds	r2, r3, #0
 8001b96:	4b71      	ldr	r3, [pc, #452]	@ (8001d5c <MainLoop+0x3b8>)
 8001b98:	601a      	str	r2, [r3, #0]
	ocd = (float) adc_buf[4] / 4095.0f * MAX_OCD; // A
 8001b9a:	4b63      	ldr	r3, [pc, #396]	@ (8001d28 <MainLoop+0x384>)
 8001b9c:	891b      	ldrh	r3, [r3, #8]
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f7ff fad4 	bl	800114c <__aeabi_ui2f>
 8001ba4:	1c03      	adds	r3, r0, #0
 8001ba6:	4968      	ldr	r1, [pc, #416]	@ (8001d48 <MainLoop+0x3a4>)
 8001ba8:	1c18      	adds	r0, r3, #0
 8001baa:	f7fe fde7 	bl	800077c <__aeabi_fdiv>
 8001bae:	1c03      	adds	r3, r0, #0
 8001bb0:	496b      	ldr	r1, [pc, #428]	@ (8001d60 <MainLoop+0x3bc>)
 8001bb2:	1c18      	adds	r0, r3, #0
 8001bb4:	f7fe ffc8 	bl	8000b48 <__aeabi_fmul>
 8001bb8:	1c03      	adds	r3, r0, #0
 8001bba:	1c1a      	adds	r2, r3, #0
 8001bbc:	4b69      	ldr	r3, [pc, #420]	@ (8001d64 <MainLoop+0x3c0>)
 8001bbe:	601a      	str	r2, [r3, #0]
	dtc = (float) adc_buf[5] / 4095.0f * MAX_DTC; // %
 8001bc0:	4b59      	ldr	r3, [pc, #356]	@ (8001d28 <MainLoop+0x384>)
 8001bc2:	895b      	ldrh	r3, [r3, #10]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff fac1 	bl	800114c <__aeabi_ui2f>
 8001bca:	1c03      	adds	r3, r0, #0
 8001bcc:	495e      	ldr	r1, [pc, #376]	@ (8001d48 <MainLoop+0x3a4>)
 8001bce:	1c18      	adds	r0, r3, #0
 8001bd0:	f7fe fdd4 	bl	800077c <__aeabi_fdiv>
 8001bd4:	1c03      	adds	r3, r0, #0
 8001bd6:	1c18      	adds	r0, r3, #0
 8001bd8:	f7ff fdc2 	bl	8001760 <__aeabi_f2d>
 8001bdc:	4a62      	ldr	r2, [pc, #392]	@ (8001d68 <MainLoop+0x3c4>)
 8001bde:	4b63      	ldr	r3, [pc, #396]	@ (8001d6c <MainLoop+0x3c8>)
 8001be0:	f7ff faf6 	bl	80011d0 <__aeabi_dmul>
 8001be4:	0002      	movs	r2, r0
 8001be6:	000b      	movs	r3, r1
 8001be8:	0010      	movs	r0, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	f7ff fe00 	bl	80017f0 <__aeabi_d2f>
 8001bf0:	1c02      	adds	r2, r0, #0
 8001bf2:	4b5f      	ldr	r3, [pc, #380]	@ (8001d70 <MainLoop+0x3cc>)
 8001bf4:	601a      	str	r2, [r3, #0]

	if ((ontime / 1000.0f) * bps > dtc) { // ontime * bps = dtc
 8001bf6:	4b56      	ldr	r3, [pc, #344]	@ (8001d50 <MainLoop+0x3ac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	495e      	ldr	r1, [pc, #376]	@ (8001d74 <MainLoop+0x3d0>)
 8001bfc:	1c18      	adds	r0, r3, #0
 8001bfe:	f7fe fdbd 	bl	800077c <__aeabi_fdiv>
 8001c02:	1c03      	adds	r3, r0, #0
 8001c04:	1c1a      	adds	r2, r3, #0
 8001c06:	4b53      	ldr	r3, [pc, #332]	@ (8001d54 <MainLoop+0x3b0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	1c19      	adds	r1, r3, #0
 8001c0c:	1c10      	adds	r0, r2, #0
 8001c0e:	f7fe ff9b 	bl	8000b48 <__aeabi_fmul>
 8001c12:	1c03      	adds	r3, r0, #0
 8001c14:	1c1a      	adds	r2, r3, #0
 8001c16:	4b56      	ldr	r3, [pc, #344]	@ (8001d70 <MainLoop+0x3cc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	1c19      	adds	r1, r3, #0
 8001c1c:	1c10      	adds	r0, r2, #0
 8001c1e:	f7fe fc0f 	bl	8000440 <__aeabi_fcmpgt>
 8001c22:	1e03      	subs	r3, r0, #0
 8001c24:	d011      	beq.n	8001c4a <MainLoop+0x2a6>
		ontime_limited = (dtc / bps) * 1000.0f;
 8001c26:	4b52      	ldr	r3, [pc, #328]	@ (8001d70 <MainLoop+0x3cc>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d54 <MainLoop+0x3b0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	1c19      	adds	r1, r3, #0
 8001c30:	1c10      	adds	r0, r2, #0
 8001c32:	f7fe fda3 	bl	800077c <__aeabi_fdiv>
 8001c36:	1c03      	adds	r3, r0, #0
 8001c38:	494e      	ldr	r1, [pc, #312]	@ (8001d74 <MainLoop+0x3d0>)
 8001c3a:	1c18      	adds	r0, r3, #0
 8001c3c:	f7fe ff84 	bl	8000b48 <__aeabi_fmul>
 8001c40:	1c03      	adds	r3, r0, #0
 8001c42:	1c1a      	adds	r2, r3, #0
 8001c44:	4b4c      	ldr	r3, [pc, #304]	@ (8001d78 <MainLoop+0x3d4>)
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e003      	b.n	8001c52 <MainLoop+0x2ae>
	} else {
		ontime_limited = ontime;
 8001c4a:	4b41      	ldr	r3, [pc, #260]	@ (8001d50 <MainLoop+0x3ac>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d78 <MainLoop+0x3d4>)
 8001c50:	601a      	str	r2, [r3, #0]
	}

	float timer_freq = 24000000.0 / 65536.0;
 8001c52:	4b4a      	ldr	r3, [pc, #296]	@ (8001d7c <MainLoop+0x3d8>)
 8001c54:	603b      	str	r3, [r7, #0]
	if (bps > 0) {
 8001c56:	4b3f      	ldr	r3, [pc, #252]	@ (8001d54 <MainLoop+0x3b0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	1c18      	adds	r0, r3, #0
 8001c5e:	f7fe fbef 	bl	8000440 <__aeabi_fcmpgt>
 8001c62:	1e03      	subs	r3, r0, #0
 8001c64:	d00d      	beq.n	8001c82 <MainLoop+0x2de>
		TIM16->ARR = (int) (timer_freq / bps); // timer_freq / arr = triggering frequency
 8001c66:	4b3b      	ldr	r3, [pc, #236]	@ (8001d54 <MainLoop+0x3b0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	1c19      	adds	r1, r3, #0
 8001c6c:	6838      	ldr	r0, [r7, #0]
 8001c6e:	f7fe fd85 	bl	800077c <__aeabi_fdiv>
 8001c72:	1c03      	adds	r3, r0, #0
 8001c74:	1c18      	adds	r0, r3, #0
 8001c76:	f7ff fa49 	bl	800110c <__aeabi_f2iz>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	4b40      	ldr	r3, [pc, #256]	@ (8001d80 <MainLoop+0x3dc>)
 8001c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c80:	e002      	b.n	8001c88 <MainLoop+0x2e4>
	} else {
		TIM16->ARR = 65535;
 8001c82:	4b3f      	ldr	r3, [pc, #252]	@ (8001d80 <MainLoop+0x3dc>)
 8001c84:	4a3f      	ldr	r2, [pc, #252]	@ (8001d84 <MainLoop+0x3e0>)
 8001c86:	62da      	str	r2, [r3, #44]	@ 0x2c
	}


	if (HAL_GPIO_ReadPin(SW_SINGLESHOT_GPIO_Port, SW_SINGLESHOT_Pin) == GPIO_PIN_SET) {
 8001c88:	23a0      	movs	r3, #160	@ 0xa0
 8001c8a:	05db      	lsls	r3, r3, #23
 8001c8c:	2110      	movs	r1, #16
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f002 fcee 	bl	8004670 <HAL_GPIO_ReadPin>
 8001c94:	0003      	movs	r3, r0
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d10d      	bne.n	8001cb6 <MainLoop+0x312>
		if (mode == SS) {
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d88 <MainLoop+0x3e4>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <MainLoop+0x30c>
			mode = CN;
 8001ca2:	4b39      	ldr	r3, [pc, #228]	@ (8001d88 <MainLoop+0x3e4>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
			state = OFF;
 8001ca8:	4b38      	ldr	r3, [pc, #224]	@ (8001d8c <MainLoop+0x3e8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
 8001cae:	e002      	b.n	8001cb6 <MainLoop+0x312>
		} else {
			mode = SS;
 8001cb0:	4b35      	ldr	r3, [pc, #212]	@ (8001d88 <MainLoop+0x3e4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (HAL_GPIO_ReadPin(FIRE_GPIO_Port, FIRE_Pin) == GPIO_PIN_SET) {
 8001cb6:	23a0      	movs	r3, #160	@ 0xa0
 8001cb8:	05db      	lsls	r3, r3, #23
 8001cba:	2120      	movs	r1, #32
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f002 fcd7 	bl	8004670 <HAL_GPIO_ReadPin>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d120      	bne.n	8001d0a <MainLoop+0x366>
		if (button == OFF) { // pressed
 8001cc8:	4b31      	ldr	r3, [pc, #196]	@ (8001d90 <MainLoop+0x3ec>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d118      	bne.n	8001d02 <MainLoop+0x35e>
			if (mode == SS) {
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d88 <MainLoop+0x3e4>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d109      	bne.n	8001cec <MainLoop+0x348>
				SendPulse(ontime, v_max, ocd);
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <MainLoop+0x3ac>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d5c <MainLoop+0x3b8>)
 8001cde:	6819      	ldr	r1, [r3, #0]
 8001ce0:	4b20      	ldr	r3, [pc, #128]	@ (8001d64 <MainLoop+0x3c0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	1c1a      	adds	r2, r3, #0
 8001ce6:	f000 f891 	bl	8001e0c <SendPulse>
 8001cea:	e00a      	b.n	8001d02 <MainLoop+0x35e>
			} else {
				if (state == OFF) {
 8001cec:	4b27      	ldr	r3, [pc, #156]	@ (8001d8c <MainLoop+0x3e8>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d103      	bne.n	8001cfc <MainLoop+0x358>
					state = ON;
 8001cf4:	4b25      	ldr	r3, [pc, #148]	@ (8001d8c <MainLoop+0x3e8>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
 8001cfa:	e002      	b.n	8001d02 <MainLoop+0x35e>
				} else {
					state = OFF;
 8001cfc:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <MainLoop+0x3e8>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		button = ON;
 8001d02:	4b23      	ldr	r3, [pc, #140]	@ (8001d90 <MainLoop+0x3ec>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
	} else {
		button = OFF;
	}
}
 8001d08:	e002      	b.n	8001d10 <MainLoop+0x36c>
		button = OFF;
 8001d0a:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <MainLoop+0x3ec>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
}
 8001d10:	46c0      	nop			@ (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b005      	add	sp, #20
 8001d16:	bd90      	pop	{r4, r7, pc}
 8001d18:	20000048 	.word	0x20000048
 8001d1c:	50000400 	.word	0x50000400
 8001d20:	2000002a 	.word	0x2000002a
 8001d24:	40400000 	.word	0x40400000
 8001d28:	20000038 	.word	0x20000038
 8001d2c:	40a00000 	.word	0x40a00000
 8001d30:	2000002c 	.word	0x2000002c
 8001d34:	405d1324 	.word	0x405d1324
 8001d38:	20000028 	.word	0x20000028
 8001d3c:	41f00000 	.word	0x41f00000
 8001d40:	20000030 	.word	0x20000030
 8001d44:	20000034 	.word	0x20000034
 8001d48:	457ff000 	.word	0x457ff000
 8001d4c:	41a00000 	.word	0x41a00000
 8001d50:	20000060 	.word	0x20000060
 8001d54:	20000058 	.word	0x20000058
 8001d58:	43aa0000 	.word	0x43aa0000
 8001d5c:	20000050 	.word	0x20000050
 8001d60:	43480000 	.word	0x43480000
 8001d64:	20000054 	.word	0x20000054
 8001d68:	66666666 	.word	0x66666666
 8001d6c:	3fd66666 	.word	0x3fd66666
 8001d70:	2000005c 	.word	0x2000005c
 8001d74:	447a0000 	.word	0x447a0000
 8001d78:	20000064 	.word	0x20000064
 8001d7c:	43b71b00 	.word	0x43b71b00
 8001d80:	40014400 	.word	0x40014400
 8001d84:	0000ffff 	.word	0x0000ffff
 8001d88:	2000004c 	.word	0x2000004c
 8001d8c:	2000004d 	.word	0x2000004d
 8001d90:	2000004e 	.word	0x2000004e

08001d94 <float_to_u32>:

uint32_t float_to_u32(float input) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	return  *((uint32_t *) &input);
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <FillBuffer>:

void FillBuffer(uint8_t * buffer, uint32_t value, uint8_t position) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	1dfb      	adds	r3, r7, #7
 8001db4:	701a      	strb	r2, [r3, #0]
	buffer[position * 4 + 0] = (value >> 0) & 0xFF;
 8001db6:	1dfb      	adds	r3, r7, #7
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	189b      	adds	r3, r3, r2
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	701a      	strb	r2, [r3, #0]
	buffer[position * 4 + 1] = (value >> 8) & 0xFF;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	0a19      	lsrs	r1, r3, #8
 8001dcc:	1dfb      	adds	r3, r7, #7
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	18d3      	adds	r3, r2, r3
 8001dd8:	b2ca      	uxtb	r2, r1
 8001dda:	701a      	strb	r2, [r3, #0]
	buffer[position * 4 + 2] = (value >> 16) & 0xFF;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	0c19      	lsrs	r1, r3, #16
 8001de0:	1dfb      	adds	r3, r7, #7
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	3302      	adds	r3, #2
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	18d3      	adds	r3, r2, r3
 8001dec:	b2ca      	uxtb	r2, r1
 8001dee:	701a      	strb	r2, [r3, #0]
	buffer[position * 4 + 3] = (value >> 24) & 0xFF;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	0e19      	lsrs	r1, r3, #24
 8001df4:	1dfb      	adds	r3, r7, #7
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	3303      	adds	r3, #3
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	18d3      	adds	r3, r2, r3
 8001e00:	b2ca      	uxtb	r2, r1
 8001e02:	701a      	strb	r2, [r3, #0]
}
 8001e04:	46c0      	nop			@ (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b004      	add	sp, #16
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <SendPulse>:

void SendPulse(float OT, float Vmax, float OCD) {
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b089      	sub	sp, #36	@ 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
	uint8_t buffer[12]; // 3 values, 4 bytes per value
	FillBuffer(buffer, float_to_u32(OT), 0);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1c18      	adds	r0, r3, #0
 8001e1c:	f7ff ffba 	bl	8001d94 <float_to_u32>
 8001e20:	0001      	movs	r1, r0
 8001e22:	2414      	movs	r4, #20
 8001e24:	193b      	adds	r3, r7, r4
 8001e26:	2200      	movs	r2, #0
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7ff ffbd 	bl	8001da8 <FillBuffer>
	FillBuffer(buffer, float_to_u32(Vmax), 1);
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1c18      	adds	r0, r3, #0
 8001e32:	f7ff ffaf 	bl	8001d94 <float_to_u32>
 8001e36:	0001      	movs	r1, r0
 8001e38:	193b      	adds	r3, r7, r4
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7ff ffb3 	bl	8001da8 <FillBuffer>
	FillBuffer(buffer, float_to_u32(OCD), 2);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	1c18      	adds	r0, r3, #0
 8001e46:	f7ff ffa5 	bl	8001d94 <float_to_u32>
 8001e4a:	0001      	movs	r1, r0
 8001e4c:	193b      	adds	r3, r7, r4
 8001e4e:	2202      	movs	r2, #2
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff ffa9 	bl	8001da8 <FillBuffer>
	HAL_UART_Transmit(&huart1, buffer, 12, 1000);
 8001e56:	23fa      	movs	r3, #250	@ 0xfa
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	1939      	adds	r1, r7, r4
 8001e5c:	4809      	ldr	r0, [pc, #36]	@ (8001e84 <SendPulse+0x78>)
 8001e5e:	220c      	movs	r2, #12
 8001e60:	f003 fc68 	bl	8005734 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(BLED_GPIO_Port, BLED_Pin, GPIO_PIN_SET);
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <SendPulse+0x7c>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	2180      	movs	r1, #128	@ 0x80
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f002 fc1d 	bl	80046aa <HAL_GPIO_WritePin>
	lasttick = HAL_GetTick();
 8001e70:	f000 fde8 	bl	8002a44 <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <SendPulse+0x80>)
 8001e78:	601a      	str	r2, [r3, #0]
}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b009      	add	sp, #36	@ 0x24
 8001e80:	bd90      	pop	{r4, r7, pc}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	2000020c 	.word	0x2000020c
 8001e88:	50000400 	.word	0x50000400
 8001e8c:	20000048 	.word	0x20000048

08001e90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	if (htim == &htim17) {
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d101      	bne.n	8001ea4 <HAL_TIM_PeriodElapsedCallback+0x14>
		MainLoop();
 8001ea0:	f7ff fd80 	bl	80019a4 <MainLoop>
	}
	if (htim == &htim16) {
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d110      	bne.n	8001ece <HAL_TIM_PeriodElapsedCallback+0x3e>
		if (mode == CN && state == ON) {
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d10c      	bne.n	8001ece <HAL_TIM_PeriodElapsedCallback+0x3e>
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d108      	bne.n	8001ece <HAL_TIM_PeriodElapsedCallback+0x3e>
			SendPulse(ontime_limited, v_max, ocd);
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	1c1a      	adds	r2, r3, #0
 8001eca:	f7ff ff9f 	bl	8001e0c <SendPulse>
		}
	}
}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b002      	add	sp, #8
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	200001c0 	.word	0x200001c0
 8001edc:	20000174 	.word	0x20000174
 8001ee0:	2000004c 	.word	0x2000004c
 8001ee4:	2000004d 	.word	0x2000004d
 8001ee8:	20000064 	.word	0x20000064
 8001eec:	20000050 	.word	0x20000050
 8001ef0:	20000054 	.word	0x20000054

08001ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef8:	f000 fd31 	bl	800295e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001efc:	f000 f814 	bl	8001f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f00:	f000 fa78 	bl	80023f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f04:	f000 fa58 	bl	80023b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001f08:	f000 f84c 	bl	8001fa4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001f0c:	f000 f9ca 	bl	80022a4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001f10:	f000 fa1e 	bl	8002350 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8001f14:	f000 f99e 	bl	8002254 <MX_TIM17_Init>
  MX_TIM16_Init();
 8001f18:	f000 f974 	bl	8002204 <MX_TIM16_Init>
  MX_TIM3_Init();
 8001f1c:	f000 f932 	bl	8002184 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  IntInit();
 8001f20:	f7ff fd08 	bl	8001934 <IntInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f24:	46c0      	nop			@ (mov r8, r8)
 8001f26:	e7fd      	b.n	8001f24 <main+0x30>

08001f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b08d      	sub	sp, #52	@ 0x34
 8001f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f2e:	2414      	movs	r4, #20
 8001f30:	193b      	adds	r3, r7, r4
 8001f32:	0018      	movs	r0, r3
 8001f34:	231c      	movs	r3, #28
 8001f36:	001a      	movs	r2, r3
 8001f38:	2100      	movs	r1, #0
 8001f3a:	f004 fd7b 	bl	8006a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f3e:	003b      	movs	r3, r7
 8001f40:	0018      	movs	r0, r3
 8001f42:	2314      	movs	r3, #20
 8001f44:	001a      	movs	r2, r3
 8001f46:	2100      	movs	r1, #0
 8001f48:	f004 fd74 	bl	8006a34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f4c:	193b      	adds	r3, r7, r4
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f52:	193b      	adds	r3, r7, r4
 8001f54:	2280      	movs	r2, #128	@ 0x80
 8001f56:	0252      	lsls	r2, r2, #9
 8001f58:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f5a:	193b      	adds	r3, r7, r4
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f002 fbc1 	bl	80046e4 <HAL_RCC_OscConfig>
 8001f62:	1e03      	subs	r3, r0, #0
 8001f64:	d001      	beq.n	8001f6a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8001f66:	f000 fabf 	bl	80024e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f6a:	003b      	movs	r3, r7
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001f70:	003b      	movs	r3, r7
 8001f72:	2201      	movs	r2, #1
 8001f74:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f76:	003b      	movs	r3, r7
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001f7c:	003b      	movs	r3, r7
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001f82:	003b      	movs	r3, r7
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f88:	003b      	movs	r3, r7
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f002 fd8d 	bl	8004aac <HAL_RCC_ClockConfig>
 8001f92:	1e03      	subs	r3, r0, #0
 8001f94:	d001      	beq.n	8001f9a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001f96:	f000 faa7 	bl	80024e8 <Error_Handler>
  }
}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b00d      	add	sp, #52	@ 0x34
 8001fa0:	bd90      	pop	{r4, r7, pc}
	...

08001fa4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	0018      	movs	r0, r3
 8001fae:	230c      	movs	r3, #12
 8001fb0:	001a      	movs	r2, r3
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	f004 fd3e 	bl	8006a34 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fb8:	4b68      	ldr	r3, [pc, #416]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8001fba:	4a69      	ldr	r2, [pc, #420]	@ (8002160 <MX_ADC1_Init+0x1bc>)
 8001fbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001fbe:	4b67      	ldr	r3, [pc, #412]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8001fc0:	22c0      	movs	r2, #192	@ 0xc0
 8001fc2:	0612      	lsls	r2, r2, #24
 8001fc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fc6:	4b65      	ldr	r3, [pc, #404]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fcc:	4b63      	ldr	r3, [pc, #396]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fd2:	4b62      	ldr	r3, [pc, #392]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8001fd4:	2280      	movs	r2, #128	@ 0x80
 8001fd6:	0392      	lsls	r2, r2, #14
 8001fd8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001fda:	4b60      	ldr	r3, [pc, #384]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8001fdc:	2208      	movs	r2, #8
 8001fde:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fec:	4b5b      	ldr	r3, [pc, #364]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 8;
 8001ff2:	4b5a      	ldr	r3, [pc, #360]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ff8:	4b58      	ldr	r3, [pc, #352]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ffe:	4b57      	ldr	r3, [pc, #348]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8002000:	2200      	movs	r2, #0
 8002002:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002004:	4b55      	ldr	r3, [pc, #340]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8002006:	222c      	movs	r2, #44	@ 0x2c
 8002008:	2101      	movs	r1, #1
 800200a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800200c:	4b53      	ldr	r3, [pc, #332]	@ (800215c <MX_ADC1_Init+0x1b8>)
 800200e:	2200      	movs	r2, #0
 8002010:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8002012:	4b52      	ldr	r3, [pc, #328]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8002014:	2207      	movs	r2, #7
 8002016:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8002018:	4b50      	ldr	r3, [pc, #320]	@ (800215c <MX_ADC1_Init+0x1b8>)
 800201a:	2207      	movs	r2, #7
 800201c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 800201e:	4b4f      	ldr	r3, [pc, #316]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8002020:	223c      	movs	r2, #60	@ 0x3c
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 8002026:	4b4d      	ldr	r3, [pc, #308]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8002028:	2214      	movs	r2, #20
 800202a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 800202c:	4b4b      	ldr	r3, [pc, #300]	@ (800215c <MX_ADC1_Init+0x1b8>)
 800202e:	22c0      	movs	r2, #192	@ 0xc0
 8002030:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002032:	4b4a      	ldr	r3, [pc, #296]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8002034:	2200      	movs	r2, #0
 8002036:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002038:	4b48      	ldr	r3, [pc, #288]	@ (800215c <MX_ADC1_Init+0x1b8>)
 800203a:	2200      	movs	r2, #0
 800203c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800203e:	4b47      	ldr	r3, [pc, #284]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8002040:	0018      	movs	r0, r3
 8002042:	f000 fe85 	bl	8002d50 <HAL_ADC_Init>
 8002046:	1e03      	subs	r3, r0, #0
 8002048:	d001      	beq.n	800204e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800204a:	f000 fa4d 	bl	80024e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	4a44      	ldr	r2, [pc, #272]	@ (8002164 <MX_ADC1_Init+0x1c0>)
 8002052:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	2200      	movs	r2, #0
 8002058:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002060:	1d3a      	adds	r2, r7, #4
 8002062:	4b3e      	ldr	r3, [pc, #248]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8002064:	0011      	movs	r1, r2
 8002066:	0018      	movs	r0, r3
 8002068:	f001 f8be 	bl	80031e8 <HAL_ADC_ConfigChannel>
 800206c:	1e03      	subs	r3, r0, #0
 800206e:	d001      	beq.n	8002074 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8002070:	f000 fa3a 	bl	80024e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	4a3c      	ldr	r2, [pc, #240]	@ (8002168 <MX_ADC1_Init+0x1c4>)
 8002078:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	2204      	movs	r2, #4
 800207e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002080:	1d3a      	adds	r2, r7, #4
 8002082:	4b36      	ldr	r3, [pc, #216]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8002084:	0011      	movs	r1, r2
 8002086:	0018      	movs	r0, r3
 8002088:	f001 f8ae 	bl	80031e8 <HAL_ADC_ConfigChannel>
 800208c:	1e03      	subs	r3, r0, #0
 800208e:	d001      	beq.n	8002094 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8002090:	f000 fa2a 	bl	80024e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	4a35      	ldr	r2, [pc, #212]	@ (800216c <MX_ADC1_Init+0x1c8>)
 8002098:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	2208      	movs	r2, #8
 800209e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020a0:	1d3a      	adds	r2, r7, #4
 80020a2:	4b2e      	ldr	r3, [pc, #184]	@ (800215c <MX_ADC1_Init+0x1b8>)
 80020a4:	0011      	movs	r1, r2
 80020a6:	0018      	movs	r0, r3
 80020a8:	f001 f89e 	bl	80031e8 <HAL_ADC_ConfigChannel>
 80020ac:	1e03      	subs	r3, r0, #0
 80020ae:	d001      	beq.n	80020b4 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80020b0:	f000 fa1a 	bl	80024e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	4a2e      	ldr	r2, [pc, #184]	@ (8002170 <MX_ADC1_Init+0x1cc>)
 80020b8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	220c      	movs	r2, #12
 80020be:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c0:	1d3a      	adds	r2, r7, #4
 80020c2:	4b26      	ldr	r3, [pc, #152]	@ (800215c <MX_ADC1_Init+0x1b8>)
 80020c4:	0011      	movs	r1, r2
 80020c6:	0018      	movs	r0, r3
 80020c8:	f001 f88e 	bl	80031e8 <HAL_ADC_ConfigChannel>
 80020cc:	1e03      	subs	r3, r0, #0
 80020ce:	d001      	beq.n	80020d4 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 80020d0:	f000 fa0a 	bl	80024e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	4a27      	ldr	r2, [pc, #156]	@ (8002174 <MX_ADC1_Init+0x1d0>)
 80020d8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	2210      	movs	r2, #16
 80020de:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e0:	1d3a      	adds	r2, r7, #4
 80020e2:	4b1e      	ldr	r3, [pc, #120]	@ (800215c <MX_ADC1_Init+0x1b8>)
 80020e4:	0011      	movs	r1, r2
 80020e6:	0018      	movs	r0, r3
 80020e8:	f001 f87e 	bl	80031e8 <HAL_ADC_ConfigChannel>
 80020ec:	1e03      	subs	r3, r0, #0
 80020ee:	d001      	beq.n	80020f4 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80020f0:	f000 f9fa 	bl	80024e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	4a20      	ldr	r2, [pc, #128]	@ (8002178 <MX_ADC1_Init+0x1d4>)
 80020f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	2214      	movs	r2, #20
 80020fe:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002100:	1d3a      	adds	r2, r7, #4
 8002102:	4b16      	ldr	r3, [pc, #88]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8002104:	0011      	movs	r1, r2
 8002106:	0018      	movs	r0, r3
 8002108:	f001 f86e 	bl	80031e8 <HAL_ADC_ConfigChannel>
 800210c:	1e03      	subs	r3, r0, #0
 800210e:	d001      	beq.n	8002114 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002110:	f000 f9ea 	bl	80024e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	4a19      	ldr	r2, [pc, #100]	@ (800217c <MX_ADC1_Init+0x1d8>)
 8002118:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2218      	movs	r2, #24
 800211e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002120:	1d3a      	adds	r2, r7, #4
 8002122:	4b0e      	ldr	r3, [pc, #56]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8002124:	0011      	movs	r1, r2
 8002126:	0018      	movs	r0, r3
 8002128:	f001 f85e 	bl	80031e8 <HAL_ADC_ConfigChannel>
 800212c:	1e03      	subs	r3, r0, #0
 800212e:	d001      	beq.n	8002134 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8002130:	f000 f9da 	bl	80024e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002134:	1d3b      	adds	r3, r7, #4
 8002136:	4a12      	ldr	r2, [pc, #72]	@ (8002180 <MX_ADC1_Init+0x1dc>)
 8002138:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	221c      	movs	r2, #28
 800213e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002140:	1d3a      	adds	r2, r7, #4
 8002142:	4b06      	ldr	r3, [pc, #24]	@ (800215c <MX_ADC1_Init+0x1b8>)
 8002144:	0011      	movs	r1, r2
 8002146:	0018      	movs	r0, r3
 8002148:	f001 f84e 	bl	80031e8 <HAL_ADC_ConfigChannel>
 800214c:	1e03      	subs	r3, r0, #0
 800214e:	d001      	beq.n	8002154 <MX_ADC1_Init+0x1b0>
  {
    Error_Handler();
 8002150:	f000 f9ca 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002154:	46c0      	nop			@ (mov r8, r8)
 8002156:	46bd      	mov	sp, r7
 8002158:	b004      	add	sp, #16
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000068 	.word	0x20000068
 8002160:	40012400 	.word	0x40012400
 8002164:	04000002 	.word	0x04000002
 8002168:	18000040 	.word	0x18000040
 800216c:	1c000080 	.word	0x1c000080
 8002170:	20000100 	.word	0x20000100
 8002174:	2c000800 	.word	0x2c000800
 8002178:	30001000 	.word	0x30001000
 800217c:	a4000200 	.word	0xa4000200
 8002180:	a8000400 	.word	0xa8000400

08002184 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	0018      	movs	r0, r3
 800218e:	230c      	movs	r3, #12
 8002190:	001a      	movs	r2, r3
 8002192:	2100      	movs	r1, #0
 8002194:	f004 fc4e 	bl	8006a34 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002198:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <MX_TIM3_Init+0x74>)
 800219a:	4a18      	ldr	r2, [pc, #96]	@ (80021fc <MX_TIM3_Init+0x78>)
 800219c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 800219e:	4b16      	ldr	r3, [pc, #88]	@ (80021f8 <MX_TIM3_Init+0x74>)
 80021a0:	2217      	movs	r2, #23
 80021a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a4:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <MX_TIM3_Init+0x74>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80021aa:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <MX_TIM3_Init+0x74>)
 80021ac:	4a14      	ldr	r2, [pc, #80]	@ (8002200 <MX_TIM3_Init+0x7c>)
 80021ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b0:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <MX_TIM3_Init+0x74>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b6:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <MX_TIM3_Init+0x74>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80021bc:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <MX_TIM3_Init+0x74>)
 80021be:	2108      	movs	r1, #8
 80021c0:	0018      	movs	r0, r3
 80021c2:	f002 ff95 	bl	80050f0 <HAL_TIM_OnePulse_Init>
 80021c6:	1e03      	subs	r3, r0, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM3_Init+0x4a>
  {
    Error_Handler();
 80021ca:	f000 f98d 	bl	80024e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021da:	1d3a      	adds	r2, r7, #4
 80021dc:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <MX_TIM3_Init+0x74>)
 80021de:	0011      	movs	r1, r2
 80021e0:	0018      	movs	r0, r3
 80021e2:	f003 f979 	bl	80054d8 <HAL_TIMEx_MasterConfigSynchronization>
 80021e6:	1e03      	subs	r3, r0, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80021ea:	f000 f97d 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b004      	add	sp, #16
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	20000128 	.word	0x20000128
 80021fc:	40000400 	.word	0x40000400
 8002200:	00002710 	.word	0x00002710

08002204 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002208:	4b0f      	ldr	r3, [pc, #60]	@ (8002248 <MX_TIM16_Init+0x44>)
 800220a:	4a10      	ldr	r2, [pc, #64]	@ (800224c <MX_TIM16_Init+0x48>)
 800220c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 800220e:	4b0e      	ldr	r3, [pc, #56]	@ (8002248 <MX_TIM16_Init+0x44>)
 8002210:	4a0f      	ldr	r2, [pc, #60]	@ (8002250 <MX_TIM16_Init+0x4c>)
 8002212:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002214:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <MX_TIM16_Init+0x44>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800221a:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <MX_TIM16_Init+0x44>)
 800221c:	4a0c      	ldr	r2, [pc, #48]	@ (8002250 <MX_TIM16_Init+0x4c>)
 800221e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002220:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <MX_TIM16_Init+0x44>)
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002226:	4b08      	ldr	r3, [pc, #32]	@ (8002248 <MX_TIM16_Init+0x44>)
 8002228:	2200      	movs	r2, #0
 800222a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <MX_TIM16_Init+0x44>)
 800222e:	2200      	movs	r2, #0
 8002230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002232:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <MX_TIM16_Init+0x44>)
 8002234:	0018      	movs	r0, r3
 8002236:	f002 feb5 	bl	8004fa4 <HAL_TIM_Base_Init>
 800223a:	1e03      	subs	r3, r0, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800223e:	f000 f953 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000174 	.word	0x20000174
 800224c:	40014400 	.word	0x40014400
 8002250:	0000ffff 	.word	0x0000ffff

08002254 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002258:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <MX_TIM17_Init+0x44>)
 800225a:	4a10      	ldr	r2, [pc, #64]	@ (800229c <MX_TIM17_Init+0x48>)
 800225c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 23;
 800225e:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <MX_TIM17_Init+0x44>)
 8002260:	2217      	movs	r2, #23
 8002262:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <MX_TIM17_Init+0x44>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 800226a:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <MX_TIM17_Init+0x44>)
 800226c:	4a0c      	ldr	r2, [pc, #48]	@ (80022a0 <MX_TIM17_Init+0x4c>)
 800226e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002270:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <MX_TIM17_Init+0x44>)
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002276:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <MX_TIM17_Init+0x44>)
 8002278:	2200      	movs	r2, #0
 800227a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <MX_TIM17_Init+0x44>)
 800227e:	2200      	movs	r2, #0
 8002280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002282:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <MX_TIM17_Init+0x44>)
 8002284:	0018      	movs	r0, r3
 8002286:	f002 fe8d 	bl	8004fa4 <HAL_TIM_Base_Init>
 800228a:	1e03      	subs	r3, r0, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800228e:	f000 f92b 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002292:	46c0      	nop			@ (mov r8, r8)
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200001c0 	.word	0x200001c0
 800229c:	40014800 	.word	0x40014800
 80022a0:	00002710 	.word	0x00002710

080022a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022a8:	4b27      	ldr	r3, [pc, #156]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 80022aa:	4a28      	ldr	r2, [pc, #160]	@ (800234c <MX_USART1_UART_Init+0xa8>)
 80022ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022ae:	4b26      	ldr	r3, [pc, #152]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 80022b0:	22e1      	movs	r2, #225	@ 0xe1
 80022b2:	0252      	lsls	r2, r2, #9
 80022b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022b6:	4b24      	ldr	r3, [pc, #144]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022bc:	4b22      	ldr	r3, [pc, #136]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022c2:	4b21      	ldr	r3, [pc, #132]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80022c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 80022ca:	2208      	movs	r2, #8
 80022cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022da:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022e0:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 80022e6:	4b18      	ldr	r3, [pc, #96]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 80022e8:	2203      	movs	r2, #3
 80022ea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80022ec:	4b16      	ldr	r3, [pc, #88]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 80022ee:	2280      	movs	r2, #128	@ 0x80
 80022f0:	0292      	lsls	r2, r2, #10
 80022f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80022f4:	4b14      	ldr	r3, [pc, #80]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 80022f6:	2280      	movs	r2, #128	@ 0x80
 80022f8:	0252      	lsls	r2, r2, #9
 80022fa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80022fc:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 80022fe:	0018      	movs	r0, r3
 8002300:	f003 f9ba 	bl	8005678 <HAL_HalfDuplex_Init>
 8002304:	1e03      	subs	r3, r0, #0
 8002306:	d001      	beq.n	800230c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8002308:	f000 f8ee 	bl	80024e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800230c:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 800230e:	2100      	movs	r1, #0
 8002310:	0018      	movs	r0, r3
 8002312:	f004 faaf 	bl	8006874 <HAL_UARTEx_SetTxFifoThreshold>
 8002316:	1e03      	subs	r3, r0, #0
 8002318:	d001      	beq.n	800231e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800231a:	f000 f8e5 	bl	80024e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800231e:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 8002320:	2100      	movs	r1, #0
 8002322:	0018      	movs	r0, r3
 8002324:	f004 fae6 	bl	80068f4 <HAL_UARTEx_SetRxFifoThreshold>
 8002328:	1e03      	subs	r3, r0, #0
 800232a:	d001      	beq.n	8002330 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800232c:	f000 f8dc 	bl	80024e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <MX_USART1_UART_Init+0xa4>)
 8002332:	0018      	movs	r0, r3
 8002334:	f004 fa64 	bl	8006800 <HAL_UARTEx_DisableFifoMode>
 8002338:	1e03      	subs	r3, r0, #0
 800233a:	d001      	beq.n	8002340 <MX_USART1_UART_Init+0x9c>
  {
    Error_Handler();
 800233c:	f000 f8d4 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002340:	46c0      	nop			@ (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			@ (mov r8, r8)
 8002348:	2000020c 	.word	0x2000020c
 800234c:	40013800 	.word	0x40013800

08002350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002354:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <MX_USART2_UART_Init+0x60>)
 8002356:	4a17      	ldr	r2, [pc, #92]	@ (80023b4 <MX_USART2_UART_Init+0x64>)
 8002358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800235a:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <MX_USART2_UART_Init+0x60>)
 800235c:	22e1      	movs	r2, #225	@ 0xe1
 800235e:	0252      	lsls	r2, r2, #9
 8002360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002362:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <MX_USART2_UART_Init+0x60>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002368:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <MX_USART2_UART_Init+0x60>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800236e:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <MX_USART2_UART_Init+0x60>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002374:	4b0e      	ldr	r3, [pc, #56]	@ (80023b0 <MX_USART2_UART_Init+0x60>)
 8002376:	220c      	movs	r2, #12
 8002378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237a:	4b0d      	ldr	r3, [pc, #52]	@ (80023b0 <MX_USART2_UART_Init+0x60>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <MX_USART2_UART_Init+0x60>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002386:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <MX_USART2_UART_Init+0x60>)
 8002388:	2200      	movs	r2, #0
 800238a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800238c:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <MX_USART2_UART_Init+0x60>)
 800238e:	2200      	movs	r2, #0
 8002390:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002392:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <MX_USART2_UART_Init+0x60>)
 8002394:	2200      	movs	r2, #0
 8002396:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002398:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <MX_USART2_UART_Init+0x60>)
 800239a:	0018      	movs	r0, r3
 800239c:	f003 f916 	bl	80055cc <HAL_UART_Init>
 80023a0:	1e03      	subs	r3, r0, #0
 80023a2:	d001      	beq.n	80023a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80023a4:	f000 f8a0 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023a8:	46c0      	nop			@ (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	200002a0 	.word	0x200002a0
 80023b4:	40004400 	.word	0x40004400

080023b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023be:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <MX_DMA_Init+0x38>)
 80023c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023c2:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <MX_DMA_Init+0x38>)
 80023c4:	2101      	movs	r1, #1
 80023c6:	430a      	orrs	r2, r1
 80023c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80023ca:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <MX_DMA_Init+0x38>)
 80023cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ce:	2201      	movs	r2, #1
 80023d0:	4013      	ands	r3, r2
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	2009      	movs	r0, #9
 80023dc:	f001 fc7c 	bl	8003cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80023e0:	2009      	movs	r0, #9
 80023e2:	f001 fc8e 	bl	8003d02 <HAL_NVIC_EnableIRQ>

}
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b002      	add	sp, #8
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			@ (mov r8, r8)
 80023f0:	40021000 	.word	0x40021000

080023f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b089      	sub	sp, #36	@ 0x24
 80023f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fa:	240c      	movs	r4, #12
 80023fc:	193b      	adds	r3, r7, r4
 80023fe:	0018      	movs	r0, r3
 8002400:	2314      	movs	r3, #20
 8002402:	001a      	movs	r2, r3
 8002404:	2100      	movs	r1, #0
 8002406:	f004 fb15 	bl	8006a34 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240a:	4b35      	ldr	r3, [pc, #212]	@ (80024e0 <MX_GPIO_Init+0xec>)
 800240c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800240e:	4b34      	ldr	r3, [pc, #208]	@ (80024e0 <MX_GPIO_Init+0xec>)
 8002410:	2102      	movs	r1, #2
 8002412:	430a      	orrs	r2, r1
 8002414:	635a      	str	r2, [r3, #52]	@ 0x34
 8002416:	4b32      	ldr	r3, [pc, #200]	@ (80024e0 <MX_GPIO_Init+0xec>)
 8002418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800241a:	2202      	movs	r2, #2
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002422:	4b2f      	ldr	r3, [pc, #188]	@ (80024e0 <MX_GPIO_Init+0xec>)
 8002424:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002426:	4b2e      	ldr	r3, [pc, #184]	@ (80024e0 <MX_GPIO_Init+0xec>)
 8002428:	2104      	movs	r1, #4
 800242a:	430a      	orrs	r2, r1
 800242c:	635a      	str	r2, [r3, #52]	@ 0x34
 800242e:	4b2c      	ldr	r3, [pc, #176]	@ (80024e0 <MX_GPIO_Init+0xec>)
 8002430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002432:	2204      	movs	r2, #4
 8002434:	4013      	ands	r3, r2
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800243a:	4b29      	ldr	r3, [pc, #164]	@ (80024e0 <MX_GPIO_Init+0xec>)
 800243c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800243e:	4b28      	ldr	r3, [pc, #160]	@ (80024e0 <MX_GPIO_Init+0xec>)
 8002440:	2101      	movs	r1, #1
 8002442:	430a      	orrs	r2, r1
 8002444:	635a      	str	r2, [r3, #52]	@ 0x34
 8002446:	4b26      	ldr	r3, [pc, #152]	@ (80024e0 <MX_GPIO_Init+0xec>)
 8002448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244a:	2201      	movs	r2, #1
 800244c:	4013      	ands	r3, r2
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLED_GPIO_Port, BLED_Pin, GPIO_PIN_RESET);
 8002452:	4b24      	ldr	r3, [pc, #144]	@ (80024e4 <MX_GPIO_Init+0xf0>)
 8002454:	2200      	movs	r2, #0
 8002456:	2180      	movs	r1, #128	@ 0x80
 8002458:	0018      	movs	r0, r3
 800245a:	f002 f926 	bl	80046aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BATT_LED_GPIO_Port, BATT_LED_Pin, GPIO_PIN_RESET);
 800245e:	23a0      	movs	r3, #160	@ 0xa0
 8002460:	05db      	lsls	r3, r3, #23
 8002462:	2200      	movs	r2, #0
 8002464:	2101      	movs	r1, #1
 8002466:	0018      	movs	r0, r3
 8002468:	f002 f91f 	bl	80046aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLED_Pin */
  GPIO_InitStruct.Pin = BLED_Pin;
 800246c:	193b      	adds	r3, r7, r4
 800246e:	2280      	movs	r2, #128	@ 0x80
 8002470:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002472:	193b      	adds	r3, r7, r4
 8002474:	2201      	movs	r2, #1
 8002476:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	193b      	adds	r3, r7, r4
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	193b      	adds	r3, r7, r4
 8002480:	2200      	movs	r2, #0
 8002482:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BLED_GPIO_Port, &GPIO_InitStruct);
 8002484:	193b      	adds	r3, r7, r4
 8002486:	4a17      	ldr	r2, [pc, #92]	@ (80024e4 <MX_GPIO_Init+0xf0>)
 8002488:	0019      	movs	r1, r3
 800248a:	0010      	movs	r0, r2
 800248c:	f001 ff86 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : BATT_LED_Pin */
  GPIO_InitStruct.Pin = BATT_LED_Pin;
 8002490:	193b      	adds	r3, r7, r4
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002496:	193b      	adds	r3, r7, r4
 8002498:	2201      	movs	r2, #1
 800249a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	193b      	adds	r3, r7, r4
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	193b      	adds	r3, r7, r4
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BATT_LED_GPIO_Port, &GPIO_InitStruct);
 80024a8:	193a      	adds	r2, r7, r4
 80024aa:	23a0      	movs	r3, #160	@ 0xa0
 80024ac:	05db      	lsls	r3, r3, #23
 80024ae:	0011      	movs	r1, r2
 80024b0:	0018      	movs	r0, r3
 80024b2:	f001 ff73 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SINGLESHOT_Pin FIRE_Pin */
  GPIO_InitStruct.Pin = SW_SINGLESHOT_Pin|FIRE_Pin;
 80024b6:	193b      	adds	r3, r7, r4
 80024b8:	2230      	movs	r2, #48	@ 0x30
 80024ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024bc:	193b      	adds	r3, r7, r4
 80024be:	2200      	movs	r2, #0
 80024c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	193b      	adds	r3, r7, r4
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c8:	193a      	adds	r2, r7, r4
 80024ca:	23a0      	movs	r3, #160	@ 0xa0
 80024cc:	05db      	lsls	r3, r3, #23
 80024ce:	0011      	movs	r1, r2
 80024d0:	0018      	movs	r0, r3
 80024d2:	f001 ff63 	bl	800439c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	46bd      	mov	sp, r7
 80024da:	b009      	add	sp, #36	@ 0x24
 80024dc:	bd90      	pop	{r4, r7, pc}
 80024de:	46c0      	nop			@ (mov r8, r8)
 80024e0:	40021000 	.word	0x40021000
 80024e4:	50000400 	.word	0x50000400

080024e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024ec:	b672      	cpsid	i
}
 80024ee:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024f0:	46c0      	nop			@ (mov r8, r8)
 80024f2:	e7fd      	b.n	80024f0 <Error_Handler+0x8>

080024f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002538 <HAL_MspInit+0x44>)
 80024fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002538 <HAL_MspInit+0x44>)
 8002500:	2101      	movs	r1, #1
 8002502:	430a      	orrs	r2, r1
 8002504:	641a      	str	r2, [r3, #64]	@ 0x40
 8002506:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <HAL_MspInit+0x44>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	2201      	movs	r2, #1
 800250c:	4013      	ands	r3, r2
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <HAL_MspInit+0x44>)
 8002514:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002516:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <HAL_MspInit+0x44>)
 8002518:	2180      	movs	r1, #128	@ 0x80
 800251a:	0549      	lsls	r1, r1, #21
 800251c:	430a      	orrs	r2, r1
 800251e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002520:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <HAL_MspInit+0x44>)
 8002522:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002524:	2380      	movs	r3, #128	@ 0x80
 8002526:	055b      	lsls	r3, r3, #21
 8002528:	4013      	ands	r3, r2
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	40021000 	.word	0x40021000

0800253c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b091      	sub	sp, #68	@ 0x44
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	232c      	movs	r3, #44	@ 0x2c
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	0018      	movs	r0, r3
 800254a:	2314      	movs	r3, #20
 800254c:	001a      	movs	r2, r3
 800254e:	2100      	movs	r1, #0
 8002550:	f004 fa70 	bl	8006a34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002554:	2410      	movs	r4, #16
 8002556:	193b      	adds	r3, r7, r4
 8002558:	0018      	movs	r0, r3
 800255a:	231c      	movs	r3, #28
 800255c:	001a      	movs	r2, r3
 800255e:	2100      	movs	r1, #0
 8002560:	f004 fa68 	bl	8006a34 <memset>
  if(hadc->Instance==ADC1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a35      	ldr	r2, [pc, #212]	@ (8002640 <HAL_ADC_MspInit+0x104>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d163      	bne.n	8002636 <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800256e:	193b      	adds	r3, r7, r4
 8002570:	2220      	movs	r2, #32
 8002572:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002574:	193b      	adds	r3, r7, r4
 8002576:	2200      	movs	r2, #0
 8002578:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800257a:	193b      	adds	r3, r7, r4
 800257c:	0018      	movs	r0, r3
 800257e:	f002 fc25 	bl	8004dcc <HAL_RCCEx_PeriphCLKConfig>
 8002582:	1e03      	subs	r3, r0, #0
 8002584:	d001      	beq.n	800258a <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 8002586:	f7ff ffaf 	bl	80024e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800258a:	4b2e      	ldr	r3, [pc, #184]	@ (8002644 <HAL_ADC_MspInit+0x108>)
 800258c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800258e:	4b2d      	ldr	r3, [pc, #180]	@ (8002644 <HAL_ADC_MspInit+0x108>)
 8002590:	2180      	movs	r1, #128	@ 0x80
 8002592:	0349      	lsls	r1, r1, #13
 8002594:	430a      	orrs	r2, r1
 8002596:	641a      	str	r2, [r3, #64]	@ 0x40
 8002598:	4b2a      	ldr	r3, [pc, #168]	@ (8002644 <HAL_ADC_MspInit+0x108>)
 800259a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800259c:	2380      	movs	r3, #128	@ 0x80
 800259e:	035b      	lsls	r3, r3, #13
 80025a0:	4013      	ands	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a6:	4b27      	ldr	r3, [pc, #156]	@ (8002644 <HAL_ADC_MspInit+0x108>)
 80025a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025aa:	4b26      	ldr	r3, [pc, #152]	@ (8002644 <HAL_ADC_MspInit+0x108>)
 80025ac:	2101      	movs	r1, #1
 80025ae:	430a      	orrs	r2, r1
 80025b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80025b2:	4b24      	ldr	r3, [pc, #144]	@ (8002644 <HAL_ADC_MspInit+0x108>)
 80025b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b6:	2201      	movs	r2, #1
 80025b8:	4013      	ands	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> ADC1_IN7
    PA8     ------> ADC1_IN8
    PA11 [PA9]     ------> ADC1_IN11
    PA12 [PA10]     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = BATT_SENSE_Pin|E_OT_Pin|E_BPS_Pin|E_VMAX_Pin
 80025be:	212c      	movs	r1, #44	@ 0x2c
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	4a21      	ldr	r2, [pc, #132]	@ (8002648 <HAL_ADC_MspInit+0x10c>)
 80025c4:	601a      	str	r2, [r3, #0]
                          |I_OCD_Pin|I_DTC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2203      	movs	r2, #3
 80025ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d2:	187a      	adds	r2, r7, r1
 80025d4:	23a0      	movs	r3, #160	@ 0xa0
 80025d6:	05db      	lsls	r3, r3, #23
 80025d8:	0011      	movs	r1, r2
 80025da:	0018      	movs	r0, r3
 80025dc:	f001 fede 	bl	800439c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80025e0:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <HAL_ADC_MspInit+0x110>)
 80025e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002650 <HAL_ADC_MspInit+0x114>)
 80025e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80025e6:	4b19      	ldr	r3, [pc, #100]	@ (800264c <HAL_ADC_MspInit+0x110>)
 80025e8:	2205      	movs	r2, #5
 80025ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025ec:	4b17      	ldr	r3, [pc, #92]	@ (800264c <HAL_ADC_MspInit+0x110>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f2:	4b16      	ldr	r3, [pc, #88]	@ (800264c <HAL_ADC_MspInit+0x110>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025f8:	4b14      	ldr	r3, [pc, #80]	@ (800264c <HAL_ADC_MspInit+0x110>)
 80025fa:	2280      	movs	r2, #128	@ 0x80
 80025fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025fe:	4b13      	ldr	r3, [pc, #76]	@ (800264c <HAL_ADC_MspInit+0x110>)
 8002600:	2280      	movs	r2, #128	@ 0x80
 8002602:	0052      	lsls	r2, r2, #1
 8002604:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002606:	4b11      	ldr	r3, [pc, #68]	@ (800264c <HAL_ADC_MspInit+0x110>)
 8002608:	2280      	movs	r2, #128	@ 0x80
 800260a:	00d2      	lsls	r2, r2, #3
 800260c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800260e:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <HAL_ADC_MspInit+0x110>)
 8002610:	2220      	movs	r2, #32
 8002612:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002614:	4b0d      	ldr	r3, [pc, #52]	@ (800264c <HAL_ADC_MspInit+0x110>)
 8002616:	2200      	movs	r2, #0
 8002618:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800261a:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <HAL_ADC_MspInit+0x110>)
 800261c:	0018      	movs	r0, r3
 800261e:	f001 fb8d 	bl	8003d3c <HAL_DMA_Init>
 8002622:	1e03      	subs	r3, r0, #0
 8002624:	d001      	beq.n	800262a <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8002626:	f7ff ff5f 	bl	80024e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a07      	ldr	r2, [pc, #28]	@ (800264c <HAL_ADC_MspInit+0x110>)
 800262e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002630:	4b06      	ldr	r3, [pc, #24]	@ (800264c <HAL_ADC_MspInit+0x110>)
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b011      	add	sp, #68	@ 0x44
 800263c:	bd90      	pop	{r4, r7, pc}
 800263e:	46c0      	nop			@ (mov r8, r8)
 8002640:	40012400 	.word	0x40012400
 8002644:	40021000 	.word	0x40021000
 8002648:	000019c2 	.word	0x000019c2
 800264c:	200000cc 	.word	0x200000cc
 8002650:	40020008 	.word	0x40020008

08002654 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM3)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a09      	ldr	r2, [pc, #36]	@ (8002688 <HAL_TIM_OnePulse_MspInit+0x34>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10b      	bne.n	800267e <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002666:	4b09      	ldr	r3, [pc, #36]	@ (800268c <HAL_TIM_OnePulse_MspInit+0x38>)
 8002668:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800266a:	4b08      	ldr	r3, [pc, #32]	@ (800268c <HAL_TIM_OnePulse_MspInit+0x38>)
 800266c:	2102      	movs	r1, #2
 800266e:	430a      	orrs	r2, r1
 8002670:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002672:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_TIM_OnePulse_MspInit+0x38>)
 8002674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002676:	2202      	movs	r2, #2
 8002678:	4013      	ands	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800267e:	46c0      	nop			@ (mov r8, r8)
 8002680:	46bd      	mov	sp, r7
 8002682:	b004      	add	sp, #16
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			@ (mov r8, r8)
 8002688:	40000400 	.word	0x40000400
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1c      	ldr	r2, [pc, #112]	@ (8002710 <HAL_TIM_Base_MspInit+0x80>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d116      	bne.n	80026d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80026a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002714 <HAL_TIM_Base_MspInit+0x84>)
 80026a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <HAL_TIM_Base_MspInit+0x84>)
 80026a8:	2180      	movs	r1, #128	@ 0x80
 80026aa:	0289      	lsls	r1, r1, #10
 80026ac:	430a      	orrs	r2, r1
 80026ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80026b0:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <HAL_TIM_Base_MspInit+0x84>)
 80026b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026b4:	2380      	movs	r3, #128	@ 0x80
 80026b6:	029b      	lsls	r3, r3, #10
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80026be:	2200      	movs	r2, #0
 80026c0:	2100      	movs	r1, #0
 80026c2:	2015      	movs	r0, #21
 80026c4:	f001 fb08 	bl	8003cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80026c8:	2015      	movs	r0, #21
 80026ca:	f001 fb1a 	bl	8003d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80026ce:	e01a      	b.n	8002706 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM17)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a10      	ldr	r2, [pc, #64]	@ (8002718 <HAL_TIM_Base_MspInit+0x88>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d115      	bne.n	8002706 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80026da:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <HAL_TIM_Base_MspInit+0x84>)
 80026dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026de:	4b0d      	ldr	r3, [pc, #52]	@ (8002714 <HAL_TIM_Base_MspInit+0x84>)
 80026e0:	2180      	movs	r1, #128	@ 0x80
 80026e2:	02c9      	lsls	r1, r1, #11
 80026e4:	430a      	orrs	r2, r1
 80026e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80026e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <HAL_TIM_Base_MspInit+0x84>)
 80026ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	02db      	lsls	r3, r3, #11
 80026f0:	4013      	ands	r3, r2
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	2016      	movs	r0, #22
 80026fc:	f001 faec 	bl	8003cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002700:	2016      	movs	r0, #22
 8002702:	f001 fafe 	bl	8003d02 <HAL_NVIC_EnableIRQ>
}
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b004      	add	sp, #16
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	40014400 	.word	0x40014400
 8002714:	40021000 	.word	0x40021000
 8002718:	40014800 	.word	0x40014800

0800271c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b093      	sub	sp, #76	@ 0x4c
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	2334      	movs	r3, #52	@ 0x34
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	0018      	movs	r0, r3
 800272a:	2314      	movs	r3, #20
 800272c:	001a      	movs	r2, r3
 800272e:	2100      	movs	r1, #0
 8002730:	f004 f980 	bl	8006a34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002734:	2418      	movs	r4, #24
 8002736:	193b      	adds	r3, r7, r4
 8002738:	0018      	movs	r0, r3
 800273a:	231c      	movs	r3, #28
 800273c:	001a      	movs	r2, r3
 800273e:	2100      	movs	r1, #0
 8002740:	f004 f978 	bl	8006a34 <memset>
  if(huart->Instance==USART1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a41      	ldr	r2, [pc, #260]	@ (8002850 <HAL_UART_MspInit+0x134>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d13e      	bne.n	80027cc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800274e:	193b      	adds	r3, r7, r4
 8002750:	2201      	movs	r2, #1
 8002752:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002754:	193b      	adds	r3, r7, r4
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800275a:	193b      	adds	r3, r7, r4
 800275c:	0018      	movs	r0, r3
 800275e:	f002 fb35 	bl	8004dcc <HAL_RCCEx_PeriphCLKConfig>
 8002762:	1e03      	subs	r3, r0, #0
 8002764:	d001      	beq.n	800276a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002766:	f7ff febf 	bl	80024e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800276a:	4b3a      	ldr	r3, [pc, #232]	@ (8002854 <HAL_UART_MspInit+0x138>)
 800276c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800276e:	4b39      	ldr	r3, [pc, #228]	@ (8002854 <HAL_UART_MspInit+0x138>)
 8002770:	2180      	movs	r1, #128	@ 0x80
 8002772:	01c9      	lsls	r1, r1, #7
 8002774:	430a      	orrs	r2, r1
 8002776:	641a      	str	r2, [r3, #64]	@ 0x40
 8002778:	4b36      	ldr	r3, [pc, #216]	@ (8002854 <HAL_UART_MspInit+0x138>)
 800277a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800277c:	2380      	movs	r3, #128	@ 0x80
 800277e:	01db      	lsls	r3, r3, #7
 8002780:	4013      	ands	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	4b33      	ldr	r3, [pc, #204]	@ (8002854 <HAL_UART_MspInit+0x138>)
 8002788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800278a:	4b32      	ldr	r3, [pc, #200]	@ (8002854 <HAL_UART_MspInit+0x138>)
 800278c:	2102      	movs	r1, #2
 800278e:	430a      	orrs	r2, r1
 8002790:	635a      	str	r2, [r3, #52]	@ 0x34
 8002792:	4b30      	ldr	r3, [pc, #192]	@ (8002854 <HAL_UART_MspInit+0x138>)
 8002794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002796:	2202      	movs	r2, #2
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800279e:	2134      	movs	r1, #52	@ 0x34
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	2240      	movs	r2, #64	@ 0x40
 80027a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a6:	187b      	adds	r3, r7, r1
 80027a8:	2212      	movs	r2, #18
 80027aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ac:	187b      	adds	r3, r7, r1
 80027ae:	2201      	movs	r2, #1
 80027b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	2200      	movs	r2, #0
 80027b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	4a25      	ldr	r2, [pc, #148]	@ (8002858 <HAL_UART_MspInit+0x13c>)
 80027c2:	0019      	movs	r1, r3
 80027c4:	0010      	movs	r0, r2
 80027c6:	f001 fde9 	bl	800439c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027ca:	e03d      	b.n	8002848 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a22      	ldr	r2, [pc, #136]	@ (800285c <HAL_UART_MspInit+0x140>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d138      	bne.n	8002848 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002854 <HAL_UART_MspInit+0x138>)
 80027d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027da:	4b1e      	ldr	r3, [pc, #120]	@ (8002854 <HAL_UART_MspInit+0x138>)
 80027dc:	2180      	movs	r1, #128	@ 0x80
 80027de:	0289      	lsls	r1, r1, #10
 80027e0:	430a      	orrs	r2, r1
 80027e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002854 <HAL_UART_MspInit+0x138>)
 80027e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027e8:	2380      	movs	r3, #128	@ 0x80
 80027ea:	029b      	lsls	r3, r3, #10
 80027ec:	4013      	ands	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f2:	4b18      	ldr	r3, [pc, #96]	@ (8002854 <HAL_UART_MspInit+0x138>)
 80027f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027f6:	4b17      	ldr	r3, [pc, #92]	@ (8002854 <HAL_UART_MspInit+0x138>)
 80027f8:	2101      	movs	r1, #1
 80027fa:	430a      	orrs	r2, r1
 80027fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <HAL_UART_MspInit+0x138>)
 8002800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002802:	2201      	movs	r2, #1
 8002804:	4013      	ands	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800280a:	2134      	movs	r1, #52	@ 0x34
 800280c:	187b      	adds	r3, r7, r1
 800280e:	220c      	movs	r2, #12
 8002810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	187b      	adds	r3, r7, r1
 8002814:	2202      	movs	r2, #2
 8002816:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	187b      	adds	r3, r7, r1
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	187b      	adds	r3, r7, r1
 8002820:	2200      	movs	r2, #0
 8002822:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002824:	187b      	adds	r3, r7, r1
 8002826:	2201      	movs	r2, #1
 8002828:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282a:	187a      	adds	r2, r7, r1
 800282c:	23a0      	movs	r3, #160	@ 0xa0
 800282e:	05db      	lsls	r3, r3, #23
 8002830:	0011      	movs	r1, r2
 8002832:	0018      	movs	r0, r3
 8002834:	f001 fdb2 	bl	800439c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002838:	2200      	movs	r2, #0
 800283a:	2100      	movs	r1, #0
 800283c:	201c      	movs	r0, #28
 800283e:	f001 fa4b 	bl	8003cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002842:	201c      	movs	r0, #28
 8002844:	f001 fa5d 	bl	8003d02 <HAL_NVIC_EnableIRQ>
}
 8002848:	46c0      	nop			@ (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b013      	add	sp, #76	@ 0x4c
 800284e:	bd90      	pop	{r4, r7, pc}
 8002850:	40013800 	.word	0x40013800
 8002854:	40021000 	.word	0x40021000
 8002858:	50000400 	.word	0x50000400
 800285c:	40004400 	.word	0x40004400

08002860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002864:	46c0      	nop			@ (mov r8, r8)
 8002866:	e7fd      	b.n	8002864 <NMI_Handler+0x4>

08002868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800286c:	46c0      	nop			@ (mov r8, r8)
 800286e:	e7fd      	b.n	800286c <HardFault_Handler+0x4>

08002870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002874:	46c0      	nop			@ (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002888:	f000 f8ca 	bl	8002a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800288c:	46c0      	nop			@ (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002898:	4b03      	ldr	r3, [pc, #12]	@ (80028a8 <DMA1_Channel1_IRQHandler+0x14>)
 800289a:	0018      	movs	r0, r3
 800289c:	f001 fc3c 	bl	8004118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028a0:	46c0      	nop			@ (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	200000cc 	.word	0x200000cc

080028ac <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <TIM16_IRQHandler+0x14>)
 80028b2:	0018      	movs	r0, r3
 80028b4:	f002 fc6e 	bl	8005194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80028b8:	46c0      	nop			@ (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	20000174 	.word	0x20000174

080028c4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80028c8:	4b03      	ldr	r3, [pc, #12]	@ (80028d8 <TIM17_IRQHandler+0x14>)
 80028ca:	0018      	movs	r0, r3
 80028cc:	f002 fc62 	bl	8005194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80028d0:	46c0      	nop			@ (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	200001c0 	.word	0x200001c0

080028dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028e0:	4b03      	ldr	r3, [pc, #12]	@ (80028f0 <USART2_IRQHandler+0x14>)
 80028e2:	0018      	movs	r0, r3
 80028e4:	f002 ffca 	bl	800587c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028e8:	46c0      	nop			@ (mov r8, r8)
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	200002a0 	.word	0x200002a0

080028f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028f8:	4b03      	ldr	r3, [pc, #12]	@ (8002908 <SystemInit+0x14>)
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	0512      	lsls	r2, r2, #20
 80028fe:	609a      	str	r2, [r3, #8]
#endif
}
 8002900:	46c0      	nop			@ (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			@ (mov r8, r8)
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800290c:	480d      	ldr	r0, [pc, #52]	@ (8002944 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800290e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002910:	f7ff fff0 	bl	80028f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002914:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002916:	e003      	b.n	8002920 <LoopCopyDataInit>

08002918 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002918:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800291a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800291c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800291e:	3104      	adds	r1, #4

08002920 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002920:	480a      	ldr	r0, [pc, #40]	@ (800294c <LoopForever+0xa>)
  ldr r3, =_edata
 8002922:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <LoopForever+0xe>)
  adds r2, r0, r1
 8002924:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002926:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002928:	d3f6      	bcc.n	8002918 <CopyDataInit>
  ldr r2, =_sbss
 800292a:	4a0a      	ldr	r2, [pc, #40]	@ (8002954 <LoopForever+0x12>)
  b LoopFillZerobss
 800292c:	e002      	b.n	8002934 <LoopFillZerobss>

0800292e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  str  r3, [r2]
 8002930:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002932:	3204      	adds	r2, #4

08002934 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002934:	4b08      	ldr	r3, [pc, #32]	@ (8002958 <LoopForever+0x16>)
  cmp r2, r3
 8002936:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002938:	d3f9      	bcc.n	800292e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800293a:	f004 f883 	bl	8006a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800293e:	f7ff fad9 	bl	8001ef4 <main>

08002942 <LoopForever>:

LoopForever:
    b LoopForever
 8002942:	e7fe      	b.n	8002942 <LoopForever>
  ldr   r0, =_estack
 8002944:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8002948:	08006bb0 	.word	0x08006bb0
  ldr r0, =_sdata
 800294c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002950:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002954:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002958:	20000338 	.word	0x20000338

0800295c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800295c:	e7fe      	b.n	800295c <ADC1_IRQHandler>

0800295e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002964:	1dfb      	adds	r3, r7, #7
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800296a:	2003      	movs	r0, #3
 800296c:	f000 f80e 	bl	800298c <HAL_InitTick>
 8002970:	1e03      	subs	r3, r0, #0
 8002972:	d003      	beq.n	800297c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002974:	1dfb      	adds	r3, r7, #7
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e001      	b.n	8002980 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800297c:	f7ff fdba 	bl	80024f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002980:	1dfb      	adds	r3, r7, #7
 8002982:	781b      	ldrb	r3, [r3, #0]
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	b002      	add	sp, #8
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800298c:	b590      	push	{r4, r7, lr}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002994:	230f      	movs	r3, #15
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 800299c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a14 <HAL_InitTick+0x88>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d02b      	beq.n	80029fc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80029a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a18 <HAL_InitTick+0x8c>)
 80029a6:	681c      	ldr	r4, [r3, #0]
 80029a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <HAL_InitTick+0x88>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	0019      	movs	r1, r3
 80029ae:	23fa      	movs	r3, #250	@ 0xfa
 80029b0:	0098      	lsls	r0, r3, #2
 80029b2:	f7fd fba9 	bl	8000108 <__udivsi3>
 80029b6:	0003      	movs	r3, r0
 80029b8:	0019      	movs	r1, r3
 80029ba:	0020      	movs	r0, r4
 80029bc:	f7fd fba4 	bl	8000108 <__udivsi3>
 80029c0:	0003      	movs	r3, r0
 80029c2:	0018      	movs	r0, r3
 80029c4:	f001 f9ad 	bl	8003d22 <HAL_SYSTICK_Config>
 80029c8:	1e03      	subs	r3, r0, #0
 80029ca:	d112      	bne.n	80029f2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d80a      	bhi.n	80029e8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	2301      	movs	r3, #1
 80029d6:	425b      	negs	r3, r3
 80029d8:	2200      	movs	r2, #0
 80029da:	0018      	movs	r0, r3
 80029dc:	f001 f97c 	bl	8003cd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029e0:	4b0e      	ldr	r3, [pc, #56]	@ (8002a1c <HAL_InitTick+0x90>)
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e00d      	b.n	8002a04 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80029e8:	230f      	movs	r3, #15
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
 80029f0:	e008      	b.n	8002a04 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029f2:	230f      	movs	r3, #15
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	e003      	b.n	8002a04 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029fc:	230f      	movs	r3, #15
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002a04:	230f      	movs	r3, #15
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	781b      	ldrb	r3, [r3, #0]
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b005      	add	sp, #20
 8002a10:	bd90      	pop	{r4, r7, pc}
 8002a12:	46c0      	nop			@ (mov r8, r8)
 8002a14:	20000008 	.word	0x20000008
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000004 	.word	0x20000004

08002a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a24:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <HAL_IncTick+0x1c>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	001a      	movs	r2, r3
 8002a2a:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_IncTick+0x20>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	18d2      	adds	r2, r2, r3
 8002a30:	4b03      	ldr	r3, [pc, #12]	@ (8002a40 <HAL_IncTick+0x20>)
 8002a32:	601a      	str	r2, [r3, #0]
}
 8002a34:	46c0      	nop			@ (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			@ (mov r8, r8)
 8002a3c:	20000008 	.word	0x20000008
 8002a40:	20000334 	.word	0x20000334

08002a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  return uwTick;
 8002a48:	4b02      	ldr	r3, [pc, #8]	@ (8002a54 <HAL_GetTick+0x10>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	20000334 	.word	0x20000334

08002a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a60:	f7ff fff0 	bl	8002a44 <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	d005      	beq.n	8002a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a72:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <HAL_Delay+0x44>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	001a      	movs	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	189b      	adds	r3, r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	f7ff ffe0 	bl	8002a44 <HAL_GetTick>
 8002a84:	0002      	movs	r2, r0
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d8f7      	bhi.n	8002a80 <HAL_Delay+0x28>
  {
  }
}
 8002a90:	46c0      	nop			@ (mov r8, r8)
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b004      	add	sp, #16
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	46c0      	nop			@ (mov r8, r8)
 8002a9c:	20000008 	.word	0x20000008

08002aa0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a05      	ldr	r2, [pc, #20]	@ (8002ac4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002ab0:	401a      	ands	r2, r3
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	601a      	str	r2, [r3, #0]
}
 8002aba:	46c0      	nop			@ (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b002      	add	sp, #8
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	46c0      	nop			@ (mov r8, r8)
 8002ac4:	ff3fffff 	.word	0xff3fffff

08002ac8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	23c0      	movs	r3, #192	@ 0xc0
 8002ad6:	041b      	lsls	r3, r3, #16
 8002ad8:	4013      	ands	r3, r2
}
 8002ada:	0018      	movs	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b002      	add	sp, #8
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	2104      	movs	r1, #4
 8002af6:	400a      	ands	r2, r1
 8002af8:	2107      	movs	r1, #7
 8002afa:	4091      	lsls	r1, r2
 8002afc:	000a      	movs	r2, r1
 8002afe:	43d2      	mvns	r2, r2
 8002b00:	401a      	ands	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2104      	movs	r1, #4
 8002b06:	400b      	ands	r3, r1
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4099      	lsls	r1, r3
 8002b0c:	000b      	movs	r3, r1
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002b14:	46c0      	nop			@ (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b004      	add	sp, #16
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	2104      	movs	r1, #4
 8002b2e:	400a      	ands	r2, r1
 8002b30:	2107      	movs	r1, #7
 8002b32:	4091      	lsls	r1, r2
 8002b34:	000a      	movs	r2, r1
 8002b36:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2104      	movs	r1, #4
 8002b3c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002b3e:	40da      	lsrs	r2, r3
 8002b40:	0013      	movs	r3, r2
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b002      	add	sp, #8
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	23c0      	movs	r3, #192	@ 0xc0
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d101      	bne.n	8002b62 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b002      	add	sp, #8
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	211f      	movs	r1, #31
 8002b80:	400a      	ands	r2, r1
 8002b82:	210f      	movs	r1, #15
 8002b84:	4091      	lsls	r1, r2
 8002b86:	000a      	movs	r2, r1
 8002b88:	43d2      	mvns	r2, r2
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	0e9b      	lsrs	r3, r3, #26
 8002b90:	210f      	movs	r1, #15
 8002b92:	4019      	ands	r1, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	201f      	movs	r0, #31
 8002b98:	4003      	ands	r3, r0
 8002b9a:	4099      	lsls	r1, r3
 8002b9c:	000b      	movs	r3, r1
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ba4:	46c0      	nop			@ (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b004      	add	sp, #16
 8002baa:	bd80      	pop	{r7, pc}

08002bac <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	025b      	lsls	r3, r3, #9
 8002bbe:	0a5b      	lsrs	r3, r3, #9
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bc6:	46c0      	nop			@ (mov r8, r8)
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b002      	add	sp, #8
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	0252      	lsls	r2, r2, #9
 8002be0:	0a52      	lsrs	r2, r2, #9
 8002be2:	43d2      	mvns	r2, r2
 8002be4:	401a      	ands	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b002      	add	sp, #8
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	0212      	lsls	r2, r2, #8
 8002c08:	43d2      	mvns	r2, r2
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	400b      	ands	r3, r1
 8002c14:	4904      	ldr	r1, [pc, #16]	@ (8002c28 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002c16:	400b      	ands	r3, r1
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002c1e:	46c0      	nop			@ (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b004      	add	sp, #16
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	7fffff00 	.word	0x7fffff00

08002c2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4a05      	ldr	r2, [pc, #20]	@ (8002c50 <LL_ADC_EnableInternalRegulator+0x24>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2280      	movs	r2, #128	@ 0x80
 8002c3e:	0552      	lsls	r2, r2, #21
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b002      	add	sp, #8
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			@ (mov r8, r8)
 8002c50:	6fffffe8 	.word	0x6fffffe8

08002c54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	055b      	lsls	r3, r3, #21
 8002c64:	401a      	ands	r2, r3
 8002c66:	2380      	movs	r3, #128	@ 0x80
 8002c68:	055b      	lsls	r3, r3, #21
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d101      	bne.n	8002c72 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a04      	ldr	r2, [pc, #16]	@ (8002c9c <LL_ADC_Enable+0x20>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c94:	46c0      	nop			@ (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b002      	add	sp, #8
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	7fffffe8 	.word	0x7fffffe8

08002ca0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a04      	ldr	r2, [pc, #16]	@ (8002cc0 <LL_ADC_Disable+0x20>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002cb8:	46c0      	nop			@ (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	7fffffe8 	.word	0x7fffffe8

08002cc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <LL_ADC_IsEnabled+0x18>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <LL_ADC_IsEnabled+0x1a>
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	0018      	movs	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b002      	add	sp, #8
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d101      	bne.n	8002cfe <LL_ADC_IsDisableOngoing+0x18>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <LL_ADC_IsDisableOngoing+0x1a>
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4a04      	ldr	r2, [pc, #16]	@ (8002d28 <LL_ADC_REG_StartConversion+0x20>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	2204      	movs	r2, #4
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d20:	46c0      	nop			@ (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b002      	add	sp, #8
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	7fffffe8 	.word	0x7fffffe8

08002d2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2204      	movs	r2, #4
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d101      	bne.n	8002d44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	0018      	movs	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b002      	add	sp, #8
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d58:	231f      	movs	r3, #31
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e17e      	b.n	8003074 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7ff fbdb 	bl	800253c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2254      	movs	r2, #84	@ 0x54
 8002d90:	2100      	movs	r1, #0
 8002d92:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f7ff ff5b 	bl	8002c54 <LL_ADC_IsInternalRegulatorEnabled>
 8002d9e:	1e03      	subs	r3, r0, #0
 8002da0:	d114      	bne.n	8002dcc <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	0018      	movs	r0, r3
 8002da8:	f7ff ff40 	bl	8002c2c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002dac:	4bb3      	ldr	r3, [pc, #716]	@ (800307c <HAL_ADC_Init+0x32c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	49b3      	ldr	r1, [pc, #716]	@ (8003080 <HAL_ADC_Init+0x330>)
 8002db2:	0018      	movs	r0, r3
 8002db4:	f7fd f9a8 	bl	8000108 <__udivsi3>
 8002db8:	0003      	movs	r3, r0
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002dbe:	e002      	b.n	8002dc6 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f9      	bne.n	8002dc0 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7ff ff3f 	bl	8002c54 <LL_ADC_IsInternalRegulatorEnabled>
 8002dd6:	1e03      	subs	r3, r0, #0
 8002dd8:	d10f      	bne.n	8002dfa <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dde:	2210      	movs	r2, #16
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dea:	2201      	movs	r2, #1
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002df2:	231f      	movs	r3, #31
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	2201      	movs	r2, #1
 8002df8:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f7ff ff94 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 8002e04:	0003      	movs	r3, r0
 8002e06:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d000      	beq.n	8002e14 <HAL_ADC_Init+0xc4>
 8002e12:	e122      	b.n	800305a <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d000      	beq.n	8002e1c <HAL_ADC_Init+0xcc>
 8002e1a:	e11e      	b.n	800305a <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e20:	4a98      	ldr	r2, [pc, #608]	@ (8003084 <HAL_ADC_Init+0x334>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	2202      	movs	r2, #2
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff ff47 	bl	8002cc4 <LL_ADC_IsEnabled>
 8002e36:	1e03      	subs	r3, r0, #0
 8002e38:	d000      	beq.n	8002e3c <HAL_ADC_Init+0xec>
 8002e3a:	e0ad      	b.n	8002f98 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7e1b      	ldrb	r3, [r3, #24]
 8002e44:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e46:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7e5b      	ldrb	r3, [r3, #25]
 8002e4c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e4e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7e9b      	ldrb	r3, [r3, #26]
 8002e54:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e56:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_ADC_Init+0x116>
 8002e60:	2380      	movs	r3, #128	@ 0x80
 8002e62:	015b      	lsls	r3, r3, #5
 8002e64:	e000      	b.n	8002e68 <HAL_ADC_Init+0x118>
 8002e66:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e68:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e6e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	da04      	bge.n	8002e82 <HAL_ADC_Init+0x132>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	085b      	lsrs	r3, r3, #1
 8002e80:	e001      	b.n	8002e86 <HAL_ADC_Init+0x136>
 8002e82:	2380      	movs	r3, #128	@ 0x80
 8002e84:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002e86:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	212c      	movs	r1, #44	@ 0x2c
 8002e8c:	5c5b      	ldrb	r3, [r3, r1]
 8002e8e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e90:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	5c9b      	ldrb	r3, [r3, r2]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d115      	bne.n	8002ece <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7e9b      	ldrb	r3, [r3, #26]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2280      	movs	r2, #128	@ 0x80
 8002eae:	0252      	lsls	r2, r2, #9
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
 8002eb4:	e00b      	b.n	8002ece <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eba:	2220      	movs	r2, #32
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eda:	23e0      	movs	r3, #224	@ 0xe0
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	4a65      	ldr	r2, [pc, #404]	@ (8003088 <HAL_ADC_Init+0x338>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	0f9b      	lsrs	r3, r3, #30
 8002f08:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	223c      	movs	r2, #60	@ 0x3c
 8002f1a:	5c9b      	ldrb	r3, [r3, r2]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d111      	bne.n	8002f44 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	0f9b      	lsrs	r3, r3, #30
 8002f26:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f2c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002f32:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002f38:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	2201      	movs	r2, #1
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	4a50      	ldr	r2, [pc, #320]	@ (800308c <HAL_ADC_Init+0x33c>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	0019      	movs	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	23c0      	movs	r3, #192	@ 0xc0
 8002f60:	061b      	lsls	r3, r3, #24
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d018      	beq.n	8002f98 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f6a:	2380      	movs	r3, #128	@ 0x80
 8002f6c:	05db      	lsls	r3, r3, #23
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d012      	beq.n	8002f98 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f76:	2380      	movs	r3, #128	@ 0x80
 8002f78:	061b      	lsls	r3, r3, #24
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d00c      	beq.n	8002f98 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002f7e:	4b44      	ldr	r3, [pc, #272]	@ (8003090 <HAL_ADC_Init+0x340>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a44      	ldr	r2, [pc, #272]	@ (8003094 <HAL_ADC_Init+0x344>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	23f0      	movs	r3, #240	@ 0xf0
 8002f8e:	039b      	lsls	r3, r3, #14
 8002f90:	401a      	ands	r2, r3
 8002f92:	4b3f      	ldr	r3, [pc, #252]	@ (8003090 <HAL_ADC_Init+0x340>)
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	f7ff fd9d 	bl	8002ae2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb0:	4939      	ldr	r1, [pc, #228]	@ (8003098 <HAL_ADC_Init+0x348>)
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	f7ff fd95 	bl	8002ae2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d109      	bne.n	8002fd4 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2110      	movs	r1, #16
 8002fcc:	4249      	negs	r1, r1
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fd2:	e018      	b.n	8003006 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	039b      	lsls	r3, r3, #14
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d112      	bne.n	8003006 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	221c      	movs	r2, #28
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2210      	movs	r2, #16
 8002ff4:	4252      	negs	r2, r2
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	0011      	movs	r1, r2
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2100      	movs	r1, #0
 800300c:	0018      	movs	r0, r3
 800300e:	f7ff fd85 	bl	8002b1c <LL_ADC_GetSamplingTimeCommonChannels>
 8003012:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003018:	429a      	cmp	r2, r3
 800301a:	d10b      	bne.n	8003034 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003026:	2203      	movs	r2, #3
 8003028:	4393      	bics	r3, r2
 800302a:	2201      	movs	r2, #1
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003032:	e01c      	b.n	800306e <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003038:	2212      	movs	r2, #18
 800303a:	4393      	bics	r3, r2
 800303c:	2210      	movs	r2, #16
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003048:	2201      	movs	r2, #1
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003050:	231f      	movs	r3, #31
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003058:	e009      	b.n	800306e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305e:	2210      	movs	r2, #16
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003066:	231f      	movs	r3, #31
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800306e:	231f      	movs	r3, #31
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	781b      	ldrb	r3, [r3, #0]
}
 8003074:	0018      	movs	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	b008      	add	sp, #32
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000000 	.word	0x20000000
 8003080:	00030d40 	.word	0x00030d40
 8003084:	fffffefd 	.word	0xfffffefd
 8003088:	ffde0201 	.word	0xffde0201
 800308c:	1ffffc02 	.word	0x1ffffc02
 8003090:	40012708 	.word	0x40012708
 8003094:	ffc3ffff 	.word	0xffc3ffff
 8003098:	7fffff04 	.word	0x7fffff04

0800309c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800309c:	b5b0      	push	{r4, r5, r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7ff fe3d 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 80030b2:	1e03      	subs	r3, r0, #0
 80030b4:	d16c      	bne.n	8003190 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2254      	movs	r2, #84	@ 0x54
 80030ba:	5c9b      	ldrb	r3, [r3, r2]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_Start_DMA+0x28>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e06c      	b.n	800319e <HAL_ADC_Start_DMA+0x102>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2254      	movs	r2, #84	@ 0x54
 80030c8:	2101      	movs	r1, #1
 80030ca:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	4013      	ands	r3, r2
 80030d6:	d113      	bne.n	8003100 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0018      	movs	r0, r3
 80030de:	f7ff fdf1 	bl	8002cc4 <LL_ADC_IsEnabled>
 80030e2:	1e03      	subs	r3, r0, #0
 80030e4:	d004      	beq.n	80030f0 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f7ff fdd8 	bl	8002ca0 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2101      	movs	r1, #1
 80030fc:	430a      	orrs	r2, r1
 80030fe:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003100:	2517      	movs	r5, #23
 8003102:	197c      	adds	r4, r7, r5
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	0018      	movs	r0, r3
 8003108:	f000 fa44 	bl	8003594 <ADC_Enable>
 800310c:	0003      	movs	r3, r0
 800310e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003110:	002c      	movs	r4, r5
 8003112:	193b      	adds	r3, r7, r4
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d13e      	bne.n	8003198 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311e:	4a22      	ldr	r2, [pc, #136]	@ (80031a8 <HAL_ADC_Start_DMA+0x10c>)
 8003120:	4013      	ands	r3, r2
 8003122:	2280      	movs	r2, #128	@ 0x80
 8003124:	0052      	lsls	r2, r2, #1
 8003126:	431a      	orrs	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003136:	4a1d      	ldr	r2, [pc, #116]	@ (80031ac <HAL_ADC_Start_DMA+0x110>)
 8003138:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800313e:	4a1c      	ldr	r2, [pc, #112]	@ (80031b0 <HAL_ADC_Start_DMA+0x114>)
 8003140:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003146:	4a1b      	ldr	r2, [pc, #108]	@ (80031b4 <HAL_ADC_Start_DMA+0x118>)
 8003148:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	221c      	movs	r2, #28
 8003150:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2254      	movs	r2, #84	@ 0x54
 8003156:	2100      	movs	r1, #0
 8003158:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2110      	movs	r1, #16
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3340      	adds	r3, #64	@ 0x40
 8003174:	0019      	movs	r1, r3
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	193c      	adds	r4, r7, r4
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f000 fe68 	bl	8003e50 <HAL_DMA_Start_IT>
 8003180:	0003      	movs	r3, r0
 8003182:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	0018      	movs	r0, r3
 800318a:	f7ff fdbd 	bl	8002d08 <LL_ADC_REG_StartConversion>
 800318e:	e003      	b.n	8003198 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003190:	2317      	movs	r3, #23
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	2202      	movs	r2, #2
 8003196:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8003198:	2317      	movs	r3, #23
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	781b      	ldrb	r3, [r3, #0]
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b006      	add	sp, #24
 80031a4:	bdb0      	pop	{r4, r5, r7, pc}
 80031a6:	46c0      	nop			@ (mov r8, r8)
 80031a8:	fffff0fe 	.word	0xfffff0fe
 80031ac:	08003741 	.word	0x08003741
 80031b0:	08003809 	.word	0x08003809
 80031b4:	08003827 	.word	0x08003827

080031b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031c0:	46c0      	nop			@ (mov r8, r8)
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b002      	add	sp, #8
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031d0:	46c0      	nop			@ (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b002      	add	sp, #8
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031e0:	46c0      	nop			@ (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b002      	add	sp, #8
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f2:	2317      	movs	r3, #23
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2254      	movs	r2, #84	@ 0x54
 8003202:	5c9b      	ldrb	r3, [r3, r2]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_ADC_ConfigChannel+0x24>
 8003208:	2302      	movs	r3, #2
 800320a:	e1be      	b.n	800358a <HAL_ADC_ConfigChannel+0x3a2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2254      	movs	r2, #84	@ 0x54
 8003210:	2101      	movs	r1, #1
 8003212:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0018      	movs	r0, r3
 800321a:	f7ff fd87 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 800321e:	1e03      	subs	r3, r0, #0
 8003220:	d000      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x3c>
 8003222:	e1a1      	b.n	8003568 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d100      	bne.n	800322e <HAL_ADC_ConfigChannel+0x46>
 800322c:	e152      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	2380      	movs	r3, #128	@ 0x80
 8003234:	061b      	lsls	r3, r3, #24
 8003236:	429a      	cmp	r2, r3
 8003238:	d004      	beq.n	8003244 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800323e:	4ac2      	ldr	r2, [pc, #776]	@ (8003548 <HAL_ADC_ConfigChannel+0x360>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d108      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	0019      	movs	r1, r3
 800324e:	0010      	movs	r0, r2
 8003250:	f7ff fcac 	bl	8002bac <LL_ADC_REG_SetSequencerChAdd>
 8003254:	e0ed      	b.n	8003432 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	211f      	movs	r1, #31
 8003260:	400b      	ands	r3, r1
 8003262:	210f      	movs	r1, #15
 8003264:	4099      	lsls	r1, r3
 8003266:	000b      	movs	r3, r1
 8003268:	43db      	mvns	r3, r3
 800326a:	4013      	ands	r3, r2
 800326c:	0019      	movs	r1, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	025b      	lsls	r3, r3, #9
 8003274:	0a5b      	lsrs	r3, r3, #9
 8003276:	d105      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x9c>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	0e9b      	lsrs	r3, r3, #26
 800327e:	221f      	movs	r2, #31
 8003280:	4013      	ands	r3, r2
 8003282:	e0bc      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2201      	movs	r2, #1
 800328a:	4013      	ands	r3, r2
 800328c:	d000      	beq.n	8003290 <HAL_ADC_ConfigChannel+0xa8>
 800328e:	e0b5      	b.n	80033fc <HAL_ADC_ConfigChannel+0x214>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2202      	movs	r2, #2
 8003296:	4013      	ands	r3, r2
 8003298:	d000      	beq.n	800329c <HAL_ADC_ConfigChannel+0xb4>
 800329a:	e0ad      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x210>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2204      	movs	r2, #4
 80032a2:	4013      	ands	r3, r2
 80032a4:	d000      	beq.n	80032a8 <HAL_ADC_ConfigChannel+0xc0>
 80032a6:	e0a5      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x20c>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2208      	movs	r2, #8
 80032ae:	4013      	ands	r3, r2
 80032b0:	d000      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0xcc>
 80032b2:	e09d      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x208>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2210      	movs	r2, #16
 80032ba:	4013      	ands	r3, r2
 80032bc:	d000      	beq.n	80032c0 <HAL_ADC_ConfigChannel+0xd8>
 80032be:	e095      	b.n	80033ec <HAL_ADC_ConfigChannel+0x204>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2220      	movs	r2, #32
 80032c6:	4013      	ands	r3, r2
 80032c8:	d000      	beq.n	80032cc <HAL_ADC_ConfigChannel+0xe4>
 80032ca:	e08d      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x200>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2240      	movs	r2, #64	@ 0x40
 80032d2:	4013      	ands	r3, r2
 80032d4:	d000      	beq.n	80032d8 <HAL_ADC_ConfigChannel+0xf0>
 80032d6:	e085      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x1fc>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2280      	movs	r2, #128	@ 0x80
 80032de:	4013      	ands	r3, r2
 80032e0:	d000      	beq.n	80032e4 <HAL_ADC_ConfigChannel+0xfc>
 80032e2:	e07d      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x1f8>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	2380      	movs	r3, #128	@ 0x80
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4013      	ands	r3, r2
 80032ee:	d000      	beq.n	80032f2 <HAL_ADC_ConfigChannel+0x10a>
 80032f0:	e074      	b.n	80033dc <HAL_ADC_ConfigChannel+0x1f4>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	2380      	movs	r3, #128	@ 0x80
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4013      	ands	r3, r2
 80032fc:	d000      	beq.n	8003300 <HAL_ADC_ConfigChannel+0x118>
 80032fe:	e06b      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x1f0>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	2380      	movs	r3, #128	@ 0x80
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4013      	ands	r3, r2
 800330a:	d000      	beq.n	800330e <HAL_ADC_ConfigChannel+0x126>
 800330c:	e062      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x1ec>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	2380      	movs	r3, #128	@ 0x80
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	4013      	ands	r3, r2
 8003318:	d000      	beq.n	800331c <HAL_ADC_ConfigChannel+0x134>
 800331a:	e059      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x1e8>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	2380      	movs	r3, #128	@ 0x80
 8003322:	015b      	lsls	r3, r3, #5
 8003324:	4013      	ands	r3, r2
 8003326:	d151      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x1e4>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	2380      	movs	r3, #128	@ 0x80
 800332e:	019b      	lsls	r3, r3, #6
 8003330:	4013      	ands	r3, r2
 8003332:	d149      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x1e0>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	01db      	lsls	r3, r3, #7
 800333c:	4013      	ands	r3, r2
 800333e:	d141      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x1dc>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	2380      	movs	r3, #128	@ 0x80
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	4013      	ands	r3, r2
 800334a:	d139      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1d8>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	2380      	movs	r3, #128	@ 0x80
 8003352:	025b      	lsls	r3, r3, #9
 8003354:	4013      	ands	r3, r2
 8003356:	d131      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x1d4>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	2380      	movs	r3, #128	@ 0x80
 800335e:	029b      	lsls	r3, r3, #10
 8003360:	4013      	ands	r3, r2
 8003362:	d129      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x1d0>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	2380      	movs	r3, #128	@ 0x80
 800336a:	02db      	lsls	r3, r3, #11
 800336c:	4013      	ands	r3, r2
 800336e:	d121      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x1cc>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	2380      	movs	r3, #128	@ 0x80
 8003376:	031b      	lsls	r3, r3, #12
 8003378:	4013      	ands	r3, r2
 800337a:	d119      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1c8>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	2380      	movs	r3, #128	@ 0x80
 8003382:	035b      	lsls	r3, r3, #13
 8003384:	4013      	ands	r3, r2
 8003386:	d111      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x1c4>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	@ 0x80
 800338e:	039b      	lsls	r3, r3, #14
 8003390:	4013      	ands	r3, r2
 8003392:	d109      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x1c0>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	2380      	movs	r3, #128	@ 0x80
 800339a:	03db      	lsls	r3, r3, #15
 800339c:	4013      	ands	r3, r2
 800339e:	d001      	beq.n	80033a4 <HAL_ADC_ConfigChannel+0x1bc>
 80033a0:	2316      	movs	r3, #22
 80033a2:	e02c      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033a4:	2300      	movs	r3, #0
 80033a6:	e02a      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033a8:	2315      	movs	r3, #21
 80033aa:	e028      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033ac:	2314      	movs	r3, #20
 80033ae:	e026      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033b0:	2313      	movs	r3, #19
 80033b2:	e024      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033b4:	2312      	movs	r3, #18
 80033b6:	e022      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033b8:	2311      	movs	r3, #17
 80033ba:	e020      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033bc:	2310      	movs	r3, #16
 80033be:	e01e      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033c0:	230f      	movs	r3, #15
 80033c2:	e01c      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033c4:	230e      	movs	r3, #14
 80033c6:	e01a      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033c8:	230d      	movs	r3, #13
 80033ca:	e018      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033cc:	230c      	movs	r3, #12
 80033ce:	e016      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033d0:	230b      	movs	r3, #11
 80033d2:	e014      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033d4:	230a      	movs	r3, #10
 80033d6:	e012      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033d8:	2309      	movs	r3, #9
 80033da:	e010      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033dc:	2308      	movs	r3, #8
 80033de:	e00e      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033e0:	2307      	movs	r3, #7
 80033e2:	e00c      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033e4:	2306      	movs	r3, #6
 80033e6:	e00a      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033e8:	2305      	movs	r3, #5
 80033ea:	e008      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033ec:	2304      	movs	r3, #4
 80033ee:	e006      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033f0:	2303      	movs	r3, #3
 80033f2:	e004      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e002      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <HAL_ADC_ConfigChannel+0x216>
 80033fc:	2300      	movs	r3, #0
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	6852      	ldr	r2, [r2, #4]
 8003402:	201f      	movs	r0, #31
 8003404:	4002      	ands	r2, r0
 8003406:	4093      	lsls	r3, r2
 8003408:	000a      	movs	r2, r1
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	089b      	lsrs	r3, r3, #2
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	429a      	cmp	r2, r3
 800341e:	d808      	bhi.n	8003432 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	001a      	movs	r2, r3
 800342e:	f7ff fb9d 	bl	8002b6c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6819      	ldr	r1, [r3, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	001a      	movs	r2, r3
 8003440:	f7ff fbd8 	bl	8002bf4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	db00      	blt.n	800344e <HAL_ADC_ConfigChannel+0x266>
 800344c:	e096      	b.n	800357c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800344e:	4b3f      	ldr	r3, [pc, #252]	@ (800354c <HAL_ADC_ConfigChannel+0x364>)
 8003450:	0018      	movs	r0, r3
 8003452:	f7ff fb39 	bl	8002ac8 <LL_ADC_GetCommonPathInternalCh>
 8003456:	0003      	movs	r3, r0
 8003458:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a3c      	ldr	r2, [pc, #240]	@ (8003550 <HAL_ADC_ConfigChannel+0x368>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d123      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	2380      	movs	r3, #128	@ 0x80
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800346c:	d11e      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2280      	movs	r2, #128	@ 0x80
 8003472:	0412      	lsls	r2, r2, #16
 8003474:	4313      	orrs	r3, r2
 8003476:	4a35      	ldr	r2, [pc, #212]	@ (800354c <HAL_ADC_ConfigChannel+0x364>)
 8003478:	0019      	movs	r1, r3
 800347a:	0010      	movs	r0, r2
 800347c:	f7ff fb10 	bl	8002aa0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8003480:	4b34      	ldr	r3, [pc, #208]	@ (8003554 <HAL_ADC_ConfigChannel+0x36c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4934      	ldr	r1, [pc, #208]	@ (8003558 <HAL_ADC_ConfigChannel+0x370>)
 8003486:	0018      	movs	r0, r3
 8003488:	f7fc fe3e 	bl	8000108 <__udivsi3>
 800348c:	0003      	movs	r3, r0
 800348e:	001a      	movs	r2, r3
 8003490:	0013      	movs	r3, r2
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	189b      	adds	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	3301      	adds	r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800349c:	e002      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f9      	bne.n	800349e <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034aa:	e067      	b.n	800357c <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a2a      	ldr	r2, [pc, #168]	@ (800355c <HAL_ADC_ConfigChannel+0x374>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d162      	bne.n	800357c <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	2380      	movs	r3, #128	@ 0x80
 80034ba:	03db      	lsls	r3, r3, #15
 80034bc:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80034be:	d15d      	bne.n	800357c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2280      	movs	r2, #128	@ 0x80
 80034c4:	03d2      	lsls	r2, r2, #15
 80034c6:	4313      	orrs	r3, r2
 80034c8:	4a20      	ldr	r2, [pc, #128]	@ (800354c <HAL_ADC_ConfigChannel+0x364>)
 80034ca:	0019      	movs	r1, r3
 80034cc:	0010      	movs	r0, r2
 80034ce:	f7ff fae7 	bl	8002aa0 <LL_ADC_SetCommonPathInternalCh>
 80034d2:	e053      	b.n	800357c <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	2380      	movs	r3, #128	@ 0x80
 80034da:	061b      	lsls	r3, r3, #24
 80034dc:	429a      	cmp	r2, r3
 80034de:	d004      	beq.n	80034ea <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034e4:	4a18      	ldr	r2, [pc, #96]	@ (8003548 <HAL_ADC_ConfigChannel+0x360>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d107      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	0019      	movs	r1, r3
 80034f4:	0010      	movs	r0, r2
 80034f6:	f7ff fb6a 	bl	8002bce <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	da3c      	bge.n	800357c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003502:	4b12      	ldr	r3, [pc, #72]	@ (800354c <HAL_ADC_ConfigChannel+0x364>)
 8003504:	0018      	movs	r0, r3
 8003506:	f7ff fadf 	bl	8002ac8 <LL_ADC_GetCommonPathInternalCh>
 800350a:	0003      	movs	r3, r0
 800350c:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a0f      	ldr	r2, [pc, #60]	@ (8003550 <HAL_ADC_ConfigChannel+0x368>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d108      	bne.n	800352a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4a11      	ldr	r2, [pc, #68]	@ (8003560 <HAL_ADC_ConfigChannel+0x378>)
 800351c:	4013      	ands	r3, r2
 800351e:	4a0b      	ldr	r2, [pc, #44]	@ (800354c <HAL_ADC_ConfigChannel+0x364>)
 8003520:	0019      	movs	r1, r3
 8003522:	0010      	movs	r0, r2
 8003524:	f7ff fabc 	bl	8002aa0 <LL_ADC_SetCommonPathInternalCh>
 8003528:	e028      	b.n	800357c <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a0b      	ldr	r2, [pc, #44]	@ (800355c <HAL_ADC_ConfigChannel+0x374>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d123      	bne.n	800357c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4a0b      	ldr	r2, [pc, #44]	@ (8003564 <HAL_ADC_ConfigChannel+0x37c>)
 8003538:	4013      	ands	r3, r2
 800353a:	4a04      	ldr	r2, [pc, #16]	@ (800354c <HAL_ADC_ConfigChannel+0x364>)
 800353c:	0019      	movs	r1, r3
 800353e:	0010      	movs	r0, r2
 8003540:	f7ff faae 	bl	8002aa0 <LL_ADC_SetCommonPathInternalCh>
 8003544:	e01a      	b.n	800357c <HAL_ADC_ConfigChannel+0x394>
 8003546:	46c0      	nop			@ (mov r8, r8)
 8003548:	80000004 	.word	0x80000004
 800354c:	40012708 	.word	0x40012708
 8003550:	a4000200 	.word	0xa4000200
 8003554:	20000000 	.word	0x20000000
 8003558:	00030d40 	.word	0x00030d40
 800355c:	a8000400 	.word	0xa8000400
 8003560:	ff7fffff 	.word	0xff7fffff
 8003564:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356c:	2220      	movs	r2, #32
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003574:	2317      	movs	r3, #23
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2254      	movs	r2, #84	@ 0x54
 8003580:	2100      	movs	r1, #0
 8003582:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8003584:	2317      	movs	r3, #23
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	781b      	ldrb	r3, [r3, #0]
}
 800358a:	0018      	movs	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	b006      	add	sp, #24
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			@ (mov r8, r8)

08003594 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800359c:	2300      	movs	r3, #0
 800359e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff fb8d 	bl	8002cc4 <LL_ADC_IsEnabled>
 80035aa:	1e03      	subs	r3, r0, #0
 80035ac:	d162      	bne.n	8003674 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4a32      	ldr	r2, [pc, #200]	@ (8003680 <ADC_Enable+0xec>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	d00d      	beq.n	80035d6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035be:	2210      	movs	r2, #16
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ca:	2201      	movs	r2, #1
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e04f      	b.n	8003676 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	0018      	movs	r0, r3
 80035dc:	f7ff fb4e 	bl	8002c7c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80035e0:	4b28      	ldr	r3, [pc, #160]	@ (8003684 <ADC_Enable+0xf0>)
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7ff fa70 	bl	8002ac8 <LL_ADC_GetCommonPathInternalCh>
 80035e8:	0002      	movs	r2, r0
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	041b      	lsls	r3, r3, #16
 80035ee:	4013      	ands	r3, r2
 80035f0:	d00f      	beq.n	8003612 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035f2:	4b25      	ldr	r3, [pc, #148]	@ (8003688 <ADC_Enable+0xf4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4925      	ldr	r1, [pc, #148]	@ (800368c <ADC_Enable+0xf8>)
 80035f8:	0018      	movs	r0, r3
 80035fa:	f7fc fd85 	bl	8000108 <__udivsi3>
 80035fe:	0003      	movs	r3, r0
 8003600:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8003602:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003604:	e002      	b.n	800360c <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	3b01      	subs	r3, #1
 800360a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f9      	bne.n	8003606 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	7e5b      	ldrb	r3, [r3, #25]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d02c      	beq.n	8003674 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800361a:	f7ff fa13 	bl	8002a44 <HAL_GetTick>
 800361e:	0003      	movs	r3, r0
 8003620:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003622:	e020      	b.n	8003666 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	0018      	movs	r0, r3
 800362a:	f7ff fb4b 	bl	8002cc4 <LL_ADC_IsEnabled>
 800362e:	1e03      	subs	r3, r0, #0
 8003630:	d104      	bne.n	800363c <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	0018      	movs	r0, r3
 8003638:	f7ff fb20 	bl	8002c7c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800363c:	f7ff fa02 	bl	8002a44 <HAL_GetTick>
 8003640:	0002      	movs	r2, r0
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d90d      	bls.n	8003666 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364e:	2210      	movs	r2, #16
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365a:	2201      	movs	r2, #1
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e007      	b.n	8003676 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2201      	movs	r2, #1
 800366e:	4013      	ands	r3, r2
 8003670:	2b01      	cmp	r3, #1
 8003672:	d1d7      	bne.n	8003624 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	0018      	movs	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	b004      	add	sp, #16
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			@ (mov r8, r8)
 8003680:	80000017 	.word	0x80000017
 8003684:	40012708 	.word	0x40012708
 8003688:	20000000 	.word	0x20000000
 800368c:	00030d40 	.word	0x00030d40

08003690 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	0018      	movs	r0, r3
 800369e:	f7ff fb22 	bl	8002ce6 <LL_ADC_IsDisableOngoing>
 80036a2:	0003      	movs	r3, r0
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	0018      	movs	r0, r3
 80036ac:	f7ff fb0a 	bl	8002cc4 <LL_ADC_IsEnabled>
 80036b0:	1e03      	subs	r3, r0, #0
 80036b2:	d040      	beq.n	8003736 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d13d      	bne.n	8003736 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2205      	movs	r2, #5
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d10d      	bne.n	80036e4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7ff fae7 	bl	8002ca0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2203      	movs	r2, #3
 80036d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036da:	f7ff f9b3 	bl	8002a44 <HAL_GetTick>
 80036de:	0003      	movs	r3, r0
 80036e0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036e2:	e022      	b.n	800372a <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e8:	2210      	movs	r2, #16
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f4:	2201      	movs	r2, #1
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e01b      	b.n	8003738 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003700:	f7ff f9a0 	bl	8002a44 <HAL_GetTick>
 8003704:	0002      	movs	r2, r0
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d90d      	bls.n	800372a <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	2210      	movs	r2, #16
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371e:	2201      	movs	r2, #1
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e006      	b.n	8003738 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2201      	movs	r2, #1
 8003732:	4013      	ands	r3, r2
 8003734:	d1e4      	bne.n	8003700 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b004      	add	sp, #16
 800373e:	bd80      	pop	{r7, pc}

08003740 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003752:	2250      	movs	r2, #80	@ 0x50
 8003754:	4013      	ands	r3, r2
 8003756:	d141      	bne.n	80037dc <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375c:	2280      	movs	r2, #128	@ 0x80
 800375e:	0092      	lsls	r2, r2, #2
 8003760:	431a      	orrs	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	0018      	movs	r0, r3
 800376c:	f7ff f9ed 	bl	8002b4a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003770:	1e03      	subs	r3, r0, #0
 8003772:	d02e      	beq.n	80037d2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	7e9b      	ldrb	r3, [r3, #26]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d12a      	bne.n	80037d2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2208      	movs	r2, #8
 8003784:	4013      	ands	r3, r2
 8003786:	2b08      	cmp	r3, #8
 8003788:	d123      	bne.n	80037d2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	0018      	movs	r0, r3
 8003790:	f7ff facc 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 8003794:	1e03      	subs	r3, r0, #0
 8003796:	d110      	bne.n	80037ba <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	210c      	movs	r1, #12
 80037a4:	438a      	bics	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ac:	4a15      	ldr	r2, [pc, #84]	@ (8003804 <ADC_DMAConvCplt+0xc4>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	2201      	movs	r2, #1
 80037b2:	431a      	orrs	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80037b8:	e00b      	b.n	80037d2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037be:	2220      	movs	r2, #32
 80037c0:	431a      	orrs	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ca:	2201      	movs	r2, #1
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7ff fcef 	bl	80031b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037da:	e00f      	b.n	80037fc <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e0:	2210      	movs	r2, #16
 80037e2:	4013      	ands	r3, r2
 80037e4:	d004      	beq.n	80037f0 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff fcf5 	bl	80031d8 <HAL_ADC_ErrorCallback>
}
 80037ee:	e005      	b.n	80037fc <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	0010      	movs	r0, r2
 80037fa:	4798      	blx	r3
}
 80037fc:	46c0      	nop			@ (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	b004      	add	sp, #16
 8003802:	bd80      	pop	{r7, pc}
 8003804:	fffffefe 	.word	0xfffffefe

08003808 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003814:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	0018      	movs	r0, r3
 800381a:	f7ff fcd5 	bl	80031c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}

08003826 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003838:	2240      	movs	r2, #64	@ 0x40
 800383a:	431a      	orrs	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003844:	2204      	movs	r2, #4
 8003846:	431a      	orrs	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	0018      	movs	r0, r3
 8003850:	f7ff fcc2 	bl	80031d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003854:	46c0      	nop			@ (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b004      	add	sp, #16
 800385a:	bd80      	pop	{r7, pc}

0800385c <LL_ADC_GetCommonClock>:
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	23f0      	movs	r3, #240	@ 0xf0
 800386a:	039b      	lsls	r3, r3, #14
 800386c:	4013      	ands	r3, r2
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}

08003876 <LL_ADC_GetClock>:
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	0f9b      	lsrs	r3, r3, #30
 8003884:	079b      	lsls	r3, r3, #30
}
 8003886:	0018      	movs	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	b002      	add	sp, #8
 800388c:	bd80      	pop	{r7, pc}

0800388e <LL_ADC_SetCalibrationFactor>:
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	22b4      	movs	r2, #180	@ 0xb4
 800389c:	589b      	ldr	r3, [r3, r2]
 800389e:	227f      	movs	r2, #127	@ 0x7f
 80038a0:	4393      	bics	r3, r2
 80038a2:	001a      	movs	r2, r3
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	21b4      	movs	r1, #180	@ 0xb4
 80038ac:	505a      	str	r2, [r3, r1]
}
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b002      	add	sp, #8
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <LL_ADC_GetCalibrationFactor>:
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	22b4      	movs	r2, #180	@ 0xb4
 80038c2:	589b      	ldr	r3, [r3, r2]
 80038c4:	227f      	movs	r2, #127	@ 0x7f
 80038c6:	4013      	ands	r3, r2
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b002      	add	sp, #8
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <LL_ADC_Enable>:
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4a04      	ldr	r2, [pc, #16]	@ (80038f0 <LL_ADC_Enable+0x20>)
 80038de:	4013      	ands	r3, r2
 80038e0:	2201      	movs	r2, #1
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	609a      	str	r2, [r3, #8]
}
 80038e8:	46c0      	nop			@ (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b002      	add	sp, #8
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	7fffffe8 	.word	0x7fffffe8

080038f4 <LL_ADC_Disable>:
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a04      	ldr	r2, [pc, #16]	@ (8003914 <LL_ADC_Disable+0x20>)
 8003902:	4013      	ands	r3, r2
 8003904:	2202      	movs	r2, #2
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	609a      	str	r2, [r3, #8]
}
 800390c:	46c0      	nop			@ (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b002      	add	sp, #8
 8003912:	bd80      	pop	{r7, pc}
 8003914:	7fffffe8 	.word	0x7fffffe8

08003918 <LL_ADC_IsEnabled>:
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2201      	movs	r2, #1
 8003926:	4013      	ands	r3, r2
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <LL_ADC_IsEnabled+0x18>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <LL_ADC_IsEnabled+0x1a>
 8003930:	2300      	movs	r3, #0
}
 8003932:	0018      	movs	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	b002      	add	sp, #8
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <LL_ADC_StartCalibration>:
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a05      	ldr	r2, [pc, #20]	@ (8003960 <LL_ADC_StartCalibration+0x24>)
 800394a:	4013      	ands	r3, r2
 800394c:	2280      	movs	r2, #128	@ 0x80
 800394e:	0612      	lsls	r2, r2, #24
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	609a      	str	r2, [r3, #8]
}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	b002      	add	sp, #8
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	7fffffe8 	.word	0x7fffffe8

08003964 <LL_ADC_IsCalibrationOnGoing>:
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	0fdb      	lsrs	r3, r3, #31
 8003972:	07da      	lsls	r2, r3, #31
 8003974:	2380      	movs	r3, #128	@ 0x80
 8003976:	061b      	lsls	r3, r3, #24
 8003978:	429a      	cmp	r2, r3
 800397a:	d101      	bne.n	8003980 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003980:	2300      	movs	r3, #0
}
 8003982:	0018      	movs	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	b002      	add	sp, #8
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800398c:	b590      	push	{r4, r7, lr}
 800398e:	b08b      	sub	sp, #44	@ 0x2c
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2254      	movs	r2, #84	@ 0x54
 80039a0:	5c9b      	ldrb	r3, [r3, r2]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_ADCEx_Calibration_Start+0x1e>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e0de      	b.n	8003b68 <HAL_ADCEx_Calibration_Start+0x1dc>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2254      	movs	r2, #84	@ 0x54
 80039ae:	2101      	movs	r1, #1
 80039b0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80039b2:	231f      	movs	r3, #31
 80039b4:	18fc      	adds	r4, r7, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f7ff fe69 	bl	8003690 <ADC_Disable>
 80039be:	0003      	movs	r3, r0
 80039c0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	0018      	movs	r0, r3
 80039c8:	f7ff ffa6 	bl	8003918 <LL_ADC_IsEnabled>
 80039cc:	1e03      	subs	r3, r0, #0
 80039ce:	d000      	beq.n	80039d2 <HAL_ADCEx_Calibration_Start+0x46>
 80039d0:	e0bd      	b.n	8003b4e <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d6:	4a66      	ldr	r2, [pc, #408]	@ (8003b70 <HAL_ADCEx_Calibration_Start+0x1e4>)
 80039d8:	4013      	ands	r3, r2
 80039da:	2202      	movs	r2, #2
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a62      	ldr	r2, [pc, #392]	@ (8003b74 <HAL_ADCEx_Calibration_Start+0x1e8>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	495f      	ldr	r1, [pc, #380]	@ (8003b78 <HAL_ADCEx_Calibration_Start+0x1ec>)
 80039fa:	400a      	ands	r2, r1
 80039fc:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a02:	e02e      	b.n	8003a62 <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7ff ff97 	bl	800393c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a0e:	e015      	b.n	8003a3c <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3301      	adds	r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	23ae      	movs	r3, #174	@ 0xae
 8003a1a:	029b      	lsls	r3, r3, #10
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d30d      	bcc.n	8003a3c <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a24:	2212      	movs	r2, #18
 8003a26:	4393      	bics	r3, r2
 8003a28:	2210      	movs	r2, #16
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2254      	movs	r2, #84	@ 0x54
 8003a34:	2100      	movs	r1, #0
 8003a36:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e095      	b.n	8003b68 <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	0018      	movs	r0, r3
 8003a42:	f7ff ff8f 	bl	8003964 <LL_ADC_IsCalibrationOnGoing>
 8003a46:	1e03      	subs	r3, r0, #0
 8003a48:	d1e2      	bne.n	8003a10 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f7ff ff31 	bl	80038b6 <LL_ADC_GetCalibrationFactor>
 8003a54:	0002      	movs	r2, r0
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	189b      	adds	r3, r3, r2
 8003a5a:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	3301      	adds	r3, #1
 8003a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	2b07      	cmp	r3, #7
 8003a66:	d9cd      	bls.n	8003a04 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003a68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a6a:	6a38      	ldr	r0, [r7, #32]
 8003a6c:	f7fc fb4c 	bl	8000108 <__udivsi3>
 8003a70:	0003      	movs	r3, r0
 8003a72:	623b      	str	r3, [r7, #32]
    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f7ff ff29 	bl	80038d0 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	0018      	movs	r0, r3
 8003a84:	f7ff fef7 	bl	8003876 <LL_ADC_GetClock>
 8003a88:	1e03      	subs	r3, r0, #0
 8003a8a:	d11b      	bne.n	8003ac4 <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b7c <HAL_ADCEx_Calibration_Start+0x1f0>)
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f7ff fee4 	bl	800385c <LL_ADC_GetCommonClock>
 8003a94:	0003      	movs	r3, r0
 8003a96:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	23e0      	movs	r3, #224	@ 0xe0
 8003a9c:	035b      	lsls	r3, r3, #13
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d310      	bcc.n	8003ac4 <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	0c9b      	lsrs	r3, r3, #18
 8003aa6:	3b03      	subs	r3, #3
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	0013      	movs	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	085b      	lsrs	r3, r3, #1
 8003ab4:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8003ab6:	e002      	b.n	8003abe <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f9      	bne.n	8003ab8 <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	0011      	movs	r1, r2
 8003acc:	0018      	movs	r0, r3
 8003ace:	f7ff fede 	bl	800388e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f7ff ff0c 	bl	80038f4 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003adc:	f7fe ffb2 	bl	8002a44 <HAL_GetTick>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ae4:	e01b      	b.n	8003b1e <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ae6:	f7fe ffad 	bl	8002a44 <HAL_GetTick>
 8003aea:	0002      	movs	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d914      	bls.n	8003b1e <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7ff ff0d 	bl	8003918 <LL_ADC_IsEnabled>
 8003afe:	1e03      	subs	r3, r0, #0
 8003b00:	d00d      	beq.n	8003b1e <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b06:	2210      	movs	r2, #16
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b12:	2201      	movs	r2, #1
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e024      	b.n	8003b68 <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	0018      	movs	r0, r3
 8003b24:	f7ff fef8 	bl	8003918 <LL_ADC_IsEnabled>
 8003b28:	1e03      	subs	r3, r0, #0
 8003b2a:	d1dc      	bne.n	8003ae6 <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68d9      	ldr	r1, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b40:	2203      	movs	r2, #3
 8003b42:	4393      	bics	r3, r2
 8003b44:	2201      	movs	r2, #1
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b4c:	e005      	b.n	8003b5a <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b52:	2210      	movs	r2, #16
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2254      	movs	r2, #84	@ 0x54
 8003b5e:	2100      	movs	r1, #0
 8003b60:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8003b62:	231f      	movs	r3, #31
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	781b      	ldrb	r3, [r3, #0]
}
 8003b68:	0018      	movs	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b00b      	add	sp, #44	@ 0x2c
 8003b6e:	bd90      	pop	{r4, r7, pc}
 8003b70:	fffffefd 	.word	0xfffffefd
 8003b74:	00008003 	.word	0x00008003
 8003b78:	ffff7ffc 	.word	0xffff7ffc
 8003b7c:	40012708 	.word	0x40012708

08003b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	0002      	movs	r2, r0
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003b8c:	1dfb      	adds	r3, r7, #7
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b92:	d809      	bhi.n	8003ba8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b94:	1dfb      	adds	r3, r7, #7
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	001a      	movs	r2, r3
 8003b9a:	231f      	movs	r3, #31
 8003b9c:	401a      	ands	r2, r3
 8003b9e:	4b04      	ldr	r3, [pc, #16]	@ (8003bb0 <__NVIC_EnableIRQ+0x30>)
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	4091      	lsls	r1, r2
 8003ba4:	000a      	movs	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003ba8:	46c0      	nop			@ (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	e000e100 	.word	0xe000e100

08003bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	0002      	movs	r2, r0
 8003bbc:	6039      	str	r1, [r7, #0]
 8003bbe:	1dfb      	adds	r3, r7, #7
 8003bc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bc8:	d828      	bhi.n	8003c1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bca:	4a2f      	ldr	r2, [pc, #188]	@ (8003c88 <__NVIC_SetPriority+0xd4>)
 8003bcc:	1dfb      	adds	r3, r7, #7
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	b25b      	sxtb	r3, r3
 8003bd2:	089b      	lsrs	r3, r3, #2
 8003bd4:	33c0      	adds	r3, #192	@ 0xc0
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	589b      	ldr	r3, [r3, r2]
 8003bda:	1dfa      	adds	r2, r7, #7
 8003bdc:	7812      	ldrb	r2, [r2, #0]
 8003bde:	0011      	movs	r1, r2
 8003be0:	2203      	movs	r2, #3
 8003be2:	400a      	ands	r2, r1
 8003be4:	00d2      	lsls	r2, r2, #3
 8003be6:	21ff      	movs	r1, #255	@ 0xff
 8003be8:	4091      	lsls	r1, r2
 8003bea:	000a      	movs	r2, r1
 8003bec:	43d2      	mvns	r2, r2
 8003bee:	401a      	ands	r2, r3
 8003bf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	019b      	lsls	r3, r3, #6
 8003bf6:	22ff      	movs	r2, #255	@ 0xff
 8003bf8:	401a      	ands	r2, r3
 8003bfa:	1dfb      	adds	r3, r7, #7
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	0018      	movs	r0, r3
 8003c00:	2303      	movs	r3, #3
 8003c02:	4003      	ands	r3, r0
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c08:	481f      	ldr	r0, [pc, #124]	@ (8003c88 <__NVIC_SetPriority+0xd4>)
 8003c0a:	1dfb      	adds	r3, r7, #7
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	b25b      	sxtb	r3, r3
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	430a      	orrs	r2, r1
 8003c14:	33c0      	adds	r3, #192	@ 0xc0
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c1a:	e031      	b.n	8003c80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003c8c <__NVIC_SetPriority+0xd8>)
 8003c1e:	1dfb      	adds	r3, r7, #7
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	0019      	movs	r1, r3
 8003c24:	230f      	movs	r3, #15
 8003c26:	400b      	ands	r3, r1
 8003c28:	3b08      	subs	r3, #8
 8003c2a:	089b      	lsrs	r3, r3, #2
 8003c2c:	3306      	adds	r3, #6
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	18d3      	adds	r3, r2, r3
 8003c32:	3304      	adds	r3, #4
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	1dfa      	adds	r2, r7, #7
 8003c38:	7812      	ldrb	r2, [r2, #0]
 8003c3a:	0011      	movs	r1, r2
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	400a      	ands	r2, r1
 8003c40:	00d2      	lsls	r2, r2, #3
 8003c42:	21ff      	movs	r1, #255	@ 0xff
 8003c44:	4091      	lsls	r1, r2
 8003c46:	000a      	movs	r2, r1
 8003c48:	43d2      	mvns	r2, r2
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	019b      	lsls	r3, r3, #6
 8003c52:	22ff      	movs	r2, #255	@ 0xff
 8003c54:	401a      	ands	r2, r3
 8003c56:	1dfb      	adds	r3, r7, #7
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	4003      	ands	r3, r0
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c64:	4809      	ldr	r0, [pc, #36]	@ (8003c8c <__NVIC_SetPriority+0xd8>)
 8003c66:	1dfb      	adds	r3, r7, #7
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	001c      	movs	r4, r3
 8003c6c:	230f      	movs	r3, #15
 8003c6e:	4023      	ands	r3, r4
 8003c70:	3b08      	subs	r3, #8
 8003c72:	089b      	lsrs	r3, r3, #2
 8003c74:	430a      	orrs	r2, r1
 8003c76:	3306      	adds	r3, #6
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	18c3      	adds	r3, r0, r3
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	601a      	str	r2, [r3, #0]
}
 8003c80:	46c0      	nop			@ (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b003      	add	sp, #12
 8003c86:	bd90      	pop	{r4, r7, pc}
 8003c88:	e000e100 	.word	0xe000e100
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	1e5a      	subs	r2, r3, #1
 8003c9c:	2380      	movs	r3, #128	@ 0x80
 8003c9e:	045b      	lsls	r3, r3, #17
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d301      	bcc.n	8003ca8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e010      	b.n	8003cca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <SysTick_Config+0x44>)
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	3a01      	subs	r2, #1
 8003cae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	425b      	negs	r3, r3
 8003cb4:	2103      	movs	r1, #3
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f7ff ff7c 	bl	8003bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cbc:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <SysTick_Config+0x44>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cc2:	4b04      	ldr	r3, [pc, #16]	@ (8003cd4 <SysTick_Config+0x44>)
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b002      	add	sp, #8
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			@ (mov r8, r8)
 8003cd4:	e000e010 	.word	0xe000e010

08003cd8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	210f      	movs	r1, #15
 8003ce4:	187b      	adds	r3, r7, r1
 8003ce6:	1c02      	adds	r2, r0, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	b25b      	sxtb	r3, r3
 8003cf2:	0011      	movs	r1, r2
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7ff ff5d 	bl	8003bb4 <__NVIC_SetPriority>
}
 8003cfa:	46c0      	nop			@ (mov r8, r8)
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b004      	add	sp, #16
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	0002      	movs	r2, r0
 8003d0a:	1dfb      	adds	r3, r7, #7
 8003d0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d0e:	1dfb      	adds	r3, r7, #7
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	b25b      	sxtb	r3, r3
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7ff ff33 	bl	8003b80 <__NVIC_EnableIRQ>
}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b002      	add	sp, #8
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7ff ffaf 	bl	8003c90 <SysTick_Config>
 8003d32:	0003      	movs	r3, r0
}
 8003d34:	0018      	movs	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b002      	add	sp, #8
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e077      	b.n	8003e3e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a3d      	ldr	r2, [pc, #244]	@ (8003e48 <HAL_DMA_Init+0x10c>)
 8003d54:	4694      	mov	ip, r2
 8003d56:	4463      	add	r3, ip
 8003d58:	2114      	movs	r1, #20
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f7fc f9d4 	bl	8000108 <__udivsi3>
 8003d60:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8003d62:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2225      	movs	r2, #37	@ 0x25
 8003d6c:	2102      	movs	r1, #2
 8003d6e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4934      	ldr	r1, [pc, #208]	@ (8003e4c <HAL_DMA_Init+0x110>)
 8003d7c:	400a      	ands	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6819      	ldr	r1, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f000 fa9f 	bl	80042fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	2380      	movs	r3, #128	@ 0x80
 8003dc4:	01db      	lsls	r3, r3, #7
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d102      	bne.n	8003dd0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd8:	21ff      	movs	r1, #255	@ 0xff
 8003dda:	400a      	ands	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003de6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d011      	beq.n	8003e14 <HAL_DMA_Init+0xd8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d80d      	bhi.n	8003e14 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f000 faaa 	bl	8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	e008      	b.n	8003e26 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2225      	movs	r2, #37	@ 0x25
 8003e30:	2101      	movs	r1, #1
 8003e32:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2224      	movs	r2, #36	@ 0x24
 8003e38:	2100      	movs	r1, #0
 8003e3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	0018      	movs	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b002      	add	sp, #8
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			@ (mov r8, r8)
 8003e48:	bffdfff8 	.word	0xbffdfff8
 8003e4c:	ffff800f 	.word	0xffff800f

08003e50 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5e:	2317      	movs	r3, #23
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	2200      	movs	r2, #0
 8003e64:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2224      	movs	r2, #36	@ 0x24
 8003e6a:	5c9b      	ldrb	r3, [r3, r2]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_DMA_Start_IT+0x24>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e070      	b.n	8003f56 <HAL_DMA_Start_IT+0x106>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2224      	movs	r2, #36	@ 0x24
 8003e78:	2101      	movs	r1, #1
 8003e7a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2225      	movs	r2, #37	@ 0x25
 8003e80:	5c9b      	ldrb	r3, [r3, r2]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d157      	bne.n	8003f38 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2225      	movs	r2, #37	@ 0x25
 8003e8c:	2102      	movs	r1, #2
 8003e8e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	438a      	bics	r2, r1
 8003ea4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f9e5 	bl	800427c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	210e      	movs	r1, #14
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e00f      	b.n	8003eec <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2104      	movs	r1, #4
 8003ed8:	438a      	bics	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	210a      	movs	r1, #10
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	025b      	lsls	r3, r3, #9
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d008      	beq.n	8003f0c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f04:	2180      	movs	r1, #128	@ 0x80
 8003f06:	0049      	lsls	r1, r1, #1
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f1e:	2180      	movs	r1, #128	@ 0x80
 8003f20:	0049      	lsls	r1, r1, #1
 8003f22:	430a      	orrs	r2, r1
 8003f24:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2101      	movs	r1, #1
 8003f32:	430a      	orrs	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	e007      	b.n	8003f48 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2224      	movs	r2, #36	@ 0x24
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f40:	2317      	movs	r3, #23
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	2202      	movs	r2, #2
 8003f46:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2224      	movs	r2, #36	@ 0x24
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	5499      	strb	r1, [r3, r2]

  return status;
 8003f50:	2317      	movs	r3, #23
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	781b      	ldrb	r3, [r3, #0]
}
 8003f56:	0018      	movs	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b006      	add	sp, #24
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e050      	b.n	8004014 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2225      	movs	r2, #37	@ 0x25
 8003f76:	5c9b      	ldrb	r3, [r3, r2]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d008      	beq.n	8003f90 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2204      	movs	r2, #4
 8003f82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2224      	movs	r2, #36	@ 0x24
 8003f88:	2100      	movs	r1, #0
 8003f8a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e041      	b.n	8004014 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	210e      	movs	r1, #14
 8003f9c:	438a      	bics	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003faa:	491c      	ldr	r1, [pc, #112]	@ (800401c <HAL_DMA_Abort+0xbc>)
 8003fac:	400a      	ands	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2101      	movs	r1, #1
 8003fbc:	438a      	bics	r2, r1
 8003fbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8003fc0:	4b17      	ldr	r3, [pc, #92]	@ (8004020 <HAL_DMA_Abort+0xc0>)
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	221c      	movs	r2, #28
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2201      	movs	r2, #1
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	4b13      	ldr	r3, [pc, #76]	@ (8004020 <HAL_DMA_Abort+0xc0>)
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003fde:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00c      	beq.n	8004002 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff2:	490a      	ldr	r1, [pc, #40]	@ (800401c <HAL_DMA_Abort+0xbc>)
 8003ff4:	400a      	ands	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004000:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2225      	movs	r2, #37	@ 0x25
 8004006:	2101      	movs	r1, #1
 8004008:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2224      	movs	r2, #36	@ 0x24
 800400e:	2100      	movs	r1, #0
 8004010:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	0018      	movs	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	b002      	add	sp, #8
 800401a:	bd80      	pop	{r7, pc}
 800401c:	fffffeff 	.word	0xfffffeff
 8004020:	40020000 	.word	0x40020000

08004024 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800402c:	230f      	movs	r3, #15
 800402e:	18fb      	adds	r3, r7, r3
 8004030:	2200      	movs	r2, #0
 8004032:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2224      	movs	r2, #36	@ 0x24
 8004038:	2100      	movs	r1, #0
 800403a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2224      	movs	r2, #36	@ 0x24
 8004040:	5c9b      	ldrb	r3, [r3, r2]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_DMA_Abort_IT+0x26>
 8004046:	2302      	movs	r3, #2
 8004048:	e05e      	b.n	8004108 <HAL_DMA_Abort_IT+0xe4>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2224      	movs	r2, #36	@ 0x24
 800404e:	2101      	movs	r1, #1
 8004050:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2225      	movs	r2, #37	@ 0x25
 8004056:	5c9b      	ldrb	r3, [r3, r2]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d007      	beq.n	800406e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2204      	movs	r2, #4
 8004062:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004064:	230f      	movs	r3, #15
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	2201      	movs	r2, #1
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	e049      	b.n	8004102 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	210e      	movs	r1, #14
 800407a:	438a      	bics	r2, r1
 800407c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2101      	movs	r1, #1
 800408a:	438a      	bics	r2, r1
 800408c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004098:	491d      	ldr	r1, [pc, #116]	@ (8004110 <HAL_DMA_Abort_IT+0xec>)
 800409a:	400a      	ands	r2, r1
 800409c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800409e:	4b1d      	ldr	r3, [pc, #116]	@ (8004114 <HAL_DMA_Abort_IT+0xf0>)
 80040a0:	6859      	ldr	r1, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	221c      	movs	r2, #28
 80040a8:	4013      	ands	r3, r2
 80040aa:	2201      	movs	r2, #1
 80040ac:	409a      	lsls	r2, r3
 80040ae:	4b19      	ldr	r3, [pc, #100]	@ (8004114 <HAL_DMA_Abort_IT+0xf0>)
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80040bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00c      	beq.n	80040e0 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d0:	490f      	ldr	r1, [pc, #60]	@ (8004110 <HAL_DMA_Abort_IT+0xec>)
 80040d2:	400a      	ands	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80040de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2225      	movs	r2, #37	@ 0x25
 80040e4:	2101      	movs	r1, #1
 80040e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2224      	movs	r2, #36	@ 0x24
 80040ec:	2100      	movs	r1, #0
 80040ee:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d004      	beq.n	8004102 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	0010      	movs	r0, r2
 8004100:	4798      	blx	r3
    }
  }
  return status;
 8004102:	230f      	movs	r3, #15
 8004104:	18fb      	adds	r3, r7, r3
 8004106:	781b      	ldrb	r3, [r3, #0]
}
 8004108:	0018      	movs	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	b004      	add	sp, #16
 800410e:	bd80      	pop	{r7, pc}
 8004110:	fffffeff 	.word	0xfffffeff
 8004114:	40020000 	.word	0x40020000

08004118 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8004120:	4b55      	ldr	r3, [pc, #340]	@ (8004278 <HAL_DMA_IRQHandler+0x160>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	221c      	movs	r2, #28
 8004134:	4013      	ands	r3, r2
 8004136:	2204      	movs	r2, #4
 8004138:	409a      	lsls	r2, r3
 800413a:	0013      	movs	r3, r2
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4013      	ands	r3, r2
 8004140:	d027      	beq.n	8004192 <HAL_DMA_IRQHandler+0x7a>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2204      	movs	r2, #4
 8004146:	4013      	ands	r3, r2
 8004148:	d023      	beq.n	8004192 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2220      	movs	r2, #32
 8004152:	4013      	ands	r3, r2
 8004154:	d107      	bne.n	8004166 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2104      	movs	r1, #4
 8004162:	438a      	bics	r2, r1
 8004164:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8004166:	4b44      	ldr	r3, [pc, #272]	@ (8004278 <HAL_DMA_IRQHandler+0x160>)
 8004168:	6859      	ldr	r1, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	221c      	movs	r2, #28
 8004170:	4013      	ands	r3, r2
 8004172:	2204      	movs	r2, #4
 8004174:	409a      	lsls	r2, r3
 8004176:	4b40      	ldr	r3, [pc, #256]	@ (8004278 <HAL_DMA_IRQHandler+0x160>)
 8004178:	430a      	orrs	r2, r1
 800417a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004180:	2b00      	cmp	r3, #0
 8004182:	d100      	bne.n	8004186 <HAL_DMA_IRQHandler+0x6e>
 8004184:	e073      	b.n	800426e <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	0010      	movs	r0, r2
 800418e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004190:	e06d      	b.n	800426e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	221c      	movs	r2, #28
 8004198:	4013      	ands	r3, r2
 800419a:	2202      	movs	r2, #2
 800419c:	409a      	lsls	r2, r3
 800419e:	0013      	movs	r3, r2
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4013      	ands	r3, r2
 80041a4:	d02e      	beq.n	8004204 <HAL_DMA_IRQHandler+0xec>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2202      	movs	r2, #2
 80041aa:	4013      	ands	r3, r2
 80041ac:	d02a      	beq.n	8004204 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2220      	movs	r2, #32
 80041b6:	4013      	ands	r3, r2
 80041b8:	d10b      	bne.n	80041d2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	210a      	movs	r1, #10
 80041c6:	438a      	bics	r2, r1
 80041c8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2225      	movs	r2, #37	@ 0x25
 80041ce:	2101      	movs	r1, #1
 80041d0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80041d2:	4b29      	ldr	r3, [pc, #164]	@ (8004278 <HAL_DMA_IRQHandler+0x160>)
 80041d4:	6859      	ldr	r1, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041da:	221c      	movs	r2, #28
 80041dc:	4013      	ands	r3, r2
 80041de:	2202      	movs	r2, #2
 80041e0:	409a      	lsls	r2, r3
 80041e2:	4b25      	ldr	r3, [pc, #148]	@ (8004278 <HAL_DMA_IRQHandler+0x160>)
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2224      	movs	r2, #36	@ 0x24
 80041ec:	2100      	movs	r1, #0
 80041ee:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d03a      	beq.n	800426e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	0010      	movs	r0, r2
 8004200:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004202:	e034      	b.n	800426e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004208:	221c      	movs	r2, #28
 800420a:	4013      	ands	r3, r2
 800420c:	2208      	movs	r2, #8
 800420e:	409a      	lsls	r2, r3
 8004210:	0013      	movs	r3, r2
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4013      	ands	r3, r2
 8004216:	d02b      	beq.n	8004270 <HAL_DMA_IRQHandler+0x158>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2208      	movs	r2, #8
 800421c:	4013      	ands	r3, r2
 800421e:	d027      	beq.n	8004270 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	210e      	movs	r1, #14
 800422c:	438a      	bics	r2, r1
 800422e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8004230:	4b11      	ldr	r3, [pc, #68]	@ (8004278 <HAL_DMA_IRQHandler+0x160>)
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	221c      	movs	r2, #28
 800423a:	4013      	ands	r3, r2
 800423c:	2201      	movs	r2, #1
 800423e:	409a      	lsls	r2, r3
 8004240:	4b0d      	ldr	r3, [pc, #52]	@ (8004278 <HAL_DMA_IRQHandler+0x160>)
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2225      	movs	r2, #37	@ 0x25
 8004250:	2101      	movs	r1, #1
 8004252:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2224      	movs	r2, #36	@ 0x24
 8004258:	2100      	movs	r1, #0
 800425a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	0010      	movs	r0, r2
 800426c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	46c0      	nop			@ (mov r8, r8)
}
 8004272:	46bd      	mov	sp, r7
 8004274:	b004      	add	sp, #16
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40020000 	.word	0x40020000

0800427c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004292:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80042a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80042a6:	4b14      	ldr	r3, [pc, #80]	@ (80042f8 <DMA_SetConfig+0x7c>)
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ae:	221c      	movs	r2, #28
 80042b0:	4013      	ands	r3, r2
 80042b2:	2201      	movs	r2, #1
 80042b4:	409a      	lsls	r2, r3
 80042b6:	4b10      	ldr	r3, [pc, #64]	@ (80042f8 <DMA_SetConfig+0x7c>)
 80042b8:	430a      	orrs	r2, r1
 80042ba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d108      	bne.n	80042de <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042dc:	e007      	b.n	80042ee <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	60da      	str	r2, [r3, #12]
}
 80042ee:	46c0      	nop			@ (mov r8, r8)
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b004      	add	sp, #16
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			@ (mov r8, r8)
 80042f8:	40020000 	.word	0x40020000

080042fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	001a      	movs	r2, r3
 800430a:	23ff      	movs	r3, #255	@ 0xff
 800430c:	4013      	ands	r3, r2
 800430e:	3b08      	subs	r3, #8
 8004310:	2114      	movs	r1, #20
 8004312:	0018      	movs	r0, r3
 8004314:	f7fb fef8 	bl	8000108 <__udivsi3>
 8004318:	0003      	movs	r3, r0
 800431a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004320:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8004322:	4a0a      	ldr	r2, [pc, #40]	@ (800434c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004324:	4694      	mov	ip, r2
 8004326:	4463      	add	r3, ip
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	001a      	movs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a07      	ldr	r2, [pc, #28]	@ (8004350 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004334:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	221c      	movs	r2, #28
 800433a:	4013      	ands	r3, r2
 800433c:	2201      	movs	r2, #1
 800433e:	409a      	lsls	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8004344:	46c0      	nop			@ (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b004      	add	sp, #16
 800434a:	bd80      	pop	{r7, pc}
 800434c:	10008200 	.word	0x10008200
 8004350:	40020880 	.word	0x40020880

08004354 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	22ff      	movs	r2, #255	@ 0xff
 8004362:	4013      	ands	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a0a      	ldr	r2, [pc, #40]	@ (8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800436a:	4694      	mov	ip, r2
 800436c:	4463      	add	r3, ip
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	001a      	movs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a07      	ldr	r2, [pc, #28]	@ (8004398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800437a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3b01      	subs	r3, #1
 8004380:	2203      	movs	r2, #3
 8004382:	4013      	ands	r3, r2
 8004384:	2201      	movs	r2, #1
 8004386:	409a      	lsls	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800438c:	46c0      	nop			@ (mov r8, r8)
 800438e:	46bd      	mov	sp, r7
 8004390:	b004      	add	sp, #16
 8004392:	bd80      	pop	{r7, pc}
 8004394:	1000823f 	.word	0x1000823f
 8004398:	40020940 	.word	0x40020940

0800439c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80043aa:	e14d      	b.n	8004648 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2101      	movs	r1, #1
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4091      	lsls	r1, r2
 80043b6:	000a      	movs	r2, r1
 80043b8:	4013      	ands	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d100      	bne.n	80043c4 <HAL_GPIO_Init+0x28>
 80043c2:	e13e      	b.n	8004642 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x38>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b12      	cmp	r3, #18
 80043d2:	d125      	bne.n	8004420 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	08da      	lsrs	r2, r3, #3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3208      	adds	r2, #8
 80043dc:	0092      	lsls	r2, r2, #2
 80043de:	58d3      	ldr	r3, [r2, r3]
 80043e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2207      	movs	r2, #7
 80043e6:	4013      	ands	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	220f      	movs	r2, #15
 80043ec:	409a      	lsls	r2, r3
 80043ee:	0013      	movs	r3, r2
 80043f0:	43da      	mvns	r2, r3
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	4013      	ands	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	220f      	movs	r2, #15
 80043fe:	401a      	ands	r2, r3
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2107      	movs	r1, #7
 8004404:	400b      	ands	r3, r1
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	409a      	lsls	r2, r3
 800440a:	0013      	movs	r3, r2
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	08da      	lsrs	r2, r3, #3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3208      	adds	r2, #8
 800441a:	0092      	lsls	r2, r2, #2
 800441c:	6979      	ldr	r1, [r7, #20]
 800441e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	2203      	movs	r2, #3
 800442c:	409a      	lsls	r2, r3
 800442e:	0013      	movs	r3, r2
 8004430:	43da      	mvns	r2, r3
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	4013      	ands	r3, r2
 8004436:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2203      	movs	r2, #3
 800443e:	401a      	ands	r2, r3
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	409a      	lsls	r2, r3
 8004446:	0013      	movs	r3, r2
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d00b      	beq.n	8004474 <HAL_GPIO_Init+0xd8>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d007      	beq.n	8004474 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004468:	2b11      	cmp	r3, #17
 800446a:	d003      	beq.n	8004474 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b12      	cmp	r3, #18
 8004472:	d130      	bne.n	80044d6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	2203      	movs	r2, #3
 8004480:	409a      	lsls	r2, r3
 8004482:	0013      	movs	r3, r2
 8004484:	43da      	mvns	r2, r3
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	4013      	ands	r3, r2
 800448a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	409a      	lsls	r2, r3
 8004496:	0013      	movs	r3, r2
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044aa:	2201      	movs	r2, #1
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	409a      	lsls	r2, r3
 80044b0:	0013      	movs	r3, r2
 80044b2:	43da      	mvns	r2, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	4013      	ands	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	2201      	movs	r2, #1
 80044c2:	401a      	ands	r2, r3
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	409a      	lsls	r2, r3
 80044c8:	0013      	movs	r3, r2
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d017      	beq.n	800450e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	2203      	movs	r2, #3
 80044ea:	409a      	lsls	r2, r3
 80044ec:	0013      	movs	r3, r2
 80044ee:	43da      	mvns	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	4013      	ands	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	409a      	lsls	r2, r3
 8004500:	0013      	movs	r3, r2
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	055b      	lsls	r3, r3, #21
 8004516:	4013      	ands	r3, r2
 8004518:	d100      	bne.n	800451c <HAL_GPIO_Init+0x180>
 800451a:	e092      	b.n	8004642 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800451c:	4a50      	ldr	r2, [pc, #320]	@ (8004660 <HAL_GPIO_Init+0x2c4>)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	089b      	lsrs	r3, r3, #2
 8004522:	3318      	adds	r3, #24
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	589b      	ldr	r3, [r3, r2]
 8004528:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2203      	movs	r2, #3
 800452e:	4013      	ands	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	220f      	movs	r2, #15
 8004534:	409a      	lsls	r2, r3
 8004536:	0013      	movs	r3, r2
 8004538:	43da      	mvns	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	4013      	ands	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	23a0      	movs	r3, #160	@ 0xa0
 8004544:	05db      	lsls	r3, r3, #23
 8004546:	429a      	cmp	r2, r3
 8004548:	d013      	beq.n	8004572 <HAL_GPIO_Init+0x1d6>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a45      	ldr	r2, [pc, #276]	@ (8004664 <HAL_GPIO_Init+0x2c8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00d      	beq.n	800456e <HAL_GPIO_Init+0x1d2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a44      	ldr	r2, [pc, #272]	@ (8004668 <HAL_GPIO_Init+0x2cc>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d007      	beq.n	800456a <HAL_GPIO_Init+0x1ce>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a43      	ldr	r2, [pc, #268]	@ (800466c <HAL_GPIO_Init+0x2d0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d101      	bne.n	8004566 <HAL_GPIO_Init+0x1ca>
 8004562:	2305      	movs	r3, #5
 8004564:	e006      	b.n	8004574 <HAL_GPIO_Init+0x1d8>
 8004566:	2306      	movs	r3, #6
 8004568:	e004      	b.n	8004574 <HAL_GPIO_Init+0x1d8>
 800456a:	2302      	movs	r3, #2
 800456c:	e002      	b.n	8004574 <HAL_GPIO_Init+0x1d8>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_GPIO_Init+0x1d8>
 8004572:	2300      	movs	r3, #0
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	2103      	movs	r1, #3
 8004578:	400a      	ands	r2, r1
 800457a:	00d2      	lsls	r2, r2, #3
 800457c:	4093      	lsls	r3, r2
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004584:	4936      	ldr	r1, [pc, #216]	@ (8004660 <HAL_GPIO_Init+0x2c4>)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	3318      	adds	r3, #24
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8004592:	4a33      	ldr	r2, [pc, #204]	@ (8004660 <HAL_GPIO_Init+0x2c4>)
 8004594:	2380      	movs	r3, #128	@ 0x80
 8004596:	58d3      	ldr	r3, [r2, r3]
 8004598:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	43da      	mvns	r2, r3
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	4013      	ands	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	2380      	movs	r3, #128	@ 0x80
 80045aa:	025b      	lsls	r3, r3, #9
 80045ac:	4013      	ands	r3, r2
 80045ae:	d003      	beq.n	80045b8 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80045b8:	4929      	ldr	r1, [pc, #164]	@ (8004660 <HAL_GPIO_Init+0x2c4>)
 80045ba:	2280      	movs	r2, #128	@ 0x80
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80045c0:	4a27      	ldr	r2, [pc, #156]	@ (8004660 <HAL_GPIO_Init+0x2c4>)
 80045c2:	2384      	movs	r3, #132	@ 0x84
 80045c4:	58d3      	ldr	r3, [r2, r3]
 80045c6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	43da      	mvns	r2, r3
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	4013      	ands	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	2380      	movs	r3, #128	@ 0x80
 80045d8:	029b      	lsls	r3, r3, #10
 80045da:	4013      	ands	r3, r2
 80045dc:	d003      	beq.n	80045e6 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80045e6:	491e      	ldr	r1, [pc, #120]	@ (8004660 <HAL_GPIO_Init+0x2c4>)
 80045e8:	2284      	movs	r2, #132	@ 0x84
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80045ee:	4b1c      	ldr	r3, [pc, #112]	@ (8004660 <HAL_GPIO_Init+0x2c4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	43da      	mvns	r2, r3
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	4013      	ands	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	2380      	movs	r3, #128	@ 0x80
 8004604:	035b      	lsls	r3, r3, #13
 8004606:	4013      	ands	r3, r2
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004612:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <HAL_GPIO_Init+0x2c4>)
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8004618:	4b11      	ldr	r3, [pc, #68]	@ (8004660 <HAL_GPIO_Init+0x2c4>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	43da      	mvns	r2, r3
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	4013      	ands	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	2380      	movs	r3, #128	@ 0x80
 800462e:	039b      	lsls	r3, r3, #14
 8004630:	4013      	ands	r3, r2
 8004632:	d003      	beq.n	800463c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800463c:	4b08      	ldr	r3, [pc, #32]	@ (8004660 <HAL_GPIO_Init+0x2c4>)
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3301      	adds	r3, #1
 8004646:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	40da      	lsrs	r2, r3
 8004650:	1e13      	subs	r3, r2, #0
 8004652:	d000      	beq.n	8004656 <HAL_GPIO_Init+0x2ba>
 8004654:	e6aa      	b.n	80043ac <HAL_GPIO_Init+0x10>
  }
}
 8004656:	46c0      	nop			@ (mov r8, r8)
 8004658:	46c0      	nop			@ (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b006      	add	sp, #24
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021800 	.word	0x40021800
 8004664:	50000400 	.word	0x50000400
 8004668:	50000800 	.word	0x50000800
 800466c:	50001400 	.word	0x50001400

08004670 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	000a      	movs	r2, r1
 800467a:	1cbb      	adds	r3, r7, #2
 800467c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	1cba      	adds	r2, r7, #2
 8004684:	8812      	ldrh	r2, [r2, #0]
 8004686:	4013      	ands	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800468a:	230f      	movs	r3, #15
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	2201      	movs	r2, #1
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	e003      	b.n	800469c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004694:	230f      	movs	r3, #15
 8004696:	18fb      	adds	r3, r7, r3
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800469c:	230f      	movs	r3, #15
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	781b      	ldrb	r3, [r3, #0]
}
 80046a2:	0018      	movs	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b004      	add	sp, #16
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	0008      	movs	r0, r1
 80046b4:	0011      	movs	r1, r2
 80046b6:	1cbb      	adds	r3, r7, #2
 80046b8:	1c02      	adds	r2, r0, #0
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	1c7b      	adds	r3, r7, #1
 80046be:	1c0a      	adds	r2, r1, #0
 80046c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046c2:	1c7b      	adds	r3, r7, #1
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d004      	beq.n	80046d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046ca:	1cbb      	adds	r3, r7, #2
 80046cc:	881a      	ldrh	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046d2:	e003      	b.n	80046dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046d4:	1cbb      	adds	r3, r7, #2
 80046d6:	881a      	ldrh	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046dc:	46c0      	nop			@ (mov r8, r8)
 80046de:	46bd      	mov	sp, r7
 80046e0:	b002      	add	sp, #8
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e1d0      	b.n	8004a98 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2201      	movs	r2, #1
 80046fc:	4013      	ands	r3, r2
 80046fe:	d100      	bne.n	8004702 <HAL_RCC_OscConfig+0x1e>
 8004700:	e069      	b.n	80047d6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004702:	4bc8      	ldr	r3, [pc, #800]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2238      	movs	r2, #56	@ 0x38
 8004708:	4013      	ands	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b08      	cmp	r3, #8
 8004710:	d105      	bne.n	800471e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d15d      	bne.n	80047d6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e1bc      	b.n	8004a98 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	2380      	movs	r3, #128	@ 0x80
 8004724:	025b      	lsls	r3, r3, #9
 8004726:	429a      	cmp	r2, r3
 8004728:	d107      	bne.n	800473a <HAL_RCC_OscConfig+0x56>
 800472a:	4bbe      	ldr	r3, [pc, #760]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4bbd      	ldr	r3, [pc, #756]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004730:	2180      	movs	r1, #128	@ 0x80
 8004732:	0249      	lsls	r1, r1, #9
 8004734:	430a      	orrs	r2, r1
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e020      	b.n	800477c <HAL_RCC_OscConfig+0x98>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	23a0      	movs	r3, #160	@ 0xa0
 8004740:	02db      	lsls	r3, r3, #11
 8004742:	429a      	cmp	r2, r3
 8004744:	d10e      	bne.n	8004764 <HAL_RCC_OscConfig+0x80>
 8004746:	4bb7      	ldr	r3, [pc, #732]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4bb6      	ldr	r3, [pc, #728]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 800474c:	2180      	movs	r1, #128	@ 0x80
 800474e:	02c9      	lsls	r1, r1, #11
 8004750:	430a      	orrs	r2, r1
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	4bb3      	ldr	r3, [pc, #716]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	4bb2      	ldr	r3, [pc, #712]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 800475a:	2180      	movs	r1, #128	@ 0x80
 800475c:	0249      	lsls	r1, r1, #9
 800475e:	430a      	orrs	r2, r1
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	e00b      	b.n	800477c <HAL_RCC_OscConfig+0x98>
 8004764:	4baf      	ldr	r3, [pc, #700]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4bae      	ldr	r3, [pc, #696]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 800476a:	49af      	ldr	r1, [pc, #700]	@ (8004a28 <HAL_RCC_OscConfig+0x344>)
 800476c:	400a      	ands	r2, r1
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	4bac      	ldr	r3, [pc, #688]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	4bab      	ldr	r3, [pc, #684]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004776:	49ad      	ldr	r1, [pc, #692]	@ (8004a2c <HAL_RCC_OscConfig+0x348>)
 8004778:	400a      	ands	r2, r1
 800477a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d014      	beq.n	80047ae <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fe f95e 	bl	8002a44 <HAL_GetTick>
 8004788:	0003      	movs	r3, r0
 800478a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800478e:	f7fe f959 	bl	8002a44 <HAL_GetTick>
 8004792:	0002      	movs	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b64      	cmp	r3, #100	@ 0x64
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e17b      	b.n	8004a98 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047a0:	4ba0      	ldr	r3, [pc, #640]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	2380      	movs	r3, #128	@ 0x80
 80047a6:	029b      	lsls	r3, r3, #10
 80047a8:	4013      	ands	r3, r2
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0xaa>
 80047ac:	e013      	b.n	80047d6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fe f949 	bl	8002a44 <HAL_GetTick>
 80047b2:	0003      	movs	r3, r0
 80047b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80047b8:	f7fe f944 	bl	8002a44 <HAL_GetTick>
 80047bc:	0002      	movs	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	@ 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e166      	b.n	8004a98 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ca:	4b96      	ldr	r3, [pc, #600]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	2380      	movs	r3, #128	@ 0x80
 80047d0:	029b      	lsls	r3, r3, #10
 80047d2:	4013      	ands	r3, r2
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2202      	movs	r2, #2
 80047dc:	4013      	ands	r3, r2
 80047de:	d100      	bne.n	80047e2 <HAL_RCC_OscConfig+0xfe>
 80047e0:	e086      	b.n	80048f0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047e2:	4b90      	ldr	r3, [pc, #576]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2238      	movs	r2, #56	@ 0x38
 80047e8:	4013      	ands	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d12f      	bne.n	8004852 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e14c      	b.n	8004a98 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fe:	4b89      	ldr	r3, [pc, #548]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4a8b      	ldr	r2, [pc, #556]	@ (8004a30 <HAL_RCC_OscConfig+0x34c>)
 8004804:	4013      	ands	r3, r2
 8004806:	0019      	movs	r1, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	021a      	lsls	r2, r3, #8
 800480e:	4b85      	ldr	r3, [pc, #532]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004810:	430a      	orrs	r2, r1
 8004812:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d112      	bne.n	8004840 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800481a:	4b82      	ldr	r3, [pc, #520]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a85      	ldr	r2, [pc, #532]	@ (8004a34 <HAL_RCC_OscConfig+0x350>)
 8004820:	4013      	ands	r3, r2
 8004822:	0019      	movs	r1, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	4b7e      	ldr	r3, [pc, #504]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 800482a:	430a      	orrs	r2, r1
 800482c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800482e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	0adb      	lsrs	r3, r3, #11
 8004834:	2207      	movs	r2, #7
 8004836:	4013      	ands	r3, r2
 8004838:	4a7f      	ldr	r2, [pc, #508]	@ (8004a38 <HAL_RCC_OscConfig+0x354>)
 800483a:	40da      	lsrs	r2, r3
 800483c:	4b7f      	ldr	r3, [pc, #508]	@ (8004a3c <HAL_RCC_OscConfig+0x358>)
 800483e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004840:	4b7f      	ldr	r3, [pc, #508]	@ (8004a40 <HAL_RCC_OscConfig+0x35c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	0018      	movs	r0, r3
 8004846:	f7fe f8a1 	bl	800298c <HAL_InitTick>
 800484a:	1e03      	subs	r3, r0, #0
 800484c:	d050      	beq.n	80048f0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e122      	b.n	8004a98 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d030      	beq.n	80048bc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800485a:	4b72      	ldr	r3, [pc, #456]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a75      	ldr	r2, [pc, #468]	@ (8004a34 <HAL_RCC_OscConfig+0x350>)
 8004860:	4013      	ands	r3, r2
 8004862:	0019      	movs	r1, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	4b6e      	ldr	r3, [pc, #440]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 800486a:	430a      	orrs	r2, r1
 800486c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800486e:	4b6d      	ldr	r3, [pc, #436]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4b6c      	ldr	r3, [pc, #432]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004874:	2180      	movs	r1, #128	@ 0x80
 8004876:	0049      	lsls	r1, r1, #1
 8004878:	430a      	orrs	r2, r1
 800487a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fe f8e2 	bl	8002a44 <HAL_GetTick>
 8004880:	0003      	movs	r3, r0
 8004882:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004886:	f7fe f8dd 	bl	8002a44 <HAL_GetTick>
 800488a:	0002      	movs	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e0ff      	b.n	8004a98 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004898:	4b62      	ldr	r3, [pc, #392]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	2380      	movs	r3, #128	@ 0x80
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4013      	ands	r3, r2
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a4:	4b5f      	ldr	r3, [pc, #380]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4a61      	ldr	r2, [pc, #388]	@ (8004a30 <HAL_RCC_OscConfig+0x34c>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	0019      	movs	r1, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	021a      	lsls	r2, r3, #8
 80048b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
 80048ba:	e019      	b.n	80048f0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80048bc:	4b59      	ldr	r3, [pc, #356]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b58      	ldr	r3, [pc, #352]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80048c2:	4960      	ldr	r1, [pc, #384]	@ (8004a44 <HAL_RCC_OscConfig+0x360>)
 80048c4:	400a      	ands	r2, r1
 80048c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c8:	f7fe f8bc 	bl	8002a44 <HAL_GetTick>
 80048cc:	0003      	movs	r3, r0
 80048ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80048d2:	f7fe f8b7 	bl	8002a44 <HAL_GetTick>
 80048d6:	0002      	movs	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e0d9      	b.n	8004a98 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	2380      	movs	r3, #128	@ 0x80
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	4013      	ands	r3, r2
 80048ee:	d1f0      	bne.n	80048d2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2208      	movs	r2, #8
 80048f6:	4013      	ands	r3, r2
 80048f8:	d042      	beq.n	8004980 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80048fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2238      	movs	r2, #56	@ 0x38
 8004900:	4013      	ands	r3, r2
 8004902:	2b18      	cmp	r3, #24
 8004904:	d105      	bne.n	8004912 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d138      	bne.n	8004980 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e0c2      	b.n	8004a98 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d019      	beq.n	800494e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800491a:	4b42      	ldr	r3, [pc, #264]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 800491c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800491e:	4b41      	ldr	r3, [pc, #260]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004920:	2101      	movs	r1, #1
 8004922:	430a      	orrs	r2, r1
 8004924:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004926:	f7fe f88d 	bl	8002a44 <HAL_GetTick>
 800492a:	0003      	movs	r3, r0
 800492c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004930:	f7fe f888 	bl	8002a44 <HAL_GetTick>
 8004934:	0002      	movs	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e0aa      	b.n	8004a98 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004942:	4b38      	ldr	r3, [pc, #224]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004946:	2202      	movs	r2, #2
 8004948:	4013      	ands	r3, r2
 800494a:	d0f1      	beq.n	8004930 <HAL_RCC_OscConfig+0x24c>
 800494c:	e018      	b.n	8004980 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800494e:	4b35      	ldr	r3, [pc, #212]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004950:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004952:	4b34      	ldr	r3, [pc, #208]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004954:	2101      	movs	r1, #1
 8004956:	438a      	bics	r2, r1
 8004958:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495a:	f7fe f873 	bl	8002a44 <HAL_GetTick>
 800495e:	0003      	movs	r3, r0
 8004960:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004964:	f7fe f86e 	bl	8002a44 <HAL_GetTick>
 8004968:	0002      	movs	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e090      	b.n	8004a98 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004976:	4b2b      	ldr	r3, [pc, #172]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800497a:	2202      	movs	r2, #2
 800497c:	4013      	ands	r3, r2
 800497e:	d1f1      	bne.n	8004964 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2204      	movs	r2, #4
 8004986:	4013      	ands	r3, r2
 8004988:	d100      	bne.n	800498c <HAL_RCC_OscConfig+0x2a8>
 800498a:	e084      	b.n	8004a96 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800498c:	230f      	movs	r3, #15
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004994:	4b23      	ldr	r3, [pc, #140]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2238      	movs	r2, #56	@ 0x38
 800499a:	4013      	ands	r3, r2
 800499c:	2b20      	cmp	r3, #32
 800499e:	d106      	bne.n	80049ae <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d000      	beq.n	80049aa <HAL_RCC_OscConfig+0x2c6>
 80049a8:	e075      	b.n	8004a96 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e074      	b.n	8004a98 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d106      	bne.n	80049c4 <HAL_RCC_OscConfig+0x2e0>
 80049b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80049b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80049bc:	2101      	movs	r1, #1
 80049be:	430a      	orrs	r2, r1
 80049c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049c2:	e01c      	b.n	80049fe <HAL_RCC_OscConfig+0x31a>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b05      	cmp	r3, #5
 80049ca:	d10c      	bne.n	80049e6 <HAL_RCC_OscConfig+0x302>
 80049cc:	4b15      	ldr	r3, [pc, #84]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80049ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049d0:	4b14      	ldr	r3, [pc, #80]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80049d2:	2104      	movs	r1, #4
 80049d4:	430a      	orrs	r2, r1
 80049d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049d8:	4b12      	ldr	r3, [pc, #72]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80049da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049dc:	4b11      	ldr	r3, [pc, #68]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80049de:	2101      	movs	r1, #1
 80049e0:	430a      	orrs	r2, r1
 80049e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049e4:	e00b      	b.n	80049fe <HAL_RCC_OscConfig+0x31a>
 80049e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80049e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80049ec:	2101      	movs	r1, #1
 80049ee:	438a      	bics	r2, r1
 80049f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80049f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <HAL_RCC_OscConfig+0x340>)
 80049f8:	2104      	movs	r1, #4
 80049fa:	438a      	bics	r2, r1
 80049fc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d028      	beq.n	8004a58 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a06:	f7fe f81d 	bl	8002a44 <HAL_GetTick>
 8004a0a:	0003      	movs	r3, r0
 8004a0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004a0e:	e01d      	b.n	8004a4c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a10:	f7fe f818 	bl	8002a44 <HAL_GetTick>
 8004a14:	0002      	movs	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8004a48 <HAL_RCC_OscConfig+0x364>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d915      	bls.n	8004a4c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e039      	b.n	8004a98 <HAL_RCC_OscConfig+0x3b4>
 8004a24:	40021000 	.word	0x40021000
 8004a28:	fffeffff 	.word	0xfffeffff
 8004a2c:	fffbffff 	.word	0xfffbffff
 8004a30:	ffff80ff 	.word	0xffff80ff
 8004a34:	ffffc7ff 	.word	0xffffc7ff
 8004a38:	02dc6c00 	.word	0x02dc6c00
 8004a3c:	20000000 	.word	0x20000000
 8004a40:	20000004 	.word	0x20000004
 8004a44:	fffffeff 	.word	0xfffffeff
 8004a48:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004a4c:	4b14      	ldr	r3, [pc, #80]	@ (8004aa0 <HAL_RCC_OscConfig+0x3bc>)
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a50:	2202      	movs	r2, #2
 8004a52:	4013      	ands	r3, r2
 8004a54:	d0dc      	beq.n	8004a10 <HAL_RCC_OscConfig+0x32c>
 8004a56:	e013      	b.n	8004a80 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a58:	f7fd fff4 	bl	8002a44 <HAL_GetTick>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004a60:	e009      	b.n	8004a76 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a62:	f7fd ffef 	bl	8002a44 <HAL_GetTick>
 8004a66:	0002      	movs	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa4 <HAL_RCC_OscConfig+0x3c0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e010      	b.n	8004a98 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004a76:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa0 <HAL_RCC_OscConfig+0x3bc>)
 8004a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d1f0      	bne.n	8004a62 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004a80:	230f      	movs	r3, #15
 8004a82:	18fb      	adds	r3, r7, r3
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d105      	bne.n	8004a96 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004a8a:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <HAL_RCC_OscConfig+0x3bc>)
 8004a8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a8e:	4b04      	ldr	r3, [pc, #16]	@ (8004aa0 <HAL_RCC_OscConfig+0x3bc>)
 8004a90:	4905      	ldr	r1, [pc, #20]	@ (8004aa8 <HAL_RCC_OscConfig+0x3c4>)
 8004a92:	400a      	ands	r2, r1
 8004a94:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	0018      	movs	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b006      	add	sp, #24
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	00001388 	.word	0x00001388
 8004aa8:	efffffff 	.word	0xefffffff

08004aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0e9      	b.n	8004c94 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac0:	4b76      	ldr	r3, [pc, #472]	@ (8004c9c <HAL_RCC_ClockConfig+0x1f0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2207      	movs	r2, #7
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d91e      	bls.n	8004b0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	4b73      	ldr	r3, [pc, #460]	@ (8004c9c <HAL_RCC_ClockConfig+0x1f0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2207      	movs	r2, #7
 8004ad4:	4393      	bics	r3, r2
 8004ad6:	0019      	movs	r1, r3
 8004ad8:	4b70      	ldr	r3, [pc, #448]	@ (8004c9c <HAL_RCC_ClockConfig+0x1f0>)
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ae0:	f7fd ffb0 	bl	8002a44 <HAL_GetTick>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ae8:	e009      	b.n	8004afe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004aea:	f7fd ffab 	bl	8002a44 <HAL_GetTick>
 8004aee:	0002      	movs	r2, r0
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	4a6a      	ldr	r2, [pc, #424]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e0ca      	b.n	8004c94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004afe:	4b67      	ldr	r3, [pc, #412]	@ (8004c9c <HAL_RCC_ClockConfig+0x1f0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2207      	movs	r2, #7
 8004b04:	4013      	ands	r3, r2
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d1ee      	bne.n	8004aea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2202      	movs	r2, #2
 8004b12:	4013      	ands	r3, r2
 8004b14:	d017      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	d008      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b20:	4b60      	ldr	r3, [pc, #384]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4a60      	ldr	r2, [pc, #384]	@ (8004ca8 <HAL_RCC_ClockConfig+0x1fc>)
 8004b26:	401a      	ands	r2, r3
 8004b28:	4b5e      	ldr	r3, [pc, #376]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004b2a:	21b0      	movs	r1, #176	@ 0xb0
 8004b2c:	0109      	lsls	r1, r1, #4
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b32:	4b5c      	ldr	r3, [pc, #368]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	4a5d      	ldr	r2, [pc, #372]	@ (8004cac <HAL_RCC_ClockConfig+0x200>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	0019      	movs	r1, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	4b58      	ldr	r3, [pc, #352]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004b42:	430a      	orrs	r2, r1
 8004b44:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d055      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004b50:	4b54      	ldr	r3, [pc, #336]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	221c      	movs	r2, #28
 8004b56:	4393      	bics	r3, r2
 8004b58:	0019      	movs	r1, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	4b51      	ldr	r3, [pc, #324]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004b60:	430a      	orrs	r2, r1
 8004b62:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b6c:	4b4d      	ldr	r3, [pc, #308]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	2380      	movs	r3, #128	@ 0x80
 8004b72:	029b      	lsls	r3, r3, #10
 8004b74:	4013      	ands	r3, r2
 8004b76:	d11f      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e08b      	b.n	8004c94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d107      	bne.n	8004b94 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b84:	4b47      	ldr	r3, [pc, #284]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	2380      	movs	r3, #128	@ 0x80
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d113      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e07f      	b.n	8004c94 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d106      	bne.n	8004baa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004b9c:	4b41      	ldr	r3, [pc, #260]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	d108      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e074      	b.n	8004c94 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004baa:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bae:	2202      	movs	r2, #2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d101      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e06d      	b.n	8004c94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2207      	movs	r2, #7
 8004bbe:	4393      	bics	r3, r2
 8004bc0:	0019      	movs	r1, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	4b37      	ldr	r3, [pc, #220]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bcc:	f7fd ff3a 	bl	8002a44 <HAL_GetTick>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd4:	e009      	b.n	8004bea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd6:	f7fd ff35 	bl	8002a44 <HAL_GetTick>
 8004bda:	0002      	movs	r2, r0
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	4a2f      	ldr	r2, [pc, #188]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e054      	b.n	8004c94 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bea:	4b2e      	ldr	r3, [pc, #184]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2238      	movs	r2, #56	@ 0x38
 8004bf0:	401a      	ands	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d1ec      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bfc:	4b27      	ldr	r3, [pc, #156]	@ (8004c9c <HAL_RCC_ClockConfig+0x1f0>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2207      	movs	r2, #7
 8004c02:	4013      	ands	r3, r2
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d21e      	bcs.n	8004c48 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0a:	4b24      	ldr	r3, [pc, #144]	@ (8004c9c <HAL_RCC_ClockConfig+0x1f0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2207      	movs	r2, #7
 8004c10:	4393      	bics	r3, r2
 8004c12:	0019      	movs	r1, r3
 8004c14:	4b21      	ldr	r3, [pc, #132]	@ (8004c9c <HAL_RCC_ClockConfig+0x1f0>)
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c1c:	f7fd ff12 	bl	8002a44 <HAL_GetTick>
 8004c20:	0003      	movs	r3, r0
 8004c22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c24:	e009      	b.n	8004c3a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004c26:	f7fd ff0d 	bl	8002a44 <HAL_GetTick>
 8004c2a:	0002      	movs	r2, r0
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e02c      	b.n	8004c94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c3a:	4b18      	ldr	r3, [pc, #96]	@ (8004c9c <HAL_RCC_ClockConfig+0x1f0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2207      	movs	r2, #7
 8004c40:	4013      	ands	r3, r2
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d1ee      	bne.n	8004c26 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d009      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c52:	4b14      	ldr	r3, [pc, #80]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	4a16      	ldr	r2, [pc, #88]	@ (8004cb0 <HAL_RCC_ClockConfig+0x204>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	0019      	movs	r1, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	4b10      	ldr	r3, [pc, #64]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004c62:	430a      	orrs	r2, r1
 8004c64:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004c66:	f000 f82b 	bl	8004cc0 <HAL_RCC_GetSysClockFreq>
 8004c6a:	0001      	movs	r1, r0
 8004c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c70:	0a1b      	lsrs	r3, r3, #8
 8004c72:	220f      	movs	r2, #15
 8004c74:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004c76:	4b0f      	ldr	r3, [pc, #60]	@ (8004cb4 <HAL_RCC_ClockConfig+0x208>)
 8004c78:	0092      	lsls	r2, r2, #2
 8004c7a:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c7c:	221f      	movs	r2, #31
 8004c7e:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004c80:	000a      	movs	r2, r1
 8004c82:	40da      	lsrs	r2, r3
 8004c84:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb8 <HAL_RCC_ClockConfig+0x20c>)
 8004c86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c88:	4b0c      	ldr	r3, [pc, #48]	@ (8004cbc <HAL_RCC_ClockConfig+0x210>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7fd fe7d 	bl	800298c <HAL_InitTick>
 8004c92:	0003      	movs	r3, r0
}
 8004c94:	0018      	movs	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b004      	add	sp, #16
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40022000 	.word	0x40022000
 8004ca0:	00001388 	.word	0x00001388
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	ffff84ff 	.word	0xffff84ff
 8004cac:	fffff0ff 	.word	0xfffff0ff
 8004cb0:	ffff8fff 	.word	0xffff8fff
 8004cb4:	08006b20 	.word	0x08006b20
 8004cb8:	20000000 	.word	0x20000000
 8004cbc:	20000004 	.word	0x20000004

08004cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8004cc6:	4b23      	ldr	r3, [pc, #140]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	089b      	lsrs	r3, r3, #2
 8004ccc:	2207      	movs	r2, #7
 8004cce:	4013      	ands	r3, r2
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2238      	movs	r2, #56	@ 0x38
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d10f      	bne.n	8004cfe <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004cde:	4b1d      	ldr	r3, [pc, #116]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	0adb      	lsrs	r3, r3, #11
 8004ce4:	2207      	movs	r2, #7
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2201      	movs	r2, #1
 8004cea:	409a      	lsls	r2, r3
 8004cec:	0013      	movs	r3, r2
 8004cee:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4819      	ldr	r0, [pc, #100]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cf4:	f7fb fa08 	bl	8000108 <__udivsi3>
 8004cf8:	0003      	movs	r3, r0
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e01e      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004cfe:	4b15      	ldr	r3, [pc, #84]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2238      	movs	r2, #56	@ 0x38
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d102      	bne.n	8004d10 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d0a:	4b14      	ldr	r3, [pc, #80]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	e015      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004d10:	4b10      	ldr	r3, [pc, #64]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2238      	movs	r2, #56	@ 0x38
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	d103      	bne.n	8004d24 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004d1c:	2380      	movs	r3, #128	@ 0x80
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	e00b      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004d24:	4b0b      	ldr	r3, [pc, #44]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2238      	movs	r2, #56	@ 0x38
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b18      	cmp	r3, #24
 8004d2e:	d103      	bne.n	8004d38 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004d30:	23fa      	movs	r3, #250	@ 0xfa
 8004d32:	01db      	lsls	r3, r3, #7
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	e001      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f7fb f9e2 	bl	8000108 <__udivsi3>
 8004d44:	0003      	movs	r3, r0
 8004d46:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8004d48:	68fb      	ldr	r3, [r7, #12]
}
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	b004      	add	sp, #16
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	40021000 	.word	0x40021000
 8004d58:	02dc6c00 	.word	0x02dc6c00
 8004d5c:	016e3600 	.word	0x016e3600

08004d60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004d64:	f7ff ffac 	bl	8004cc0 <HAL_RCC_GetSysClockFreq>
 8004d68:	0001      	movs	r1, r0
 8004d6a:	4b09      	ldr	r3, [pc, #36]	@ (8004d90 <HAL_RCC_GetHCLKFreq+0x30>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004d6e:	0a1b      	lsrs	r3, r3, #8
 8004d70:	220f      	movs	r2, #15
 8004d72:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004d74:	4b07      	ldr	r3, [pc, #28]	@ (8004d94 <HAL_RCC_GetHCLKFreq+0x34>)
 8004d76:	0092      	lsls	r2, r2, #2
 8004d78:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004d7a:	221f      	movs	r2, #31
 8004d7c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004d7e:	000a      	movs	r2, r1
 8004d80:	40da      	lsrs	r2, r3
 8004d82:	4b05      	ldr	r3, [pc, #20]	@ (8004d98 <HAL_RCC_GetHCLKFreq+0x38>)
 8004d84:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8004d86:	4b04      	ldr	r3, [pc, #16]	@ (8004d98 <HAL_RCC_GetHCLKFreq+0x38>)
 8004d88:	681b      	ldr	r3, [r3, #0]
}
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40021000 	.word	0x40021000
 8004d94:	08006b20 	.word	0x08006b20
 8004d98:	20000000 	.word	0x20000000

08004d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8004da0:	f7ff ffde 	bl	8004d60 <HAL_RCC_GetHCLKFreq>
 8004da4:	0001      	movs	r1, r0
 8004da6:	4b07      	ldr	r3, [pc, #28]	@ (8004dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	0b1b      	lsrs	r3, r3, #12
 8004dac:	2207      	movs	r2, #7
 8004dae:	401a      	ands	r2, r3
 8004db0:	4b05      	ldr	r3, [pc, #20]	@ (8004dc8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004db2:	0092      	lsls	r2, r2, #2
 8004db4:	58d3      	ldr	r3, [r2, r3]
 8004db6:	221f      	movs	r2, #31
 8004db8:	4013      	ands	r3, r2
 8004dba:	40d9      	lsrs	r1, r3
 8004dbc:	000b      	movs	r3, r1
}
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	08006b60 	.word	0x08006b60

08004dcc <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004dd4:	2313      	movs	r3, #19
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ddc:	2312      	movs	r3, #18
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2240      	movs	r2, #64	@ 0x40
 8004dea:	4013      	ands	r3, r2
 8004dec:	d100      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8004dee:	e079      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df0:	2011      	movs	r0, #17
 8004df2:	183b      	adds	r3, r7, r0
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df8:	4b63      	ldr	r3, [pc, #396]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dfc:	2380      	movs	r3, #128	@ 0x80
 8004dfe:	055b      	lsls	r3, r3, #21
 8004e00:	4013      	ands	r3, r2
 8004e02:	d110      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e04:	4b60      	ldr	r3, [pc, #384]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e08:	4b5f      	ldr	r3, [pc, #380]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e0a:	2180      	movs	r1, #128	@ 0x80
 8004e0c:	0549      	lsls	r1, r1, #21
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e12:	4b5d      	ldr	r3, [pc, #372]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e16:	2380      	movs	r3, #128	@ 0x80
 8004e18:	055b      	lsls	r3, r3, #21
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e20:	183b      	adds	r3, r7, r0
 8004e22:	2201      	movs	r2, #1
 8004e24:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8004e26:	4b58      	ldr	r3, [pc, #352]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e2a:	23c0      	movs	r3, #192	@ 0xc0
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4013      	ands	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d019      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d014      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004e42:	4b51      	ldr	r3, [pc, #324]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e46:	4a51      	ldr	r2, [pc, #324]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e4c:	4b4e      	ldr	r3, [pc, #312]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e50:	4b4d      	ldr	r3, [pc, #308]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e52:	2180      	movs	r1, #128	@ 0x80
 8004e54:	0249      	lsls	r1, r1, #9
 8004e56:	430a      	orrs	r2, r1
 8004e58:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e5a:	4b4b      	ldr	r3, [pc, #300]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e60:	494b      	ldr	r1, [pc, #300]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004e62:	400a      	ands	r2, r1
 8004e64:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004e66:	4b48      	ldr	r3, [pc, #288]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	4013      	ands	r3, r2
 8004e72:	d016      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e74:	f7fd fde6 	bl	8002a44 <HAL_GetTick>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004e7c:	e00c      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7e:	f7fd fde1 	bl	8002a44 <HAL_GetTick>
 8004e82:	0002      	movs	r2, r0
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	4a42      	ldr	r2, [pc, #264]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d904      	bls.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8004e8e:	2313      	movs	r3, #19
 8004e90:	18fb      	adds	r3, r7, r3
 8004e92:	2203      	movs	r2, #3
 8004e94:	701a      	strb	r2, [r3, #0]
          break;
 8004e96:	e004      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004e98:	4b3b      	ldr	r3, [pc, #236]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d0ed      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8004ea2:	2313      	movs	r3, #19
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eac:	4b36      	ldr	r3, [pc, #216]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb0:	4a36      	ldr	r2, [pc, #216]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	0019      	movs	r1, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	4b33      	ldr	r3, [pc, #204]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ec0:	e005      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec2:	2312      	movs	r3, #18
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	2213      	movs	r2, #19
 8004ec8:	18ba      	adds	r2, r7, r2
 8004eca:	7812      	ldrb	r2, [r2, #0]
 8004ecc:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ece:	2311      	movs	r3, #17
 8004ed0:	18fb      	adds	r3, r7, r3
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d105      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004eda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004edc:	4b2a      	ldr	r3, [pc, #168]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ede:	492e      	ldr	r1, [pc, #184]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	4013      	ands	r3, r2
 8004eec:	d009      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eee:	4b26      	ldr	r3, [pc, #152]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef2:	2203      	movs	r2, #3
 8004ef4:	4393      	bics	r3, r2
 8004ef6:	0019      	movs	r1, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	4b22      	ldr	r3, [pc, #136]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004efe:	430a      	orrs	r2, r1
 8004f00:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2202      	movs	r2, #2
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d009      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f10:	4a22      	ldr	r2, [pc, #136]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	0019      	movs	r1, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2220      	movs	r2, #32
 8004f26:	4013      	ands	r3, r2
 8004f28:	d008      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f2a:	4b17      	ldr	r3, [pc, #92]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	0899      	lsrs	r1, r3, #2
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	4b14      	ldr	r3, [pc, #80]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2204      	movs	r2, #4
 8004f42:	4013      	ands	r3, r2
 8004f44:	d009      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f46:	4b10      	ldr	r3, [pc, #64]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4a:	4a15      	ldr	r2, [pc, #84]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	0019      	movs	r1, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	4b0c      	ldr	r3, [pc, #48]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f56:	430a      	orrs	r2, r1
 8004f58:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2280      	movs	r2, #128	@ 0x80
 8004f60:	4013      	ands	r3, r2
 8004f62:	d009      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8004f64:	4b08      	ldr	r3, [pc, #32]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	22e0      	movs	r2, #224	@ 0xe0
 8004f6a:	4393      	bics	r3, r2
 8004f6c:	0019      	movs	r1, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	4b05      	ldr	r3, [pc, #20]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f74:	430a      	orrs	r2, r1
 8004f76:	601a      	str	r2, [r3, #0]
  }
  return status;
 8004f78:	2312      	movs	r3, #18
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	781b      	ldrb	r3, [r3, #0]
}
 8004f7e:	0018      	movs	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b006      	add	sp, #24
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	46c0      	nop			@ (mov r8, r8)
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	fffffcff 	.word	0xfffffcff
 8004f90:	fffeffff 	.word	0xfffeffff
 8004f94:	00001388 	.word	0x00001388
 8004f98:	efffffff 	.word	0xefffffff
 8004f9c:	ffffcfff 	.word	0xffffcfff
 8004fa0:	ffff3fff 	.word	0xffff3fff

08004fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e04a      	b.n	800504c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	223d      	movs	r2, #61	@ 0x3d
 8004fba:	5c9b      	ldrb	r3, [r3, r2]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d107      	bne.n	8004fd2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	223c      	movs	r2, #60	@ 0x3c
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f7fd fb5f 	bl	8002690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	223d      	movs	r2, #61	@ 0x3d
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	0019      	movs	r1, r3
 8004fe4:	0010      	movs	r0, r2
 8004fe6:	f000 f9fd 	bl	80053e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2248      	movs	r2, #72	@ 0x48
 8004fee:	2101      	movs	r1, #1
 8004ff0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	223e      	movs	r2, #62	@ 0x3e
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	5499      	strb	r1, [r3, r2]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	223f      	movs	r2, #63	@ 0x3f
 8004ffe:	2101      	movs	r1, #1
 8005000:	5499      	strb	r1, [r3, r2]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2240      	movs	r2, #64	@ 0x40
 8005006:	2101      	movs	r1, #1
 8005008:	5499      	strb	r1, [r3, r2]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2241      	movs	r2, #65	@ 0x41
 800500e:	2101      	movs	r1, #1
 8005010:	5499      	strb	r1, [r3, r2]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2242      	movs	r2, #66	@ 0x42
 8005016:	2101      	movs	r1, #1
 8005018:	5499      	strb	r1, [r3, r2]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2243      	movs	r2, #67	@ 0x43
 800501e:	2101      	movs	r1, #1
 8005020:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2244      	movs	r2, #68	@ 0x44
 8005026:	2101      	movs	r1, #1
 8005028:	5499      	strb	r1, [r3, r2]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2245      	movs	r2, #69	@ 0x45
 800502e:	2101      	movs	r1, #1
 8005030:	5499      	strb	r1, [r3, r2]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2246      	movs	r2, #70	@ 0x46
 8005036:	2101      	movs	r1, #1
 8005038:	5499      	strb	r1, [r3, r2]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2247      	movs	r2, #71	@ 0x47
 800503e:	2101      	movs	r1, #1
 8005040:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	223d      	movs	r2, #61	@ 0x3d
 8005046:	2101      	movs	r1, #1
 8005048:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	0018      	movs	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	b002      	add	sp, #8
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	223d      	movs	r2, #61	@ 0x3d
 8005060:	5c9b      	ldrb	r3, [r3, r2]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	d001      	beq.n	800506c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e037      	b.n	80050dc <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	223d      	movs	r2, #61	@ 0x3d
 8005070:	2102      	movs	r1, #2
 8005072:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2101      	movs	r1, #1
 8005080:	430a      	orrs	r2, r1
 8005082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a16      	ldr	r2, [pc, #88]	@ (80050e4 <HAL_TIM_Base_Start_IT+0x90>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x44>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a15      	ldr	r2, [pc, #84]	@ (80050e8 <HAL_TIM_Base_Start_IT+0x94>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d116      	bne.n	80050c6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	4a13      	ldr	r2, [pc, #76]	@ (80050ec <HAL_TIM_Base_Start_IT+0x98>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b06      	cmp	r3, #6
 80050a8:	d016      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0x84>
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	2380      	movs	r3, #128	@ 0x80
 80050ae:	025b      	lsls	r3, r3, #9
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d011      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2101      	movs	r1, #1
 80050c0:	430a      	orrs	r2, r1
 80050c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c4:	e008      	b.n	80050d8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2101      	movs	r1, #1
 80050d2:	430a      	orrs	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e000      	b.n	80050da <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	0018      	movs	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	b004      	add	sp, #16
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40012c00 	.word	0x40012c00
 80050e8:	40000400 	.word	0x40000400
 80050ec:	00010007 	.word	0x00010007

080050f0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e042      	b.n	800518a <HAL_TIM_OnePulse_Init+0x9a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	223d      	movs	r2, #61	@ 0x3d
 8005108:	5c9b      	ldrb	r3, [r3, r2]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d107      	bne.n	8005120 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	223c      	movs	r2, #60	@ 0x3c
 8005114:	2100      	movs	r1, #0
 8005116:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	0018      	movs	r0, r3
 800511c:	f7fd fa9a 	bl	8002654 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	223d      	movs	r2, #61	@ 0x3d
 8005124:	2102      	movs	r1, #2
 8005126:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	0019      	movs	r1, r3
 8005132:	0010      	movs	r0, r2
 8005134:	f000 f956 	bl	80053e4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2108      	movs	r1, #8
 8005144:	438a      	bics	r2, r1
 8005146:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6819      	ldr	r1, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2248      	movs	r2, #72	@ 0x48
 800515c:	2101      	movs	r1, #1
 800515e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	223e      	movs	r2, #62	@ 0x3e
 8005164:	2101      	movs	r1, #1
 8005166:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	223f      	movs	r2, #63	@ 0x3f
 800516c:	2101      	movs	r1, #1
 800516e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2244      	movs	r2, #68	@ 0x44
 8005174:	2101      	movs	r1, #1
 8005176:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2245      	movs	r2, #69	@ 0x45
 800517c:	2101      	movs	r1, #1
 800517e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	223d      	movs	r2, #61	@ 0x3d
 8005184:	2101      	movs	r1, #1
 8005186:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	0018      	movs	r0, r3
 800518c:	46bd      	mov	sp, r7
 800518e:	b002      	add	sp, #8
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2202      	movs	r2, #2
 80051b0:	4013      	ands	r3, r2
 80051b2:	d021      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2202      	movs	r2, #2
 80051b8:	4013      	ands	r3, r2
 80051ba:	d01d      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2203      	movs	r2, #3
 80051c2:	4252      	negs	r2, r2
 80051c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	2203      	movs	r2, #3
 80051d4:	4013      	ands	r3, r2
 80051d6:	d004      	beq.n	80051e2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	0018      	movs	r0, r3
 80051dc:	f000 f8ea 	bl	80053b4 <HAL_TIM_IC_CaptureCallback>
 80051e0:	e007      	b.n	80051f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	0018      	movs	r0, r3
 80051e6:	f000 f8dd 	bl	80053a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	0018      	movs	r0, r3
 80051ee:	f000 f8e9 	bl	80053c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2204      	movs	r2, #4
 80051fc:	4013      	ands	r3, r2
 80051fe:	d022      	beq.n	8005246 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2204      	movs	r2, #4
 8005204:	4013      	ands	r3, r2
 8005206:	d01e      	beq.n	8005246 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2205      	movs	r2, #5
 800520e:	4252      	negs	r2, r2
 8005210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2202      	movs	r2, #2
 8005216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	23c0      	movs	r3, #192	@ 0xc0
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4013      	ands	r3, r2
 8005224:	d004      	beq.n	8005230 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	0018      	movs	r0, r3
 800522a:	f000 f8c3 	bl	80053b4 <HAL_TIM_IC_CaptureCallback>
 800522e:	e007      	b.n	8005240 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	0018      	movs	r0, r3
 8005234:	f000 f8b6 	bl	80053a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	0018      	movs	r0, r3
 800523c:	f000 f8c2 	bl	80053c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2208      	movs	r2, #8
 800524a:	4013      	ands	r3, r2
 800524c:	d021      	beq.n	8005292 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2208      	movs	r2, #8
 8005252:	4013      	ands	r3, r2
 8005254:	d01d      	beq.n	8005292 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2209      	movs	r2, #9
 800525c:	4252      	negs	r2, r2
 800525e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2204      	movs	r2, #4
 8005264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	2203      	movs	r2, #3
 800526e:	4013      	ands	r3, r2
 8005270:	d004      	beq.n	800527c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	0018      	movs	r0, r3
 8005276:	f000 f89d 	bl	80053b4 <HAL_TIM_IC_CaptureCallback>
 800527a:	e007      	b.n	800528c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	0018      	movs	r0, r3
 8005280:	f000 f890 	bl	80053a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	0018      	movs	r0, r3
 8005288:	f000 f89c 	bl	80053c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2210      	movs	r2, #16
 8005296:	4013      	ands	r3, r2
 8005298:	d022      	beq.n	80052e0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2210      	movs	r2, #16
 800529e:	4013      	ands	r3, r2
 80052a0:	d01e      	beq.n	80052e0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2211      	movs	r2, #17
 80052a8:	4252      	negs	r2, r2
 80052aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2208      	movs	r2, #8
 80052b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	23c0      	movs	r3, #192	@ 0xc0
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4013      	ands	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	0018      	movs	r0, r3
 80052c4:	f000 f876 	bl	80053b4 <HAL_TIM_IC_CaptureCallback>
 80052c8:	e007      	b.n	80052da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	0018      	movs	r0, r3
 80052ce:	f000 f869 	bl	80053a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	0018      	movs	r0, r3
 80052d6:	f000 f875 	bl	80053c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2201      	movs	r2, #1
 80052e4:	4013      	ands	r3, r2
 80052e6:	d00c      	beq.n	8005302 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	4013      	ands	r3, r2
 80052ee:	d008      	beq.n	8005302 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2202      	movs	r2, #2
 80052f6:	4252      	negs	r2, r2
 80052f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	0018      	movs	r0, r3
 80052fe:	f7fc fdc7 	bl	8001e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2280      	movs	r2, #128	@ 0x80
 8005306:	4013      	ands	r3, r2
 8005308:	d104      	bne.n	8005314 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	2380      	movs	r3, #128	@ 0x80
 800530e:	019b      	lsls	r3, r3, #6
 8005310:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005312:	d00b      	beq.n	800532c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2280      	movs	r2, #128	@ 0x80
 8005318:	4013      	ands	r3, r2
 800531a:	d007      	beq.n	800532c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1e      	ldr	r2, [pc, #120]	@ (800539c <HAL_TIM_IRQHandler+0x208>)
 8005322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	0018      	movs	r0, r3
 8005328:	f000 f940 	bl	80055ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	2380      	movs	r3, #128	@ 0x80
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	4013      	ands	r3, r2
 8005334:	d00b      	beq.n	800534e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2280      	movs	r2, #128	@ 0x80
 800533a:	4013      	ands	r3, r2
 800533c:	d007      	beq.n	800534e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a17      	ldr	r2, [pc, #92]	@ (80053a0 <HAL_TIM_IRQHandler+0x20c>)
 8005344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	0018      	movs	r0, r3
 800534a:	f000 f937 	bl	80055bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2240      	movs	r2, #64	@ 0x40
 8005352:	4013      	ands	r3, r2
 8005354:	d00c      	beq.n	8005370 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2240      	movs	r2, #64	@ 0x40
 800535a:	4013      	ands	r3, r2
 800535c:	d008      	beq.n	8005370 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2241      	movs	r2, #65	@ 0x41
 8005364:	4252      	negs	r2, r2
 8005366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	0018      	movs	r0, r3
 800536c:	f000 f832 	bl	80053d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2220      	movs	r2, #32
 8005374:	4013      	ands	r3, r2
 8005376:	d00c      	beq.n	8005392 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	4013      	ands	r3, r2
 800537e:	d008      	beq.n	8005392 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2221      	movs	r2, #33	@ 0x21
 8005386:	4252      	negs	r2, r2
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	0018      	movs	r0, r3
 800538e:	f000 f905 	bl	800559c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	46bd      	mov	sp, r7
 8005396:	b004      	add	sp, #16
 8005398:	bd80      	pop	{r7, pc}
 800539a:	46c0      	nop			@ (mov r8, r8)
 800539c:	ffffdf7f 	.word	0xffffdf7f
 80053a0:	fffffeff 	.word	0xfffffeff

080053a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053ac:	46c0      	nop			@ (mov r8, r8)
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b002      	add	sp, #8
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053bc:	46c0      	nop			@ (mov r8, r8)
 80053be:	46bd      	mov	sp, r7
 80053c0:	b002      	add	sp, #8
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053cc:	46c0      	nop			@ (mov r8, r8)
 80053ce:	46bd      	mov	sp, r7
 80053d0:	b002      	add	sp, #8
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053dc:	46c0      	nop			@ (mov r8, r8)
 80053de:	46bd      	mov	sp, r7
 80053e0:	b002      	add	sp, #8
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a32      	ldr	r2, [pc, #200]	@ (80054c0 <TIM_Base_SetConfig+0xdc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_Base_SetConfig+0x20>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a31      	ldr	r2, [pc, #196]	@ (80054c4 <TIM_Base_SetConfig+0xe0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d108      	bne.n	8005416 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2270      	movs	r2, #112	@ 0x70
 8005408:	4393      	bics	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a29      	ldr	r2, [pc, #164]	@ (80054c0 <TIM_Base_SetConfig+0xdc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00f      	beq.n	800543e <TIM_Base_SetConfig+0x5a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a28      	ldr	r2, [pc, #160]	@ (80054c4 <TIM_Base_SetConfig+0xe0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00b      	beq.n	800543e <TIM_Base_SetConfig+0x5a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a27      	ldr	r2, [pc, #156]	@ (80054c8 <TIM_Base_SetConfig+0xe4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d007      	beq.n	800543e <TIM_Base_SetConfig+0x5a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a26      	ldr	r2, [pc, #152]	@ (80054cc <TIM_Base_SetConfig+0xe8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <TIM_Base_SetConfig+0x5a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a25      	ldr	r2, [pc, #148]	@ (80054d0 <TIM_Base_SetConfig+0xec>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d108      	bne.n	8005450 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a24      	ldr	r2, [pc, #144]	@ (80054d4 <TIM_Base_SetConfig+0xf0>)
 8005442:	4013      	ands	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2280      	movs	r2, #128	@ 0x80
 8005454:	4393      	bics	r3, r2
 8005456:	001a      	movs	r2, r3
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a11      	ldr	r2, [pc, #68]	@ (80054c0 <TIM_Base_SetConfig+0xdc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d007      	beq.n	800548e <TIM_Base_SetConfig+0xaa>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a12      	ldr	r2, [pc, #72]	@ (80054cc <TIM_Base_SetConfig+0xe8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <TIM_Base_SetConfig+0xaa>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a11      	ldr	r2, [pc, #68]	@ (80054d0 <TIM_Base_SetConfig+0xec>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d103      	bne.n	8005496 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	2201      	movs	r2, #1
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d106      	bne.n	80054b6 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	2201      	movs	r2, #1
 80054ae:	4393      	bics	r3, r2
 80054b0:	001a      	movs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	611a      	str	r2, [r3, #16]
  }
}
 80054b6:	46c0      	nop			@ (mov r8, r8)
 80054b8:	46bd      	mov	sp, r7
 80054ba:	b004      	add	sp, #16
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	46c0      	nop			@ (mov r8, r8)
 80054c0:	40012c00 	.word	0x40012c00
 80054c4:	40000400 	.word	0x40000400
 80054c8:	40002000 	.word	0x40002000
 80054cc:	40014400 	.word	0x40014400
 80054d0:	40014800 	.word	0x40014800
 80054d4:	fffffcff 	.word	0xfffffcff

080054d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	223c      	movs	r2, #60	@ 0x3c
 80054e6:	5c9b      	ldrb	r3, [r3, r2]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e04a      	b.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	223c      	movs	r2, #60	@ 0x3c
 80054f4:	2101      	movs	r1, #1
 80054f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	223d      	movs	r2, #61	@ 0x3d
 80054fc:	2102      	movs	r1, #2
 80054fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1e      	ldr	r2, [pc, #120]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d108      	bne.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4a1d      	ldr	r2, [pc, #116]	@ (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800551e:	4013      	ands	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2270      	movs	r2, #112	@ 0x70
 8005530:	4393      	bics	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a11      	ldr	r2, [pc, #68]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d004      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a10      	ldr	r2, [pc, #64]	@ (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d10c      	bne.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2280      	movs	r2, #128	@ 0x80
 800555e:	4393      	bics	r3, r2
 8005560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	4313      	orrs	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	223d      	movs	r2, #61	@ 0x3d
 8005578:	2101      	movs	r1, #1
 800557a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	223c      	movs	r2, #60	@ 0x3c
 8005580:	2100      	movs	r1, #0
 8005582:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	0018      	movs	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	b004      	add	sp, #16
 800558c:	bd80      	pop	{r7, pc}
 800558e:	46c0      	nop			@ (mov r8, r8)
 8005590:	40012c00 	.word	0x40012c00
 8005594:	ff0fffff 	.word	0xff0fffff
 8005598:	40000400 	.word	0x40000400

0800559c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a4:	46c0      	nop			@ (mov r8, r8)
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b002      	add	sp, #8
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b4:	46c0      	nop			@ (mov r8, r8)
 80055b6:	46bd      	mov	sp, r7
 80055b8:	b002      	add	sp, #8
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055c4:	46c0      	nop			@ (mov r8, r8)
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b002      	add	sp, #8
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e046      	b.n	800566c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2288      	movs	r2, #136	@ 0x88
 80055e2:	589b      	ldr	r3, [r3, r2]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d107      	bne.n	80055f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2284      	movs	r2, #132	@ 0x84
 80055ec:	2100      	movs	r1, #0
 80055ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	0018      	movs	r0, r3
 80055f4:	f7fd f892 	bl	800271c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2288      	movs	r2, #136	@ 0x88
 80055fc:	2124      	movs	r1, #36	@ 0x24
 80055fe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2101      	movs	r1, #1
 800560c:	438a      	bics	r2, r1
 800560e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	0018      	movs	r0, r3
 800561c:	f000 fe60 	bl	80062e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	0018      	movs	r0, r3
 8005624:	f000 fcde 	bl	8005fe4 <UART_SetConfig>
 8005628:	0003      	movs	r3, r0
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e01c      	b.n	800566c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	490d      	ldr	r1, [pc, #52]	@ (8005674 <HAL_UART_Init+0xa8>)
 800563e:	400a      	ands	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	212a      	movs	r1, #42	@ 0x2a
 800564e:	438a      	bics	r2, r1
 8005650:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2101      	movs	r1, #1
 800565e:	430a      	orrs	r2, r1
 8005660:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	0018      	movs	r0, r3
 8005666:	f000 feef 	bl	8006448 <UART_CheckIdleState>
 800566a:	0003      	movs	r3, r0
}
 800566c:	0018      	movs	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	b002      	add	sp, #8
 8005672:	bd80      	pop	{r7, pc}
 8005674:	ffffb7ff 	.word	0xffffb7ff

08005678 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e04e      	b.n	8005728 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2288      	movs	r2, #136	@ 0x88
 800568e:	589b      	ldr	r3, [r3, r2]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d107      	bne.n	80056a4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2284      	movs	r2, #132	@ 0x84
 8005698:	2100      	movs	r1, #0
 800569a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	0018      	movs	r0, r3
 80056a0:	f7fd f83c 	bl	800271c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2288      	movs	r2, #136	@ 0x88
 80056a8:	2124      	movs	r1, #36	@ 0x24
 80056aa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2101      	movs	r1, #1
 80056b8:	438a      	bics	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	0018      	movs	r0, r3
 80056c8:	f000 fe0a 	bl	80062e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	0018      	movs	r0, r3
 80056d0:	f000 fc88 	bl	8005fe4 <UART_SetConfig>
 80056d4:	0003      	movs	r3, r0
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e024      	b.n	8005728 <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4911      	ldr	r1, [pc, #68]	@ (8005730 <HAL_HalfDuplex_Init+0xb8>)
 80056ea:	400a      	ands	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2122      	movs	r1, #34	@ 0x22
 80056fa:	438a      	bics	r2, r1
 80056fc:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2108      	movs	r1, #8
 800570a:	430a      	orrs	r2, r1
 800570c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2101      	movs	r1, #1
 800571a:	430a      	orrs	r2, r1
 800571c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	0018      	movs	r0, r3
 8005722:	f000 fe91 	bl	8006448 <UART_CheckIdleState>
 8005726:	0003      	movs	r3, r0
}
 8005728:	0018      	movs	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	b002      	add	sp, #8
 800572e:	bd80      	pop	{r7, pc}
 8005730:	ffffb7ff 	.word	0xffffb7ff

08005734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	@ 0x28
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	1dbb      	adds	r3, r7, #6
 8005742:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2288      	movs	r2, #136	@ 0x88
 8005748:	589b      	ldr	r3, [r3, r2]
 800574a:	2b20      	cmp	r3, #32
 800574c:	d000      	beq.n	8005750 <HAL_UART_Transmit+0x1c>
 800574e:	e090      	b.n	8005872 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_UART_Transmit+0x2a>
 8005756:	1dbb      	adds	r3, r7, #6
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e088      	b.n	8005874 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	2380      	movs	r3, #128	@ 0x80
 8005768:	015b      	lsls	r3, r3, #5
 800576a:	429a      	cmp	r2, r3
 800576c:	d109      	bne.n	8005782 <HAL_UART_Transmit+0x4e>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d105      	bne.n	8005782 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2201      	movs	r2, #1
 800577a:	4013      	ands	r3, r2
 800577c:	d001      	beq.n	8005782 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e078      	b.n	8005874 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2290      	movs	r2, #144	@ 0x90
 8005786:	2100      	movs	r1, #0
 8005788:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2288      	movs	r2, #136	@ 0x88
 800578e:	2121      	movs	r1, #33	@ 0x21
 8005790:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005792:	f7fd f957 	bl	8002a44 <HAL_GetTick>
 8005796:	0003      	movs	r3, r0
 8005798:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1dba      	adds	r2, r7, #6
 800579e:	2154      	movs	r1, #84	@ 0x54
 80057a0:	8812      	ldrh	r2, [r2, #0]
 80057a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	1dba      	adds	r2, r7, #6
 80057a8:	2156      	movs	r1, #86	@ 0x56
 80057aa:	8812      	ldrh	r2, [r2, #0]
 80057ac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	2380      	movs	r3, #128	@ 0x80
 80057b4:	015b      	lsls	r3, r3, #5
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d108      	bne.n	80057cc <HAL_UART_Transmit+0x98>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	e003      	b.n	80057d4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057d4:	e030      	b.n	8005838 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	0013      	movs	r3, r2
 80057e0:	2200      	movs	r2, #0
 80057e2:	2180      	movs	r1, #128	@ 0x80
 80057e4:	f000 feda 	bl	800659c <UART_WaitOnFlagUntilTimeout>
 80057e8:	1e03      	subs	r3, r0, #0
 80057ea:	d005      	beq.n	80057f8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2288      	movs	r2, #136	@ 0x88
 80057f0:	2120      	movs	r1, #32
 80057f2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e03d      	b.n	8005874 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10b      	bne.n	8005816 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	001a      	movs	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	05d2      	lsls	r2, r2, #23
 800580a:	0dd2      	lsrs	r2, r2, #23
 800580c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	3302      	adds	r3, #2
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	e007      	b.n	8005826 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	781a      	ldrb	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	3301      	adds	r3, #1
 8005824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2256      	movs	r2, #86	@ 0x56
 800582a:	5a9b      	ldrh	r3, [r3, r2]
 800582c:	b29b      	uxth	r3, r3
 800582e:	3b01      	subs	r3, #1
 8005830:	b299      	uxth	r1, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2256      	movs	r2, #86	@ 0x56
 8005836:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2256      	movs	r2, #86	@ 0x56
 800583c:	5a9b      	ldrh	r3, [r3, r2]
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1c8      	bne.n	80057d6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	0013      	movs	r3, r2
 800584e:	2200      	movs	r2, #0
 8005850:	2140      	movs	r1, #64	@ 0x40
 8005852:	f000 fea3 	bl	800659c <UART_WaitOnFlagUntilTimeout>
 8005856:	1e03      	subs	r3, r0, #0
 8005858:	d005      	beq.n	8005866 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2288      	movs	r2, #136	@ 0x88
 800585e:	2120      	movs	r1, #32
 8005860:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e006      	b.n	8005874 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2288      	movs	r2, #136	@ 0x88
 800586a:	2120      	movs	r1, #32
 800586c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e000      	b.n	8005874 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005872:	2302      	movs	r3, #2
  }
}
 8005874:	0018      	movs	r0, r3
 8005876:	46bd      	mov	sp, r7
 8005878:	b008      	add	sp, #32
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800587c:	b5b0      	push	{r4, r5, r7, lr}
 800587e:	b0aa      	sub	sp, #168	@ 0xa8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	22a4      	movs	r2, #164	@ 0xa4
 800588c:	18b9      	adds	r1, r7, r2
 800588e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	20a0      	movs	r0, #160	@ 0xa0
 8005898:	1839      	adds	r1, r7, r0
 800589a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	249c      	movs	r4, #156	@ 0x9c
 80058a4:	1939      	adds	r1, r7, r4
 80058a6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058a8:	0011      	movs	r1, r2
 80058aa:	18bb      	adds	r3, r7, r2
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4aa2      	ldr	r2, [pc, #648]	@ (8005b38 <HAL_UART_IRQHandler+0x2bc>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	2298      	movs	r2, #152	@ 0x98
 80058b4:	18bd      	adds	r5, r7, r2
 80058b6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80058b8:	18bb      	adds	r3, r7, r2
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d11a      	bne.n	80058f6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058c0:	187b      	adds	r3, r7, r1
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2220      	movs	r2, #32
 80058c6:	4013      	ands	r3, r2
 80058c8:	d015      	beq.n	80058f6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80058ca:	183b      	adds	r3, r7, r0
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2220      	movs	r2, #32
 80058d0:	4013      	ands	r3, r2
 80058d2:	d105      	bne.n	80058e0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058d4:	193b      	adds	r3, r7, r4
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	2380      	movs	r3, #128	@ 0x80
 80058da:	055b      	lsls	r3, r3, #21
 80058dc:	4013      	ands	r3, r2
 80058de:	d00a      	beq.n	80058f6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d100      	bne.n	80058ea <HAL_UART_IRQHandler+0x6e>
 80058e8:	e2fb      	b.n	8005ee2 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	0010      	movs	r0, r2
 80058f2:	4798      	blx	r3
      }
      return;
 80058f4:	e2f5      	b.n	8005ee2 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058f6:	2398      	movs	r3, #152	@ 0x98
 80058f8:	18fb      	adds	r3, r7, r3
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d100      	bne.n	8005902 <HAL_UART_IRQHandler+0x86>
 8005900:	e122      	b.n	8005b48 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005902:	239c      	movs	r3, #156	@ 0x9c
 8005904:	18fb      	adds	r3, r7, r3
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a8c      	ldr	r2, [pc, #560]	@ (8005b3c <HAL_UART_IRQHandler+0x2c0>)
 800590a:	4013      	ands	r3, r2
 800590c:	d106      	bne.n	800591c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800590e:	23a0      	movs	r3, #160	@ 0xa0
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a8a      	ldr	r2, [pc, #552]	@ (8005b40 <HAL_UART_IRQHandler+0x2c4>)
 8005916:	4013      	ands	r3, r2
 8005918:	d100      	bne.n	800591c <HAL_UART_IRQHandler+0xa0>
 800591a:	e115      	b.n	8005b48 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800591c:	23a4      	movs	r3, #164	@ 0xa4
 800591e:	18fb      	adds	r3, r7, r3
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2201      	movs	r2, #1
 8005924:	4013      	ands	r3, r2
 8005926:	d012      	beq.n	800594e <HAL_UART_IRQHandler+0xd2>
 8005928:	23a0      	movs	r3, #160	@ 0xa0
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	2380      	movs	r3, #128	@ 0x80
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	4013      	ands	r3, r2
 8005934:	d00b      	beq.n	800594e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2201      	movs	r2, #1
 800593c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2290      	movs	r2, #144	@ 0x90
 8005942:	589b      	ldr	r3, [r3, r2]
 8005944:	2201      	movs	r2, #1
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2190      	movs	r1, #144	@ 0x90
 800594c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800594e:	23a4      	movs	r3, #164	@ 0xa4
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2202      	movs	r2, #2
 8005956:	4013      	ands	r3, r2
 8005958:	d011      	beq.n	800597e <HAL_UART_IRQHandler+0x102>
 800595a:	239c      	movs	r3, #156	@ 0x9c
 800595c:	18fb      	adds	r3, r7, r3
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2201      	movs	r2, #1
 8005962:	4013      	ands	r3, r2
 8005964:	d00b      	beq.n	800597e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2202      	movs	r2, #2
 800596c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2290      	movs	r2, #144	@ 0x90
 8005972:	589b      	ldr	r3, [r3, r2]
 8005974:	2204      	movs	r2, #4
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2190      	movs	r1, #144	@ 0x90
 800597c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800597e:	23a4      	movs	r3, #164	@ 0xa4
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2204      	movs	r2, #4
 8005986:	4013      	ands	r3, r2
 8005988:	d011      	beq.n	80059ae <HAL_UART_IRQHandler+0x132>
 800598a:	239c      	movs	r3, #156	@ 0x9c
 800598c:	18fb      	adds	r3, r7, r3
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2201      	movs	r2, #1
 8005992:	4013      	ands	r3, r2
 8005994:	d00b      	beq.n	80059ae <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2204      	movs	r2, #4
 800599c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2290      	movs	r2, #144	@ 0x90
 80059a2:	589b      	ldr	r3, [r3, r2]
 80059a4:	2202      	movs	r2, #2
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2190      	movs	r1, #144	@ 0x90
 80059ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059ae:	23a4      	movs	r3, #164	@ 0xa4
 80059b0:	18fb      	adds	r3, r7, r3
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2208      	movs	r2, #8
 80059b6:	4013      	ands	r3, r2
 80059b8:	d017      	beq.n	80059ea <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059ba:	23a0      	movs	r3, #160	@ 0xa0
 80059bc:	18fb      	adds	r3, r7, r3
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2220      	movs	r2, #32
 80059c2:	4013      	ands	r3, r2
 80059c4:	d105      	bne.n	80059d2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80059c6:	239c      	movs	r3, #156	@ 0x9c
 80059c8:	18fb      	adds	r3, r7, r3
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a5b      	ldr	r2, [pc, #364]	@ (8005b3c <HAL_UART_IRQHandler+0x2c0>)
 80059ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059d0:	d00b      	beq.n	80059ea <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2208      	movs	r2, #8
 80059d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2290      	movs	r2, #144	@ 0x90
 80059de:	589b      	ldr	r3, [r3, r2]
 80059e0:	2208      	movs	r2, #8
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2190      	movs	r1, #144	@ 0x90
 80059e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059ea:	23a4      	movs	r3, #164	@ 0xa4
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	2380      	movs	r3, #128	@ 0x80
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	4013      	ands	r3, r2
 80059f6:	d013      	beq.n	8005a20 <HAL_UART_IRQHandler+0x1a4>
 80059f8:	23a0      	movs	r3, #160	@ 0xa0
 80059fa:	18fb      	adds	r3, r7, r3
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	2380      	movs	r3, #128	@ 0x80
 8005a00:	04db      	lsls	r3, r3, #19
 8005a02:	4013      	ands	r3, r2
 8005a04:	d00c      	beq.n	8005a20 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2280      	movs	r2, #128	@ 0x80
 8005a0c:	0112      	lsls	r2, r2, #4
 8005a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2290      	movs	r2, #144	@ 0x90
 8005a14:	589b      	ldr	r3, [r3, r2]
 8005a16:	2220      	movs	r2, #32
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2190      	movs	r1, #144	@ 0x90
 8005a1e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2290      	movs	r2, #144	@ 0x90
 8005a24:	589b      	ldr	r3, [r3, r2]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d100      	bne.n	8005a2c <HAL_UART_IRQHandler+0x1b0>
 8005a2a:	e25c      	b.n	8005ee6 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a2c:	23a4      	movs	r3, #164	@ 0xa4
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2220      	movs	r2, #32
 8005a34:	4013      	ands	r3, r2
 8005a36:	d015      	beq.n	8005a64 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a38:	23a0      	movs	r3, #160	@ 0xa0
 8005a3a:	18fb      	adds	r3, r7, r3
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	4013      	ands	r3, r2
 8005a42:	d106      	bne.n	8005a52 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a44:	239c      	movs	r3, #156	@ 0x9c
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	2380      	movs	r3, #128	@ 0x80
 8005a4c:	055b      	lsls	r3, r3, #21
 8005a4e:	4013      	ands	r3, r2
 8005a50:	d008      	beq.n	8005a64 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d004      	beq.n	8005a64 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	0010      	movs	r0, r2
 8005a62:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2290      	movs	r2, #144	@ 0x90
 8005a68:	589b      	ldr	r3, [r3, r2]
 8005a6a:	2194      	movs	r1, #148	@ 0x94
 8005a6c:	187a      	adds	r2, r7, r1
 8005a6e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2240      	movs	r2, #64	@ 0x40
 8005a78:	4013      	ands	r3, r2
 8005a7a:	2b40      	cmp	r3, #64	@ 0x40
 8005a7c:	d004      	beq.n	8005a88 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a7e:	187b      	adds	r3, r7, r1
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2228      	movs	r2, #40	@ 0x28
 8005a84:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a86:	d04c      	beq.n	8005b22 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f000 fdf6 	bl	800667c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	2240      	movs	r2, #64	@ 0x40
 8005a98:	4013      	ands	r3, r2
 8005a9a:	2b40      	cmp	r3, #64	@ 0x40
 8005a9c:	d13c      	bne.n	8005b18 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005aa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa6:	2090      	movs	r0, #144	@ 0x90
 8005aa8:	183a      	adds	r2, r7, r0
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	2301      	movs	r3, #1
 8005aae:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ab2:	f383 8810 	msr	PRIMASK, r3
}
 8005ab6:	46c0      	nop			@ (mov r8, r8)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2140      	movs	r1, #64	@ 0x40
 8005ac4:	438a      	bics	r2, r1
 8005ac6:	609a      	str	r2, [r3, #8]
 8005ac8:	183b      	adds	r3, r7, r0
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ace:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ad0:	f383 8810 	msr	PRIMASK, r3
}
 8005ad4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2280      	movs	r2, #128	@ 0x80
 8005ada:	589b      	ldr	r3, [r3, r2]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d016      	beq.n	8005b0e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2280      	movs	r2, #128	@ 0x80
 8005ae4:	589b      	ldr	r3, [r3, r2]
 8005ae6:	4a17      	ldr	r2, [pc, #92]	@ (8005b44 <HAL_UART_IRQHandler+0x2c8>)
 8005ae8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2280      	movs	r2, #128	@ 0x80
 8005aee:	589b      	ldr	r3, [r3, r2]
 8005af0:	0018      	movs	r0, r3
 8005af2:	f7fe fa97 	bl	8004024 <HAL_DMA_Abort_IT>
 8005af6:	1e03      	subs	r3, r0, #0
 8005af8:	d01c      	beq.n	8005b34 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2280      	movs	r2, #128	@ 0x80
 8005afe:	589b      	ldr	r3, [r3, r2]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	2180      	movs	r1, #128	@ 0x80
 8005b06:	5852      	ldr	r2, [r2, r1]
 8005b08:	0010      	movs	r0, r2
 8005b0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0c:	e012      	b.n	8005b34 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f000 fa01 	bl	8005f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b16:	e00d      	b.n	8005b34 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f000 f9fc 	bl	8005f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b20:	e008      	b.n	8005b34 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f000 f9f7 	bl	8005f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2290      	movs	r2, #144	@ 0x90
 8005b2e:	2100      	movs	r1, #0
 8005b30:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005b32:	e1d8      	b.n	8005ee6 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b34:	46c0      	nop			@ (mov r8, r8)
    return;
 8005b36:	e1d6      	b.n	8005ee6 <HAL_UART_IRQHandler+0x66a>
 8005b38:	0000080f 	.word	0x0000080f
 8005b3c:	10000001 	.word	0x10000001
 8005b40:	04000120 	.word	0x04000120
 8005b44:	08006749 	.word	0x08006749

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d000      	beq.n	8005b52 <HAL_UART_IRQHandler+0x2d6>
 8005b50:	e15d      	b.n	8005e0e <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b52:	23a4      	movs	r3, #164	@ 0xa4
 8005b54:	18fb      	adds	r3, r7, r3
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2210      	movs	r2, #16
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d100      	bne.n	8005b60 <HAL_UART_IRQHandler+0x2e4>
 8005b5e:	e156      	b.n	8005e0e <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b60:	23a0      	movs	r3, #160	@ 0xa0
 8005b62:	18fb      	adds	r3, r7, r3
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2210      	movs	r2, #16
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d100      	bne.n	8005b6e <HAL_UART_IRQHandler+0x2f2>
 8005b6c:	e14f      	b.n	8005e0e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2210      	movs	r2, #16
 8005b74:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	2240      	movs	r2, #64	@ 0x40
 8005b7e:	4013      	ands	r3, r2
 8005b80:	2b40      	cmp	r3, #64	@ 0x40
 8005b82:	d000      	beq.n	8005b86 <HAL_UART_IRQHandler+0x30a>
 8005b84:	e0c3      	b.n	8005d0e <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2280      	movs	r2, #128	@ 0x80
 8005b8a:	589b      	ldr	r3, [r3, r2]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	217e      	movs	r1, #126	@ 0x7e
 8005b92:	187b      	adds	r3, r7, r1
 8005b94:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005b96:	187b      	adds	r3, r7, r1
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d100      	bne.n	8005ba0 <HAL_UART_IRQHandler+0x324>
 8005b9e:	e097      	b.n	8005cd0 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	225c      	movs	r2, #92	@ 0x5c
 8005ba4:	5a9b      	ldrh	r3, [r3, r2]
 8005ba6:	187a      	adds	r2, r7, r1
 8005ba8:	8812      	ldrh	r2, [r2, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d300      	bcc.n	8005bb0 <HAL_UART_IRQHandler+0x334>
 8005bae:	e08f      	b.n	8005cd0 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	187a      	adds	r2, r7, r1
 8005bb4:	215e      	movs	r1, #94	@ 0x5e
 8005bb6:	8812      	ldrh	r2, [r2, #0]
 8005bb8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2280      	movs	r2, #128	@ 0x80
 8005bbe:	589b      	ldr	r3, [r3, r2]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	d170      	bne.n	8005cac <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005bca:	f3ef 8310 	mrs	r3, PRIMASK
 8005bce:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bd2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bda:	f383 8810 	msr	PRIMASK, r3
}
 8005bde:	46c0      	nop			@ (mov r8, r8)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	49c4      	ldr	r1, [pc, #784]	@ (8005efc <HAL_UART_IRQHandler+0x680>)
 8005bec:	400a      	ands	r2, r1
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf6:	f383 8810 	msr	PRIMASK, r3
}
 8005bfa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c04:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c06:	2301      	movs	r3, #1
 8005c08:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c0c:	f383 8810 	msr	PRIMASK, r3
}
 8005c10:	46c0      	nop			@ (mov r8, r8)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	438a      	bics	r2, r1
 8005c20:	609a      	str	r2, [r3, #8]
 8005c22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c24:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c28:	f383 8810 	msr	PRIMASK, r3
}
 8005c2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c32:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005c34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c36:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c38:	2301      	movs	r3, #1
 8005c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c3e:	f383 8810 	msr	PRIMASK, r3
}
 8005c42:	46c0      	nop			@ (mov r8, r8)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2140      	movs	r1, #64	@ 0x40
 8005c50:	438a      	bics	r2, r1
 8005c52:	609a      	str	r2, [r3, #8]
 8005c54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c56:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c5a:	f383 8810 	msr	PRIMASK, r3
}
 8005c5e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	228c      	movs	r2, #140	@ 0x8c
 8005c64:	2120      	movs	r1, #32
 8005c66:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c72:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c78:	2301      	movs	r3, #1
 8005c7a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c7e:	f383 8810 	msr	PRIMASK, r3
}
 8005c82:	46c0      	nop			@ (mov r8, r8)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2110      	movs	r1, #16
 8005c90:	438a      	bics	r2, r1
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c9a:	f383 8810 	msr	PRIMASK, r3
}
 8005c9e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2280      	movs	r2, #128	@ 0x80
 8005ca4:	589b      	ldr	r3, [r3, r2]
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f7fe f95a 	bl	8003f60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	225c      	movs	r2, #92	@ 0x5c
 8005cb6:	5a9a      	ldrh	r2, [r3, r2]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	215e      	movs	r1, #94	@ 0x5e
 8005cbc:	5a5b      	ldrh	r3, [r3, r1]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	0011      	movs	r1, r2
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f000 f92d 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005cce:	e10c      	b.n	8005eea <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	225c      	movs	r2, #92	@ 0x5c
 8005cd4:	5a9b      	ldrh	r3, [r3, r2]
 8005cd6:	227e      	movs	r2, #126	@ 0x7e
 8005cd8:	18ba      	adds	r2, r7, r2
 8005cda:	8812      	ldrh	r2, [r2, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d000      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x466>
 8005ce0:	e103      	b.n	8005eea <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2280      	movs	r2, #128	@ 0x80
 8005ce6:	589b      	ldr	r3, [r3, r2]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2220      	movs	r2, #32
 8005cee:	4013      	ands	r3, r2
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d000      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x47a>
 8005cf4:	e0f9      	b.n	8005eea <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	225c      	movs	r2, #92	@ 0x5c
 8005d00:	5a9a      	ldrh	r2, [r3, r2]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	0011      	movs	r1, r2
 8005d06:	0018      	movs	r0, r3
 8005d08:	f000 f90e 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
      return;
 8005d0c:	e0ed      	b.n	8005eea <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	225c      	movs	r2, #92	@ 0x5c
 8005d12:	5a99      	ldrh	r1, [r3, r2]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	225e      	movs	r2, #94	@ 0x5e
 8005d18:	5a9b      	ldrh	r3, [r3, r2]
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	208e      	movs	r0, #142	@ 0x8e
 8005d1e:	183b      	adds	r3, r7, r0
 8005d20:	1a8a      	subs	r2, r1, r2
 8005d22:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	225e      	movs	r2, #94	@ 0x5e
 8005d28:	5a9b      	ldrh	r3, [r3, r2]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d100      	bne.n	8005d32 <HAL_UART_IRQHandler+0x4b6>
 8005d30:	e0dd      	b.n	8005eee <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8005d32:	183b      	adds	r3, r7, r0
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d100      	bne.n	8005d3c <HAL_UART_IRQHandler+0x4c0>
 8005d3a:	e0d8      	b.n	8005eee <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d40:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d42:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d44:	2488      	movs	r4, #136	@ 0x88
 8005d46:	193a      	adds	r2, r7, r4
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f383 8810 	msr	PRIMASK, r3
}
 8005d54:	46c0      	nop			@ (mov r8, r8)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4967      	ldr	r1, [pc, #412]	@ (8005f00 <HAL_UART_IRQHandler+0x684>)
 8005d62:	400a      	ands	r2, r1
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	193b      	adds	r3, r7, r4
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f383 8810 	msr	PRIMASK, r3
}
 8005d72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d74:	f3ef 8310 	mrs	r3, PRIMASK
 8005d78:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d7a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d7c:	2484      	movs	r4, #132	@ 0x84
 8005d7e:	193a      	adds	r2, r7, r4
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	2301      	movs	r3, #1
 8005d84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	f383 8810 	msr	PRIMASK, r3
}
 8005d8c:	46c0      	nop			@ (mov r8, r8)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	495a      	ldr	r1, [pc, #360]	@ (8005f04 <HAL_UART_IRQHandler+0x688>)
 8005d9a:	400a      	ands	r2, r1
 8005d9c:	609a      	str	r2, [r3, #8]
 8005d9e:	193b      	adds	r3, r7, r4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	f383 8810 	msr	PRIMASK, r3
}
 8005daa:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	228c      	movs	r2, #140	@ 0x8c
 8005db0:	2120      	movs	r1, #32
 8005db2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc8:	2480      	movs	r4, #128	@ 0x80
 8005dca:	193a      	adds	r2, r7, r4
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	2301      	movs	r3, #1
 8005dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd4:	f383 8810 	msr	PRIMASK, r3
}
 8005dd8:	46c0      	nop			@ (mov r8, r8)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2110      	movs	r1, #16
 8005de6:	438a      	bics	r2, r1
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	193b      	adds	r3, r7, r4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df2:	f383 8810 	msr	PRIMASK, r3
}
 8005df6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dfe:	183b      	adds	r3, r7, r0
 8005e00:	881a      	ldrh	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	0011      	movs	r1, r2
 8005e06:	0018      	movs	r0, r3
 8005e08:	f000 f88e 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e0c:	e06f      	b.n	8005eee <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e0e:	23a4      	movs	r3, #164	@ 0xa4
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	2380      	movs	r3, #128	@ 0x80
 8005e16:	035b      	lsls	r3, r3, #13
 8005e18:	4013      	ands	r3, r2
 8005e1a:	d010      	beq.n	8005e3e <HAL_UART_IRQHandler+0x5c2>
 8005e1c:	239c      	movs	r3, #156	@ 0x9c
 8005e1e:	18fb      	adds	r3, r7, r3
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	2380      	movs	r3, #128	@ 0x80
 8005e24:	03db      	lsls	r3, r3, #15
 8005e26:	4013      	ands	r3, r2
 8005e28:	d009      	beq.n	8005e3e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2280      	movs	r2, #128	@ 0x80
 8005e30:	0352      	lsls	r2, r2, #13
 8005e32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	0018      	movs	r0, r3
 8005e38:	f000 fcc9 	bl	80067ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e3c:	e05a      	b.n	8005ef4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e3e:	23a4      	movs	r3, #164	@ 0xa4
 8005e40:	18fb      	adds	r3, r7, r3
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2280      	movs	r2, #128	@ 0x80
 8005e46:	4013      	ands	r3, r2
 8005e48:	d016      	beq.n	8005e78 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005e4a:	23a0      	movs	r3, #160	@ 0xa0
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2280      	movs	r2, #128	@ 0x80
 8005e52:	4013      	ands	r3, r2
 8005e54:	d106      	bne.n	8005e64 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e56:	239c      	movs	r3, #156	@ 0x9c
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	2380      	movs	r3, #128	@ 0x80
 8005e5e:	041b      	lsls	r3, r3, #16
 8005e60:	4013      	ands	r3, r2
 8005e62:	d009      	beq.n	8005e78 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d042      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	0010      	movs	r0, r2
 8005e74:	4798      	blx	r3
    }
    return;
 8005e76:	e03c      	b.n	8005ef2 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e78:	23a4      	movs	r3, #164	@ 0xa4
 8005e7a:	18fb      	adds	r3, r7, r3
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2240      	movs	r2, #64	@ 0x40
 8005e80:	4013      	ands	r3, r2
 8005e82:	d00a      	beq.n	8005e9a <HAL_UART_IRQHandler+0x61e>
 8005e84:	23a0      	movs	r3, #160	@ 0xa0
 8005e86:	18fb      	adds	r3, r7, r3
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2240      	movs	r2, #64	@ 0x40
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	d004      	beq.n	8005e9a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	0018      	movs	r0, r3
 8005e94:	f000 fc6f 	bl	8006776 <UART_EndTransmit_IT>
    return;
 8005e98:	e02c      	b.n	8005ef4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005e9a:	23a4      	movs	r3, #164	@ 0xa4
 8005e9c:	18fb      	adds	r3, r7, r3
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	2380      	movs	r3, #128	@ 0x80
 8005ea2:	041b      	lsls	r3, r3, #16
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d00b      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x644>
 8005ea8:	23a0      	movs	r3, #160	@ 0xa0
 8005eaa:	18fb      	adds	r3, r7, r3
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	2380      	movs	r3, #128	@ 0x80
 8005eb0:	05db      	lsls	r3, r3, #23
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d004      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	0018      	movs	r0, r3
 8005eba:	f000 fc98 	bl	80067ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ebe:	e019      	b.n	8005ef4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ec0:	23a4      	movs	r3, #164	@ 0xa4
 8005ec2:	18fb      	adds	r3, r7, r3
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	2380      	movs	r3, #128	@ 0x80
 8005ec8:	045b      	lsls	r3, r3, #17
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d012      	beq.n	8005ef4 <HAL_UART_IRQHandler+0x678>
 8005ece:	23a0      	movs	r3, #160	@ 0xa0
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	da0d      	bge.n	8005ef4 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	0018      	movs	r0, r3
 8005edc:	f000 fc7f 	bl	80067de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ee0:	e008      	b.n	8005ef4 <HAL_UART_IRQHandler+0x678>
      return;
 8005ee2:	46c0      	nop			@ (mov r8, r8)
 8005ee4:	e006      	b.n	8005ef4 <HAL_UART_IRQHandler+0x678>
    return;
 8005ee6:	46c0      	nop			@ (mov r8, r8)
 8005ee8:	e004      	b.n	8005ef4 <HAL_UART_IRQHandler+0x678>
      return;
 8005eea:	46c0      	nop			@ (mov r8, r8)
 8005eec:	e002      	b.n	8005ef4 <HAL_UART_IRQHandler+0x678>
      return;
 8005eee:	46c0      	nop			@ (mov r8, r8)
 8005ef0:	e000      	b.n	8005ef4 <HAL_UART_IRQHandler+0x678>
    return;
 8005ef2:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	b02a      	add	sp, #168	@ 0xa8
 8005ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8005efa:	46c0      	nop			@ (mov r8, r8)
 8005efc:	fffffeff 	.word	0xfffffeff
 8005f00:	fffffedf 	.word	0xfffffedf
 8005f04:	effffffe 	.word	0xeffffffe

08005f08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f10:	46c0      	nop			@ (mov r8, r8)
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b002      	add	sp, #8
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f20:	46c0      	nop			@ (mov r8, r8)
 8005f22:	46bd      	mov	sp, r7
 8005f24:	b002      	add	sp, #8
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	000a      	movs	r2, r1
 8005f32:	1cbb      	adds	r3, r7, #2
 8005f34:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f36:	46c0      	nop			@ (mov r8, r8)
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	b002      	add	sp, #8
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b08a      	sub	sp, #40	@ 0x28
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2284      	movs	r2, #132	@ 0x84
 8005f4a:	5c9b      	ldrb	r3, [r3, r2]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e042      	b.n	8005fda <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2284      	movs	r2, #132	@ 0x84
 8005f58:	2101      	movs	r1, #1
 8005f5a:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2288      	movs	r2, #136	@ 0x88
 8005f60:	2124      	movs	r1, #36	@ 0x24
 8005f62:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f64:	f3ef 8310 	mrs	r3, PRIMASK
 8005f68:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f6a:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f6e:	2301      	movs	r3, #1
 8005f70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f383 8810 	msr	PRIMASK, r3
}
 8005f78:	46c0      	nop			@ (mov r8, r8)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	210c      	movs	r1, #12
 8005f86:	438a      	bics	r2, r1
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f383 8810 	msr	PRIMASK, r3
}
 8005f94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f96:	f3ef 8310 	mrs	r3, PRIMASK
 8005f9a:	617b      	str	r3, [r7, #20]
  return(result);
 8005f9c:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8005f9e:	623b      	str	r3, [r7, #32]
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f383 8810 	msr	PRIMASK, r3
}
 8005faa:	46c0      	nop			@ (mov r8, r8)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2108      	movs	r1, #8
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	f383 8810 	msr	PRIMASK, r3
}
 8005fc6:	46c0      	nop			@ (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2288      	movs	r2, #136	@ 0x88
 8005fcc:	2120      	movs	r1, #32
 8005fce:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2284      	movs	r2, #132	@ 0x84
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	0018      	movs	r0, r3
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	b00a      	add	sp, #40	@ 0x28
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fec:	231e      	movs	r3, #30
 8005fee:	18fb      	adds	r3, r7, r3
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4aab      	ldr	r2, [pc, #684]	@ (80062c0 <UART_SetConfig+0x2dc>)
 8006014:	4013      	ands	r3, r2
 8006016:	0019      	movs	r1, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	430a      	orrs	r2, r1
 8006020:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	4aa6      	ldr	r2, [pc, #664]	@ (80062c4 <UART_SetConfig+0x2e0>)
 800602a:	4013      	ands	r3, r2
 800602c:	0019      	movs	r1, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	4a9d      	ldr	r2, [pc, #628]	@ (80062c8 <UART_SetConfig+0x2e4>)
 8006052:	4013      	ands	r3, r2
 8006054:	0019      	movs	r1, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	430a      	orrs	r2, r1
 800605e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006066:	220f      	movs	r2, #15
 8006068:	4393      	bics	r3, r2
 800606a:	0019      	movs	r1, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a93      	ldr	r2, [pc, #588]	@ (80062cc <UART_SetConfig+0x2e8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d127      	bne.n	80060d2 <UART_SetConfig+0xee>
 8006082:	4b93      	ldr	r3, [pc, #588]	@ (80062d0 <UART_SetConfig+0x2ec>)
 8006084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006086:	2203      	movs	r2, #3
 8006088:	4013      	ands	r3, r2
 800608a:	2b03      	cmp	r3, #3
 800608c:	d017      	beq.n	80060be <UART_SetConfig+0xda>
 800608e:	d81b      	bhi.n	80060c8 <UART_SetConfig+0xe4>
 8006090:	2b02      	cmp	r3, #2
 8006092:	d00a      	beq.n	80060aa <UART_SetConfig+0xc6>
 8006094:	d818      	bhi.n	80060c8 <UART_SetConfig+0xe4>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <UART_SetConfig+0xbc>
 800609a:	2b01      	cmp	r3, #1
 800609c:	d00a      	beq.n	80060b4 <UART_SetConfig+0xd0>
 800609e:	e013      	b.n	80060c8 <UART_SetConfig+0xe4>
 80060a0:	231f      	movs	r3, #31
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	2200      	movs	r2, #0
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	e021      	b.n	80060ee <UART_SetConfig+0x10a>
 80060aa:	231f      	movs	r3, #31
 80060ac:	18fb      	adds	r3, r7, r3
 80060ae:	2202      	movs	r2, #2
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e01c      	b.n	80060ee <UART_SetConfig+0x10a>
 80060b4:	231f      	movs	r3, #31
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	2204      	movs	r2, #4
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	e017      	b.n	80060ee <UART_SetConfig+0x10a>
 80060be:	231f      	movs	r3, #31
 80060c0:	18fb      	adds	r3, r7, r3
 80060c2:	2208      	movs	r2, #8
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	e012      	b.n	80060ee <UART_SetConfig+0x10a>
 80060c8:	231f      	movs	r3, #31
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	2210      	movs	r2, #16
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	e00d      	b.n	80060ee <UART_SetConfig+0x10a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a7f      	ldr	r2, [pc, #508]	@ (80062d4 <UART_SetConfig+0x2f0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d104      	bne.n	80060e6 <UART_SetConfig+0x102>
 80060dc:	231f      	movs	r3, #31
 80060de:	18fb      	adds	r3, r7, r3
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	e003      	b.n	80060ee <UART_SetConfig+0x10a>
 80060e6:	231f      	movs	r3, #31
 80060e8:	18fb      	adds	r3, r7, r3
 80060ea:	2210      	movs	r2, #16
 80060ec:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69da      	ldr	r2, [r3, #28]
 80060f2:	2380      	movs	r3, #128	@ 0x80
 80060f4:	021b      	lsls	r3, r3, #8
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d000      	beq.n	80060fc <UART_SetConfig+0x118>
 80060fa:	e06f      	b.n	80061dc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80060fc:	231f      	movs	r3, #31
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b08      	cmp	r3, #8
 8006104:	d01f      	beq.n	8006146 <UART_SetConfig+0x162>
 8006106:	dc22      	bgt.n	800614e <UART_SetConfig+0x16a>
 8006108:	2b04      	cmp	r3, #4
 800610a:	d017      	beq.n	800613c <UART_SetConfig+0x158>
 800610c:	dc1f      	bgt.n	800614e <UART_SetConfig+0x16a>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <UART_SetConfig+0x134>
 8006112:	2b02      	cmp	r3, #2
 8006114:	d005      	beq.n	8006122 <UART_SetConfig+0x13e>
 8006116:	e01a      	b.n	800614e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006118:	f7fe fe40 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 800611c:	0003      	movs	r3, r0
 800611e:	61bb      	str	r3, [r7, #24]
        break;
 8006120:	e01c      	b.n	800615c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8006122:	4b6b      	ldr	r3, [pc, #428]	@ (80062d0 <UART_SetConfig+0x2ec>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	2207      	movs	r2, #7
 800612a:	4013      	ands	r3, r2
 800612c:	3301      	adds	r3, #1
 800612e:	0019      	movs	r1, r3
 8006130:	4869      	ldr	r0, [pc, #420]	@ (80062d8 <UART_SetConfig+0x2f4>)
 8006132:	f7f9 ffe9 	bl	8000108 <__udivsi3>
 8006136:	0003      	movs	r3, r0
 8006138:	61bb      	str	r3, [r7, #24]
        break;
 800613a:	e00f      	b.n	800615c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800613c:	f7fe fdc0 	bl	8004cc0 <HAL_RCC_GetSysClockFreq>
 8006140:	0003      	movs	r3, r0
 8006142:	61bb      	str	r3, [r7, #24]
        break;
 8006144:	e00a      	b.n	800615c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006146:	2380      	movs	r3, #128	@ 0x80
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	61bb      	str	r3, [r7, #24]
        break;
 800614c:	e006      	b.n	800615c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006152:	231e      	movs	r3, #30
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	2201      	movs	r2, #1
 8006158:	701a      	strb	r2, [r3, #0]
        break;
 800615a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d100      	bne.n	8006164 <UART_SetConfig+0x180>
 8006162:	e097      	b.n	8006294 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006168:	4b5c      	ldr	r3, [pc, #368]	@ (80062dc <UART_SetConfig+0x2f8>)
 800616a:	0052      	lsls	r2, r2, #1
 800616c:	5ad3      	ldrh	r3, [r2, r3]
 800616e:	0019      	movs	r1, r3
 8006170:	69b8      	ldr	r0, [r7, #24]
 8006172:	f7f9 ffc9 	bl	8000108 <__udivsi3>
 8006176:	0003      	movs	r3, r0
 8006178:	005a      	lsls	r2, r3, #1
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	085b      	lsrs	r3, r3, #1
 8006180:	18d2      	adds	r2, r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	0019      	movs	r1, r3
 8006188:	0010      	movs	r0, r2
 800618a:	f7f9 ffbd 	bl	8000108 <__udivsi3>
 800618e:	0003      	movs	r3, r0
 8006190:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b0f      	cmp	r3, #15
 8006196:	d91c      	bls.n	80061d2 <UART_SetConfig+0x1ee>
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	2380      	movs	r3, #128	@ 0x80
 800619c:	025b      	lsls	r3, r3, #9
 800619e:	429a      	cmp	r2, r3
 80061a0:	d217      	bcs.n	80061d2 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	200e      	movs	r0, #14
 80061a8:	183b      	adds	r3, r7, r0
 80061aa:	210f      	movs	r1, #15
 80061ac:	438a      	bics	r2, r1
 80061ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	085b      	lsrs	r3, r3, #1
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2207      	movs	r2, #7
 80061b8:	4013      	ands	r3, r2
 80061ba:	b299      	uxth	r1, r3
 80061bc:	183b      	adds	r3, r7, r0
 80061be:	183a      	adds	r2, r7, r0
 80061c0:	8812      	ldrh	r2, [r2, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	183a      	adds	r2, r7, r0
 80061cc:	8812      	ldrh	r2, [r2, #0]
 80061ce:	60da      	str	r2, [r3, #12]
 80061d0:	e060      	b.n	8006294 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80061d2:	231e      	movs	r3, #30
 80061d4:	18fb      	adds	r3, r7, r3
 80061d6:	2201      	movs	r2, #1
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	e05b      	b.n	8006294 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061dc:	231f      	movs	r3, #31
 80061de:	18fb      	adds	r3, r7, r3
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d01f      	beq.n	8006226 <UART_SetConfig+0x242>
 80061e6:	dc22      	bgt.n	800622e <UART_SetConfig+0x24a>
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d017      	beq.n	800621c <UART_SetConfig+0x238>
 80061ec:	dc1f      	bgt.n	800622e <UART_SetConfig+0x24a>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <UART_SetConfig+0x214>
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d005      	beq.n	8006202 <UART_SetConfig+0x21e>
 80061f6:	e01a      	b.n	800622e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f8:	f7fe fdd0 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 80061fc:	0003      	movs	r3, r0
 80061fe:	61bb      	str	r3, [r7, #24]
        break;
 8006200:	e01c      	b.n	800623c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8006202:	4b33      	ldr	r3, [pc, #204]	@ (80062d0 <UART_SetConfig+0x2ec>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	2207      	movs	r2, #7
 800620a:	4013      	ands	r3, r2
 800620c:	3301      	adds	r3, #1
 800620e:	0019      	movs	r1, r3
 8006210:	4831      	ldr	r0, [pc, #196]	@ (80062d8 <UART_SetConfig+0x2f4>)
 8006212:	f7f9 ff79 	bl	8000108 <__udivsi3>
 8006216:	0003      	movs	r3, r0
 8006218:	61bb      	str	r3, [r7, #24]
        break;
 800621a:	e00f      	b.n	800623c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800621c:	f7fe fd50 	bl	8004cc0 <HAL_RCC_GetSysClockFreq>
 8006220:	0003      	movs	r3, r0
 8006222:	61bb      	str	r3, [r7, #24]
        break;
 8006224:	e00a      	b.n	800623c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006226:	2380      	movs	r3, #128	@ 0x80
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	61bb      	str	r3, [r7, #24]
        break;
 800622c:	e006      	b.n	800623c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006232:	231e      	movs	r3, #30
 8006234:	18fb      	adds	r3, r7, r3
 8006236:	2201      	movs	r2, #1
 8006238:	701a      	strb	r2, [r3, #0]
        break;
 800623a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d028      	beq.n	8006294 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006246:	4b25      	ldr	r3, [pc, #148]	@ (80062dc <UART_SetConfig+0x2f8>)
 8006248:	0052      	lsls	r2, r2, #1
 800624a:	5ad3      	ldrh	r3, [r2, r3]
 800624c:	0019      	movs	r1, r3
 800624e:	69b8      	ldr	r0, [r7, #24]
 8006250:	f7f9 ff5a 	bl	8000108 <__udivsi3>
 8006254:	0003      	movs	r3, r0
 8006256:	001a      	movs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	085b      	lsrs	r3, r3, #1
 800625e:	18d2      	adds	r2, r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	0019      	movs	r1, r3
 8006266:	0010      	movs	r0, r2
 8006268:	f7f9 ff4e 	bl	8000108 <__udivsi3>
 800626c:	0003      	movs	r3, r0
 800626e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	2b0f      	cmp	r3, #15
 8006274:	d90a      	bls.n	800628c <UART_SetConfig+0x2a8>
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	2380      	movs	r3, #128	@ 0x80
 800627a:	025b      	lsls	r3, r3, #9
 800627c:	429a      	cmp	r2, r3
 800627e:	d205      	bcs.n	800628c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	b29a      	uxth	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	60da      	str	r2, [r3, #12]
 800628a:	e003      	b.n	8006294 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800628c:	231e      	movs	r3, #30
 800628e:	18fb      	adds	r3, r7, r3
 8006290:	2201      	movs	r2, #1
 8006292:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	226a      	movs	r2, #106	@ 0x6a
 8006298:	2101      	movs	r1, #1
 800629a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2268      	movs	r2, #104	@ 0x68
 80062a0:	2101      	movs	r1, #1
 80062a2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80062b0:	231e      	movs	r3, #30
 80062b2:	18fb      	adds	r3, r7, r3
 80062b4:	781b      	ldrb	r3, [r3, #0]
}
 80062b6:	0018      	movs	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	b008      	add	sp, #32
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	46c0      	nop			@ (mov r8, r8)
 80062c0:	cfff69f3 	.word	0xcfff69f3
 80062c4:	ffffcfff 	.word	0xffffcfff
 80062c8:	11fff4ff 	.word	0x11fff4ff
 80062cc:	40013800 	.word	0x40013800
 80062d0:	40021000 	.word	0x40021000
 80062d4:	40004400 	.word	0x40004400
 80062d8:	02dc6c00 	.word	0x02dc6c00
 80062dc:	08006b80 	.word	0x08006b80

080062e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ec:	2208      	movs	r2, #8
 80062ee:	4013      	ands	r3, r2
 80062f0:	d00b      	beq.n	800630a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	4a4a      	ldr	r2, [pc, #296]	@ (8006424 <UART_AdvFeatureConfig+0x144>)
 80062fa:	4013      	ands	r3, r2
 80062fc:	0019      	movs	r1, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630e:	2201      	movs	r2, #1
 8006310:	4013      	ands	r3, r2
 8006312:	d00b      	beq.n	800632c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	4a43      	ldr	r2, [pc, #268]	@ (8006428 <UART_AdvFeatureConfig+0x148>)
 800631c:	4013      	ands	r3, r2
 800631e:	0019      	movs	r1, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006330:	2202      	movs	r2, #2
 8006332:	4013      	ands	r3, r2
 8006334:	d00b      	beq.n	800634e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	4a3b      	ldr	r2, [pc, #236]	@ (800642c <UART_AdvFeatureConfig+0x14c>)
 800633e:	4013      	ands	r3, r2
 8006340:	0019      	movs	r1, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006352:	2204      	movs	r2, #4
 8006354:	4013      	ands	r3, r2
 8006356:	d00b      	beq.n	8006370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	4a34      	ldr	r2, [pc, #208]	@ (8006430 <UART_AdvFeatureConfig+0x150>)
 8006360:	4013      	ands	r3, r2
 8006362:	0019      	movs	r1, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006374:	2210      	movs	r2, #16
 8006376:	4013      	ands	r3, r2
 8006378:	d00b      	beq.n	8006392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	4a2c      	ldr	r2, [pc, #176]	@ (8006434 <UART_AdvFeatureConfig+0x154>)
 8006382:	4013      	ands	r3, r2
 8006384:	0019      	movs	r1, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006396:	2220      	movs	r2, #32
 8006398:	4013      	ands	r3, r2
 800639a:	d00b      	beq.n	80063b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	4a25      	ldr	r2, [pc, #148]	@ (8006438 <UART_AdvFeatureConfig+0x158>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	0019      	movs	r1, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b8:	2240      	movs	r2, #64	@ 0x40
 80063ba:	4013      	ands	r3, r2
 80063bc:	d01d      	beq.n	80063fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	4a1d      	ldr	r2, [pc, #116]	@ (800643c <UART_AdvFeatureConfig+0x15c>)
 80063c6:	4013      	ands	r3, r2
 80063c8:	0019      	movs	r1, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063da:	2380      	movs	r3, #128	@ 0x80
 80063dc:	035b      	lsls	r3, r3, #13
 80063de:	429a      	cmp	r2, r3
 80063e0:	d10b      	bne.n	80063fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	4a15      	ldr	r2, [pc, #84]	@ (8006440 <UART_AdvFeatureConfig+0x160>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	0019      	movs	r1, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fe:	2280      	movs	r2, #128	@ 0x80
 8006400:	4013      	ands	r3, r2
 8006402:	d00b      	beq.n	800641c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	4a0e      	ldr	r2, [pc, #56]	@ (8006444 <UART_AdvFeatureConfig+0x164>)
 800640c:	4013      	ands	r3, r2
 800640e:	0019      	movs	r1, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	605a      	str	r2, [r3, #4]
  }
}
 800641c:	46c0      	nop			@ (mov r8, r8)
 800641e:	46bd      	mov	sp, r7
 8006420:	b002      	add	sp, #8
 8006422:	bd80      	pop	{r7, pc}
 8006424:	ffff7fff 	.word	0xffff7fff
 8006428:	fffdffff 	.word	0xfffdffff
 800642c:	fffeffff 	.word	0xfffeffff
 8006430:	fffbffff 	.word	0xfffbffff
 8006434:	ffffefff 	.word	0xffffefff
 8006438:	ffffdfff 	.word	0xffffdfff
 800643c:	ffefffff 	.word	0xffefffff
 8006440:	ff9fffff 	.word	0xff9fffff
 8006444:	fff7ffff 	.word	0xfff7ffff

08006448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b092      	sub	sp, #72	@ 0x48
 800644c:	af02      	add	r7, sp, #8
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2290      	movs	r2, #144	@ 0x90
 8006454:	2100      	movs	r1, #0
 8006456:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006458:	f7fc faf4 	bl	8002a44 <HAL_GetTick>
 800645c:	0003      	movs	r3, r0
 800645e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2208      	movs	r2, #8
 8006468:	4013      	ands	r3, r2
 800646a:	2b08      	cmp	r3, #8
 800646c:	d12d      	bne.n	80064ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800646e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006470:	2280      	movs	r2, #128	@ 0x80
 8006472:	0391      	lsls	r1, r2, #14
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	4a47      	ldr	r2, [pc, #284]	@ (8006594 <UART_CheckIdleState+0x14c>)
 8006478:	9200      	str	r2, [sp, #0]
 800647a:	2200      	movs	r2, #0
 800647c:	f000 f88e 	bl	800659c <UART_WaitOnFlagUntilTimeout>
 8006480:	1e03      	subs	r3, r0, #0
 8006482:	d022      	beq.n	80064ca <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006484:	f3ef 8310 	mrs	r3, PRIMASK
 8006488:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800648c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800648e:	2301      	movs	r3, #1
 8006490:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006494:	f383 8810 	msr	PRIMASK, r3
}
 8006498:	46c0      	nop			@ (mov r8, r8)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2180      	movs	r1, #128	@ 0x80
 80064a6:	438a      	bics	r2, r1
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b0:	f383 8810 	msr	PRIMASK, r3
}
 80064b4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2288      	movs	r2, #136	@ 0x88
 80064ba:	2120      	movs	r1, #32
 80064bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2284      	movs	r2, #132	@ 0x84
 80064c2:	2100      	movs	r1, #0
 80064c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e060      	b.n	800658c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2204      	movs	r2, #4
 80064d2:	4013      	ands	r3, r2
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d146      	bne.n	8006566 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064da:	2280      	movs	r2, #128	@ 0x80
 80064dc:	03d1      	lsls	r1, r2, #15
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	4a2c      	ldr	r2, [pc, #176]	@ (8006594 <UART_CheckIdleState+0x14c>)
 80064e2:	9200      	str	r2, [sp, #0]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f000 f859 	bl	800659c <UART_WaitOnFlagUntilTimeout>
 80064ea:	1e03      	subs	r3, r0, #0
 80064ec:	d03b      	beq.n	8006566 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80064ee:	f3ef 8310 	mrs	r3, PRIMASK
 80064f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80064f4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80064f8:	2301      	movs	r3, #1
 80064fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f383 8810 	msr	PRIMASK, r3
}
 8006502:	46c0      	nop			@ (mov r8, r8)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4922      	ldr	r1, [pc, #136]	@ (8006598 <UART_CheckIdleState+0x150>)
 8006510:	400a      	ands	r2, r1
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006516:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f383 8810 	msr	PRIMASK, r3
}
 800651e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006520:	f3ef 8310 	mrs	r3, PRIMASK
 8006524:	61bb      	str	r3, [r7, #24]
  return(result);
 8006526:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006528:	633b      	str	r3, [r7, #48]	@ 0x30
 800652a:	2301      	movs	r3, #1
 800652c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	f383 8810 	msr	PRIMASK, r3
}
 8006534:	46c0      	nop			@ (mov r8, r8)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2101      	movs	r1, #1
 8006542:	438a      	bics	r2, r1
 8006544:	609a      	str	r2, [r3, #8]
 8006546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006548:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	f383 8810 	msr	PRIMASK, r3
}
 8006550:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	228c      	movs	r2, #140	@ 0x8c
 8006556:	2120      	movs	r1, #32
 8006558:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2284      	movs	r2, #132	@ 0x84
 800655e:	2100      	movs	r1, #0
 8006560:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e012      	b.n	800658c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2288      	movs	r2, #136	@ 0x88
 800656a:	2120      	movs	r1, #32
 800656c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	228c      	movs	r2, #140	@ 0x8c
 8006572:	2120      	movs	r1, #32
 8006574:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2284      	movs	r2, #132	@ 0x84
 8006586:	2100      	movs	r1, #0
 8006588:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	0018      	movs	r0, r3
 800658e:	46bd      	mov	sp, r7
 8006590:	b010      	add	sp, #64	@ 0x40
 8006592:	bd80      	pop	{r7, pc}
 8006594:	01ffffff 	.word	0x01ffffff
 8006598:	fffffedf 	.word	0xfffffedf

0800659c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	603b      	str	r3, [r7, #0]
 80065a8:	1dfb      	adds	r3, r7, #7
 80065aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ac:	e051      	b.n	8006652 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	3301      	adds	r3, #1
 80065b2:	d04e      	beq.n	8006652 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b4:	f7fc fa46 	bl	8002a44 <HAL_GetTick>
 80065b8:	0002      	movs	r2, r0
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d302      	bcc.n	80065ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e051      	b.n	8006672 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2204      	movs	r2, #4
 80065d6:	4013      	ands	r3, r2
 80065d8:	d03b      	beq.n	8006652 <UART_WaitOnFlagUntilTimeout+0xb6>
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b80      	cmp	r3, #128	@ 0x80
 80065de:	d038      	beq.n	8006652 <UART_WaitOnFlagUntilTimeout+0xb6>
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b40      	cmp	r3, #64	@ 0x40
 80065e4:	d035      	beq.n	8006652 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	2208      	movs	r2, #8
 80065ee:	4013      	ands	r3, r2
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d111      	bne.n	8006618 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2208      	movs	r2, #8
 80065fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	0018      	movs	r0, r3
 8006600:	f000 f83c 	bl	800667c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2290      	movs	r2, #144	@ 0x90
 8006608:	2108      	movs	r1, #8
 800660a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2284      	movs	r2, #132	@ 0x84
 8006610:	2100      	movs	r1, #0
 8006612:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e02c      	b.n	8006672 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	69da      	ldr	r2, [r3, #28]
 800661e:	2380      	movs	r3, #128	@ 0x80
 8006620:	011b      	lsls	r3, r3, #4
 8006622:	401a      	ands	r2, r3
 8006624:	2380      	movs	r3, #128	@ 0x80
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	429a      	cmp	r2, r3
 800662a:	d112      	bne.n	8006652 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2280      	movs	r2, #128	@ 0x80
 8006632:	0112      	lsls	r2, r2, #4
 8006634:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	0018      	movs	r0, r3
 800663a:	f000 f81f 	bl	800667c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2290      	movs	r2, #144	@ 0x90
 8006642:	2120      	movs	r1, #32
 8006644:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2284      	movs	r2, #132	@ 0x84
 800664a:	2100      	movs	r1, #0
 800664c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e00f      	b.n	8006672 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	4013      	ands	r3, r2
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	425a      	negs	r2, r3
 8006662:	4153      	adcs	r3, r2
 8006664:	b2db      	uxtb	r3, r3
 8006666:	001a      	movs	r2, r3
 8006668:	1dfb      	adds	r3, r7, #7
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	429a      	cmp	r2, r3
 800666e:	d09e      	beq.n	80065ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	0018      	movs	r0, r3
 8006674:	46bd      	mov	sp, r7
 8006676:	b004      	add	sp, #16
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08e      	sub	sp, #56	@ 0x38
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006684:	f3ef 8310 	mrs	r3, PRIMASK
 8006688:	617b      	str	r3, [r7, #20]
  return(result);
 800668a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800668c:	637b      	str	r3, [r7, #52]	@ 0x34
 800668e:	2301      	movs	r3, #1
 8006690:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	f383 8810 	msr	PRIMASK, r3
}
 8006698:	46c0      	nop			@ (mov r8, r8)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4926      	ldr	r1, [pc, #152]	@ (8006740 <UART_EndRxTransfer+0xc4>)
 80066a6:	400a      	ands	r2, r1
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	f383 8810 	msr	PRIMASK, r3
}
 80066b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80066b6:	f3ef 8310 	mrs	r3, PRIMASK
 80066ba:	623b      	str	r3, [r7, #32]
  return(result);
 80066bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066be:	633b      	str	r3, [r7, #48]	@ 0x30
 80066c0:	2301      	movs	r3, #1
 80066c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	f383 8810 	msr	PRIMASK, r3
}
 80066ca:	46c0      	nop			@ (mov r8, r8)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	491b      	ldr	r1, [pc, #108]	@ (8006744 <UART_EndRxTransfer+0xc8>)
 80066d8:	400a      	ands	r2, r1
 80066da:	609a      	str	r2, [r3, #8]
 80066dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066de:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e2:	f383 8810 	msr	PRIMASK, r3
}
 80066e6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d118      	bne.n	8006722 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80066f0:	f3ef 8310 	mrs	r3, PRIMASK
 80066f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80066f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066fa:	2301      	movs	r3, #1
 80066fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f383 8810 	msr	PRIMASK, r3
}
 8006704:	46c0      	nop			@ (mov r8, r8)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2110      	movs	r1, #16
 8006712:	438a      	bics	r2, r1
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006718:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f383 8810 	msr	PRIMASK, r3
}
 8006720:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	228c      	movs	r2, #140	@ 0x8c
 8006726:	2120      	movs	r1, #32
 8006728:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006736:	46c0      	nop			@ (mov r8, r8)
 8006738:	46bd      	mov	sp, r7
 800673a:	b00e      	add	sp, #56	@ 0x38
 800673c:	bd80      	pop	{r7, pc}
 800673e:	46c0      	nop			@ (mov r8, r8)
 8006740:	fffffedf 	.word	0xfffffedf
 8006744:	effffffe 	.word	0xeffffffe

08006748 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006754:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	225e      	movs	r2, #94	@ 0x5e
 800675a:	2100      	movs	r1, #0
 800675c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2256      	movs	r2, #86	@ 0x56
 8006762:	2100      	movs	r1, #0
 8006764:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	0018      	movs	r0, r3
 800676a:	f7ff fbd5 	bl	8005f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800676e:	46c0      	nop			@ (mov r8, r8)
 8006770:	46bd      	mov	sp, r7
 8006772:	b004      	add	sp, #16
 8006774:	bd80      	pop	{r7, pc}

08006776 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b086      	sub	sp, #24
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800677e:	f3ef 8310 	mrs	r3, PRIMASK
 8006782:	60bb      	str	r3, [r7, #8]
  return(result);
 8006784:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006786:	617b      	str	r3, [r7, #20]
 8006788:	2301      	movs	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f383 8810 	msr	PRIMASK, r3
}
 8006792:	46c0      	nop			@ (mov r8, r8)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2140      	movs	r1, #64	@ 0x40
 80067a0:	438a      	bics	r2, r1
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f383 8810 	msr	PRIMASK, r3
}
 80067ae:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2288      	movs	r2, #136	@ 0x88
 80067b4:	2120      	movs	r1, #32
 80067b6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	0018      	movs	r0, r3
 80067c2:	f7ff fba1 	bl	8005f08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067c6:	46c0      	nop			@ (mov r8, r8)
 80067c8:	46bd      	mov	sp, r7
 80067ca:	b006      	add	sp, #24
 80067cc:	bd80      	pop	{r7, pc}

080067ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b082      	sub	sp, #8
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80067d6:	46c0      	nop			@ (mov r8, r8)
 80067d8:	46bd      	mov	sp, r7
 80067da:	b002      	add	sp, #8
 80067dc:	bd80      	pop	{r7, pc}

080067de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80067e6:	46c0      	nop			@ (mov r8, r8)
 80067e8:	46bd      	mov	sp, r7
 80067ea:	b002      	add	sp, #8
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80067f6:	46c0      	nop			@ (mov r8, r8)
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b002      	add	sp, #8
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2284      	movs	r2, #132	@ 0x84
 800680c:	5c9b      	ldrb	r3, [r3, r2]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d101      	bne.n	8006816 <HAL_UARTEx_DisableFifoMode+0x16>
 8006812:	2302      	movs	r3, #2
 8006814:	e027      	b.n	8006866 <HAL_UARTEx_DisableFifoMode+0x66>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2284      	movs	r2, #132	@ 0x84
 800681a:	2101      	movs	r1, #1
 800681c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2288      	movs	r2, #136	@ 0x88
 8006822:	2124      	movs	r1, #36	@ 0x24
 8006824:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2101      	movs	r1, #1
 800683a:	438a      	bics	r2, r1
 800683c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4a0b      	ldr	r2, [pc, #44]	@ (8006870 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006842:	4013      	ands	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2288      	movs	r2, #136	@ 0x88
 8006858:	2120      	movs	r1, #32
 800685a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2284      	movs	r2, #132	@ 0x84
 8006860:	2100      	movs	r1, #0
 8006862:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	0018      	movs	r0, r3
 8006868:	46bd      	mov	sp, r7
 800686a:	b004      	add	sp, #16
 800686c:	bd80      	pop	{r7, pc}
 800686e:	46c0      	nop			@ (mov r8, r8)
 8006870:	dfffffff 	.word	0xdfffffff

08006874 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2284      	movs	r2, #132	@ 0x84
 8006882:	5c9b      	ldrb	r3, [r3, r2]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006888:	2302      	movs	r3, #2
 800688a:	e02e      	b.n	80068ea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2284      	movs	r2, #132	@ 0x84
 8006890:	2101      	movs	r1, #1
 8006892:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2288      	movs	r2, #136	@ 0x88
 8006898:	2124      	movs	r1, #36	@ 0x24
 800689a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2101      	movs	r1, #1
 80068b0:	438a      	bics	r2, r1
 80068b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	08d9      	lsrs	r1, r3, #3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	0018      	movs	r0, r3
 80068cc:	f000 f854 	bl	8006978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2288      	movs	r2, #136	@ 0x88
 80068dc:	2120      	movs	r1, #32
 80068de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2284      	movs	r2, #132	@ 0x84
 80068e4:	2100      	movs	r1, #0
 80068e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	0018      	movs	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	b004      	add	sp, #16
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2284      	movs	r2, #132	@ 0x84
 8006902:	5c9b      	ldrb	r3, [r3, r2]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006908:	2302      	movs	r3, #2
 800690a:	e02f      	b.n	800696c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2284      	movs	r2, #132	@ 0x84
 8006910:	2101      	movs	r1, #1
 8006912:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2288      	movs	r2, #136	@ 0x88
 8006918:	2124      	movs	r1, #36	@ 0x24
 800691a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2101      	movs	r1, #1
 8006930:	438a      	bics	r2, r1
 8006932:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	4a0e      	ldr	r2, [pc, #56]	@ (8006974 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800693c:	4013      	ands	r3, r2
 800693e:	0019      	movs	r1, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	0018      	movs	r0, r3
 800694e:	f000 f813 	bl	8006978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2288      	movs	r2, #136	@ 0x88
 800695e:	2120      	movs	r1, #32
 8006960:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2284      	movs	r2, #132	@ 0x84
 8006966:	2100      	movs	r1, #0
 8006968:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	0018      	movs	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	b004      	add	sp, #16
 8006972:	bd80      	pop	{r7, pc}
 8006974:	f1ffffff 	.word	0xf1ffffff

08006978 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006984:	2b00      	cmp	r3, #0
 8006986:	d108      	bne.n	800699a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	226a      	movs	r2, #106	@ 0x6a
 800698c:	2101      	movs	r1, #1
 800698e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2268      	movs	r2, #104	@ 0x68
 8006994:	2101      	movs	r1, #1
 8006996:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006998:	e043      	b.n	8006a22 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800699a:	260f      	movs	r6, #15
 800699c:	19bb      	adds	r3, r7, r6
 800699e:	2208      	movs	r2, #8
 80069a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069a2:	200e      	movs	r0, #14
 80069a4:	183b      	adds	r3, r7, r0
 80069a6:	2208      	movs	r2, #8
 80069a8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	0e5b      	lsrs	r3, r3, #25
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	240d      	movs	r4, #13
 80069b6:	193b      	adds	r3, r7, r4
 80069b8:	2107      	movs	r1, #7
 80069ba:	400a      	ands	r2, r1
 80069bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	0f5b      	lsrs	r3, r3, #29
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	250c      	movs	r5, #12
 80069ca:	197b      	adds	r3, r7, r5
 80069cc:	2107      	movs	r1, #7
 80069ce:	400a      	ands	r2, r1
 80069d0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069d2:	183b      	adds	r3, r7, r0
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	197a      	adds	r2, r7, r5
 80069d8:	7812      	ldrb	r2, [r2, #0]
 80069da:	4914      	ldr	r1, [pc, #80]	@ (8006a2c <UARTEx_SetNbDataToProcess+0xb4>)
 80069dc:	5c8a      	ldrb	r2, [r1, r2]
 80069de:	435a      	muls	r2, r3
 80069e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80069e2:	197b      	adds	r3, r7, r5
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	4a12      	ldr	r2, [pc, #72]	@ (8006a30 <UARTEx_SetNbDataToProcess+0xb8>)
 80069e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069ea:	0019      	movs	r1, r3
 80069ec:	f7f9 fc16 	bl	800021c <__divsi3>
 80069f0:	0003      	movs	r3, r0
 80069f2:	b299      	uxth	r1, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	226a      	movs	r2, #106	@ 0x6a
 80069f8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069fa:	19bb      	adds	r3, r7, r6
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	193a      	adds	r2, r7, r4
 8006a00:	7812      	ldrb	r2, [r2, #0]
 8006a02:	490a      	ldr	r1, [pc, #40]	@ (8006a2c <UARTEx_SetNbDataToProcess+0xb4>)
 8006a04:	5c8a      	ldrb	r2, [r1, r2]
 8006a06:	435a      	muls	r2, r3
 8006a08:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a0a:	193b      	adds	r3, r7, r4
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	4a08      	ldr	r2, [pc, #32]	@ (8006a30 <UARTEx_SetNbDataToProcess+0xb8>)
 8006a10:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a12:	0019      	movs	r1, r3
 8006a14:	f7f9 fc02 	bl	800021c <__divsi3>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	b299      	uxth	r1, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2268      	movs	r2, #104	@ 0x68
 8006a20:	5299      	strh	r1, [r3, r2]
}
 8006a22:	46c0      	nop			@ (mov r8, r8)
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b005      	add	sp, #20
 8006a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a2a:	46c0      	nop			@ (mov r8, r8)
 8006a2c:	08006b98 	.word	0x08006b98
 8006a30:	08006ba0 	.word	0x08006ba0

08006a34 <memset>:
 8006a34:	0003      	movs	r3, r0
 8006a36:	1882      	adds	r2, r0, r2
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d100      	bne.n	8006a3e <memset+0xa>
 8006a3c:	4770      	bx	lr
 8006a3e:	7019      	strb	r1, [r3, #0]
 8006a40:	3301      	adds	r3, #1
 8006a42:	e7f9      	b.n	8006a38 <memset+0x4>

08006a44 <__libc_init_array>:
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	2600      	movs	r6, #0
 8006a48:	4c0c      	ldr	r4, [pc, #48]	@ (8006a7c <__libc_init_array+0x38>)
 8006a4a:	4d0d      	ldr	r5, [pc, #52]	@ (8006a80 <__libc_init_array+0x3c>)
 8006a4c:	1b64      	subs	r4, r4, r5
 8006a4e:	10a4      	asrs	r4, r4, #2
 8006a50:	42a6      	cmp	r6, r4
 8006a52:	d109      	bne.n	8006a68 <__libc_init_array+0x24>
 8006a54:	2600      	movs	r6, #0
 8006a56:	f000 f819 	bl	8006a8c <_init>
 8006a5a:	4c0a      	ldr	r4, [pc, #40]	@ (8006a84 <__libc_init_array+0x40>)
 8006a5c:	4d0a      	ldr	r5, [pc, #40]	@ (8006a88 <__libc_init_array+0x44>)
 8006a5e:	1b64      	subs	r4, r4, r5
 8006a60:	10a4      	asrs	r4, r4, #2
 8006a62:	42a6      	cmp	r6, r4
 8006a64:	d105      	bne.n	8006a72 <__libc_init_array+0x2e>
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	00b3      	lsls	r3, r6, #2
 8006a6a:	58eb      	ldr	r3, [r5, r3]
 8006a6c:	4798      	blx	r3
 8006a6e:	3601      	adds	r6, #1
 8006a70:	e7ee      	b.n	8006a50 <__libc_init_array+0xc>
 8006a72:	00b3      	lsls	r3, r6, #2
 8006a74:	58eb      	ldr	r3, [r5, r3]
 8006a76:	4798      	blx	r3
 8006a78:	3601      	adds	r6, #1
 8006a7a:	e7f2      	b.n	8006a62 <__libc_init_array+0x1e>
 8006a7c:	08006ba8 	.word	0x08006ba8
 8006a80:	08006ba8 	.word	0x08006ba8
 8006a84:	08006bac 	.word	0x08006bac
 8006a88:	08006ba8 	.word	0x08006ba8

08006a8c <_init>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	46c0      	nop			@ (mov r8, r8)
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr

08006a98 <_fini>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	46c0      	nop			@ (mov r8, r8)
 8006a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9e:	bc08      	pop	{r3}
 8006aa0:	469e      	mov	lr, r3
 8006aa2:	4770      	bx	lr
