
STM-QCW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c044  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800c21c  0800c21c  0000d21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c260  0800c260  0000e070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c260  0800c260  0000d260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c268  0800c268  0000e070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c268  0800c268  0000d268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c26c  0800c26c  0000d26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800c270  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ac  20000070  0800c2e0  0000e070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  0800c2e0  0000ea1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c5a0  00000000  00000000  0000e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003465  00000000  00000000  0002a640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  0002daa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012bc  00000000  00000000  0002f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a0e  00000000  00000000  00030574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b547  00000000  00000000  00051f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2f0c  00000000  00000000  0006d4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001503d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c8c  00000000  00000000  00150418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001570a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c204 	.word	0x0800c204

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800c204 	.word	0x0800c204

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96a 	b.w	8000ebc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	460c      	mov	r4, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14e      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	458c      	cmp	ip, r1
 8000c10:	4686      	mov	lr, r0
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	d962      	bls.n	8000cde <__udivmoddi4+0xde>
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0320 	rsb	r3, r2, #32
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f f68c 	uxth.w	r6, ip
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb04 f106 	mul.w	r1, r4, r6
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c56:	f080 8112 	bcs.w	8000e7e <__udivmoddi4+0x27e>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 810f 	bls.w	8000e7e <__udivmoddi4+0x27e>
 8000c60:	3c02      	subs	r4, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	fa1f f38e 	uxth.w	r3, lr
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f606 	mul.w	r6, r0, r6
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	d90a      	bls.n	8000c94 <__udivmoddi4+0x94>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c86:	f080 80fc 	bcs.w	8000e82 <__udivmoddi4+0x282>
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	f240 80f9 	bls.w	8000e82 <__udivmoddi4+0x282>
 8000c90:	4463      	add	r3, ip
 8000c92:	3802      	subs	r0, #2
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11d      	cbz	r5, 8000ca6 <__udivmoddi4+0xa6>
 8000c9e:	40d3      	lsrs	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d905      	bls.n	8000cba <__udivmoddi4+0xba>
 8000cae:	b10d      	cbz	r5, 8000cb4 <__udivmoddi4+0xb4>
 8000cb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e7f5      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cba:	fab3 f183 	clz	r1, r3
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d146      	bne.n	8000d50 <__udivmoddi4+0x150>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xcc>
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	f0c0 80f0 	bcc.w	8000eac <__udivmoddi4+0x2ac>
 8000ccc:	1a86      	subs	r6, r0, r2
 8000cce:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d0e6      	beq.n	8000ca6 <__udivmoddi4+0xa6>
 8000cd8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cdc:	e7e3      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	f040 8090 	bne.w	8000e04 <__udivmoddi4+0x204>
 8000ce4:	eba1 040c 	sub.w	r4, r1, ip
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb07 f006 	mul.w	r0, r7, r6
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x11c>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x11a>
 8000d14:	4298      	cmp	r0, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000d1a:	4626      	mov	r6, r4
 8000d1c:	1a1c      	subs	r4, r3, r0
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb00 f707 	mul.w	r7, r0, r7
 8000d32:	429f      	cmp	r7, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x148>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x146>
 8000d40:	429f      	cmp	r7, r3
 8000d42:	f200 80b0 	bhi.w	8000ea6 <__udivmoddi4+0x2a6>
 8000d46:	4620      	mov	r0, r4
 8000d48:	1bdb      	subs	r3, r3, r7
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0x9c>
 8000d50:	f1c1 0620 	rsb	r6, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d60:	fa04 f301 	lsl.w	r3, r4, r1
 8000d64:	ea43 030c 	orr.w	r3, r3, ip
 8000d68:	40f4      	lsrs	r4, r6
 8000d6a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6e:	0c38      	lsrs	r0, r7, #16
 8000d70:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d74:	fbb4 fef0 	udiv	lr, r4, r0
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d80:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d84:	fb0e f90c 	mul.w	r9, lr, ip
 8000d88:	45a1      	cmp	r9, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x1a6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	f080 8084 	bcs.w	8000ea2 <__udivmoddi4+0x2a2>
 8000d9a:	45a1      	cmp	r9, r4
 8000d9c:	f240 8081 	bls.w	8000ea2 <__udivmoddi4+0x2a2>
 8000da0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	eba4 0409 	sub.w	r4, r4, r9
 8000daa:	fa1f f983 	uxth.w	r9, r3
 8000dae:	fbb4 f3f0 	udiv	r3, r4, r0
 8000db2:	fb00 4413 	mls	r4, r0, r3, r4
 8000db6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dba:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x1d2>
 8000dc2:	193c      	adds	r4, r7, r4
 8000dc4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc8:	d267      	bcs.n	8000e9a <__udivmoddi4+0x29a>
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d965      	bls.n	8000e9a <__udivmoddi4+0x29a>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	429c      	cmp	r4, r3
 8000de0:	46ce      	mov	lr, r9
 8000de2:	469c      	mov	ip, r3
 8000de4:	d351      	bcc.n	8000e8a <__udivmoddi4+0x28a>
 8000de6:	d04e      	beq.n	8000e86 <__udivmoddi4+0x286>
 8000de8:	b155      	cbz	r5, 8000e00 <__udivmoddi4+0x200>
 8000dea:	ebb8 030e 	subs.w	r3, r8, lr
 8000dee:	eb64 040c 	sbc.w	r4, r4, ip
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	40cb      	lsrs	r3, r1
 8000df8:	431e      	orrs	r6, r3
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	e9c5 6400 	strd	r6, r4, [r5]
 8000e00:	2100      	movs	r1, #0
 8000e02:	e750      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000e04:	f1c2 0320 	rsb	r3, r2, #32
 8000e08:	fa20 f103 	lsr.w	r1, r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa24 f303 	lsr.w	r3, r4, r3
 8000e14:	4094      	lsls	r4, r2
 8000e16:	430c      	orrs	r4, r1
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e28:	fb08 3110 	mls	r1, r8, r0, r3
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x24c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29e>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29e>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e54:	fb08 3311 	mls	r3, r8, r1, r3
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x276>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x296>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x296>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e739      	b.n	8000cf2 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f0      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e706      	b.n	8000c94 <__udivmoddi4+0x94>
 8000e86:	45c8      	cmp	r8, r9
 8000e88:	d2ae      	bcs.n	8000de8 <__udivmoddi4+0x1e8>
 8000e8a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a8      	b.n	8000de8 <__udivmoddi4+0x1e8>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x276>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e799      	b.n	8000dd2 <__udivmoddi4+0x1d2>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x24c>
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74d      	b.n	8000d48 <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e70f      	b.n	8000cd4 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e730      	b.n	8000d1c <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f002 f93d 	bl	8003142 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f836 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ecc:	f000 fe8a 	bl	8001be4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ed0:	f000 fe56 	bl	8001b80 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ed4:	f000 f87a 	bl	8000fcc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ed8:	f000 f912 	bl	8001100 <MX_ADC2_Init>
  MX_COMP1_Init();
 8000edc:	f000 f98a 	bl	80011f4 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000ee0:	f000 f9ae 	bl	8001240 <MX_COMP2_Init>
  MX_DAC1_Init();
 8000ee4:	f000 f9d4 	bl	8001290 <MX_DAC1_Init>
  MX_TIM1_Init();
 8000ee8:	f000 fa0c 	bl	8001304 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000eec:	f000 fdfc 	bl	8001ae8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000ef0:	f000 fae0 	bl	80014b4 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000ef4:	f000 fc6a 	bl	80017cc <MX_TIM6_Init>
  MX_TIM4_Init();
 8000ef8:	f000 fbd8 	bl	80016ac <MX_TIM4_Init>
  MX_TIM3_Init();
 8000efc:	f000 fb54 	bl	80015a8 <MX_TIM3_Init>
  MX_TIM7_Init();
 8000f00:	f000 fc9a 	bl	8001838 <MX_TIM7_Init>
  MX_TIM8_Init();
 8000f04:	f000 fcd0 	bl	80018a8 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000f08:	f000 fd9e 	bl	8001a48 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  QCW_Init();
 8000f0c:	f000 fed4 	bl	8001cb8 <QCW_Init>
  HAL_Delay(1000);
 8000f10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f14:	f002 f986 	bl	8003224 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	 HAL_Delay(100);
 8000f18:	2064      	movs	r0, #100	@ 0x64
 8000f1a:	f002 f983 	bl	8003224 <HAL_Delay>
	  	 StartPulse(1.0f, 150.0f, 30.0f);
 8000f1e:	eeb3 1a0e 	vmov.f32	s2, #62	@ 0x41f00000  30.0
 8000f22:	eddf 0a04 	vldr	s1, [pc, #16]	@ 8000f34 <main+0x74>
 8000f26:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000f2a:	f001 f93d 	bl	80021a8 <StartPulse>
	  	 HAL_Delay(100);
 8000f2e:	bf00      	nop
 8000f30:	e7f2      	b.n	8000f18 <main+0x58>
 8000f32:	bf00      	nop
 8000f34:	43160000 	.word	0x43160000

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b094      	sub	sp, #80	@ 0x50
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0318 	add.w	r3, r7, #24
 8000f42:	2238      	movs	r2, #56	@ 0x38
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f00a fdb0 	bl	800baac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f005 fa28 	bl	80063b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f68:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000f72:	2302      	movs	r3, #2
 8000f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f76:	2355      	movs	r3, #85	@ 0x55
 8000f78:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f82:	2302      	movs	r3, #2
 8000f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f86:	f107 0318 	add.w	r3, r7, #24
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 fac4 	bl	8006518 <HAL_RCC_OscConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000f96:	f000 fe87 	bl	8001ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f005 fdc4 	bl	8006b40 <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000fbe:	f000 fe73 	bl	8001ca8 <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3750      	adds	r7, #80	@ 0x50
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	@ 0x30
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f00a fd61 	bl	800baac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fea:	4b41      	ldr	r3, [pc, #260]	@ (80010f0 <MX_ADC1_Init+0x124>)
 8000fec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ff0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80010f0 <MX_ADC1_Init+0x124>)
 8000ff4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ff8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80010f0 <MX_ADC1_Init+0x124>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001000:	4b3b      	ldr	r3, [pc, #236]	@ (80010f0 <MX_ADC1_Init+0x124>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001006:	4b3a      	ldr	r3, [pc, #232]	@ (80010f0 <MX_ADC1_Init+0x124>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800100c:	4b38      	ldr	r3, [pc, #224]	@ (80010f0 <MX_ADC1_Init+0x124>)
 800100e:	2201      	movs	r2, #1
 8001010:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001012:	4b37      	ldr	r3, [pc, #220]	@ (80010f0 <MX_ADC1_Init+0x124>)
 8001014:	2208      	movs	r2, #8
 8001016:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001018:	4b35      	ldr	r3, [pc, #212]	@ (80010f0 <MX_ADC1_Init+0x124>)
 800101a:	2200      	movs	r2, #0
 800101c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800101e:	4b34      	ldr	r3, [pc, #208]	@ (80010f0 <MX_ADC1_Init+0x124>)
 8001020:	2200      	movs	r2, #0
 8001022:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001024:	4b32      	ldr	r3, [pc, #200]	@ (80010f0 <MX_ADC1_Init+0x124>)
 8001026:	2203      	movs	r2, #3
 8001028:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b31      	ldr	r3, [pc, #196]	@ (80010f0 <MX_ADC1_Init+0x124>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001032:	4b2f      	ldr	r3, [pc, #188]	@ (80010f0 <MX_ADC1_Init+0x124>)
 8001034:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001038:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800103a:	4b2d      	ldr	r3, [pc, #180]	@ (80010f0 <MX_ADC1_Init+0x124>)
 800103c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001040:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001042:	4b2b      	ldr	r3, [pc, #172]	@ (80010f0 <MX_ADC1_Init+0x124>)
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800104a:	4b29      	ldr	r3, [pc, #164]	@ (80010f0 <MX_ADC1_Init+0x124>)
 800104c:	2200      	movs	r2, #0
 800104e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001050:	4b27      	ldr	r3, [pc, #156]	@ (80010f0 <MX_ADC1_Init+0x124>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001058:	4825      	ldr	r0, [pc, #148]	@ (80010f0 <MX_ADC1_Init+0x124>)
 800105a:	f002 fb6b 	bl	8003734 <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001064:	f000 fe20 	bl	8001ca8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800106c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	481f      	ldr	r0, [pc, #124]	@ (80010f0 <MX_ADC1_Init+0x124>)
 8001074:	f003 fe1e 	bl	8004cb4 <HAL_ADCEx_MultiModeConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800107e:	f000 fe13 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001082:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <MX_ADC1_Init+0x128>)
 8001084:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001086:	2306      	movs	r3, #6
 8001088:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800108a:	2305      	movs	r3, #5
 800108c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800108e:	237f      	movs	r3, #127	@ 0x7f
 8001090:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001092:	2304      	movs	r3, #4
 8001094:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4619      	mov	r1, r3
 800109e:	4814      	ldr	r0, [pc, #80]	@ (80010f0 <MX_ADC1_Init+0x124>)
 80010a0:	f002 ffb8 	bl	8004014 <HAL_ADC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80010aa:	f000 fdfd 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80010ae:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_ADC1_Init+0x12c>)
 80010b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010b2:	230c      	movs	r3, #12
 80010b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	480d      	ldr	r0, [pc, #52]	@ (80010f0 <MX_ADC1_Init+0x124>)
 80010bc:	f002 ffaa 	bl	8004014 <HAL_ADC_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80010c6:	f000 fdef 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <MX_ADC1_Init+0x130>)
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010ce:	2312      	movs	r3, #18
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <MX_ADC1_Init+0x124>)
 80010d8:	f002 ff9c 	bl	8004014 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80010e2:	f000 fde1 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3730      	adds	r7, #48	@ 0x30
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000008c 	.word	0x2000008c
 80010f4:	04300002 	.word	0x04300002
 80010f8:	c3210000 	.word	0xc3210000
 80010fc:	cb840000 	.word	0xcb840000

08001100 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2220      	movs	r2, #32
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f00a fccd 	bl	800baac <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001112:	4b34      	ldr	r3, [pc, #208]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 8001114:	4a34      	ldr	r2, [pc, #208]	@ (80011e8 <MX_ADC2_Init+0xe8>)
 8001116:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001118:	4b32      	ldr	r3, [pc, #200]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 800111a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800111e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001120:	4b30      	ldr	r3, [pc, #192]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001126:	4b2f      	ldr	r3, [pc, #188]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800112c:	4b2d      	ldr	r3, [pc, #180]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001132:	4b2c      	ldr	r3, [pc, #176]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 8001134:	2201      	movs	r2, #1
 8001136:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001138:	4b2a      	ldr	r3, [pc, #168]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 800113a:	2204      	movs	r2, #4
 800113c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800113e:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 8001140:	2200      	movs	r2, #0
 8001142:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001144:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 8001146:	2200      	movs	r2, #0
 8001148:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800114a:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 800114c:	2202      	movs	r2, #2
 800114e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001150:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001158:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 800115a:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 800115e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001160:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 8001162:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001166:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001168:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001170:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 8001172:	2200      	movs	r2, #0
 8001174:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001176:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800117e:	4819      	ldr	r0, [pc, #100]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 8001180:	f002 fad8 	bl	8003734 <HAL_ADC_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800118a:	f000 fd8d 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800118e:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <MX_ADC2_Init+0xec>)
 8001190:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001192:	2306      	movs	r3, #6
 8001194:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001196:	2306      	movs	r3, #6
 8001198:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800119a:	237f      	movs	r3, #127	@ 0x7f
 800119c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800119e:	2304      	movs	r3, #4
 80011a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011a6:	463b      	mov	r3, r7
 80011a8:	4619      	mov	r1, r3
 80011aa:	480e      	ldr	r0, [pc, #56]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 80011ac:	f002 ff32 	bl	8004014 <HAL_ADC_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80011b6:	f000 fd77 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80011ba:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <MX_ADC2_Init+0xf0>)
 80011bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011be:	230c      	movs	r3, #12
 80011c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80011c2:	2305      	movs	r3, #5
 80011c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	@ (80011e4 <MX_ADC2_Init+0xe4>)
 80011cc:	f002 ff22 	bl	8004014 <HAL_ADC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 80011d6:	f000 fd67 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000f8 	.word	0x200000f8
 80011e8:	50000100 	.word	0x50000100
 80011ec:	47520000 	.word	0x47520000
 80011f0:	36902000 	.word	0x36902000

080011f4 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <MX_COMP1_Init+0x44>)
 80011fa:	4a10      	ldr	r2, [pc, #64]	@ (800123c <MX_COMP1_Init+0x48>)
 80011fc:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <MX_COMP1_Init+0x44>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <MX_COMP1_Init+0x44>)
 8001206:	2250      	movs	r2, #80	@ 0x50
 8001208:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800120a:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <MX_COMP1_Init+0x44>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_10MV;
 8001210:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <MX_COMP1_Init+0x44>)
 8001212:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001216:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001218:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <MX_COMP1_Init+0x44>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <MX_COMP1_Init+0x44>)
 8001220:	2211      	movs	r2, #17
 8001222:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001224:	4804      	ldr	r0, [pc, #16]	@ (8001238 <MX_COMP1_Init+0x44>)
 8001226:	f003 fea7 	bl	8004f78 <HAL_COMP_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8001230:	f000 fd3a 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000224 	.word	0x20000224
 800123c:	40010200 	.word	0x40010200

08001240 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001244:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <MX_COMP2_Init+0x48>)
 8001246:	4a11      	ldr	r2, [pc, #68]	@ (800128c <MX_COMP2_Init+0x4c>)
 8001248:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <MX_COMP2_Init+0x48>)
 800124c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001250:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_IO2;
 8001252:	4b0d      	ldr	r3, [pc, #52]	@ (8001288 <MX_COMP2_Init+0x48>)
 8001254:	2270      	movs	r2, #112	@ 0x70
 8001256:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <MX_COMP2_Init+0x48>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_70MV;
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <MX_COMP2_Init+0x48>)
 8001260:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001264:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <MX_COMP2_Init+0x48>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <MX_COMP2_Init+0x48>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_COMP2_Init+0x48>)
 8001274:	f003 fe80 	bl	8004f78 <HAL_COMP_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_COMP2_Init+0x42>
  {
    Error_Handler();
 800127e:	f000 fd13 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000248 	.word	0x20000248
 800128c:	40010204 	.word	0x40010204

08001290 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	@ 0x30
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2230      	movs	r2, #48	@ 0x30
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f00a fc05 	bl	800baac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012a2:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <MX_DAC1_Init+0x6c>)
 80012a4:	4a16      	ldr	r2, [pc, #88]	@ (8001300 <MX_DAC1_Init+0x70>)
 80012a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012a8:	4814      	ldr	r0, [pc, #80]	@ (80012fc <MX_DAC1_Init+0x6c>)
 80012aa:	f004 f8d4 	bl	8005456 <HAL_DAC_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012b4:	f000 fcf8 	bl	8001ca8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80012b8:	2302      	movs	r3, #2
 80012ba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80012d0:	2302      	movs	r3, #2
 80012d2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	2200      	movs	r2, #0
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	@ (80012fc <MX_DAC1_Init+0x6c>)
 80012e4:	f004 f9d4 	bl	8005690 <HAL_DAC_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80012ee:	f000 fcdb 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3730      	adds	r7, #48	@ 0x30
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000026c 	.word	0x2000026c
 8001300:	50000800 	.word	0x50000800

08001304 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b09c      	sub	sp, #112	@ 0x70
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001324:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
 8001334:	615a      	str	r2, [r3, #20]
 8001336:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2234      	movs	r2, #52	@ 0x34
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f00a fbb4 	bl	800baac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001344:	4b58      	ldr	r3, [pc, #352]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 8001346:	4a59      	ldr	r2, [pc, #356]	@ (80014ac <MX_TIM1_Init+0x1a8>)
 8001348:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800134a:	4b57      	ldr	r3, [pc, #348]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001350:	4b55      	ldr	r3, [pc, #340]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 8001352:	2220      	movs	r2, #32
 8001354:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001356:	4b54      	ldr	r3, [pc, #336]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 8001358:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800135c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b52      	ldr	r3, [pc, #328]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001364:	4b50      	ldr	r3, [pc, #320]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	4b4f      	ldr	r3, [pc, #316]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001370:	484d      	ldr	r0, [pc, #308]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 8001372:	f005 fff1 	bl	8007358 <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800137c:	f000 fc94 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001380:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001384:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001386:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800138a:	4619      	mov	r1, r3
 800138c:	4846      	ldr	r0, [pc, #280]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 800138e:	f007 f917 	bl	80085c0 <HAL_TIM_ConfigClockSource>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001398:	f000 fc86 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800139c:	4842      	ldr	r0, [pc, #264]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 800139e:	f006 f927 	bl	80075f0 <HAL_TIM_PWM_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013a8:	f000 fc7e 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80013ac:	2310      	movs	r3, #16
 80013ae:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC5REF;
 80013b0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80013b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013be:	4619      	mov	r1, r3
 80013c0:	4839      	ldr	r0, [pc, #228]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 80013c2:	f008 f883 	bl	80094cc <HAL_TIMEx_MasterConfigSynchronization>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80013cc:	f000 fc6c 	bl	8001ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 80013d0:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <MX_TIM1_Init+0x1ac>)
 80013d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d8:	2300      	movs	r3, #0
 80013da:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013dc:	2300      	movs	r3, #0
 80013de:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013f0:	2200      	movs	r2, #0
 80013f2:	4619      	mov	r1, r3
 80013f4:	482c      	ldr	r0, [pc, #176]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 80013f6:	f006 ffcf 	bl	8008398 <HAL_TIM_PWM_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001400:	f000 fc52 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001404:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001408:	2204      	movs	r2, #4
 800140a:	4619      	mov	r1, r3
 800140c:	4826      	ldr	r0, [pc, #152]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 800140e:	f006 ffc3 	bl	8008398 <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001418:	f000 fc46 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800141c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001420:	2208      	movs	r2, #8
 8001422:	4619      	mov	r1, r3
 8001424:	4820      	ldr	r0, [pc, #128]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 8001426:	f006 ffb7 	bl	8008398 <HAL_TIM_PWM_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001430:	f000 fc3a 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001434:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001438:	220c      	movs	r2, #12
 800143a:	4619      	mov	r1, r3
 800143c:	481a      	ldr	r0, [pc, #104]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 800143e:	f006 ffab 	bl	8008398 <HAL_TIM_PWM_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001448:	f000 fc2e 	bl	8001ca8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001460:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001464:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001472:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001476:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	4619      	mov	r1, r3
 8001488:	4807      	ldr	r0, [pc, #28]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 800148a:	f008 f8a1 	bl	80095d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM1_Init+0x194>
  {
    Error_Handler();
 8001494:	f000 fc08 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001498:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <MX_TIM1_Init+0x1a4>)
 800149a:	f001 fc3b 	bl	8002d14 <HAL_TIM_MspPostInit>

}
 800149e:	bf00      	nop
 80014a0:	3770      	adds	r7, #112	@ 0x70
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000280 	.word	0x20000280
 80014ac:	40012c00 	.word	0x40012c00
 80014b0:	00010060 	.word	0x00010060

080014b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	@ 0x30
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e0:	4b30      	ldr	r3, [pc, #192]	@ (80015a4 <MX_TIM2_Init+0xf0>)
 80014e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014e8:	4b2e      	ldr	r3, [pc, #184]	@ (80015a4 <MX_TIM2_Init+0xf0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	4b2d      	ldr	r3, [pc, #180]	@ (80015a4 <MX_TIM2_Init+0xf0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014f4:	4b2b      	ldr	r3, [pc, #172]	@ (80015a4 <MX_TIM2_Init+0xf0>)
 80014f6:	f04f 32ff 	mov.w	r2, #4294967295
 80014fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fc:	4b29      	ldr	r3, [pc, #164]	@ (80015a4 <MX_TIM2_Init+0xf0>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b28      	ldr	r3, [pc, #160]	@ (80015a4 <MX_TIM2_Init+0xf0>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001508:	4826      	ldr	r0, [pc, #152]	@ (80015a4 <MX_TIM2_Init+0xf0>)
 800150a:	f005 ff25 	bl	8007358 <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001514:	f000 fbc8 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001518:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800151c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800151e:	f107 0320 	add.w	r3, r7, #32
 8001522:	4619      	mov	r1, r3
 8001524:	481f      	ldr	r0, [pc, #124]	@ (80015a4 <MX_TIM2_Init+0xf0>)
 8001526:	f007 f84b 	bl	80085c0 <HAL_TIM_ConfigClockSource>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001530:	f000 fbba 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001534:	481b      	ldr	r0, [pc, #108]	@ (80015a4 <MX_TIM2_Init+0xf0>)
 8001536:	f006 fb9f 	bl	8007c78 <HAL_TIM_IC_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001540:	f000 fbb2 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	4814      	ldr	r0, [pc, #80]	@ (80015a4 <MX_TIM2_Init+0xf0>)
 8001554:	f007 ffba 	bl	80094cc <HAL_TIMEx_MasterConfigSynchronization>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800155e:	f000 fba3 	bl	8001ca8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001566:	2301      	movs	r3, #1
 8001568:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2200      	movs	r2, #0
 8001576:	4619      	mov	r1, r3
 8001578:	480a      	ldr	r0, [pc, #40]	@ (80015a4 <MX_TIM2_Init+0xf0>)
 800157a:	f006 fe70 	bl	800825e <HAL_TIM_IC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001584:	f000 fb90 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim2, TIM_TIM2_TI1_COMP2, TIM_CHANNEL_1) != HAL_OK)
 8001588:	2200      	movs	r2, #0
 800158a:	2102      	movs	r1, #2
 800158c:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <MX_TIM2_Init+0xf0>)
 800158e:	f008 f8d1 	bl	8009734 <HAL_TIMEx_TISelection>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001598:	f000 fb86 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	3730      	adds	r7, #48	@ 0x30
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200002cc 	.word	0x200002cc

080015a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08e      	sub	sp, #56	@ 0x38
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015da:	4b32      	ldr	r3, [pc, #200]	@ (80016a4 <MX_TIM3_Init+0xfc>)
 80015dc:	4a32      	ldr	r2, [pc, #200]	@ (80016a8 <MX_TIM3_Init+0x100>)
 80015de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015e0:	4b30      	ldr	r3, [pc, #192]	@ (80016a4 <MX_TIM3_Init+0xfc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <MX_TIM3_Init+0xfc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6800;
 80015ec:	4b2d      	ldr	r3, [pc, #180]	@ (80016a4 <MX_TIM3_Init+0xfc>)
 80015ee:	f641 2290 	movw	r2, #6800	@ 0x1a90
 80015f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f4:	4b2b      	ldr	r3, [pc, #172]	@ (80016a4 <MX_TIM3_Init+0xfc>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fa:	4b2a      	ldr	r3, [pc, #168]	@ (80016a4 <MX_TIM3_Init+0xfc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001600:	4828      	ldr	r0, [pc, #160]	@ (80016a4 <MX_TIM3_Init+0xfc>)
 8001602:	f005 fea9 	bl	8007358 <HAL_TIM_Base_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800160c:	f000 fb4c 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001610:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001614:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001616:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800161a:	4619      	mov	r1, r3
 800161c:	4821      	ldr	r0, [pc, #132]	@ (80016a4 <MX_TIM3_Init+0xfc>)
 800161e:	f006 ffcf 	bl	80085c0 <HAL_TIM_ConfigClockSource>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001628:	f000 fb3e 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800162c:	481d      	ldr	r0, [pc, #116]	@ (80016a4 <MX_TIM3_Init+0xfc>)
 800162e:	f005 ffdf 	bl	80075f0 <HAL_TIM_PWM_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001638:	f000 fb36 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4816      	ldr	r0, [pc, #88]	@ (80016a4 <MX_TIM3_Init+0xfc>)
 800164c:	f007 ff3e 	bl	80094cc <HAL_TIMEx_MasterConfigSynchronization>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001656:	f000 fb27 	bl	8001ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165a:	2360      	movs	r3, #96	@ 0x60
 800165c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	2200      	movs	r2, #0
 800166e:	4619      	mov	r1, r3
 8001670:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <MX_TIM3_Init+0xfc>)
 8001672:	f006 fe91 	bl	8008398 <HAL_TIM_PWM_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800167c:	f000 fb14 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001680:	463b      	mov	r3, r7
 8001682:	2204      	movs	r2, #4
 8001684:	4619      	mov	r1, r3
 8001686:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <MX_TIM3_Init+0xfc>)
 8001688:	f006 fe86 	bl	8008398 <HAL_TIM_PWM_ConfigChannel>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001692:	f000 fb09 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001696:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <MX_TIM3_Init+0xfc>)
 8001698:	f001 fb3c 	bl	8002d14 <HAL_TIM_MspPostInit>

}
 800169c:	bf00      	nop
 800169e:	3738      	adds	r7, #56	@ 0x38
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000318 	.word	0x20000318
 80016a8:	40000400 	.word	0x40000400

080016ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08e      	sub	sp, #56	@ 0x38
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016cc:	463b      	mov	r3, r7
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]
 80016da:	615a      	str	r2, [r3, #20]
 80016dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016de:	4b39      	ldr	r3, [pc, #228]	@ (80017c4 <MX_TIM4_Init+0x118>)
 80016e0:	4a39      	ldr	r2, [pc, #228]	@ (80017c8 <MX_TIM4_Init+0x11c>)
 80016e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016e4:	4b37      	ldr	r3, [pc, #220]	@ (80017c4 <MX_TIM4_Init+0x118>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b36      	ldr	r3, [pc, #216]	@ (80017c4 <MX_TIM4_Init+0x118>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 6800;
 80016f0:	4b34      	ldr	r3, [pc, #208]	@ (80017c4 <MX_TIM4_Init+0x118>)
 80016f2:	f641 2290 	movw	r2, #6800	@ 0x1a90
 80016f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b32      	ldr	r3, [pc, #200]	@ (80017c4 <MX_TIM4_Init+0x118>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fe:	4b31      	ldr	r3, [pc, #196]	@ (80017c4 <MX_TIM4_Init+0x118>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001704:	482f      	ldr	r0, [pc, #188]	@ (80017c4 <MX_TIM4_Init+0x118>)
 8001706:	f005 fe27 	bl	8007358 <HAL_TIM_Base_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001710:	f000 faca 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800171a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800171e:	4619      	mov	r1, r3
 8001720:	4828      	ldr	r0, [pc, #160]	@ (80017c4 <MX_TIM4_Init+0x118>)
 8001722:	f006 ff4d 	bl	80085c0 <HAL_TIM_ConfigClockSource>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800172c:	f000 fabc 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001730:	4824      	ldr	r0, [pc, #144]	@ (80017c4 <MX_TIM4_Init+0x118>)
 8001732:	f005 ff5d 	bl	80075f0 <HAL_TIM_PWM_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800173c:	f000 fab4 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	481d      	ldr	r0, [pc, #116]	@ (80017c4 <MX_TIM4_Init+0x118>)
 8001750:	f007 febc 	bl	80094cc <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800175a:	f000 faa5 	bl	8001ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800175e:	2360      	movs	r3, #96	@ 0x60
 8001760:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800176e:	463b      	mov	r3, r7
 8001770:	2200      	movs	r2, #0
 8001772:	4619      	mov	r1, r3
 8001774:	4813      	ldr	r0, [pc, #76]	@ (80017c4 <MX_TIM4_Init+0x118>)
 8001776:	f006 fe0f 	bl	8008398 <HAL_TIM_PWM_ConfigChannel>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001780:	f000 fa92 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001784:	463b      	mov	r3, r7
 8001786:	2204      	movs	r2, #4
 8001788:	4619      	mov	r1, r3
 800178a:	480e      	ldr	r0, [pc, #56]	@ (80017c4 <MX_TIM4_Init+0x118>)
 800178c:	f006 fe04 	bl	8008398 <HAL_TIM_PWM_ConfigChannel>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001796:	f000 fa87 	bl	8001ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800179a:	2370      	movs	r3, #112	@ 0x70
 800179c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800179e:	463b      	mov	r3, r7
 80017a0:	2208      	movs	r2, #8
 80017a2:	4619      	mov	r1, r3
 80017a4:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <MX_TIM4_Init+0x118>)
 80017a6:	f006 fdf7 	bl	8008398 <HAL_TIM_PWM_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM4_Init+0x108>
  {
    Error_Handler();
 80017b0:	f000 fa7a 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017b4:	4803      	ldr	r0, [pc, #12]	@ (80017c4 <MX_TIM4_Init+0x118>)
 80017b6:	f001 faad 	bl	8002d14 <HAL_TIM_MspPostInit>

}
 80017ba:	bf00      	nop
 80017bc:	3738      	adds	r7, #56	@ 0x38
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000364 	.word	0x20000364
 80017c8:	40000800 	.word	0x40000800

080017cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017de:	4a15      	ldr	r2, [pc, #84]	@ (8001834 <MX_TIM6_Init+0x68>)
 80017e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80017e2:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017fc:	480c      	ldr	r0, [pc, #48]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017fe:	f005 fdab 	bl	8007358 <HAL_TIM_Base_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001808:	f000 fa4e 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	@ (8001830 <MX_TIM6_Init+0x64>)
 800181a:	f007 fe57 	bl	80094cc <HAL_TIMEx_MasterConfigSynchronization>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001824:	f000 fa40 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200003b0 	.word	0x200003b0
 8001834:	40001000 	.word	0x40001000

08001838 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001848:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <MX_TIM7_Init+0x68>)
 800184a:	4a16      	ldr	r2, [pc, #88]	@ (80018a4 <MX_TIM7_Init+0x6c>)
 800184c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1700-1;
 800184e:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <MX_TIM7_Init+0x68>)
 8001850:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001854:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001856:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <MX_TIM7_Init+0x68>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800185c:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <MX_TIM7_Init+0x68>)
 800185e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001862:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001864:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <MX_TIM7_Init+0x68>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800186a:	480d      	ldr	r0, [pc, #52]	@ (80018a0 <MX_TIM7_Init+0x68>)
 800186c:	f005 fd74 	bl	8007358 <HAL_TIM_Base_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001876:	f000 fa17 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	@ (80018a0 <MX_TIM7_Init+0x68>)
 8001888:	f007 fe20 	bl	80094cc <HAL_TIMEx_MasterConfigSynchronization>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001892:	f000 fa09 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200003fc 	.word	0x200003fc
 80018a4:	40001400 	.word	0x40001400

080018a8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b0a0      	sub	sp, #128	@ 0x80
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ae:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80018bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
 80018e8:	615a      	str	r2, [r3, #20]
 80018ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ec:	463b      	mov	r3, r7
 80018ee:	2234      	movs	r2, #52	@ 0x34
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00a f8da 	bl	800baac <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018f8:	4b51      	ldr	r3, [pc, #324]	@ (8001a40 <MX_TIM8_Init+0x198>)
 80018fa:	4a52      	ldr	r2, [pc, #328]	@ (8001a44 <MX_TIM8_Init+0x19c>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80018fe:	4b50      	ldr	r3, [pc, #320]	@ (8001a40 <MX_TIM8_Init+0x198>)
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001904:	4b4e      	ldr	r3, [pc, #312]	@ (8001a40 <MX_TIM8_Init+0x198>)
 8001906:	2220      	movs	r2, #32
 8001908:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800190a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a40 <MX_TIM8_Init+0x198>)
 800190c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001910:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001912:	4b4b      	ldr	r3, [pc, #300]	@ (8001a40 <MX_TIM8_Init+0x198>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001918:	4b49      	ldr	r3, [pc, #292]	@ (8001a40 <MX_TIM8_Init+0x198>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b48      	ldr	r3, [pc, #288]	@ (8001a40 <MX_TIM8_Init+0x198>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001924:	4846      	ldr	r0, [pc, #280]	@ (8001a40 <MX_TIM8_Init+0x198>)
 8001926:	f005 fd17 	bl	8007358 <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8001930:	f000 f9ba 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001938:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800193a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800193e:	4619      	mov	r1, r3
 8001940:	483f      	ldr	r0, [pc, #252]	@ (8001a40 <MX_TIM8_Init+0x198>)
 8001942:	f006 fe3d 	bl	80085c0 <HAL_TIM_ConfigClockSource>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800194c:	f000 f9ac 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001950:	483b      	ldr	r0, [pc, #236]	@ (8001a40 <MX_TIM8_Init+0x198>)
 8001952:	f005 fe4d 	bl	80075f0 <HAL_TIM_PWM_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 800195c:	f000 f9a4 	bl	8001ca8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001960:	2304      	movs	r3, #4
 8001962:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8001964:	2370      	movs	r3, #112	@ 0x70
 8001966:	663b      	str	r3, [r7, #96]	@ 0x60
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8001968:	2300      	movs	r3, #0
 800196a:	667b      	str	r3, [r7, #100]	@ 0x64
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	66bb      	str	r3, [r7, #104]	@ 0x68
  sSlaveConfig.TriggerFilter = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001974:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001978:	4619      	mov	r1, r3
 800197a:	4831      	ldr	r0, [pc, #196]	@ (8001a40 <MX_TIM8_Init+0x198>)
 800197c:	f006 ff1a 	bl	80087b4 <HAL_TIM_SlaveConfigSynchro>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM8_Init+0xe2>
  {
    Error_Handler();
 8001986:	f000 f98f 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001996:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800199a:	4619      	mov	r1, r3
 800199c:	4828      	ldr	r0, [pc, #160]	@ (8001a40 <MX_TIM8_Init+0x198>)
 800199e:	f007 fd95 	bl	80094cc <HAL_TIMEx_MasterConfigSynchronization>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM8_Init+0x104>
  {
    Error_Handler();
 80019a8:	f000 f97e 	bl	8001ca8 <Error_Handler>
  }
  HAL_TIMEx_RemapConfig(&htim8, TIM_TIM8_ETR_COMP2);
 80019ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019b0:	4823      	ldr	r0, [pc, #140]	@ (8001a40 <MX_TIM8_Init+0x198>)
 80019b2:	f007 fe99 	bl	80096e8 <HAL_TIMEx_RemapConfig>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b6:	2360      	movs	r3, #96	@ 0x60
 80019b8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019be:	2300      	movs	r3, #0
 80019c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019c2:	2300      	movs	r3, #0
 80019c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019d6:	2200      	movs	r2, #0
 80019d8:	4619      	mov	r1, r3
 80019da:	4819      	ldr	r0, [pc, #100]	@ (8001a40 <MX_TIM8_Init+0x198>)
 80019dc:	f006 fcdc 	bl	8008398 <HAL_TIM_PWM_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80019e6:	f000 f95f 	bl	8001ca8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a22:	463b      	mov	r3, r7
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	@ (8001a40 <MX_TIM8_Init+0x198>)
 8001a28:	f007 fdd2 	bl	80095d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM8_Init+0x18e>
  {
    Error_Handler();
 8001a32:	f000 f939 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3780      	adds	r7, #128	@ 0x80
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000448 	.word	0x20000448
 8001a44:	40013400 	.word	0x40013400

08001a48 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <MX_TIM15_Init+0x98>)
 8001a68:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae4 <MX_TIM15_Init+0x9c>)
 8001a6a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 170-1;
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae0 <MX_TIM15_Init+0x98>)
 8001a6e:	22a9      	movs	r2, #169	@ 0xa9
 8001a70:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <MX_TIM15_Init+0x98>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 8001a78:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <MX_TIM15_Init+0x98>)
 8001a7a:	2263      	movs	r2, #99	@ 0x63
 8001a7c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ae0 <MX_TIM15_Init+0x98>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001a84:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <MX_TIM15_Init+0x98>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <MX_TIM15_Init+0x98>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001a90:	4813      	ldr	r0, [pc, #76]	@ (8001ae0 <MX_TIM15_Init+0x98>)
 8001a92:	f005 fc61 	bl	8007358 <HAL_TIM_Base_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001a9c:	f000 f904 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001aa6:	f107 0310 	add.w	r3, r7, #16
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480c      	ldr	r0, [pc, #48]	@ (8001ae0 <MX_TIM15_Init+0x98>)
 8001aae:	f006 fd87 	bl	80085c0 <HAL_TIM_ConfigClockSource>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001ab8:	f000 f8f6 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001abc:	2320      	movs	r3, #32
 8001abe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <MX_TIM15_Init+0x98>)
 8001aca:	f007 fcff 	bl	80094cc <HAL_TIMEx_MasterConfigSynchronization>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001ad4:	f000 f8e8 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001ad8:	bf00      	nop
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000494 	.word	0x20000494
 8001ae4:	40014000 	.word	0x40014000

08001ae8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aec:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <MX_USART1_UART_Init+0x90>)
 8001aee:	4a23      	ldr	r2, [pc, #140]	@ (8001b7c <MX_USART1_UART_Init+0x94>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001af2:	4b21      	ldr	r3, [pc, #132]	@ (8001b78 <MX_USART1_UART_Init+0x90>)
 8001af4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b78 <MX_USART1_UART_Init+0x90>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b1d      	ldr	r3, [pc, #116]	@ (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b0e:	2204      	movs	r2, #4
 8001b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b17      	ldr	r3, [pc, #92]	@ (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b1e:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b24:	4b14      	ldr	r3, [pc, #80]	@ (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001b30:	4811      	ldr	r0, [pc, #68]	@ (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b32:	f007 fed3 	bl	80098dc <HAL_HalfDuplex_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b3c:	f000 f8b4 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b40:	2100      	movs	r1, #0
 8001b42:	480d      	ldr	r0, [pc, #52]	@ (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b44:	f009 fee7 	bl	800b916 <HAL_UARTEx_SetTxFifoThreshold>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b4e:	f000 f8ab 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b52:	2100      	movs	r1, #0
 8001b54:	4808      	ldr	r0, [pc, #32]	@ (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b56:	f009 ff1c 	bl	800b992 <HAL_UARTEx_SetRxFifoThreshold>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b60:	f000 f8a2 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b64:	4804      	ldr	r0, [pc, #16]	@ (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b66:	f009 fe9d 	bl	800b8a4 <HAL_UARTEx_DisableFifoMode>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b70:	f000 f89a 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200004e0 	.word	0x200004e0
 8001b7c:	40013800 	.word	0x40013800

08001b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b86:	4b16      	ldr	r3, [pc, #88]	@ (8001be0 <MX_DMA_Init+0x60>)
 8001b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8a:	4a15      	ldr	r2, [pc, #84]	@ (8001be0 <MX_DMA_Init+0x60>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b92:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <MX_DMA_Init+0x60>)
 8001b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b9e:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <MX_DMA_Init+0x60>)
 8001ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8001be0 <MX_DMA_Init+0x60>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001baa:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <MX_DMA_Init+0x60>)
 8001bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	200b      	movs	r0, #11
 8001bbc:	f003 fc17 	bl	80053ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bc0:	200b      	movs	r0, #11
 8001bc2:	f003 fc2e 	bl	8005422 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	200c      	movs	r0, #12
 8001bcc:	f003 fc0f 	bl	80053ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bd0:	200c      	movs	r0, #12
 8001bd2:	f003 fc26 	bl	8005422 <HAL_NVIC_EnableIRQ>

}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000

08001be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bfa:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <MX_GPIO_Init+0xbc>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfe:	4a28      	ldr	r2, [pc, #160]	@ (8001ca0 <MX_GPIO_Init+0xbc>)
 8001c00:	f043 0320 	orr.w	r3, r3, #32
 8001c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c06:	4b26      	ldr	r3, [pc, #152]	@ (8001ca0 <MX_GPIO_Init+0xbc>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	4b23      	ldr	r3, [pc, #140]	@ (8001ca0 <MX_GPIO_Init+0xbc>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	4a22      	ldr	r2, [pc, #136]	@ (8001ca0 <MX_GPIO_Init+0xbc>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ca0 <MX_GPIO_Init+0xbc>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <MX_GPIO_Init+0xbc>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca0 <MX_GPIO_Init+0xbc>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <MX_GPIO_Init+0xbc>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GD_DIS_GPIO_Port, GD_DIS_Pin, GPIO_PIN_RESET);
 8001c42:	2200      	movs	r2, #0
 8001c44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c4c:	f004 fb98 	bl	8006380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2180      	movs	r1, #128	@ 0x80
 8001c54:	4813      	ldr	r0, [pc, #76]	@ (8001ca4 <MX_GPIO_Init+0xc0>)
 8001c56:	f004 fb93 	bl	8006380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GD_DIS_Pin */
  GPIO_InitStruct.Pin = GD_DIS_Pin;
 8001c5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GD_DIS_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	4619      	mov	r1, r3
 8001c72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c76:	f004 fa01 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 8001c7a:	2380      	movs	r3, #128	@ 0x80
 8001c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4804      	ldr	r0, [pc, #16]	@ (8001ca4 <MX_GPIO_Init+0xc0>)
 8001c92:	f004 f9f3 	bl	800607c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c96:	bf00      	nop
 8001c98:	3720      	adds	r7, #32
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	48000400 	.word	0x48000400

08001ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cac:	b672      	cpsid	i
}
 8001cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <Error_Handler+0x8>
 8001cb4:	0000      	movs	r0, r0
	...

08001cb8 <QCW_Init>:
uint32_t fb_dr_upper;
uint32_t fb_av_upper;
uint32_t fb_dr_lower;
uint32_t fb_av_lower;

void QCW_Init() {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
	GD_DIS_GPIO_Port->BRR = GD_DIS_Pin; // disable GD
 8001cbe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cc6:	629a      	str	r2, [r3, #40]	@ 0x28
	TS_CAL1 = *((uint16_t *) 0x1FFF75A8); // get calibration data from memory
 8001cc8:	4b4d      	ldr	r3, [pc, #308]	@ (8001e00 <QCW_Init+0x148>)
 8001cca:	881a      	ldrh	r2, [r3, #0]
 8001ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8001e04 <QCW_Init+0x14c>)
 8001cce:	801a      	strh	r2, [r3, #0]
	TS_CAL2 = *((uint16_t *) 0x1FFF75CA);
 8001cd0:	4b4d      	ldr	r3, [pc, #308]	@ (8001e08 <QCW_Init+0x150>)
 8001cd2:	881a      	ldrh	r2, [r3, #0]
 8001cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8001e0c <QCW_Init+0x154>)
 8001cd6:	801a      	strh	r2, [r3, #0]
	VREFINT = *((uint16_t *) 0x1FFF75AA);
 8001cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8001e10 <QCW_Init+0x158>)
 8001cda:	881a      	ldrh	r2, [r3, #0]
 8001cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8001e14 <QCW_Init+0x15c>)
 8001cde:	801a      	strh	r2, [r3, #0]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001ce0:	217f      	movs	r1, #127	@ 0x7f
 8001ce2:	484d      	ldr	r0, [pc, #308]	@ (8001e18 <QCW_Init+0x160>)
 8001ce4:	f002 ff52 	bl	8004b8c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) aux_buf, 3);
 8001ce8:	2203      	movs	r2, #3
 8001cea:	494c      	ldr	r1, [pc, #304]	@ (8001e1c <QCW_Init+0x164>)
 8001cec:	484a      	ldr	r0, [pc, #296]	@ (8001e18 <QCW_Init+0x160>)
 8001cee:	f001 fea5 	bl	8003a3c <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001cf2:	217f      	movs	r1, #127	@ 0x7f
 8001cf4:	484a      	ldr	r0, [pc, #296]	@ (8001e20 <QCW_Init+0x168>)
 8001cf6:	f002 ff49 	bl	8004b8c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) vbus_buf, 2);
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	4949      	ldr	r1, [pc, #292]	@ (8001e24 <QCW_Init+0x16c>)
 8001cfe:	4848      	ldr	r0, [pc, #288]	@ (8001e20 <QCW_Init+0x168>)
 8001d00:	f001 fe9c 	bl	8003a3c <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start(&htim15); // ADC trigger comparator
 8001d04:	4848      	ldr	r0, [pc, #288]	@ (8001e28 <QCW_Init+0x170>)
 8001d06:	f005 fb7f 	bl	8007408 <HAL_TIM_Base_Start>

    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // OCD dac - Configured to be the - input of OCD comparator
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4847      	ldr	r0, [pc, #284]	@ (8001e2c <QCW_Init+0x174>)
 8001d0e:	f003 fbc5 	bl	800549c <HAL_DAC_Start>

    HAL_COMP_Start(&hcomp1); // OCD and ZCD comparators
 8001d12:	4847      	ldr	r0, [pc, #284]	@ (8001e30 <QCW_Init+0x178>)
 8001d14:	f003 fa0c 	bl	8005130 <HAL_COMP_Start>
    HAL_COMP_Start(&hcomp2);
 8001d18:	4846      	ldr	r0, [pc, #280]	@ (8001e34 <QCW_Init+0x17c>)
 8001d1a:	f003 fa09 	bl	8005130 <HAL_COMP_Start>

    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // input capture
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4845      	ldr	r0, [pc, #276]	@ (8001e38 <QCW_Init+0x180>)
 8001d22:	f006 f80b 	bl	8007d3c <HAL_TIM_IC_Start_IT>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // LED1 - Power
 8001d26:	2100      	movs	r1, #0
 8001d28:	4844      	ldr	r0, [pc, #272]	@ (8001e3c <QCW_Init+0x184>)
 8001d2a:	f005 fcc3 	bl	80076b4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // LED2 - Ready
 8001d2e:	2104      	movs	r1, #4
 8001d30:	4842      	ldr	r0, [pc, #264]	@ (8001e3c <QCW_Init+0x184>)
 8001d32:	f005 fcbf 	bl	80076b4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // LED3 - Pulse
 8001d36:	2100      	movs	r1, #0
 8001d38:	4841      	ldr	r0, [pc, #260]	@ (8001e40 <QCW_Init+0x188>)
 8001d3a:	f005 fcbb 	bl	80076b4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // LED4 - OCD
 8001d3e:	2104      	movs	r1, #4
 8001d40:	483f      	ldr	r0, [pc, #252]	@ (8001e40 <QCW_Init+0x188>)
 8001d42:	f005 fcb7 	bl	80076b4 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // FAN
 8001d46:	2108      	movs	r1, #8
 8001d48:	483c      	ldr	r0, [pc, #240]	@ (8001e3c <QCW_Init+0x184>)
 8001d4a:	f005 fcb3 	bl	80076b4 <HAL_TIM_PWM_Start>
    TIM4->CCR3 = TIM4->ARR / 10;
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e44 <QCW_Init+0x18c>)
 8001d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d52:	4a3c      	ldr	r2, [pc, #240]	@ (8001e44 <QCW_Init+0x18c>)
 8001d54:	493c      	ldr	r1, [pc, #240]	@ (8001e48 <QCW_Init+0x190>)
 8001d56:	fba1 1303 	umull	r1, r3, r1, r3
 8001d5a:	08db      	lsrs	r3, r3, #3
 8001d5c:	63d3      	str	r3, [r2, #60]	@ 0x3c

    HAL_TIM_Base_Start_IT(&htim7);
 8001d5e:	483b      	ldr	r0, [pc, #236]	@ (8001e4c <QCW_Init+0x194>)
 8001d60:	f005 fbdc 	bl	800751c <HAL_TIM_Base_Start_IT>

    HAL_HalfDuplex_EnableReceiver(&huart1);
 8001d64:	483a      	ldr	r0, [pc, #232]	@ (8001e50 <QCW_Init+0x198>)
 8001d66:	f008 f9bf 	bl	800a0e8 <HAL_HalfDuplex_EnableReceiver>
    HAL_UART_Receive_IT(&huart1, uart_buffer, UART_SIZE);
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	4939      	ldr	r1, [pc, #228]	@ (8001e54 <QCW_Init+0x19c>)
 8001d6e:	4838      	ldr	r0, [pc, #224]	@ (8001e50 <QCW_Init+0x198>)
 8001d70:	f007 fe0c 	bl	800998c <HAL_UART_Receive_IT>

    for (int i = 0; i < RAMP_STEPS; i++) {
 8001d74:	2300      	movs	r3, #0
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	e035      	b.n	8001de6 <QCW_Init+0x12e>
    	transfer_function[i] = 1.0f - (1.0f / M_PI) * acos(2.0f*(float) i / (float) RAMP_STEPS - 1.0f);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d84:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d88:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001e58 <QCW_Init+0x1a0>
 8001d8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d98:	ee17 0a90 	vmov	r0, s15
 8001d9c:	f7fe fba0 	bl	80004e0 <__aeabi_f2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	ec43 2b10 	vmov	d0, r2, r3
 8001da8:	f009 feb2 	bl	800bb10 <acos>
 8001dac:	ec51 0b10 	vmov	r0, r1, d0
 8001db0:	a311      	add	r3, pc, #68	@ (adr r3, 8001df8 <QCW_Init+0x140>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	f7fe fbeb 	bl	8000590 <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	f04f 0000 	mov.w	r0, #0
 8001dc2:	4926      	ldr	r1, [pc, #152]	@ (8001e5c <QCW_Init+0x1a4>)
 8001dc4:	f7fe fa2c 	bl	8000220 <__aeabi_dsub>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f7fe feae 	bl	8000b30 <__aeabi_d2f>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4922      	ldr	r1, [pc, #136]	@ (8001e60 <QCW_Init+0x1a8>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < RAMP_STEPS; i++) {
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3301      	adds	r3, #1
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2bc7      	cmp	r3, #199	@ 0xc7
 8001dea:	ddc6      	ble.n	8001d7a <QCW_Init+0xc2>
    	// voltage(percent) = 0.5 - 0.5cos(pi*phase(percent))
    	// phase(percent) = 1 - 1/pi arccos(2*voltage(percent) - 1)
    	// correct for phase shift to effective voltage nonlinearity
    }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	6dc9c883 	.word	0x6dc9c883
 8001dfc:	3fd45f30 	.word	0x3fd45f30
 8001e00:	1fff75a8 	.word	0x1fff75a8
 8001e04:	2000058c 	.word	0x2000058c
 8001e08:	1fff75ca 	.word	0x1fff75ca
 8001e0c:	2000058e 	.word	0x2000058e
 8001e10:	1fff75aa 	.word	0x1fff75aa
 8001e14:	20000590 	.word	0x20000590
 8001e18:	2000008c 	.word	0x2000008c
 8001e1c:	20000578 	.word	0x20000578
 8001e20:	200000f8 	.word	0x200000f8
 8001e24:	20000574 	.word	0x20000574
 8001e28:	20000494 	.word	0x20000494
 8001e2c:	2000026c 	.word	0x2000026c
 8001e30:	20000224 	.word	0x20000224
 8001e34:	20000248 	.word	0x20000248
 8001e38:	200002cc 	.word	0x200002cc
 8001e3c:	20000364 	.word	0x20000364
 8001e40:	20000318 	.word	0x20000318
 8001e44:	40000800 	.word	0x40000800
 8001e48:	cccccccd 	.word	0xcccccccd
 8001e4c:	200003fc 	.word	0x200003fc
 8001e50:	200004e0 	.word	0x200004e0
 8001e54:	20000580 	.word	0x20000580
 8001e58:	43480000 	.word	0x43480000
 8001e5c:	3ff00000 	.word	0x3ff00000
 8001e60:	200005a4 	.word	0x200005a4

08001e64 <QCW_Loop>:

float vbus_last = 0;
uint8_t rdy = 0;
void QCW_Loop() { // 10Hz
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
	if (rdy && (temp_ext < MAX_TEMP) && (vdrive > VDRIVE_TH) && (VREF > 3.0f)) {
 8001e6a:	4b57      	ldr	r3, [pc, #348]	@ (8001fc8 <QCW_Loop+0x164>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d028      	beq.n	8001ec4 <QCW_Loop+0x60>
 8001e72:	4b56      	ldr	r3, [pc, #344]	@ (8001fcc <QCW_Loop+0x168>)
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001fd0 <QCW_Loop+0x16c>
 8001e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e84:	d51e      	bpl.n	8001ec4 <QCW_Loop+0x60>
 8001e86:	4b53      	ldr	r3, [pc, #332]	@ (8001fd4 <QCW_Loop+0x170>)
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e98:	dd14      	ble.n	8001ec4 <QCW_Loop+0x60>
 8001e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd8 <QCW_Loop+0x174>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eac:	dd0a      	ble.n	8001ec4 <QCW_Loop+0x60>
		TIM4->CCR2 = TIM4->ARR / 4; // Set ready light
 8001eae:	4b4b      	ldr	r3, [pc, #300]	@ (8001fdc <QCW_Loop+0x178>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	4a4a      	ldr	r2, [pc, #296]	@ (8001fdc <QCW_Loop+0x178>)
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	6393      	str	r3, [r2, #56]	@ 0x38
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	2180      	movs	r1, #128	@ 0x80
 8001ebc:	4848      	ldr	r0, [pc, #288]	@ (8001fe0 <QCW_Loop+0x17c>)
 8001ebe:	f004 fa5f 	bl	8006380 <HAL_GPIO_WritePin>
 8001ec2:	e007      	b.n	8001ed4 <QCW_Loop+0x70>
	} else {
		TIM4->CCR2 = 0; // Clear ready light
 8001ec4:	4b45      	ldr	r3, [pc, #276]	@ (8001fdc <QCW_Loop+0x178>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	4844      	ldr	r0, [pc, #272]	@ (8001fe0 <QCW_Loop+0x17c>)
 8001ed0:	f004 fa56 	bl	8006380 <HAL_GPIO_WritePin>
	}

	if (vdrive >= VDRIVE_TH) {
 8001ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8001fd4 <QCW_Loop+0x170>)
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	db04      	blt.n	8001ef2 <QCW_Loop+0x8e>
		TIM4->CCR1 = TIM4->ARR; // Set power light
 8001ee8:	4b3c      	ldr	r3, [pc, #240]	@ (8001fdc <QCW_Loop+0x178>)
 8001eea:	4a3c      	ldr	r2, [pc, #240]	@ (8001fdc <QCW_Loop+0x178>)
 8001eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eee:	6353      	str	r3, [r2, #52]	@ 0x34
 8001ef0:	e004      	b.n	8001efc <QCW_Loop+0x98>
	} else {
		TIM4->CCR1 = TIM4->ARR / 4;
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8001fdc <QCW_Loop+0x178>)
 8001ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef6:	4a39      	ldr	r2, [pc, #228]	@ (8001fdc <QCW_Loop+0x178>)
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	6353      	str	r3, [r2, #52]	@ 0x34
	}

	float difference = vbus - vbus_last;
 8001efc:	4b39      	ldr	r3, [pc, #228]	@ (8001fe4 <QCW_Loop+0x180>)
 8001efe:	ed93 7a00 	vldr	s14, [r3]
 8001f02:	4b39      	ldr	r3, [pc, #228]	@ (8001fe8 <QCW_Loop+0x184>)
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f0c:	edc7 7a00 	vstr	s15, [r7]
	if (difference < CHARGE_THRESHOLD && vbus > 50) rdy = 1;
 8001f10:	edd7 7a00 	vldr	s15, [r7]
 8001f14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f20:	d50c      	bpl.n	8001f3c <QCW_Loop+0xd8>
 8001f22:	4b30      	ldr	r3, [pc, #192]	@ (8001fe4 <QCW_Loop+0x180>)
 8001f24:	edd3 7a00 	vldr	s15, [r3]
 8001f28:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001fec <QCW_Loop+0x188>
 8001f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	dd02      	ble.n	8001f3c <QCW_Loop+0xd8>
 8001f36:	4b24      	ldr	r3, [pc, #144]	@ (8001fc8 <QCW_Loop+0x164>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
	vbus_last = vbus; // precharge
 8001f3c:	4b29      	ldr	r3, [pc, #164]	@ (8001fe4 <QCW_Loop+0x180>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a29      	ldr	r2, [pc, #164]	@ (8001fe8 <QCW_Loop+0x184>)
 8001f42:	6013      	str	r3, [r2, #0]

	if (vdrive > VDRIVE_TH) {
 8001f44:	4b23      	ldr	r3, [pc, #140]	@ (8001fd4 <QCW_Loop+0x170>)
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001f4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f56:	dc00      	bgt.n	8001f5a <QCW_Loop+0xf6>
		if (fan > 1) fan = 1;

		TIM4->CCR3 = (int) (fan * (float) TIM4->ARR); // fan
	}

}
 8001f58:	e032      	b.n	8001fc0 <QCW_Loop+0x15c>
		float fan = (temp_ext - (float) FAN_START) / ((float) FAN_END - (float) FAN_START);
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <QCW_Loop+0x168>)
 8001f5c:	edd3 7a00 	vldr	s15, [r3]
 8001f60:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001f64:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f68:	eef2 6a0e 	vmov.f32	s13, #46	@ 0x41700000  15.0
 8001f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f70:	edc7 7a01 	vstr	s15, [r7, #4]
		if (fan < 0) fan = 0;
 8001f74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	d502      	bpl.n	8001f88 <QCW_Loop+0x124>
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	607b      	str	r3, [r7, #4]
		if (fan > 1) fan = 1;
 8001f88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f98:	dd02      	ble.n	8001fa0 <QCW_Loop+0x13c>
 8001f9a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f9e:	607b      	str	r3, [r7, #4]
		TIM4->CCR3 = (int) (fan * (float) TIM4->ARR); // fan
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <QCW_Loop+0x178>)
 8001fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa4:	ee07 3a90 	vmov	s15, r3
 8001fa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fac:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb8:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <QCW_Loop+0x178>)
 8001fba:	ee17 2a90 	vmov	r2, s15
 8001fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200008c8 	.word	0x200008c8
 8001fcc:	20000598 	.word	0x20000598
 8001fd0:	42700000 	.word	0x42700000
 8001fd4:	200005a0 	.word	0x200005a0
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	40000800 	.word	0x40000800
 8001fe0:	48000400 	.word	0x48000400
 8001fe4:	2000059c 	.word	0x2000059c
 8001fe8:	200008c4 	.word	0x200008c4
 8001fec:	42480000 	.word	0x42480000

08001ff0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a5c      	ldr	r2, [pc, #368]	@ (800216c <HAL_ADC_ConvCpltCallback+0x17c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d17e      	bne.n	80020fe <HAL_ADC_ConvCpltCallback+0x10e>
		if (aux_buf[2] != 0) {
 8002000:	4b5b      	ldr	r3, [pc, #364]	@ (8002170 <HAL_ADC_ConvCpltCallback+0x180>)
 8002002:	889b      	ldrh	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d033      	beq.n	8002070 <HAL_ADC_ConvCpltCallback+0x80>
			float vref_new = 3.0f * (float) VREFINT / (float) aux_buf[2];
 8002008:	4b5a      	ldr	r3, [pc, #360]	@ (8002174 <HAL_ADC_ConvCpltCallback+0x184>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	ee07 3a90 	vmov	s15, r3
 8002010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002014:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002018:	ee67 6a87 	vmul.f32	s13, s15, s14
 800201c:	4b54      	ldr	r3, [pc, #336]	@ (8002170 <HAL_ADC_ConvCpltCallback+0x180>)
 800201e:	889b      	ldrh	r3, [r3, #4]
 8002020:	ee07 3a90 	vmov	s15, r3
 8002024:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800202c:	edc7 7a03 	vstr	s15, [r7, #12]
			if (vref_new < 5.0f && vref_new > 1.5f) {
 8002030:	edd7 7a03 	vldr	s15, [r7, #12]
 8002034:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800203c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002040:	d516      	bpl.n	8002070 <HAL_ADC_ConvCpltCallback+0x80>
 8002042:	edd7 7a03 	vldr	s15, [r7, #12]
 8002046:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800204a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002052:	dd0d      	ble.n	8002070 <HAL_ADC_ConvCpltCallback+0x80>
				VREF = (VREF + vref_new) / 2.0f; // stm's have an internal bandgap reference! so you can figure out exactly what vdda is!
 8002054:	4b48      	ldr	r3, [pc, #288]	@ (8002178 <HAL_ADC_ConvCpltCallback+0x188>)
 8002056:	ed93 7a00 	vldr	s14, [r3]
 800205a:	edd7 7a03 	vldr	s15, [r7, #12]
 800205e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002062:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800206a:	4b43      	ldr	r3, [pc, #268]	@ (8002178 <HAL_ADC_ConvCpltCallback+0x188>)
 800206c:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		temp_int = (100.0f)/((float) TS_CAL2 - (float) TS_CAL1) * ((float) aux_buf[1] - (float) TS_CAL1) + 30.0f;
 8002070:	4b42      	ldr	r3, [pc, #264]	@ (800217c <HAL_ADC_ConvCpltCallback+0x18c>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800207c:	4b40      	ldr	r3, [pc, #256]	@ (8002180 <HAL_ADC_ConvCpltCallback+0x190>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800208c:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002184 <HAL_ADC_ConvCpltCallback+0x194>
 8002090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002094:	4b36      	ldr	r3, [pc, #216]	@ (8002170 <HAL_ADC_ConvCpltCallback+0x180>)
 8002096:	885b      	ldrh	r3, [r3, #2]
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020a0:	4b37      	ldr	r3, [pc, #220]	@ (8002180 <HAL_ADC_ConvCpltCallback+0x190>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	ee07 3a90 	vmov	s15, r3
 80020a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80020b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80020b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020bc:	4b32      	ldr	r3, [pc, #200]	@ (8002188 <HAL_ADC_ConvCpltCallback+0x198>)
 80020be:	edc3 7a00 	vstr	s15, [r3]
		float volts_therm = (float) aux_buf[0] * VREF / 4095.0f;
 80020c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <HAL_ADC_ConvCpltCallback+0x180>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002178 <HAL_ADC_ConvCpltCallback+0x188>)
 80020d0:	edd3 7a00 	vldr	s15, [r3]
 80020d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d8:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800218c <HAL_ADC_ConvCpltCallback+0x19c>
 80020dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e0:	edc7 7a02 	vstr	s15, [r7, #8]
		temp_ext = (volts_therm - 0.5f) * 100.0f;
 80020e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80020e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80020ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020f0:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002184 <HAL_ADC_ConvCpltCallback+0x194>
 80020f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f8:	4b25      	ldr	r3, [pc, #148]	@ (8002190 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80020fa:	edc3 7a00 	vstr	s15, [r3]
	}
	if (hadc == &hadc2) {
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a24      	ldr	r2, [pc, #144]	@ (8002194 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d12b      	bne.n	800215e <HAL_ADC_ConvCpltCallback+0x16e>
		vbus = (float) vbus_buf[0] * VREF / 4095.0f * 201.0f; // read bus voltage to correct for sag
 8002106:	4b24      	ldr	r3, [pc, #144]	@ (8002198 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002112:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <HAL_ADC_ConvCpltCallback+0x188>)
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800211c:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800218c <HAL_ADC_ConvCpltCallback+0x19c>
 8002120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002124:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800219c <HAL_ADC_ConvCpltCallback+0x1ac>
 8002128:	ee67 7a87 	vmul.f32	s15, s15, s14
 800212c:	4b1c      	ldr	r3, [pc, #112]	@ (80021a0 <HAL_ADC_ConvCpltCallback+0x1b0>)
 800212e:	edc3 7a00 	vstr	s15, [r3]
		vdrive = (float) vbus_buf[1] * VREF / 4095.0f * 8.5f; // read control voltage
 8002132:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8002134:	885b      	ldrh	r3, [r3, #2]
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800213e:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <HAL_ADC_ConvCpltCallback+0x188>)
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002148:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800218c <HAL_ADC_ConvCpltCallback+0x19c>
 800214c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002150:	eeb2 7a01 	vmov.f32	s14, #33	@ 0x41080000  8.5
 8002154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002158:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <HAL_ADC_ConvCpltCallback+0x1b4>)
 800215a:	edc3 7a00 	vstr	s15, [r3]
	}

}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	2000008c 	.word	0x2000008c
 8002170:	20000578 	.word	0x20000578
 8002174:	20000590 	.word	0x20000590
 8002178:	20000000 	.word	0x20000000
 800217c:	2000058e 	.word	0x2000058e
 8002180:	2000058c 	.word	0x2000058c
 8002184:	42c80000 	.word	0x42c80000
 8002188:	20000594 	.word	0x20000594
 800218c:	457ff000 	.word	0x457ff000
 8002190:	20000598 	.word	0x20000598
 8002194:	200000f8 	.word	0x200000f8
 8002198:	20000574 	.word	0x20000574
 800219c:	43490000 	.word	0x43490000
 80021a0:	2000059c 	.word	0x2000059c
 80021a4:	200005a0 	.word	0x200005a0

080021a8 <StartPulse>:
uint16_t ramp_cnt = 0;
float end_v = 0;
int ccr3 = 0;

// length in ms
void StartPulse(float length, float end_v1, float OCD) {
 80021a8:	b5b0      	push	{r4, r5, r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80021b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80021b6:	ed87 1a01 	vstr	s2, [r7, #4]
	if (vbus > 0 && rdy && (temp_ext < MAX_TEMP) && (vdrive > VDRIVE_TH)) {
 80021ba:	4b6b      	ldr	r3, [pc, #428]	@ (8002368 <StartPulse+0x1c0>)
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c8:	dc00      	bgt.n	80021cc <StartPulse+0x24>
		HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);

		GD_DIS_GPIO_Port->BSRR = GD_DIS_Pin; // enable

	}
}
 80021ca:	e0c0      	b.n	800234e <StartPulse+0x1a6>
	if (vbus > 0 && rdy && (temp_ext < MAX_TEMP) && (vdrive > VDRIVE_TH)) {
 80021cc:	4b67      	ldr	r3, [pc, #412]	@ (800236c <StartPulse+0x1c4>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80bc 	beq.w	800234e <StartPulse+0x1a6>
 80021d6:	4b66      	ldr	r3, [pc, #408]	@ (8002370 <StartPulse+0x1c8>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8002374 <StartPulse+0x1cc>
 80021e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	d400      	bmi.n	80021ec <StartPulse+0x44>
}
 80021ea:	e0b0      	b.n	800234e <StartPulse+0x1a6>
	if (vbus > 0 && rdy && (temp_ext < MAX_TEMP) && (vdrive > VDRIVE_TH)) {
 80021ec:	4b62      	ldr	r3, [pc, #392]	@ (8002378 <StartPulse+0x1d0>)
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80021f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fe:	dc00      	bgt.n	8002202 <StartPulse+0x5a>
}
 8002200:	e0a5      	b.n	800234e <StartPulse+0x1a6>
		uint32_t counts = (uint32_t) (4095.0 / VREF * OCD / 200.0f * 2.0f); // 200:1 CT, 2R burden
 8002202:	4b5e      	ldr	r3, [pc, #376]	@ (800237c <StartPulse+0x1d4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe f96a 	bl	80004e0 <__aeabi_f2d>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	a151      	add	r1, pc, #324	@ (adr r1, 8002358 <StartPulse+0x1b0>)
 8002212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002216:	f7fe fae5 	bl	80007e4 <__aeabi_ddiv>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4614      	mov	r4, r2
 8002220:	461d      	mov	r5, r3
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe f95c 	bl	80004e0 <__aeabi_f2d>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4620      	mov	r0, r4
 800222e:	4629      	mov	r1, r5
 8002230:	f7fe f9ae 	bl	8000590 <__aeabi_dmul>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	4b4f      	ldr	r3, [pc, #316]	@ (8002380 <StartPulse+0x1d8>)
 8002242:	f7fe facf 	bl	80007e4 <__aeabi_ddiv>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	f7fd ffe7 	bl	8000224 <__adddf3>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f7fe fc47 	bl	8000af0 <__aeabi_d2uiz>
 8002262:	4603      	mov	r3, r0
 8002264:	617b      	str	r3, [r7, #20]
	    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, counts);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2200      	movs	r2, #0
 800226a:	2100      	movs	r1, #0
 800226c:	4845      	ldr	r0, [pc, #276]	@ (8002384 <StartPulse+0x1dc>)
 800226e:	f003 f9d7 	bl	8005620 <HAL_DAC_SetValue>
		TIM3->CCR1 = TIM3->ARR; // Start pulse led
 8002272:	4b45      	ldr	r3, [pc, #276]	@ (8002388 <StartPulse+0x1e0>)
 8002274:	4a44      	ldr	r2, [pc, #272]	@ (8002388 <StartPulse+0x1e0>)
 8002276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002278:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM3->CCR2 = 0; // Clear OCD led
 800227a:	4b43      	ldr	r3, [pc, #268]	@ (8002388 <StartPulse+0x1e0>)
 800227c:	2200      	movs	r2, #0
 800227e:	639a      	str	r2, [r3, #56]	@ 0x38
		ocd = 0;
 8002280:	4b42      	ldr	r3, [pc, #264]	@ (800238c <StartPulse+0x1e4>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
		ramp_cnt = 0;
 8002286:	4b42      	ldr	r3, [pc, #264]	@ (8002390 <StartPulse+0x1e8>)
 8002288:	2200      	movs	r2, #0
 800228a:	801a      	strh	r2, [r3, #0]
		TIM1->ARR = (((int) (170000000.0 / START_FREQ)) >> 1) - 1;
 800228c:	4b41      	ldr	r3, [pc, #260]	@ (8002394 <StartPulse+0x1ec>)
 800228e:	22f1      	movs	r2, #241	@ 0xf1
 8002290:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CNT = 0;
 8002292:	4b40      	ldr	r3, [pc, #256]	@ (8002394 <StartPulse+0x1ec>)
 8002294:	2200      	movs	r2, #0
 8002296:	625a      	str	r2, [r3, #36]	@ 0x24
		start_counter = 0;
 8002298:	4b3f      	ldr	r3, [pc, #252]	@ (8002398 <StartPulse+0x1f0>)
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
		end_v = end_v1;
 800229e:	4a3f      	ldr	r2, [pc, #252]	@ (800239c <StartPulse+0x1f4>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	6013      	str	r3, [r2, #0]
		TIM1->CCR1 = TIM1->ARR - PHASE_LEAD;
 80022a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002394 <StartPulse+0x1ec>)
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002394 <StartPulse+0x1ec>)
 80022aa:	3b0a      	subs	r3, #10
 80022ac:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM1->CCR2 = PHASE_LEAD;
 80022ae:	4b39      	ldr	r3, [pc, #228]	@ (8002394 <StartPulse+0x1ec>)
 80022b0:	220a      	movs	r2, #10
 80022b2:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = MIN_PHASE;
 80022b4:	4b37      	ldr	r3, [pc, #220]	@ (8002394 <StartPulse+0x1ec>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = TIM1->ARR - MIN_PHASE;
 80022ba:	4b36      	ldr	r3, [pc, #216]	@ (8002394 <StartPulse+0x1ec>)
 80022bc:	4a35      	ldr	r2, [pc, #212]	@ (8002394 <StartPulse+0x1ec>)
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM6->ARR = (uint32_t) (170000.0 * length / (float) RAMP_STEPS) - 1; // ramp adjust timer
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f7fe f90c 	bl	80004e0 <__aeabi_f2d>
 80022c8:	a325      	add	r3, pc, #148	@ (adr r3, 8002360 <StartPulse+0x1b8>)
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	f7fe f95f 	bl	8000590 <__aeabi_dmul>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	4b28      	ldr	r3, [pc, #160]	@ (8002380 <StartPulse+0x1d8>)
 80022e0:	f7fe fa80 	bl	80007e4 <__aeabi_ddiv>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7fe fc00 	bl	8000af0 <__aeabi_d2uiz>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4a2b      	ldr	r2, [pc, #172]	@ (80023a0 <StartPulse+0x1f8>)
 80022f4:	3b01      	subs	r3, #1
 80022f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
		TIM6->CNT = 0;
 80022f8:	4b29      	ldr	r3, [pc, #164]	@ (80023a0 <StartPulse+0x1f8>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM8->ARR = TIM1->ARR;
 80022fe:	4b25      	ldr	r3, [pc, #148]	@ (8002394 <StartPulse+0x1ec>)
 8002300:	4a28      	ldr	r2, [pc, #160]	@ (80023a4 <StartPulse+0x1fc>)
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	62d3      	str	r3, [r2, #44]	@ 0x2c
		TIM8->CNT = 0;
 8002306:	4b27      	ldr	r3, [pc, #156]	@ (80023a4 <StartPulse+0x1fc>)
 8002308:	2200      	movs	r2, #0
 800230a:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM8->CCR1 = TIM8->ARR - PHASE_LEAD;
 800230c:	4b25      	ldr	r3, [pc, #148]	@ (80023a4 <StartPulse+0x1fc>)
 800230e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002310:	4a24      	ldr	r2, [pc, #144]	@ (80023a4 <StartPulse+0x1fc>)
 8002312:	3b0a      	subs	r3, #10
 8002314:	6353      	str	r3, [r2, #52]	@ 0x34
		HAL_TIM_Base_Start_IT(&htim6);
 8002316:	4824      	ldr	r0, [pc, #144]	@ (80023a8 <StartPulse+0x200>)
 8002318:	f005 f900 	bl	800751c <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800231c:	2100      	movs	r1, #0
 800231e:	4823      	ldr	r0, [pc, #140]	@ (80023ac <StartPulse+0x204>)
 8002320:	f005 f9c8 	bl	80076b4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002324:	2104      	movs	r1, #4
 8002326:	4821      	ldr	r0, [pc, #132]	@ (80023ac <StartPulse+0x204>)
 8002328:	f005 f9c4 	bl	80076b4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800232c:	2108      	movs	r1, #8
 800232e:	481f      	ldr	r0, [pc, #124]	@ (80023ac <StartPulse+0x204>)
 8002330:	f005 f9c0 	bl	80076b4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002334:	210c      	movs	r1, #12
 8002336:	481d      	ldr	r0, [pc, #116]	@ (80023ac <StartPulse+0x204>)
 8002338:	f005 f9bc 	bl	80076b4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 800233c:	2100      	movs	r1, #0
 800233e:	481c      	ldr	r0, [pc, #112]	@ (80023b0 <StartPulse+0x208>)
 8002340:	f005 fb4e 	bl	80079e0 <HAL_TIM_PWM_Start_IT>
		GD_DIS_GPIO_Port->BSRR = GD_DIS_Pin; // enable
 8002344:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800234c:	619a      	str	r2, [r3, #24]
}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bdb0      	pop	{r4, r5, r7, pc}
 8002356:	bf00      	nop
 8002358:	00000000 	.word	0x00000000
 800235c:	40affe00 	.word	0x40affe00
 8002360:	00000000 	.word	0x00000000
 8002364:	4104c080 	.word	0x4104c080
 8002368:	2000059c 	.word	0x2000059c
 800236c:	200008c8 	.word	0x200008c8
 8002370:	20000598 	.word	0x20000598
 8002374:	42700000 	.word	0x42700000
 8002378:	200005a0 	.word	0x200005a0
 800237c:	20000000 	.word	0x20000000
 8002380:	40690000 	.word	0x40690000
 8002384:	2000026c 	.word	0x2000026c
 8002388:	40000400 	.word	0x40000400
 800238c:	200008ca 	.word	0x200008ca
 8002390:	200008cc 	.word	0x200008cc
 8002394:	40012c00 	.word	0x40012c00
 8002398:	200008c9 	.word	0x200008c9
 800239c:	200008d0 	.word	0x200008d0
 80023a0:	40001000 	.word	0x40001000
 80023a4:	40013400 	.word	0x40013400
 80023a8:	200003b0 	.word	0x200003b0
 80023ac:	20000280 	.word	0x20000280
 80023b0:	20000448 	.word	0x20000448

080023b4 <EndPulse>:

void EndPulse() {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
    GD_DIS_GPIO_Port->BRR = GD_DIS_Pin; // disable
 80023b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80023bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023c0:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80023c2:	2100      	movs	r1, #0
 80023c4:	480d      	ldr	r0, [pc, #52]	@ (80023fc <EndPulse+0x48>)
 80023c6:	f005 fa75 	bl	80078b4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80023ca:	2104      	movs	r1, #4
 80023cc:	480b      	ldr	r0, [pc, #44]	@ (80023fc <EndPulse+0x48>)
 80023ce:	f005 fa71 	bl	80078b4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80023d2:	2108      	movs	r1, #8
 80023d4:	4809      	ldr	r0, [pc, #36]	@ (80023fc <EndPulse+0x48>)
 80023d6:	f005 fa6d 	bl	80078b4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 80023da:	210c      	movs	r1, #12
 80023dc:	4807      	ldr	r0, [pc, #28]	@ (80023fc <EndPulse+0x48>)
 80023de:	f005 fa69 	bl	80078b4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80023e2:	2100      	movs	r1, #0
 80023e4:	4806      	ldr	r0, [pc, #24]	@ (8002400 <EndPulse+0x4c>)
 80023e6:	f005 fa65 	bl	80078b4 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop(&htim6);
 80023ea:	4806      	ldr	r0, [pc, #24]	@ (8002404 <EndPulse+0x50>)
 80023ec:	f005 f86e 	bl	80074cc <HAL_TIM_Base_Stop>

    TIM3->CCR1 = 0; // Clear pulse led
 80023f0:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <EndPulse+0x54>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000280 	.word	0x20000280
 8002400:	20000448 	.word	0x20000448
 8002404:	200003b0 	.word	0x200003b0
 8002408:	40000400 	.word	0x40000400

0800240c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a06      	ldr	r2, [pc, #24]	@ (8002430 <HAL_TIM_IC_CaptureCallback+0x24>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d103      	bne.n	8002424 <HAL_TIM_IC_CaptureCallback+0x18>

		    // this uses tim2 to capture the period of the zcd signal that comes from the zcd comparator
		    // unless doing phase shift modulation this is the only code you *need*, to sync the output timer's period
		    // w/ the incoming period
		}
	    TIM2->CNT = 0;
 800241c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002420:	2200      	movs	r2, #0
 8002422:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	200002cc 	.word	0x200002cc

08002434 <HAL_COMP_TriggerCallback>:

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	if (hcomp == &hcomp1) {
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a06      	ldr	r2, [pc, #24]	@ (8002458 <HAL_COMP_TriggerCallback+0x24>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d102      	bne.n	800244a <HAL_COMP_TriggerCallback+0x16>
		ocd = 1; // detected OCD event
 8002444:	4b05      	ldr	r3, [pc, #20]	@ (800245c <HAL_COMP_TriggerCallback+0x28>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
	}
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000224 	.word	0x20000224
 800245c:	200008ca 	.word	0x200008ca

08002460 <HAL_TIM_PWM_PulseFinishedCallback>:

uint8_t hardsw_side = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	if (htim == &htim8) {
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a26      	ldr	r2, [pc, #152]	@ (8002504 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d145      	bne.n	80024fc <HAL_TIM_PWM_PulseFinishedCallback+0x9c>

		if (ocd) { // if ocd, turn off on timer reset
 8002470:	4b25      	ldr	r3, [pc, #148]	@ (8002508 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
			EndPulse();
 8002478:	f7ff ff9c 	bl	80023b4 <EndPulse>
		    TIM3->CCR2 = TIM3->ARR; // Set OCD Led
 800247c:	4b23      	ldr	r3, [pc, #140]	@ (800250c <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 800247e:	4a23      	ldr	r2, [pc, #140]	@ (800250c <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8002480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002482:	6393      	str	r3, [r2, #56]	@ 0x38
		}

		if (start_counter < START_CYCLES) {
 8002484:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b18      	cmp	r3, #24
 800248a:	d805      	bhi.n	8002498 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
			start_counter++;
 800248c:	4b20      	ldr	r3, [pc, #128]	@ (8002510 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	3301      	adds	r3, #1
 8002492:	b2da      	uxtb	r2, r3
 8002494:	4b1e      	ldr	r3, [pc, #120]	@ (8002510 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 8002496:	701a      	strb	r2, [r3, #0]
		} // TODO: make a wick ??

		//hardsw_side = !hardsw_side; // alternate hardswitch side

		if (hardsw_side) {
 8002498:	4b1e      	ldr	r3, [pc, #120]	@ (8002514 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d014      	beq.n	80024ca <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
			TIM1->CCR1 = TIM1->ARR - PHASE_LEAD;
 80024a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 80024a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 80024a6:	3b0a      	subs	r3, #10
 80024a8:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM1->CCR2 = PHASE_LEAD;
 80024aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 80024ac:	220a      	movs	r2, #10
 80024ae:	639a      	str	r2, [r3, #56]	@ 0x38

			TIM1->CCR3 = ccr3;
 80024b0:	4b1a      	ldr	r3, [pc, #104]	@ (800251c <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b18      	ldr	r3, [pc, #96]	@ (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 80024b6:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM1->CCR4 = TIM1->ARR - ccr3;
 80024b8:	4b17      	ldr	r3, [pc, #92]	@ (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 80024ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024bc:	4a17      	ldr	r2, [pc, #92]	@ (800251c <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	4611      	mov	r1, r2
 80024c2:	4a15      	ldr	r2, [pc, #84]	@ (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 80024c4:	1a5b      	subs	r3, r3, r1
 80024c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80024c8:	e013      	b.n	80024f2 <HAL_TIM_PWM_PulseFinishedCallback+0x92>

		} else {
			TIM1->CCR1 = ccr3;
 80024ca:	4b14      	ldr	r3, [pc, #80]	@ (800251c <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4b12      	ldr	r3, [pc, #72]	@ (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 80024d0:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = TIM1->ARR - ccr3;
 80024d2:	4b11      	ldr	r3, [pc, #68]	@ (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 80024d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d6:	4a11      	ldr	r2, [pc, #68]	@ (800251c <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	4611      	mov	r1, r2
 80024dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 80024de:	1a5b      	subs	r3, r3, r1
 80024e0:	6393      	str	r3, [r2, #56]	@ 0x38

			TIM1->CCR3 = TIM1->ARR - PHASE_LEAD;
 80024e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 80024e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 80024e8:	3b0a      	subs	r3, #10
 80024ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM1->CCR4 = PHASE_LEAD;
 80024ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 80024ee:	220a      	movs	r2, #10
 80024f0:	641a      	str	r2, [r3, #64]	@ 0x40

		}
		TIM8->CCR1 = TIM8->ARR - PHASE_LEAD;
 80024f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <HAL_TIM_PWM_PulseFinishedCallback+0xc0>)
 80024f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002520 <HAL_TIM_PWM_PulseFinishedCallback+0xc0>)
 80024f8:	3b0a      	subs	r3, #10
 80024fa:	6353      	str	r3, [r2, #52]	@ 0x34
	}
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000448 	.word	0x20000448
 8002508:	200008ca 	.word	0x200008ca
 800250c:	40000400 	.word	0x40000400
 8002510:	200008c9 	.word	0x200008c9
 8002514:	200008d8 	.word	0x200008d8
 8002518:	40012c00 	.word	0x40012c00
 800251c:	200008d4 	.word	0x200008d4
 8002520:	40013400 	.word	0x40013400

08002524 <HAL_TIM_PeriodElapsedCallback>:
// Asymmetric pwm: up down counting; for output channel 1 ccr1 controls compare value for up counting,
// ccr2 for down counting. for output channel 3, ccr3 for up and ccr4 for down. ccr2-ccr1 = ccr4-ccr3 = arr for 50% dtc
// but shift ccr1 relative to ccr3 for phase shift modulation, 100% power when ccr1=ccr3
// if the channel not being shifted is offset a little from the end i.e. ccr1 = arr - pl, ccr2 = pl this gives pl as phase lead
// bc the comparator is configured to reset the counter of the main timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) { // increment ramp
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a32      	ldr	r2, [pc, #200]	@ (80025f8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d157      	bne.n	80025e4 <HAL_TIM_PeriodElapsedCallback+0xc0>
		ramp_cnt++;
 8002534:	4b31      	ldr	r3, [pc, #196]	@ (80025fc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	3301      	adds	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	4b2f      	ldr	r3, [pc, #188]	@ (80025fc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800253e:	801a      	strh	r2, [r3, #0]

		if (ramp_cnt >= RAMP_STEPS) {
 8002540:	4b2e      	ldr	r3, [pc, #184]	@ (80025fc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	2bc7      	cmp	r3, #199	@ 0xc7
 8002546:	d902      	bls.n	800254e <HAL_TIM_PeriodElapsedCallback+0x2a>
			EndPulse();
 8002548:	f7ff ff34 	bl	80023b4 <EndPulse>
 800254c:	e04a      	b.n	80025e4 <HAL_TIM_PeriodElapsedCallback+0xc0>
		} else if (vbus > 0) {
 800254e:	4b2c      	ldr	r3, [pc, #176]	@ (8002600 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255c:	dd42      	ble.n	80025e4 <HAL_TIM_PeriodElapsedCallback+0xc0>
			uint16_t tf_index = (uint16_t) ((float) ramp_cnt * end_v / vbus);
 800255e:	4b27      	ldr	r3, [pc, #156]	@ (80025fc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	ee07 3a90 	vmov	s15, r3
 8002566:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800256a:	4b26      	ldr	r3, [pc, #152]	@ (8002604 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002574:	4b22      	ldr	r3, [pc, #136]	@ (8002600 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002576:	ed93 7a00 	vldr	s14, [r3]
 800257a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800257e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002582:	ee17 3a90 	vmov	r3, s15
 8002586:	81fb      	strh	r3, [r7, #14]
			if (tf_index >= RAMP_STEPS) tf_index = RAMP_STEPS - 1;
 8002588:	89fb      	ldrh	r3, [r7, #14]
 800258a:	2bc7      	cmp	r3, #199	@ 0xc7
 800258c:	d901      	bls.n	8002592 <HAL_TIM_PeriodElapsedCallback+0x6e>
 800258e:	23c7      	movs	r3, #199	@ 0xc7
 8002590:	81fb      	strh	r3, [r7, #14]
			float phase_percent = transfer_function[tf_index];
 8002592:	89fb      	ldrh	r3, [r7, #14]
 8002594:	4a1c      	ldr	r2, [pc, #112]	@ (8002608 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60bb      	str	r3, [r7, #8]
			ccr3 = (int) ((float) TIM1->ARR * phase_percent) - PHASE_LEAD;
 800259e:	4b1b      	ldr	r3, [pc, #108]	@ (800260c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	ee07 3a90 	vmov	s15, r3
 80025a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025b6:	ee17 3a90 	vmov	r3, s15
 80025ba:	3b0a      	subs	r3, #10
 80025bc:	4a14      	ldr	r2, [pc, #80]	@ (8002610 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80025be:	6013      	str	r3, [r2, #0]
			if (ccr3 < MIN_PHASE) ccr3 = MIN_PHASE;
 80025c0:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	da02      	bge.n	80025ce <HAL_TIM_PeriodElapsedCallback+0xaa>
 80025c8:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
			if (ccr3 > TIM1->ARR) ccr3 = TIM1->ARR;
 80025ce:	4b0f      	ldr	r3, [pc, #60]	@ (800260c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80025d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002610 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d204      	bcs.n	80025e4 <HAL_TIM_PeriodElapsedCallback+0xc0>
 80025da:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80025dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025de:	461a      	mov	r2, r3
 80025e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80025e2:	601a      	str	r2, [r3, #0]
		}

	}
	if (htim == &htim7) {
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002614 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_TIM_PeriodElapsedCallback+0xcc>
		QCW_Loop();
 80025ec:	f7ff fc3a 	bl	8001e64 <QCW_Loop>
	}
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	200003b0 	.word	0x200003b0
 80025fc:	200008cc 	.word	0x200008cc
 8002600:	2000059c 	.word	0x2000059c
 8002604:	200008d0 	.word	0x200008d0
 8002608:	200005a4 	.word	0x200005a4
 800260c:	40012c00 	.word	0x40012c00
 8002610:	200008d4 	.word	0x200008d4
 8002614:	200003fc 	.word	0x200003fc

08002618 <u32_to_float>:

float u32_to_float(uint32_t input) {
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  return *((float *) &input);
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	ee07 3a90 	vmov	s15, r3
}
 8002628:	eeb0 0a67 	vmov.f32	s0, s15
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <GetValue>:

uint32_t GetValue(uint8_t * buffer, uint8_t position) {
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	70fb      	strb	r3, [r7, #3]
  return  (buffer[position * 4 + 0] << 0)  |
 8002642:	78fb      	ldrb	r3, [r7, #3]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	461a      	mov	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4413      	add	r3, r2
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	4619      	mov	r1, r3
		  (buffer[position * 4 + 1] << 8)  |
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	3301      	adds	r3, #1
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	021b      	lsls	r3, r3, #8
  return  (buffer[position * 4 + 0] << 0)  |
 800265e:	ea41 0203 	orr.w	r2, r1, r3
		  (buffer[position * 4 + 2] << 16) |
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	3302      	adds	r3, #2
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	440b      	add	r3, r1
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	041b      	lsls	r3, r3, #16
		  (buffer[position * 4 + 1] << 8)  |
 8002670:	431a      	orrs	r2, r3
		  (buffer[position * 4 + 3] << 24);
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	3303      	adds	r3, #3
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	440b      	add	r3, r1
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	061b      	lsls	r3, r3, #24
		  (buffer[position * 4 + 2] << 16) |
 8002680:	4313      	orrs	r3, r2

}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	float OT = u32_to_float(GetValue(uart_buffer, 0));
 8002698:	2100      	movs	r1, #0
 800269a:	4836      	ldr	r0, [pc, #216]	@ (8002774 <HAL_UART_RxCpltCallback+0xe4>)
 800269c:	f7ff ffcb 	bl	8002636 <GetValue>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ffb8 	bl	8002618 <u32_to_float>
 80026a8:	ed87 0a05 	vstr	s0, [r7, #20]
	float Vmax = u32_to_float(GetValue(uart_buffer, 1));
 80026ac:	2101      	movs	r1, #1
 80026ae:	4831      	ldr	r0, [pc, #196]	@ (8002774 <HAL_UART_RxCpltCallback+0xe4>)
 80026b0:	f7ff ffc1 	bl	8002636 <GetValue>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ffae 	bl	8002618 <u32_to_float>
 80026bc:	ed87 0a04 	vstr	s0, [r7, #16]
	float OCD = u32_to_float(GetValue(uart_buffer, 2));
 80026c0:	2102      	movs	r1, #2
 80026c2:	482c      	ldr	r0, [pc, #176]	@ (8002774 <HAL_UART_RxCpltCallback+0xe4>)
 80026c4:	f7ff ffb7 	bl	8002636 <GetValue>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ffa4 	bl	8002618 <u32_to_float>
 80026d0:	ed87 0a03 	vstr	s0, [r7, #12]

	if (Vmax < 500 && Vmax > 0 && OT < 200 && OT > 0 && OCD < 600 && OCD > 0 && temp_ext < MAX_TEMP && rdy) {
 80026d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80026d8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002778 <HAL_UART_RxCpltCallback+0xe8>
 80026dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e4:	d53c      	bpl.n	8002760 <HAL_UART_RxCpltCallback+0xd0>
 80026e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80026ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f2:	dd35      	ble.n	8002760 <HAL_UART_RxCpltCallback+0xd0>
 80026f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80026f8:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800277c <HAL_UART_RxCpltCallback+0xec>
 80026fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002704:	d52c      	bpl.n	8002760 <HAL_UART_RxCpltCallback+0xd0>
 8002706:	edd7 7a05 	vldr	s15, [r7, #20]
 800270a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800270e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002712:	dd25      	ble.n	8002760 <HAL_UART_RxCpltCallback+0xd0>
 8002714:	edd7 7a03 	vldr	s15, [r7, #12]
 8002718:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002780 <HAL_UART_RxCpltCallback+0xf0>
 800271c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002724:	d51c      	bpl.n	8002760 <HAL_UART_RxCpltCallback+0xd0>
 8002726:	edd7 7a03 	vldr	s15, [r7, #12]
 800272a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800272e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002732:	dd15      	ble.n	8002760 <HAL_UART_RxCpltCallback+0xd0>
 8002734:	4b13      	ldr	r3, [pc, #76]	@ (8002784 <HAL_UART_RxCpltCallback+0xf4>)
 8002736:	edd3 7a00 	vldr	s15, [r3]
 800273a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002788 <HAL_UART_RxCpltCallback+0xf8>
 800273e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002746:	d50b      	bpl.n	8002760 <HAL_UART_RxCpltCallback+0xd0>
 8002748:	4b10      	ldr	r3, [pc, #64]	@ (800278c <HAL_UART_RxCpltCallback+0xfc>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_UART_RxCpltCallback+0xd0>
		StartPulse(OT, Vmax, OCD);
 8002750:	ed97 1a03 	vldr	s2, [r7, #12]
 8002754:	edd7 0a04 	vldr	s1, [r7, #16]
 8002758:	ed97 0a05 	vldr	s0, [r7, #20]
 800275c:	f7ff fd24 	bl	80021a8 <StartPulse>
	}

	HAL_UART_Receive_IT(&huart1, uart_buffer, UART_SIZE);
 8002760:	220c      	movs	r2, #12
 8002762:	4904      	ldr	r1, [pc, #16]	@ (8002774 <HAL_UART_RxCpltCallback+0xe4>)
 8002764:	480a      	ldr	r0, [pc, #40]	@ (8002790 <HAL_UART_RxCpltCallback+0x100>)
 8002766:	f007 f911 	bl	800998c <HAL_UART_Receive_IT>
}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000580 	.word	0x20000580
 8002778:	43fa0000 	.word	0x43fa0000
 800277c:	43480000 	.word	0x43480000
 8002780:	44160000 	.word	0x44160000
 8002784:	20000598 	.word	0x20000598
 8002788:	42700000 	.word	0x42700000
 800278c:	200008c8 	.word	0x200008c8
 8002790:	200004e0 	.word	0x200004e0

08002794 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279a:	4b0f      	ldr	r3, [pc, #60]	@ (80027d8 <HAL_MspInit+0x44>)
 800279c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279e:	4a0e      	ldr	r2, [pc, #56]	@ (80027d8 <HAL_MspInit+0x44>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80027a6:	4b0c      	ldr	r3, [pc, #48]	@ (80027d8 <HAL_MspInit+0x44>)
 80027a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	4b09      	ldr	r3, [pc, #36]	@ (80027d8 <HAL_MspInit+0x44>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b6:	4a08      	ldr	r2, [pc, #32]	@ (80027d8 <HAL_MspInit+0x44>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80027be:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <HAL_MspInit+0x44>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80027ca:	f003 fe95 	bl	80064f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000

080027dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b09c      	sub	sp, #112	@ 0x70
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027f4:	f107 0318 	add.w	r3, r7, #24
 80027f8:	2244      	movs	r2, #68	@ 0x44
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f009 f955 	bl	800baac <memset>
  if(hadc->Instance==ADC1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800280a:	d171      	bne.n	80028f0 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800280c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002810:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002812:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002816:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002818:	f107 0318 	add.w	r3, r7, #24
 800281c:	4618      	mov	r0, r3
 800281e:	f004 fbab 	bl	8006f78 <HAL_RCCEx_PeriphCLKConfig>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002828:	f7ff fa3e 	bl	8001ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800282c:	4b6d      	ldr	r3, [pc, #436]	@ (80029e4 <HAL_ADC_MspInit+0x208>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	4a6c      	ldr	r2, [pc, #432]	@ (80029e4 <HAL_ADC_MspInit+0x208>)
 8002834:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002836:	4b6b      	ldr	r3, [pc, #428]	@ (80029e4 <HAL_ADC_MspInit+0x208>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d10b      	bne.n	8002856 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800283e:	4b6a      	ldr	r3, [pc, #424]	@ (80029e8 <HAL_ADC_MspInit+0x20c>)
 8002840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002842:	4a69      	ldr	r2, [pc, #420]	@ (80029e8 <HAL_ADC_MspInit+0x20c>)
 8002844:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800284a:	4b67      	ldr	r3, [pc, #412]	@ (80029e8 <HAL_ADC_MspInit+0x20c>)
 800284c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002856:	4b64      	ldr	r3, [pc, #400]	@ (80029e8 <HAL_ADC_MspInit+0x20c>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285a:	4a63      	ldr	r2, [pc, #396]	@ (80029e8 <HAL_ADC_MspInit+0x20c>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002862:	4b61      	ldr	r3, [pc, #388]	@ (80029e8 <HAL_ADC_MspInit+0x20c>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = THERM_Pin;
 800286e:	2301      	movs	r3, #1
 8002870:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002872:	2303      	movs	r3, #3
 8002874:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(THERM_GPIO_Port, &GPIO_InitStruct);
 800287a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800287e:	4619      	mov	r1, r3
 8002880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002884:	f003 fbfa 	bl	800607c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002888:	4b58      	ldr	r3, [pc, #352]	@ (80029ec <HAL_ADC_MspInit+0x210>)
 800288a:	4a59      	ldr	r2, [pc, #356]	@ (80029f0 <HAL_ADC_MspInit+0x214>)
 800288c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800288e:	4b57      	ldr	r3, [pc, #348]	@ (80029ec <HAL_ADC_MspInit+0x210>)
 8002890:	2205      	movs	r2, #5
 8002892:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002894:	4b55      	ldr	r3, [pc, #340]	@ (80029ec <HAL_ADC_MspInit+0x210>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800289a:	4b54      	ldr	r3, [pc, #336]	@ (80029ec <HAL_ADC_MspInit+0x210>)
 800289c:	2200      	movs	r2, #0
 800289e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028a0:	4b52      	ldr	r3, [pc, #328]	@ (80029ec <HAL_ADC_MspInit+0x210>)
 80028a2:	2280      	movs	r2, #128	@ 0x80
 80028a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028a6:	4b51      	ldr	r3, [pc, #324]	@ (80029ec <HAL_ADC_MspInit+0x210>)
 80028a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028ae:	4b4f      	ldr	r3, [pc, #316]	@ (80029ec <HAL_ADC_MspInit+0x210>)
 80028b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028b6:	4b4d      	ldr	r3, [pc, #308]	@ (80029ec <HAL_ADC_MspInit+0x210>)
 80028b8:	2220      	movs	r2, #32
 80028ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028bc:	4b4b      	ldr	r3, [pc, #300]	@ (80029ec <HAL_ADC_MspInit+0x210>)
 80028be:	2200      	movs	r2, #0
 80028c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028c2:	484a      	ldr	r0, [pc, #296]	@ (80029ec <HAL_ADC_MspInit+0x210>)
 80028c4:	f003 f8a8 	bl	8005a18 <HAL_DMA_Init>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80028ce:	f7ff f9eb 	bl	8001ca8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a45      	ldr	r2, [pc, #276]	@ (80029ec <HAL_ADC_MspInit+0x210>)
 80028d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80028d8:	4a44      	ldr	r2, [pc, #272]	@ (80029ec <HAL_ADC_MspInit+0x210>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	2100      	movs	r1, #0
 80028e2:	2012      	movs	r0, #18
 80028e4:	f002 fd83 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80028e8:	2012      	movs	r0, #18
 80028ea:	f002 fd9a 	bl	8005422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80028ee:	e075      	b.n	80029dc <HAL_ADC_MspInit+0x200>
  else if(hadc->Instance==ADC2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a3f      	ldr	r2, [pc, #252]	@ (80029f4 <HAL_ADC_MspInit+0x218>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d170      	bne.n	80029dc <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80028fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002900:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002904:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002906:	f107 0318 	add.w	r3, r7, #24
 800290a:	4618      	mov	r0, r3
 800290c:	f004 fb34 	bl	8006f78 <HAL_RCCEx_PeriphCLKConfig>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 8002916:	f7ff f9c7 	bl	8001ca8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800291a:	4b32      	ldr	r3, [pc, #200]	@ (80029e4 <HAL_ADC_MspInit+0x208>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3301      	adds	r3, #1
 8002920:	4a30      	ldr	r2, [pc, #192]	@ (80029e4 <HAL_ADC_MspInit+0x208>)
 8002922:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002924:	4b2f      	ldr	r3, [pc, #188]	@ (80029e4 <HAL_ADC_MspInit+0x208>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d10b      	bne.n	8002944 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800292c:	4b2e      	ldr	r3, [pc, #184]	@ (80029e8 <HAL_ADC_MspInit+0x20c>)
 800292e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002930:	4a2d      	ldr	r2, [pc, #180]	@ (80029e8 <HAL_ADC_MspInit+0x20c>)
 8002932:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002936:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002938:	4b2b      	ldr	r3, [pc, #172]	@ (80029e8 <HAL_ADC_MspInit+0x20c>)
 800293a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002944:	4b28      	ldr	r3, [pc, #160]	@ (80029e8 <HAL_ADC_MspInit+0x20c>)
 8002946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002948:	4a27      	ldr	r2, [pc, #156]	@ (80029e8 <HAL_ADC_MspInit+0x20c>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002950:	4b25      	ldr	r3, [pc, #148]	@ (80029e8 <HAL_ADC_MspInit+0x20c>)
 8002952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin|VDRIVE_SENSE_Pin;
 800295c:	2330      	movs	r3, #48	@ 0x30
 800295e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002960:	2303      	movs	r3, #3
 8002962:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800296c:	4619      	mov	r1, r3
 800296e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002972:	f003 fb83 	bl	800607c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002976:	4b20      	ldr	r3, [pc, #128]	@ (80029f8 <HAL_ADC_MspInit+0x21c>)
 8002978:	4a20      	ldr	r2, [pc, #128]	@ (80029fc <HAL_ADC_MspInit+0x220>)
 800297a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800297c:	4b1e      	ldr	r3, [pc, #120]	@ (80029f8 <HAL_ADC_MspInit+0x21c>)
 800297e:	2224      	movs	r2, #36	@ 0x24
 8002980:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002982:	4b1d      	ldr	r3, [pc, #116]	@ (80029f8 <HAL_ADC_MspInit+0x21c>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_ADC_MspInit+0x21c>)
 800298a:	2200      	movs	r2, #0
 800298c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800298e:	4b1a      	ldr	r3, [pc, #104]	@ (80029f8 <HAL_ADC_MspInit+0x21c>)
 8002990:	2280      	movs	r2, #128	@ 0x80
 8002992:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002994:	4b18      	ldr	r3, [pc, #96]	@ (80029f8 <HAL_ADC_MspInit+0x21c>)
 8002996:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800299a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800299c:	4b16      	ldr	r3, [pc, #88]	@ (80029f8 <HAL_ADC_MspInit+0x21c>)
 800299e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029a2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80029a4:	4b14      	ldr	r3, [pc, #80]	@ (80029f8 <HAL_ADC_MspInit+0x21c>)
 80029a6:	2220      	movs	r2, #32
 80029a8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80029aa:	4b13      	ldr	r3, [pc, #76]	@ (80029f8 <HAL_ADC_MspInit+0x21c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80029b0:	4811      	ldr	r0, [pc, #68]	@ (80029f8 <HAL_ADC_MspInit+0x21c>)
 80029b2:	f003 f831 	bl	8005a18 <HAL_DMA_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_ADC_MspInit+0x1e4>
      Error_Handler();
 80029bc:	f7ff f974 	bl	8001ca8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a0d      	ldr	r2, [pc, #52]	@ (80029f8 <HAL_ADC_MspInit+0x21c>)
 80029c4:	655a      	str	r2, [r3, #84]	@ 0x54
 80029c6:	4a0c      	ldr	r2, [pc, #48]	@ (80029f8 <HAL_ADC_MspInit+0x21c>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80029cc:	2200      	movs	r2, #0
 80029ce:	2100      	movs	r1, #0
 80029d0:	2012      	movs	r0, #18
 80029d2:	f002 fd0c 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80029d6:	2012      	movs	r0, #18
 80029d8:	f002 fd23 	bl	8005422 <HAL_NVIC_EnableIRQ>
}
 80029dc:	bf00      	nop
 80029de:	3770      	adds	r7, #112	@ 0x70
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	200008dc 	.word	0x200008dc
 80029e8:	40021000 	.word	0x40021000
 80029ec:	20000164 	.word	0x20000164
 80029f0:	40020008 	.word	0x40020008
 80029f4:	50000100 	.word	0x50000100
 80029f8:	200001c4 	.word	0x200001c4
 80029fc:	4002001c 	.word	0x4002001c

08002a00 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	@ 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a23      	ldr	r2, [pc, #140]	@ (8002aac <HAL_COMP_MspInit+0xac>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d121      	bne.n	8002a66 <HAL_COMP_MspInit+0x66>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	4b23      	ldr	r3, [pc, #140]	@ (8002ab0 <HAL_COMP_MspInit+0xb0>)
 8002a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a26:	4a22      	ldr	r2, [pc, #136]	@ (8002ab0 <HAL_COMP_MspInit+0xb0>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a2e:	4b20      	ldr	r3, [pc, #128]	@ (8002ab0 <HAL_COMP_MspInit+0xb0>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a50:	f003 fb14 	bl	800607c <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8002a54:	2200      	movs	r2, #0
 8002a56:	2100      	movs	r1, #0
 8002a58:	2040      	movs	r0, #64	@ 0x40
 8002a5a:	f002 fcc8 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8002a5e:	2040      	movs	r0, #64	@ 0x40
 8002a60:	f002 fcdf 	bl	8005422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8002a64:	e01d      	b.n	8002aa2 <HAL_COMP_MspInit+0xa2>
  else if(hcomp->Instance==COMP2)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a12      	ldr	r2, [pc, #72]	@ (8002ab4 <HAL_COMP_MspInit+0xb4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d118      	bne.n	8002aa2 <HAL_COMP_MspInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a70:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab0 <HAL_COMP_MspInit+0xb0>)
 8002a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a74:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab0 <HAL_COMP_MspInit+0xb0>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <HAL_COMP_MspInit+0xb0>)
 8002a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a88:	230c      	movs	r3, #12
 8002a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a9e:	f003 faed 	bl	800607c <HAL_GPIO_Init>
}
 8002aa2:	bf00      	nop
 8002aa4:	3728      	adds	r7, #40	@ 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40010200 	.word	0x40010200
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40010204 	.word	0x40010204

08002ab8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8002afc <HAL_DAC_MspInit+0x44>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d113      	bne.n	8002af2 <HAL_DAC_MspInit+0x3a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002aca:	4b0d      	ldr	r3, [pc, #52]	@ (8002b00 <HAL_DAC_MspInit+0x48>)
 8002acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ace:	4a0c      	ldr	r2, [pc, #48]	@ (8002b00 <HAL_DAC_MspInit+0x48>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <HAL_DAC_MspInit+0x48>)
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2036      	movs	r0, #54	@ 0x36
 8002ae8:	f002 fc81 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002aec:	2036      	movs	r0, #54	@ 0x36
 8002aee:	f002 fc98 	bl	8005422 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	50000800 	.word	0x50000800
 8002b00:	40021000 	.word	0x40021000

08002b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	@ 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a78      	ldr	r2, [pc, #480]	@ (8002cf4 <HAL_TIM_Base_MspInit+0x1f0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d12c      	bne.n	8002b70 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b16:	4b78      	ldr	r3, [pc, #480]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1a:	4a77      	ldr	r2, [pc, #476]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002b1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b20:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b22:	4b75      	ldr	r3, [pc, #468]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2100      	movs	r1, #0
 8002b32:	2018      	movs	r0, #24
 8002b34:	f002 fc5b 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002b38:	2018      	movs	r0, #24
 8002b3a:	f002 fc72 	bl	8005422 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2100      	movs	r1, #0
 8002b42:	2019      	movs	r0, #25
 8002b44:	f002 fc53 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002b48:	2019      	movs	r0, #25
 8002b4a:	f002 fc6a 	bl	8005422 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2100      	movs	r1, #0
 8002b52:	201a      	movs	r0, #26
 8002b54:	f002 fc4b 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002b58:	201a      	movs	r0, #26
 8002b5a:	f002 fc62 	bl	8005422 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	201b      	movs	r0, #27
 8002b64:	f002 fc43 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002b68:	201b      	movs	r0, #27
 8002b6a:	f002 fc5a 	bl	8005422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002b6e:	e0bc      	b.n	8002cea <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b78:	d114      	bne.n	8002ba4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7e:	4a5e      	ldr	r2, [pc, #376]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b86:	4b5c      	ldr	r3, [pc, #368]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	623b      	str	r3, [r7, #32]
 8002b90:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2100      	movs	r1, #0
 8002b96:	201c      	movs	r0, #28
 8002b98:	f002 fc29 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b9c:	201c      	movs	r0, #28
 8002b9e:	f002 fc40 	bl	8005422 <HAL_NVIC_EnableIRQ>
}
 8002ba2:	e0a2      	b.n	8002cea <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM3)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a54      	ldr	r2, [pc, #336]	@ (8002cfc <HAL_TIM_Base_MspInit+0x1f8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d10c      	bne.n	8002bc8 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bae:	4b52      	ldr	r3, [pc, #328]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb2:	4a51      	ldr	r2, [pc, #324]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bba:	4b4f      	ldr	r3, [pc, #316]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
}
 8002bc6:	e090      	b.n	8002cea <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM4)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a4c      	ldr	r2, [pc, #304]	@ (8002d00 <HAL_TIM_Base_MspInit+0x1fc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10c      	bne.n	8002bec <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bd2:	4b49      	ldr	r3, [pc, #292]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd6:	4a48      	ldr	r2, [pc, #288]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bde:	4b46      	ldr	r3, [pc, #280]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	69bb      	ldr	r3, [r7, #24]
}
 8002bea:	e07e      	b.n	8002cea <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM6)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a44      	ldr	r2, [pc, #272]	@ (8002d04 <HAL_TIM_Base_MspInit+0x200>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d114      	bne.n	8002c20 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bf6:	4b40      	ldr	r3, [pc, #256]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfa:	4a3f      	ldr	r2, [pc, #252]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002bfc:	f043 0310 	orr.w	r3, r3, #16
 8002c00:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c02:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2100      	movs	r1, #0
 8002c12:	2036      	movs	r0, #54	@ 0x36
 8002c14:	f002 fbeb 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c18:	2036      	movs	r0, #54	@ 0x36
 8002c1a:	f002 fc02 	bl	8005422 <HAL_NVIC_EnableIRQ>
}
 8002c1e:	e064      	b.n	8002cea <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM7)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a38      	ldr	r2, [pc, #224]	@ (8002d08 <HAL_TIM_Base_MspInit+0x204>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d114      	bne.n	8002c54 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002c2a:	4b33      	ldr	r3, [pc, #204]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2e:	4a32      	ldr	r2, [pc, #200]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002c30:	f043 0320 	orr.w	r3, r3, #32
 8002c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c36:	4b30      	ldr	r3, [pc, #192]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2100      	movs	r1, #0
 8002c46:	2037      	movs	r0, #55	@ 0x37
 8002c48:	f002 fbd1 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002c4c:	2037      	movs	r0, #55	@ 0x37
 8002c4e:	f002 fbe8 	bl	8005422 <HAL_NVIC_EnableIRQ>
}
 8002c52:	e04a      	b.n	8002cea <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM8)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a2c      	ldr	r2, [pc, #176]	@ (8002d0c <HAL_TIM_Base_MspInit+0x208>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d12c      	bne.n	8002cb8 <HAL_TIM_Base_MspInit+0x1b4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c5e:	4b26      	ldr	r3, [pc, #152]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c62:	4a25      	ldr	r2, [pc, #148]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002c64:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c68:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c6a:	4b23      	ldr	r3, [pc, #140]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 8002c76:	2200      	movs	r2, #0
 8002c78:	2100      	movs	r1, #0
 8002c7a:	202b      	movs	r0, #43	@ 0x2b
 8002c7c:	f002 fbb7 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 8002c80:	202b      	movs	r0, #43	@ 0x2b
 8002c82:	f002 fbce 	bl	8005422 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8002c86:	2200      	movs	r2, #0
 8002c88:	2100      	movs	r1, #0
 8002c8a:	202c      	movs	r0, #44	@ 0x2c
 8002c8c:	f002 fbaf 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8002c90:	202c      	movs	r0, #44	@ 0x2c
 8002c92:	f002 fbc6 	bl	8005422 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_IRQn, 0, 0);
 8002c96:	2200      	movs	r2, #0
 8002c98:	2100      	movs	r1, #0
 8002c9a:	202d      	movs	r0, #45	@ 0x2d
 8002c9c:	f002 fba7 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_IRQn);
 8002ca0:	202d      	movs	r0, #45	@ 0x2d
 8002ca2:	f002 fbbe 	bl	8005422 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2100      	movs	r1, #0
 8002caa:	202e      	movs	r0, #46	@ 0x2e
 8002cac:	f002 fb9f 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002cb0:	202e      	movs	r0, #46	@ 0x2e
 8002cb2:	f002 fbb6 	bl	8005422 <HAL_NVIC_EnableIRQ>
}
 8002cb6:	e018      	b.n	8002cea <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM15)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a14      	ldr	r2, [pc, #80]	@ (8002d10 <HAL_TIM_Base_MspInit+0x20c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d113      	bne.n	8002cea <HAL_TIM_Base_MspInit+0x1e6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ccc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cce:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x1f4>)
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2100      	movs	r1, #0
 8002cde:	2018      	movs	r0, #24
 8002ce0:	f002 fb85 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002ce4:	2018      	movs	r0, #24
 8002ce6:	f002 fb9c 	bl	8005422 <HAL_NVIC_EnableIRQ>
}
 8002cea:	bf00      	nop
 8002cec:	3728      	adds	r7, #40	@ 0x28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40000400 	.word	0x40000400
 8002d00:	40000800 	.word	0x40000800
 8002d04:	40001000 	.word	0x40001000
 8002d08:	40001400 	.word	0x40001400
 8002d0c:	40013400 	.word	0x40013400
 8002d10:	40014000 	.word	0x40014000

08002d14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08c      	sub	sp, #48	@ 0x30
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1c:	f107 031c 	add.w	r3, r7, #28
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a43      	ldr	r2, [pc, #268]	@ (8002e40 <HAL_TIM_MspPostInit+0x12c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d11e      	bne.n	8002d74 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d36:	4b43      	ldr	r3, [pc, #268]	@ (8002e44 <HAL_TIM_MspPostInit+0x130>)
 8002d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3a:	4a42      	ldr	r2, [pc, #264]	@ (8002e44 <HAL_TIM_MspPostInit+0x130>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d42:	4b40      	ldr	r3, [pc, #256]	@ (8002e44 <HAL_TIM_MspPostInit+0x130>)
 8002d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GD_2_Pin|GD_1_Pin;
 8002d4e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002d60:	2306      	movs	r3, #6
 8002d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d64:	f107 031c 	add.w	r3, r7, #28
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d6e:	f003 f985 	bl	800607c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002d72:	e061      	b.n	8002e38 <HAL_TIM_MspPostInit+0x124>
  else if(htim->Instance==TIM3)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a33      	ldr	r2, [pc, #204]	@ (8002e48 <HAL_TIM_MspPostInit+0x134>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d11c      	bne.n	8002db8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7e:	4b31      	ldr	r3, [pc, #196]	@ (8002e44 <HAL_TIM_MspPostInit+0x130>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d82:	4a30      	ldr	r2, [pc, #192]	@ (8002e44 <HAL_TIM_MspPostInit+0x130>)
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e44 <HAL_TIM_MspPostInit+0x130>)
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 8002d96:	2330      	movs	r3, #48	@ 0x30
 8002d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002da6:	2302      	movs	r3, #2
 8002da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002daa:	f107 031c 	add.w	r3, r7, #28
 8002dae:	4619      	mov	r1, r3
 8002db0:	4826      	ldr	r0, [pc, #152]	@ (8002e4c <HAL_TIM_MspPostInit+0x138>)
 8002db2:	f003 f963 	bl	800607c <HAL_GPIO_Init>
}
 8002db6:	e03f      	b.n	8002e38 <HAL_TIM_MspPostInit+0x124>
  else if(htim->Instance==TIM4)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a24      	ldr	r2, [pc, #144]	@ (8002e50 <HAL_TIM_MspPostInit+0x13c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d13a      	bne.n	8002e38 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc2:	4b20      	ldr	r3, [pc, #128]	@ (8002e44 <HAL_TIM_MspPostInit+0x130>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e44 <HAL_TIM_MspPostInit+0x130>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dce:	4b1d      	ldr	r3, [pc, #116]	@ (8002e44 <HAL_TIM_MspPostInit+0x130>)
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dda:	4b1a      	ldr	r3, [pc, #104]	@ (8002e44 <HAL_TIM_MspPostInit+0x130>)
 8002ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dde:	4a19      	ldr	r2, [pc, #100]	@ (8002e44 <HAL_TIM_MspPostInit+0x130>)
 8002de0:	f043 0302 	orr.w	r3, r3, #2
 8002de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002de6:	4b17      	ldr	r3, [pc, #92]	@ (8002e44 <HAL_TIM_MspPostInit+0x130>)
 8002de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8002df2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e00:	2300      	movs	r3, #0
 8002e02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002e04:	230a      	movs	r3, #10
 8002e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e08:	f107 031c 	add.w	r3, r7, #28
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e12:	f003 f933 	bl	800607c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FAN_Pin;
 8002e16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e20:	2302      	movs	r3, #2
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(FAN_GPIO_Port, &GPIO_InitStruct);
 8002e2c:	f107 031c 	add.w	r3, r7, #28
 8002e30:	4619      	mov	r1, r3
 8002e32:	4806      	ldr	r0, [pc, #24]	@ (8002e4c <HAL_TIM_MspPostInit+0x138>)
 8002e34:	f003 f922 	bl	800607c <HAL_GPIO_Init>
}
 8002e38:	bf00      	nop
 8002e3a:	3730      	adds	r7, #48	@ 0x30
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	48000400 	.word	0x48000400
 8002e50:	40000800 	.word	0x40000800

08002e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b09a      	sub	sp, #104	@ 0x68
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e6c:	f107 0310 	add.w	r3, r7, #16
 8002e70:	2244      	movs	r2, #68	@ 0x44
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f008 fe19 	bl	800baac <memset>
  if(huart->Instance==USART1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a22      	ldr	r2, [pc, #136]	@ (8002f08 <HAL_UART_MspInit+0xb4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d13d      	bne.n	8002f00 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e84:	2301      	movs	r3, #1
 8002e86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e8c:	f107 0310 	add.w	r3, r7, #16
 8002e90:	4618      	mov	r0, r3
 8002e92:	f004 f871 	bl	8006f78 <HAL_RCCEx_PeriphCLKConfig>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e9c:	f7fe ff04 	bl	8001ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f0c <HAL_UART_MspInit+0xb8>)
 8002ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea4:	4a19      	ldr	r2, [pc, #100]	@ (8002f0c <HAL_UART_MspInit+0xb8>)
 8002ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eaa:	6613      	str	r3, [r2, #96]	@ 0x60
 8002eac:	4b17      	ldr	r3, [pc, #92]	@ (8002f0c <HAL_UART_MspInit+0xb8>)
 8002eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb8:	4b14      	ldr	r3, [pc, #80]	@ (8002f0c <HAL_UART_MspInit+0xb8>)
 8002eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ebc:	4a13      	ldr	r2, [pc, #76]	@ (8002f0c <HAL_UART_MspInit+0xb8>)
 8002ebe:	f043 0302 	orr.w	r3, r3, #2
 8002ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ec4:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <HAL_UART_MspInit+0xb8>)
 8002ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RX_Pin;
 8002ed0:	2340      	movs	r3, #64	@ 0x40
 8002ed2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ed4:	2312      	movs	r3, #18
 8002ed6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	2300      	movs	r3, #0
 8002ede:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ee0:	2307      	movs	r3, #7
 8002ee2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8002ee4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4809      	ldr	r0, [pc, #36]	@ (8002f10 <HAL_UART_MspInit+0xbc>)
 8002eec:	f003 f8c6 	bl	800607c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	2025      	movs	r0, #37	@ 0x25
 8002ef6:	f002 fa7a 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002efa:	2025      	movs	r0, #37	@ 0x25
 8002efc:	f002 fa91 	bl	8005422 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002f00:	bf00      	nop
 8002f02:	3768      	adds	r7, #104	@ 0x68
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40013800 	.word	0x40013800
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	48000400 	.word	0x48000400

08002f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <NMI_Handler+0x4>

08002f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <HardFault_Handler+0x4>

08002f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <MemManage_Handler+0x4>

08002f2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f30:	bf00      	nop
 8002f32:	e7fd      	b.n	8002f30 <BusFault_Handler+0x4>

08002f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <UsageFault_Handler+0x4>

08002f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f6a:	f000 f93d 	bl	80031e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f78:	4802      	ldr	r0, [pc, #8]	@ (8002f84 <DMA1_Channel1_IRQHandler+0x10>)
 8002f7a:	f002 ff30 	bl	8005dde <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000164 	.word	0x20000164

08002f88 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002f8c:	4802      	ldr	r0, [pc, #8]	@ (8002f98 <DMA1_Channel2_IRQHandler+0x10>)
 8002f8e:	f002 ff26 	bl	8005dde <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200001c4 	.word	0x200001c4

08002f9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002fa0:	4803      	ldr	r0, [pc, #12]	@ (8002fb0 <ADC1_2_IRQHandler+0x14>)
 8002fa2:	f000 fdff 	bl	8003ba4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002fa6:	4803      	ldr	r0, [pc, #12]	@ (8002fb4 <ADC1_2_IRQHandler+0x18>)
 8002fa8:	f000 fdfc 	bl	8003ba4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	2000008c 	.word	0x2000008c
 8002fb4:	200000f8 	.word	0x200000f8

08002fb8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fbc:	4803      	ldr	r0, [pc, #12]	@ (8002fcc <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002fbe:	f004 ffff 	bl	8007fc0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002fc2:	4803      	ldr	r0, [pc, #12]	@ (8002fd0 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002fc4:	f004 fffc 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000280 	.word	0x20000280
 8002fd0:	20000494 	.word	0x20000494

08002fd4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fd8:	4802      	ldr	r0, [pc, #8]	@ (8002fe4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002fda:	f004 fff1 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000280 	.word	0x20000280

08002fe8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fec:	4802      	ldr	r0, [pc, #8]	@ (8002ff8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002fee:	f004 ffe7 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000280 	.word	0x20000280

08002ffc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003000:	4802      	ldr	r0, [pc, #8]	@ (800300c <TIM1_CC_IRQHandler+0x10>)
 8003002:	f004 ffdd 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000280 	.word	0x20000280

08003010 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003014:	4802      	ldr	r0, [pc, #8]	@ (8003020 <TIM2_IRQHandler+0x10>)
 8003016:	f004 ffd3 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	200002cc 	.word	0x200002cc

08003024 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003028:	4802      	ldr	r0, [pc, #8]	@ (8003034 <USART1_IRQHandler+0x10>)
 800302a:	f006 fcfb 	bl	8009a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	200004e0 	.word	0x200004e0

08003038 <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800303c:	4802      	ldr	r0, [pc, #8]	@ (8003048 <TIM8_BRK_IRQHandler+0x10>)
 800303e:	f004 ffbf 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000448 	.word	0x20000448

0800304c <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003050:	4802      	ldr	r0, [pc, #8]	@ (800305c <TIM8_UP_IRQHandler+0x10>)
 8003052:	f004 ffb5 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000448 	.word	0x20000448

08003060 <TIM8_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts.
  */
void TIM8_TRG_COM_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003064:	4802      	ldr	r0, [pc, #8]	@ (8003070 <TIM8_TRG_COM_IRQHandler+0x10>)
 8003066:	f004 ffab 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000448 	.word	0x20000448

08003074 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003078:	4802      	ldr	r0, [pc, #8]	@ (8003084 <TIM8_CC_IRQHandler+0x10>)
 800307a:	f004 ffa1 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000448 	.word	0x20000448

08003088 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800308c:	4803      	ldr	r0, [pc, #12]	@ (800309c <TIM6_DAC_IRQHandler+0x14>)
 800308e:	f004 ff97 	bl	8007fc0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003092:	4803      	ldr	r0, [pc, #12]	@ (80030a0 <TIM6_DAC_IRQHandler+0x18>)
 8003094:	f002 fa6e 	bl	8005574 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}
 800309c:	200003b0 	.word	0x200003b0
 80030a0:	2000026c 	.word	0x2000026c

080030a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80030a8:	4802      	ldr	r0, [pc, #8]	@ (80030b4 <TIM7_IRQHandler+0x10>)
 80030aa:	f004 ff89 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200003fc 	.word	0x200003fc

080030b8 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80030bc:	4802      	ldr	r0, [pc, #8]	@ (80030c8 <COMP1_2_3_IRQHandler+0x10>)
 80030be:	f002 f87f 	bl	80051c0 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000224 	.word	0x20000224

080030cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80030d0:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <SystemInit+0x20>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d6:	4a05      	ldr	r2, [pc, #20]	@ (80030ec <SystemInit+0x20>)
 80030d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030f0:	480d      	ldr	r0, [pc, #52]	@ (8003128 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80030f4:	f7ff ffea 	bl	80030cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030f8:	480c      	ldr	r0, [pc, #48]	@ (800312c <LoopForever+0x6>)
  ldr r1, =_edata
 80030fa:	490d      	ldr	r1, [pc, #52]	@ (8003130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003134 <LoopForever+0xe>)
  movs r3, #0
 80030fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003100:	e002      	b.n	8003108 <LoopCopyDataInit>

08003102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003106:	3304      	adds	r3, #4

08003108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800310a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800310c:	d3f9      	bcc.n	8003102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800310e:	4a0a      	ldr	r2, [pc, #40]	@ (8003138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003110:	4c0a      	ldr	r4, [pc, #40]	@ (800313c <LoopForever+0x16>)
  movs r3, #0
 8003112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003114:	e001      	b.n	800311a <LoopFillZerobss>

08003116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003118:	3204      	adds	r2, #4

0800311a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800311a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800311c:	d3fb      	bcc.n	8003116 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800311e:	f008 fcd3 	bl	800bac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003122:	f7fd fecd 	bl	8000ec0 <main>

08003126 <LoopForever>:

LoopForever:
    b LoopForever
 8003126:	e7fe      	b.n	8003126 <LoopForever>
  ldr   r0, =_estack
 8003128:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800312c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003130:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003134:	0800c270 	.word	0x0800c270
  ldr r2, =_sbss
 8003138:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800313c:	20000a1c 	.word	0x20000a1c

08003140 <COMP4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003140:	e7fe      	b.n	8003140 <COMP4_IRQHandler>

08003142 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800314c:	2003      	movs	r0, #3
 800314e:	f002 f943 	bl	80053d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003152:	200f      	movs	r0, #15
 8003154:	f000 f80e 	bl	8003174 <HAL_InitTick>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	71fb      	strb	r3, [r7, #7]
 8003162:	e001      	b.n	8003168 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003164:	f7ff fb16 	bl	8002794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003168:	79fb      	ldrb	r3, [r7, #7]

}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003180:	4b16      	ldr	r3, [pc, #88]	@ (80031dc <HAL_InitTick+0x68>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d022      	beq.n	80031ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003188:	4b15      	ldr	r3, [pc, #84]	@ (80031e0 <HAL_InitTick+0x6c>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b13      	ldr	r3, [pc, #76]	@ (80031dc <HAL_InitTick+0x68>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003194:	fbb1 f3f3 	udiv	r3, r1, r3
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	4618      	mov	r0, r3
 800319e:	f002 f94e 	bl	800543e <HAL_SYSTICK_Config>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10f      	bne.n	80031c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b0f      	cmp	r3, #15
 80031ac:	d809      	bhi.n	80031c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031ae:	2200      	movs	r2, #0
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	f04f 30ff 	mov.w	r0, #4294967295
 80031b6:	f002 f91a 	bl	80053ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031ba:	4a0a      	ldr	r2, [pc, #40]	@ (80031e4 <HAL_InitTick+0x70>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	e007      	b.n	80031d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
 80031c6:	e004      	b.n	80031d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
 80031cc:	e001      	b.n	80031d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	2000000c 	.word	0x2000000c
 80031e0:	20000004 	.word	0x20000004
 80031e4:	20000008 	.word	0x20000008

080031e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031ec:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <HAL_IncTick+0x1c>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b05      	ldr	r3, [pc, #20]	@ (8003208 <HAL_IncTick+0x20>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4413      	add	r3, r2
 80031f6:	4a03      	ldr	r2, [pc, #12]	@ (8003204 <HAL_IncTick+0x1c>)
 80031f8:	6013      	str	r3, [r2, #0]
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	200008e0 	.word	0x200008e0
 8003208:	2000000c 	.word	0x2000000c

0800320c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return uwTick;
 8003210:	4b03      	ldr	r3, [pc, #12]	@ (8003220 <HAL_GetTick+0x14>)
 8003212:	681b      	ldr	r3, [r3, #0]
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	200008e0 	.word	0x200008e0

08003224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800322c:	f7ff ffee 	bl	800320c <HAL_GetTick>
 8003230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d004      	beq.n	8003248 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800323e:	4b09      	ldr	r3, [pc, #36]	@ (8003264 <HAL_Delay+0x40>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4413      	add	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003248:	bf00      	nop
 800324a:	f7ff ffdf 	bl	800320c <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	429a      	cmp	r2, r3
 8003258:	d8f7      	bhi.n	800324a <HAL_Delay+0x26>
  {
  }
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	2000000c 	.word	0x2000000c

08003268 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	609a      	str	r2, [r3, #8]
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	609a      	str	r2, [r3, #8]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3360      	adds	r3, #96	@ 0x60
 80032e2:	461a      	mov	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b08      	ldr	r3, [pc, #32]	@ (8003314 <LL_ADC_SetOffset+0x44>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	4313      	orrs	r3, r2
 8003300:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	03fff000 	.word	0x03fff000

08003318 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3360      	adds	r3, #96	@ 0x60
 8003326:	461a      	mov	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3360      	adds	r3, #96	@ 0x60
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	431a      	orrs	r2, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800337a:	b480      	push	{r7}
 800337c:	b087      	sub	sp, #28
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3360      	adds	r3, #96	@ 0x60
 800338a:	461a      	mov	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	431a      	orrs	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3360      	adds	r3, #96	@ 0x60
 80033c0:	461a      	mov	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	615a      	str	r2, [r3, #20]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003432:	b480      	push	{r7}
 8003434:	b087      	sub	sp, #28
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3330      	adds	r3, #48	@ 0x30
 8003442:	461a      	mov	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	4413      	add	r3, r2
 8003450:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	211f      	movs	r1, #31
 800345e:	fa01 f303 	lsl.w	r3, r1, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	401a      	ands	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	0e9b      	lsrs	r3, r3, #26
 800346a:	f003 011f 	and.w	r1, r3, #31
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	fa01 f303 	lsl.w	r3, r1, r3
 8003478:	431a      	orrs	r2, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800347e:	bf00      	nop
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003496:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3314      	adds	r3, #20
 80034c0:	461a      	mov	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	0e5b      	lsrs	r3, r3, #25
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	4413      	add	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	0d1b      	lsrs	r3, r3, #20
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2107      	movs	r1, #7
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	401a      	ands	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	0d1b      	lsrs	r3, r3, #20
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	fa01 f303 	lsl.w	r3, r1, r3
 80034f4:	431a      	orrs	r2, r3
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003520:	43db      	mvns	r3, r3
 8003522:	401a      	ands	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f003 0318 	and.w	r3, r3, #24
 800352a:	4908      	ldr	r1, [pc, #32]	@ (800354c <LL_ADC_SetChannelSingleDiff+0x44>)
 800352c:	40d9      	lsrs	r1, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	400b      	ands	r3, r1
 8003532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003536:	431a      	orrs	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	0007ffff 	.word	0x0007ffff

08003550 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 031f 	and.w	r3, r3, #31
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003598:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6093      	str	r3, [r2, #8]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035c0:	d101      	bne.n	80035c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80035e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003610:	d101      	bne.n	8003616 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003634:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003638:	f043 0201 	orr.w	r2, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800365c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003660:	f043 0202 	orr.w	r2, r3, #2
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <LL_ADC_IsEnabled+0x18>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <LL_ADC_IsEnabled+0x1a>
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d101      	bne.n	80036b2 <LL_ADC_IsDisableOngoing+0x18>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <LL_ADC_IsDisableOngoing+0x1a>
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036d4:	f043 0204 	orr.w	r2, r3, #4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d101      	bne.n	8003700 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b08      	cmp	r3, #8
 8003720:	d101      	bne.n	8003726 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b089      	sub	sp, #36	@ 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e167      	b.n	8003a1e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d109      	bne.n	8003770 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff f83d 	bl	80027dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff19 	bl	80035ac <LL_ADC_IsDeepPowerDownEnabled>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff feff 	bl	8003588 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff ff34 	bl	80035fc <LL_ADC_IsInternalRegulatorEnabled>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d115      	bne.n	80037c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff ff18 	bl	80035d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037a4:	4ba0      	ldr	r3, [pc, #640]	@ (8003a28 <HAL_ADC_Init+0x2f4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	4aa0      	ldr	r2, [pc, #640]	@ (8003a2c <HAL_ADC_Init+0x2f8>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	099b      	lsrs	r3, r3, #6
 80037b2:	3301      	adds	r3, #1
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80037b8:	e002      	b.n	80037c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3b01      	subs	r3, #1
 80037be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f9      	bne.n	80037ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff ff16 	bl	80035fc <LL_ADC_IsInternalRegulatorEnabled>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10d      	bne.n	80037f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037da:	f043 0210 	orr.w	r2, r3, #16
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e6:	f043 0201 	orr.w	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff ff76 	bl	80036e8 <LL_ADC_REG_IsConversionOngoing>
 80037fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	f040 8100 	bne.w	8003a0c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 80fc 	bne.w	8003a0c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003818:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800381c:	f043 0202 	orr.w	r2, r3, #2
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff ff23 	bl	8003674 <LL_ADC_IsEnabled>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d111      	bne.n	8003858 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003834:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003838:	f7ff ff1c 	bl	8003674 <LL_ADC_IsEnabled>
 800383c:	4604      	mov	r4, r0
 800383e:	487c      	ldr	r0, [pc, #496]	@ (8003a30 <HAL_ADC_Init+0x2fc>)
 8003840:	f7ff ff18 	bl	8003674 <LL_ADC_IsEnabled>
 8003844:	4603      	mov	r3, r0
 8003846:	4323      	orrs	r3, r4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d105      	bne.n	8003858 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4619      	mov	r1, r3
 8003852:	4878      	ldr	r0, [pc, #480]	@ (8003a34 <HAL_ADC_Init+0x300>)
 8003854:	f7ff fd08 	bl	8003268 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7f5b      	ldrb	r3, [r3, #29]
 800385c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003862:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003868:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800386e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003876:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003882:	2b01      	cmp	r3, #1
 8003884:	d106      	bne.n	8003894 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388a:	3b01      	subs	r3, #1
 800388c:	045b      	lsls	r3, r3, #17
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4313      	orrs	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d009      	beq.n	80038b0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	4b60      	ldr	r3, [pc, #384]	@ (8003a38 <HAL_ADC_Init+0x304>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6812      	ldr	r2, [r2, #0]
 80038be:	69b9      	ldr	r1, [r7, #24]
 80038c0:	430b      	orrs	r3, r1
 80038c2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff ff15 	bl	800370e <LL_ADC_INJ_IsConversionOngoing>
 80038e4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d16d      	bne.n	80039c8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d16a      	bne.n	80039c8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038f6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038fe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003900:	4313      	orrs	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800390e:	f023 0302 	bic.w	r3, r3, #2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	69b9      	ldr	r1, [r7, #24]
 8003918:	430b      	orrs	r3, r1
 800391a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d017      	beq.n	8003954 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003932:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800393c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003940:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6911      	ldr	r1, [r2, #16]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	430b      	orrs	r3, r1
 800394e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003952:	e013      	b.n	800397c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003962:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003974:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003978:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003982:	2b01      	cmp	r3, #1
 8003984:	d118      	bne.n	80039b8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003990:	f023 0304 	bic.w	r3, r3, #4
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800399c:	4311      	orrs	r1, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039a8:	430a      	orrs	r2, r1
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	611a      	str	r2, [r3, #16]
 80039b6:	e007      	b.n	80039c8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d10c      	bne.n	80039ea <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	f023 010f 	bic.w	r1, r3, #15
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	1e5a      	subs	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80039e8:	e007      	b.n	80039fa <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 020f 	bic.w	r2, r2, #15
 80039f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	f023 0303 	bic.w	r3, r3, #3
 8003a02:	f043 0201 	orr.w	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a0a:	e007      	b.n	8003a1c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a10:	f043 0210 	orr.w	r2, r3, #16
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3724      	adds	r7, #36	@ 0x24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd90      	pop	{r4, r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000004 	.word	0x20000004
 8003a2c:	053e2d63 	.word	0x053e2d63
 8003a30:	50000100 	.word	0x50000100
 8003a34:	50000300 	.word	0x50000300
 8003a38:	fff04007 	.word	0xfff04007

08003a3c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a48:	4851      	ldr	r0, [pc, #324]	@ (8003b90 <HAL_ADC_Start_DMA+0x154>)
 8003a4a:	f7ff fd81 	bl	8003550 <LL_ADC_GetMultimode>
 8003a4e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fe47 	bl	80036e8 <LL_ADC_REG_IsConversionOngoing>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f040 808f 	bne.w	8003b80 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_ADC_Start_DMA+0x34>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e08a      	b.n	8003b86 <HAL_ADC_Start_DMA+0x14a>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	d002      	beq.n	8003a8a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b09      	cmp	r3, #9
 8003a88:	d173      	bne.n	8003b72 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 feb2 	bl	80047f4 <ADC_Enable>
 8003a90:	4603      	mov	r3, r0
 8003a92:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d166      	bne.n	8003b68 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a38      	ldr	r2, [pc, #224]	@ (8003b94 <HAL_ADC_Start_DMA+0x158>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d002      	beq.n	8003abe <HAL_ADC_Start_DMA+0x82>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	e001      	b.n	8003ac2 <HAL_ADC_Start_DMA+0x86>
 8003abe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d002      	beq.n	8003ad0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d006      	beq.n	8003af6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aec:	f023 0206 	bic.w	r2, r3, #6
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	661a      	str	r2, [r3, #96]	@ 0x60
 8003af4:	e002      	b.n	8003afc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b00:	4a25      	ldr	r2, [pc, #148]	@ (8003b98 <HAL_ADC_Start_DMA+0x15c>)
 8003b02:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b08:	4a24      	ldr	r2, [pc, #144]	@ (8003b9c <HAL_ADC_Start_DMA+0x160>)
 8003b0a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b10:	4a23      	ldr	r2, [pc, #140]	@ (8003ba0 <HAL_ADC_Start_DMA+0x164>)
 8003b12:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	221c      	movs	r2, #28
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0210 	orr.w	r2, r2, #16
 8003b32:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3340      	adds	r3, #64	@ 0x40
 8003b4e:	4619      	mov	r1, r3
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f002 f808 	bl	8005b68 <HAL_DMA_Start_IT>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fdad 	bl	80036c0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003b66:	e00d      	b.n	8003b84 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003b70:	e008      	b.n	8003b84 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003b7e:	e001      	b.n	8003b84 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
 8003b82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	50000300 	.word	0x50000300
 8003b94:	50000100 	.word	0x50000100
 8003b98:	080049bf 	.word	0x080049bf
 8003b9c:	08004a97 	.word	0x08004a97
 8003ba0:	08004ab3 	.word	0x08004ab3

08003ba4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	@ 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003bac:	2300      	movs	r3, #0
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bc0:	4883      	ldr	r0, [pc, #524]	@ (8003dd0 <HAL_ADC_IRQHandler+0x22c>)
 8003bc2:	f7ff fcc5 	bl	8003550 <LL_ADC_GetMultimode>
 8003bc6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d017      	beq.n	8003c02 <HAL_ADC_IRQHandler+0x5e>
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d012      	beq.n	8003c02 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bec:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f001 f853 	bl	8004ca0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d004      	beq.n	8003c16 <HAL_ADC_IRQHandler+0x72>
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8085 	beq.w	8003d2c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d07f      	beq.n	8003d2c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fbdf 	bl	800340c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d064      	beq.n	8003d1e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a5e      	ldr	r2, [pc, #376]	@ (8003dd4 <HAL_ADC_IRQHandler+0x230>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d002      	beq.n	8003c64 <HAL_ADC_IRQHandler+0xc0>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	e001      	b.n	8003c68 <HAL_ADC_IRQHandler+0xc4>
 8003c64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d008      	beq.n	8003c82 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b05      	cmp	r3, #5
 8003c7a:	d002      	beq.n	8003c82 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b09      	cmp	r3, #9
 8003c80:	d104      	bne.n	8003c8c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	e00d      	b.n	8003ca8 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a50      	ldr	r2, [pc, #320]	@ (8003dd4 <HAL_ADC_IRQHandler+0x230>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d002      	beq.n	8003c9c <HAL_ADC_IRQHandler+0xf8>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	e001      	b.n	8003ca0 <HAL_ADC_IRQHandler+0xfc>
 8003c9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ca0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d135      	bne.n	8003d1e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d12e      	bne.n	8003d1e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fd0f 	bl	80036e8 <LL_ADC_REG_IsConversionOngoing>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d11a      	bne.n	8003d06 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 020c 	bic.w	r2, r2, #12
 8003cde:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d112      	bne.n	8003d1e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfc:	f043 0201 	orr.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d04:	e00b      	b.n	8003d1e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0a:	f043 0210 	orr.w	r2, r3, #16
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d16:	f043 0201 	orr.w	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fe f966 	bl	8001ff0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	220c      	movs	r2, #12
 8003d2a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <HAL_ADC_IRQHandler+0x19c>
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10b      	bne.n	8003d58 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 809e 	beq.w	8003e88 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8098 	beq.w	8003e88 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d105      	bne.n	8003d70 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d68:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fb88 	bl	800348a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003d7a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fb43 	bl	800340c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d86:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a11      	ldr	r2, [pc, #68]	@ (8003dd4 <HAL_ADC_IRQHandler+0x230>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d002      	beq.n	8003d98 <HAL_ADC_IRQHandler+0x1f4>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	e001      	b.n	8003d9c <HAL_ADC_IRQHandler+0x1f8>
 8003d98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d008      	beq.n	8003db6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b06      	cmp	r3, #6
 8003dae:	d002      	beq.n	8003db6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2b07      	cmp	r3, #7
 8003db4:	d104      	bne.n	8003dc0 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	623b      	str	r3, [r7, #32]
 8003dbe:	e011      	b.n	8003de4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a03      	ldr	r2, [pc, #12]	@ (8003dd4 <HAL_ADC_IRQHandler+0x230>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d006      	beq.n	8003dd8 <HAL_ADC_IRQHandler+0x234>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	e005      	b.n	8003ddc <HAL_ADC_IRQHandler+0x238>
 8003dd0:	50000300 	.word	0x50000300
 8003dd4:	50000100 	.word	0x50000100
 8003dd8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ddc:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d047      	beq.n	8003e7a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <HAL_ADC_IRQHandler+0x260>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d03f      	beq.n	8003e7a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d13a      	bne.n	8003e7a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e0e:	2b40      	cmp	r3, #64	@ 0x40
 8003e10:	d133      	bne.n	8003e7a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d12e      	bne.n	8003e7a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff fc74 	bl	800370e <LL_ADC_INJ_IsConversionOngoing>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d11a      	bne.n	8003e62 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e3a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d112      	bne.n	8003e7a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e58:	f043 0201 	orr.w	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e60:	e00b      	b.n	8003e7a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e66:	f043 0210 	orr.w	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e72:	f043 0201 	orr.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fee8 	bl	8004c50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2260      	movs	r2, #96	@ 0x60
 8003e86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d011      	beq.n	8003eb6 <HAL_ADC_IRQHandler+0x312>
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00c      	beq.n	8003eb6 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f89f 	bl	8003fec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2280      	movs	r2, #128	@ 0x80
 8003eb4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d012      	beq.n	8003ee6 <HAL_ADC_IRQHandler+0x342>
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ece:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fece 	bl	8004c78 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ee4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d012      	beq.n	8003f16 <HAL_ADC_IRQHandler+0x372>
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00d      	beq.n	8003f16 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fec0 	bl	8004c8c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d036      	beq.n	8003f8e <HAL_ADC_IRQHandler+0x3ea>
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d031      	beq.n	8003f8e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003f32:	2301      	movs	r3, #1
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f36:	e014      	b.n	8003f62 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d008      	beq.n	8003f50 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003f3e:	4825      	ldr	r0, [pc, #148]	@ (8003fd4 <HAL_ADC_IRQHandler+0x430>)
 8003f40:	f7ff fb14 	bl	800356c <LL_ADC_GetMultiDMATransfer>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00b      	beq.n	8003f62 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f4e:	e008      	b.n	8003f62 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d10e      	bne.n	8003f86 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f78:	f043 0202 	orr.w	r2, r3, #2
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f83d 	bl	8004000 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2210      	movs	r2, #16
 8003f8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d018      	beq.n	8003fca <HAL_ADC_IRQHandler+0x426>
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d013      	beq.n	8003fca <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb2:	f043 0208 	orr.w	r2, r3, #8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fc2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fe4d 	bl	8004c64 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003fca:	bf00      	nop
 8003fcc:	3728      	adds	r7, #40	@ 0x28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	50000300 	.word	0x50000300

08003fd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b0b6      	sub	sp, #216	@ 0xd8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x22>
 8004032:	2302      	movs	r3, #2
 8004034:	e3c8      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x7b4>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fb50 	bl	80036e8 <LL_ADC_REG_IsConversionOngoing>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	f040 83ad 	bne.w	80047aa <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	6859      	ldr	r1, [r3, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	f7ff f9e8 	bl	8003432 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff fb3e 	bl	80036e8 <LL_ADC_REG_IsConversionOngoing>
 800406c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fb4a 	bl	800370e <LL_ADC_INJ_IsConversionOngoing>
 800407a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800407e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004082:	2b00      	cmp	r3, #0
 8004084:	f040 81d9 	bne.w	800443a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004088:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800408c:	2b00      	cmp	r3, #0
 800408e:	f040 81d4 	bne.w	800443a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800409a:	d10f      	bne.n	80040bc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2200      	movs	r2, #0
 80040a6:	4619      	mov	r1, r3
 80040a8:	f7ff fa02 	bl	80034b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff f996 	bl	80033e6 <LL_ADC_SetSamplingTimeCommonConfig>
 80040ba:	e00e      	b.n	80040da <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	461a      	mov	r2, r3
 80040ca:	f7ff f9f1 	bl	80034b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff f986 	bl	80033e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	08db      	lsrs	r3, r3, #3
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d022      	beq.n	8004142 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	6919      	ldr	r1, [r3, #16]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800410c:	f7ff f8e0 	bl	80032d0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	6919      	ldr	r1, [r3, #16]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	461a      	mov	r2, r3
 800411e:	f7ff f92c 	bl	800337a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800412e:	2b01      	cmp	r3, #1
 8004130:	d102      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x124>
 8004132:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004136:	e000      	b.n	800413a <HAL_ADC_ConfigChannel+0x126>
 8004138:	2300      	movs	r3, #0
 800413a:	461a      	mov	r2, r3
 800413c:	f7ff f938 	bl	80033b0 <LL_ADC_SetOffsetSaturation>
 8004140:	e17b      	b.n	800443a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff f8e5 	bl	8003318 <LL_ADC_GetOffsetChannel>
 800414e:	4603      	mov	r3, r0
 8004150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <HAL_ADC_ConfigChannel+0x15a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2100      	movs	r1, #0
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff f8da 	bl	8003318 <LL_ADC_GetOffsetChannel>
 8004164:	4603      	mov	r3, r0
 8004166:	0e9b      	lsrs	r3, r3, #26
 8004168:	f003 021f 	and.w	r2, r3, #31
 800416c:	e01e      	b.n	80041ac <HAL_ADC_ConfigChannel+0x198>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2100      	movs	r1, #0
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff f8cf 	bl	8003318 <LL_ADC_GetOffsetChannel>
 800417a:	4603      	mov	r3, r0
 800417c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004184:	fa93 f3a3 	rbit	r3, r3
 8004188:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800418c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004190:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800419c:	2320      	movs	r3, #32
 800419e:	e004      	b.n	80041aa <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80041a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041a4:	fab3 f383 	clz	r3, r3
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x1b0>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0e9b      	lsrs	r3, r3, #26
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	e018      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x1e2>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80041d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80041e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80041e8:	2320      	movs	r3, #32
 80041ea:	e004      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80041ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041f0:	fab3 f383 	clz	r3, r3
 80041f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d106      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2200      	movs	r2, #0
 8004200:	2100      	movs	r1, #0
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff f89e 	bl	8003344 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2101      	movs	r1, #1
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff f882 	bl	8003318 <LL_ADC_GetOffsetChannel>
 8004214:	4603      	mov	r3, r0
 8004216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x220>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2101      	movs	r1, #1
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff f877 	bl	8003318 <LL_ADC_GetOffsetChannel>
 800422a:	4603      	mov	r3, r0
 800422c:	0e9b      	lsrs	r3, r3, #26
 800422e:	f003 021f 	and.w	r2, r3, #31
 8004232:	e01e      	b.n	8004272 <HAL_ADC_ConfigChannel+0x25e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff f86c 	bl	8003318 <LL_ADC_GetOffsetChannel>
 8004240:	4603      	mov	r3, r0
 8004242:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800424a:	fa93 f3a3 	rbit	r3, r3
 800424e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004256:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800425a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004262:	2320      	movs	r3, #32
 8004264:	e004      	b.n	8004270 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427a:	2b00      	cmp	r3, #0
 800427c:	d105      	bne.n	800428a <HAL_ADC_ConfigChannel+0x276>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	0e9b      	lsrs	r3, r3, #26
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	e018      	b.n	80042bc <HAL_ADC_ConfigChannel+0x2a8>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004296:	fa93 f3a3 	rbit	r3, r3
 800429a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800429e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80042a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80042ae:	2320      	movs	r3, #32
 80042b0:	e004      	b.n	80042bc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80042b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042bc:	429a      	cmp	r2, r3
 80042be:	d106      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2200      	movs	r2, #0
 80042c6:	2101      	movs	r1, #1
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff f83b 	bl	8003344 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2102      	movs	r1, #2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff f81f 	bl	8003318 <LL_ADC_GetOffsetChannel>
 80042da:	4603      	mov	r3, r0
 80042dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x2e6>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2102      	movs	r1, #2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff f814 	bl	8003318 <LL_ADC_GetOffsetChannel>
 80042f0:	4603      	mov	r3, r0
 80042f2:	0e9b      	lsrs	r3, r3, #26
 80042f4:	f003 021f 	and.w	r2, r3, #31
 80042f8:	e01e      	b.n	8004338 <HAL_ADC_ConfigChannel+0x324>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2102      	movs	r1, #2
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff f809 	bl	8003318 <LL_ADC_GetOffsetChannel>
 8004306:	4603      	mov	r3, r0
 8004308:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004310:	fa93 f3a3 	rbit	r3, r3
 8004314:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004318:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800431c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004320:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004328:	2320      	movs	r3, #32
 800432a:	e004      	b.n	8004336 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800432c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004330:	fab3 f383 	clz	r3, r3
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x33c>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	0e9b      	lsrs	r3, r3, #26
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	e016      	b.n	800437e <HAL_ADC_ConfigChannel+0x36a>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004358:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800435c:	fa93 f3a3 	rbit	r3, r3
 8004360:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004362:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004368:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004370:	2320      	movs	r3, #32
 8004372:	e004      	b.n	800437e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004374:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004378:	fab3 f383 	clz	r3, r3
 800437c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800437e:	429a      	cmp	r2, r3
 8004380:	d106      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2200      	movs	r2, #0
 8004388:	2102      	movs	r1, #2
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe ffda 	bl	8003344 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2103      	movs	r1, #3
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe ffbe 	bl	8003318 <LL_ADC_GetOffsetChannel>
 800439c:	4603      	mov	r3, r0
 800439e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x3a8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2103      	movs	r1, #3
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe ffb3 	bl	8003318 <LL_ADC_GetOffsetChannel>
 80043b2:	4603      	mov	r3, r0
 80043b4:	0e9b      	lsrs	r3, r3, #26
 80043b6:	f003 021f 	and.w	r2, r3, #31
 80043ba:	e017      	b.n	80043ec <HAL_ADC_ConfigChannel+0x3d8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2103      	movs	r1, #3
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe ffa8 	bl	8003318 <LL_ADC_GetOffsetChannel>
 80043c8:	4603      	mov	r3, r0
 80043ca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043ce:	fa93 f3a3 	rbit	r3, r3
 80043d2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80043d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043d6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80043d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80043de:	2320      	movs	r3, #32
 80043e0:	e003      	b.n	80043ea <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80043e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043e4:	fab3 f383 	clz	r3, r3
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d105      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x3f0>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	0e9b      	lsrs	r3, r3, #26
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	e011      	b.n	8004428 <HAL_ADC_ConfigChannel+0x414>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800440c:	fa93 f3a3 	rbit	r3, r3
 8004410:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004414:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800441c:	2320      	movs	r3, #32
 800441e:	e003      	b.n	8004428 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004422:	fab3 f383 	clz	r3, r3
 8004426:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004428:	429a      	cmp	r2, r3
 800442a:	d106      	bne.n	800443a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2200      	movs	r2, #0
 8004432:	2103      	movs	r1, #3
 8004434:	4618      	mov	r0, r3
 8004436:	f7fe ff85 	bl	8003344 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff f918 	bl	8003674 <LL_ADC_IsEnabled>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	f040 8140 	bne.w	80046cc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	6819      	ldr	r1, [r3, #0]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	461a      	mov	r2, r3
 800445a:	f7ff f855 	bl	8003508 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	4a8f      	ldr	r2, [pc, #572]	@ (80046a0 <HAL_ADC_ConfigChannel+0x68c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	f040 8131 	bne.w	80046cc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10b      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x47e>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	0e9b      	lsrs	r3, r3, #26
 8004480:	3301      	adds	r3, #1
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	2b09      	cmp	r3, #9
 8004488:	bf94      	ite	ls
 800448a:	2301      	movls	r3, #1
 800448c:	2300      	movhi	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	e019      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x4b2>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800449a:	fa93 f3a3 	rbit	r3, r3
 800449e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80044a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044a2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80044a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80044aa:	2320      	movs	r3, #32
 80044ac:	e003      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80044ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044b0:	fab3 f383 	clz	r3, r3
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	3301      	adds	r3, #1
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	2b09      	cmp	r3, #9
 80044be:	bf94      	ite	ls
 80044c0:	2301      	movls	r3, #1
 80044c2:	2300      	movhi	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d079      	beq.n	80045be <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d107      	bne.n	80044e6 <HAL_ADC_ConfigChannel+0x4d2>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	0e9b      	lsrs	r3, r3, #26
 80044dc:	3301      	adds	r3, #1
 80044de:	069b      	lsls	r3, r3, #26
 80044e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044e4:	e015      	b.n	8004512 <HAL_ADC_ConfigChannel+0x4fe>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044ee:	fa93 f3a3 	rbit	r3, r3
 80044f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80044f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80044f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80044fe:	2320      	movs	r3, #32
 8004500:	e003      	b.n	800450a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004504:	fab3 f383 	clz	r3, r3
 8004508:	b2db      	uxtb	r3, r3
 800450a:	3301      	adds	r3, #1
 800450c:	069b      	lsls	r3, r3, #26
 800450e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x51e>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	0e9b      	lsrs	r3, r3, #26
 8004524:	3301      	adds	r3, #1
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	2101      	movs	r1, #1
 800452c:	fa01 f303 	lsl.w	r3, r1, r3
 8004530:	e017      	b.n	8004562 <HAL_ADC_ConfigChannel+0x54e>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800453a:	fa93 f3a3 	rbit	r3, r3
 800453e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004542:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800454a:	2320      	movs	r3, #32
 800454c:	e003      	b.n	8004556 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800454e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004550:	fab3 f383 	clz	r3, r3
 8004554:	b2db      	uxtb	r3, r3
 8004556:	3301      	adds	r3, #1
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	2101      	movs	r1, #1
 800455e:	fa01 f303 	lsl.w	r3, r1, r3
 8004562:	ea42 0103 	orr.w	r1, r2, r3
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10a      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x574>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	0e9b      	lsrs	r3, r3, #26
 8004578:	3301      	adds	r3, #1
 800457a:	f003 021f 	and.w	r2, r3, #31
 800457e:	4613      	mov	r3, r2
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	4413      	add	r3, r2
 8004584:	051b      	lsls	r3, r3, #20
 8004586:	e018      	b.n	80045ba <HAL_ADC_ConfigChannel+0x5a6>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004590:	fa93 f3a3 	rbit	r3, r3
 8004594:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004598:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800459a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80045a0:	2320      	movs	r3, #32
 80045a2:	e003      	b.n	80045ac <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80045a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045a6:	fab3 f383 	clz	r3, r3
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	3301      	adds	r3, #1
 80045ae:	f003 021f 	and.w	r2, r3, #31
 80045b2:	4613      	mov	r3, r2
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	4413      	add	r3, r2
 80045b8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ba:	430b      	orrs	r3, r1
 80045bc:	e081      	b.n	80046c2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d107      	bne.n	80045da <HAL_ADC_ConfigChannel+0x5c6>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	0e9b      	lsrs	r3, r3, #26
 80045d0:	3301      	adds	r3, #1
 80045d2:	069b      	lsls	r3, r3, #26
 80045d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045d8:	e015      	b.n	8004606 <HAL_ADC_ConfigChannel+0x5f2>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e2:	fa93 f3a3 	rbit	r3, r3
 80045e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80045e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ea:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80045ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80045f2:	2320      	movs	r3, #32
 80045f4:	e003      	b.n	80045fe <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80045f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f8:	fab3 f383 	clz	r3, r3
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	3301      	adds	r3, #1
 8004600:	069b      	lsls	r3, r3, #26
 8004602:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x612>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	0e9b      	lsrs	r3, r3, #26
 8004618:	3301      	adds	r3, #1
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	2101      	movs	r1, #1
 8004620:	fa01 f303 	lsl.w	r3, r1, r3
 8004624:	e017      	b.n	8004656 <HAL_ADC_ConfigChannel+0x642>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	fa93 f3a3 	rbit	r3, r3
 8004632:	61fb      	str	r3, [r7, #28]
  return result;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800463e:	2320      	movs	r3, #32
 8004640:	e003      	b.n	800464a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	fab3 f383 	clz	r3, r3
 8004648:	b2db      	uxtb	r3, r3
 800464a:	3301      	adds	r3, #1
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	2101      	movs	r1, #1
 8004652:	fa01 f303 	lsl.w	r3, r1, r3
 8004656:	ea42 0103 	orr.w	r1, r2, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10d      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x66e>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	0e9b      	lsrs	r3, r3, #26
 800466c:	3301      	adds	r3, #1
 800466e:	f003 021f 	and.w	r2, r3, #31
 8004672:	4613      	mov	r3, r2
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	4413      	add	r3, r2
 8004678:	3b1e      	subs	r3, #30
 800467a:	051b      	lsls	r3, r3, #20
 800467c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004680:	e01e      	b.n	80046c0 <HAL_ADC_ConfigChannel+0x6ac>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	fa93 f3a3 	rbit	r3, r3
 800468e:	613b      	str	r3, [r7, #16]
  return result;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d104      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800469a:	2320      	movs	r3, #32
 800469c:	e006      	b.n	80046ac <HAL_ADC_ConfigChannel+0x698>
 800469e:	bf00      	nop
 80046a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	fab3 f383 	clz	r3, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	3301      	adds	r3, #1
 80046ae:	f003 021f 	and.w	r2, r3, #31
 80046b2:	4613      	mov	r3, r2
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	4413      	add	r3, r2
 80046b8:	3b1e      	subs	r3, #30
 80046ba:	051b      	lsls	r3, r3, #20
 80046bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046c0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046c6:	4619      	mov	r1, r3
 80046c8:	f7fe fef2 	bl	80034b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	4b3f      	ldr	r3, [pc, #252]	@ (80047d0 <HAL_ADC_ConfigChannel+0x7bc>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d071      	beq.n	80047bc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046d8:	483e      	ldr	r0, [pc, #248]	@ (80047d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80046da:	f7fe fdeb 	bl	80032b4 <LL_ADC_GetCommonPathInternalCh>
 80046de:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a3c      	ldr	r2, [pc, #240]	@ (80047d8 <HAL_ADC_ConfigChannel+0x7c4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_ADC_ConfigChannel+0x6e2>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a3a      	ldr	r2, [pc, #232]	@ (80047dc <HAL_ADC_ConfigChannel+0x7c8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d127      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d121      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800470a:	d157      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800470c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004710:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004714:	4619      	mov	r1, r3
 8004716:	482f      	ldr	r0, [pc, #188]	@ (80047d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004718:	f7fe fdb9 	bl	800328e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800471c:	4b30      	ldr	r3, [pc, #192]	@ (80047e0 <HAL_ADC_ConfigChannel+0x7cc>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	099b      	lsrs	r3, r3, #6
 8004722:	4a30      	ldr	r2, [pc, #192]	@ (80047e4 <HAL_ADC_ConfigChannel+0x7d0>)
 8004724:	fba2 2303 	umull	r2, r3, r2, r3
 8004728:	099b      	lsrs	r3, r3, #6
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	4613      	mov	r3, r2
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004736:	e002      	b.n	800473e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3b01      	subs	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f9      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004744:	e03a      	b.n	80047bc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a27      	ldr	r2, [pc, #156]	@ (80047e8 <HAL_ADC_ConfigChannel+0x7d4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d113      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004750:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004754:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10d      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a22      	ldr	r2, [pc, #136]	@ (80047ec <HAL_ADC_ConfigChannel+0x7d8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d02a      	beq.n	80047bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800476a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800476e:	4619      	mov	r1, r3
 8004770:	4818      	ldr	r0, [pc, #96]	@ (80047d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004772:	f7fe fd8c 	bl	800328e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004776:	e021      	b.n	80047bc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1c      	ldr	r2, [pc, #112]	@ (80047f0 <HAL_ADC_ConfigChannel+0x7dc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d11c      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d116      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a16      	ldr	r2, [pc, #88]	@ (80047ec <HAL_ADC_ConfigChannel+0x7d8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d011      	beq.n	80047bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800479c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047a0:	4619      	mov	r1, r3
 80047a2:	480c      	ldr	r0, [pc, #48]	@ (80047d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80047a4:	f7fe fd73 	bl	800328e <LL_ADC_SetCommonPathInternalCh>
 80047a8:	e008      	b.n	80047bc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ae:	f043 0220 	orr.w	r2, r3, #32
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80047c4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	37d8      	adds	r7, #216	@ 0xd8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	80080000 	.word	0x80080000
 80047d4:	50000300 	.word	0x50000300
 80047d8:	c3210000 	.word	0xc3210000
 80047dc:	90c00010 	.word	0x90c00010
 80047e0:	20000004 	.word	0x20000004
 80047e4:	053e2d63 	.word	0x053e2d63
 80047e8:	c7520000 	.word	0xc7520000
 80047ec:	50000100 	.word	0x50000100
 80047f0:	cb840000 	.word	0xcb840000

080047f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f7fe ff35 	bl	8003674 <LL_ADC_IsEnabled>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d169      	bne.n	80048e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	4b36      	ldr	r3, [pc, #216]	@ (80048f0 <ADC_Enable+0xfc>)
 8004818:	4013      	ands	r3, r2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00d      	beq.n	800483a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004822:	f043 0210 	orr.w	r2, r3, #16
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482e:	f043 0201 	orr.w	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e055      	b.n	80048e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe fef0 	bl	8003624 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004844:	482b      	ldr	r0, [pc, #172]	@ (80048f4 <ADC_Enable+0x100>)
 8004846:	f7fe fd35 	bl	80032b4 <LL_ADC_GetCommonPathInternalCh>
 800484a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800484c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004854:	4b28      	ldr	r3, [pc, #160]	@ (80048f8 <ADC_Enable+0x104>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	099b      	lsrs	r3, r3, #6
 800485a:	4a28      	ldr	r2, [pc, #160]	@ (80048fc <ADC_Enable+0x108>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	099b      	lsrs	r3, r3, #6
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	4613      	mov	r3, r2
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800486e:	e002      	b.n	8004876 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	3b01      	subs	r3, #1
 8004874:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f9      	bne.n	8004870 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800487c:	f7fe fcc6 	bl	800320c <HAL_GetTick>
 8004880:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004882:	e028      	b.n	80048d6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f7fe fef3 	bl	8003674 <LL_ADC_IsEnabled>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d104      	bne.n	800489e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7fe fec3 	bl	8003624 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800489e:	f7fe fcb5 	bl	800320c <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d914      	bls.n	80048d6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d00d      	beq.n	80048d6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048be:	f043 0210 	orr.w	r2, r3, #16
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ca:	f043 0201 	orr.w	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e007      	b.n	80048e6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d1cf      	bne.n	8004884 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	8000003f 	.word	0x8000003f
 80048f4:	50000300 	.word	0x50000300
 80048f8:	20000004 	.word	0x20000004
 80048fc:	053e2d63 	.word	0x053e2d63

08004900 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f7fe fec4 	bl	800369a <LL_ADC_IsDisableOngoing>
 8004912:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f7fe feab 	bl	8003674 <LL_ADC_IsEnabled>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d047      	beq.n	80049b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d144      	bne.n	80049b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 030d 	and.w	r3, r3, #13
 8004934:	2b01      	cmp	r3, #1
 8004936:	d10c      	bne.n	8004952 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f7fe fe85 	bl	800364c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2203      	movs	r2, #3
 8004948:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800494a:	f7fe fc5f 	bl	800320c <HAL_GetTick>
 800494e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004950:	e029      	b.n	80049a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004956:	f043 0210 	orr.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004962:	f043 0201 	orr.w	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e023      	b.n	80049b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800496e:	f7fe fc4d 	bl	800320c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d914      	bls.n	80049a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00d      	beq.n	80049a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498e:	f043 0210 	orr.w	r2, r3, #16
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800499a:	f043 0201 	orr.w	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e007      	b.n	80049b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1dc      	bne.n	800496e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d14b      	bne.n	8004a70 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d021      	beq.n	8004a36 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fe fd08 	bl	800340c <LL_ADC_REG_IsTriggerSourceSWStart>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d032      	beq.n	8004a68 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d12b      	bne.n	8004a68 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d11f      	bne.n	8004a68 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2c:	f043 0201 	orr.w	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a34:	e018      	b.n	8004a68 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d111      	bne.n	8004a68 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d105      	bne.n	8004a68 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a60:	f043 0201 	orr.w	r2, r3, #1
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7fd fac1 	bl	8001ff0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a6e:	e00e      	b.n	8004a8e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff fabf 	bl	8004000 <HAL_ADC_ErrorCallback>
}
 8004a82:	e004      	b.n	8004a8e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	4798      	blx	r3
}
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7ff fa97 	bl	8003fd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ad0:	f043 0204 	orr.w	r2, r3, #4
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7ff fa91 	bl	8004000 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <LL_ADC_IsEnabled>:
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <LL_ADC_IsEnabled+0x18>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e000      	b.n	8004b00 <LL_ADC_IsEnabled+0x1a>
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <LL_ADC_StartCalibration>:
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004b1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	609a      	str	r2, [r3, #8]
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <LL_ADC_IsCalibrationOnGoing>:
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b52:	d101      	bne.n	8004b58 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004b54:	2301      	movs	r3, #1
 8004b56:	e000      	b.n	8004b5a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <LL_ADC_REG_IsConversionOngoing>:
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d101      	bne.n	8004b7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_ADCEx_Calibration_Start+0x1c>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e04d      	b.n	8004c44 <HAL_ADCEx_Calibration_Start+0xb8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff fea5 	bl	8004900 <ADC_Disable>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d136      	bne.n	8004c2e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004bc8:	f023 0302 	bic.w	r3, r3, #2
 8004bcc:	f043 0202 	orr.w	r2, r3, #2
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6839      	ldr	r1, [r7, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff ff96 	bl	8004b0c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004be0:	e014      	b.n	8004c0c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	3301      	adds	r3, #1
 8004be6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4a18      	ldr	r2, [pc, #96]	@ (8004c4c <HAL_ADCEx_Calibration_Start+0xc0>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d90d      	bls.n	8004c0c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf4:	f023 0312 	bic.w	r3, r3, #18
 8004bf8:	f043 0210 	orr.w	r2, r3, #16
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e01b      	b.n	8004c44 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff ff94 	bl	8004b3e <LL_ADC_IsCalibrationOnGoing>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e2      	bne.n	8004be2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c20:	f023 0303 	bic.w	r3, r3, #3
 8004c24:	f043 0201 	orr.w	r2, r3, #1
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c2c:	e005      	b.n	8004c3a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c32:	f043 0210 	orr.w	r2, r3, #16
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	0004de01 	.word	0x0004de01

08004c50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b0a1      	sub	sp, #132	@ 0x84
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e08b      	b.n	8004dea <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004cda:	2300      	movs	r3, #0
 8004cdc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cea:	d102      	bne.n	8004cf2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004cec:	4b41      	ldr	r3, [pc, #260]	@ (8004df4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004cee:	60bb      	str	r3, [r7, #8]
 8004cf0:	e001      	b.n	8004cf6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10b      	bne.n	8004d14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d00:	f043 0220 	orr.w	r2, r3, #32
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e06a      	b.n	8004dea <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff ff25 	bl	8004b66 <LL_ADC_REG_IsConversionOngoing>
 8004d1c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff ff1f 	bl	8004b66 <LL_ADC_REG_IsConversionOngoing>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d14c      	bne.n	8004dc8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004d2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d149      	bne.n	8004dc8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d34:	4b30      	ldr	r3, [pc, #192]	@ (8004df8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004d36:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d028      	beq.n	8004d92 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	6859      	ldr	r1, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d52:	035b      	lsls	r3, r3, #13
 8004d54:	430b      	orrs	r3, r1
 8004d56:	431a      	orrs	r2, r3
 8004d58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d5c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d60:	f7ff fec1 	bl	8004ae6 <LL_ADC_IsEnabled>
 8004d64:	4604      	mov	r4, r0
 8004d66:	4823      	ldr	r0, [pc, #140]	@ (8004df4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d68:	f7ff febd 	bl	8004ae6 <LL_ADC_IsEnabled>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	4323      	orrs	r3, r4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d133      	bne.n	8004ddc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d7c:	f023 030f 	bic.w	r3, r3, #15
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	6811      	ldr	r1, [r2, #0]
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	6892      	ldr	r2, [r2, #8]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d8e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d90:	e024      	b.n	8004ddc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004d92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d9c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d9e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004da2:	f7ff fea0 	bl	8004ae6 <LL_ADC_IsEnabled>
 8004da6:	4604      	mov	r4, r0
 8004da8:	4812      	ldr	r0, [pc, #72]	@ (8004df4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004daa:	f7ff fe9c 	bl	8004ae6 <LL_ADC_IsEnabled>
 8004dae:	4603      	mov	r3, r0
 8004db0:	4323      	orrs	r3, r4
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d112      	bne.n	8004ddc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004db6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004dbe:	f023 030f 	bic.w	r3, r3, #15
 8004dc2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004dc4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004dc6:	e009      	b.n	8004ddc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dcc:	f043 0220 	orr.w	r2, r3, #32
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004dda:	e000      	b.n	8004dde <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ddc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004de6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3784      	adds	r7, #132	@ 0x84
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd90      	pop	{r4, r7, pc}
 8004df2:	bf00      	nop
 8004df4:	50000100 	.word	0x50000100
 8004df8:	50000300 	.word	0x50000300

08004dfc <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004e04:	4b05      	ldr	r3, [pc, #20]	@ (8004e1c <LL_EXTI_EnableIT_0_31+0x20>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4904      	ldr	r1, [pc, #16]	@ (8004e1c <LL_EXTI_EnableIT_0_31+0x20>)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	600b      	str	r3, [r1, #0]
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40010400 	.word	0x40010400

08004e20 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004e28:	4b06      	ldr	r3, [pc, #24]	@ (8004e44 <LL_EXTI_DisableIT_0_31+0x24>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	4904      	ldr	r1, [pc, #16]	@ (8004e44 <LL_EXTI_DisableIT_0_31+0x24>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	600b      	str	r3, [r1, #0]
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40010400 	.word	0x40010400

08004e48 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004e50:	4b05      	ldr	r3, [pc, #20]	@ (8004e68 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	4904      	ldr	r1, [pc, #16]	@ (8004e68 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	604b      	str	r3, [r1, #4]

}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	40010400 	.word	0x40010400

08004e6c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004e74:	4b06      	ldr	r3, [pc, #24]	@ (8004e90 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	4904      	ldr	r1, [pc, #16]	@ (8004e90 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	604b      	str	r3, [r1, #4]
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40010400 	.word	0x40010400

08004e94 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004e9c:	4b05      	ldr	r3, [pc, #20]	@ (8004eb4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	4904      	ldr	r1, [pc, #16]	@ (8004eb4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	608b      	str	r3, [r1, #8]

}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40010400 	.word	0x40010400

08004eb8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004ec0:	4b06      	ldr	r3, [pc, #24]	@ (8004edc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	4904      	ldr	r1, [pc, #16]	@ (8004edc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004eca:	4013      	ands	r3, r2
 8004ecc:	608b      	str	r3, [r1, #8]

}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40010400 	.word	0x40010400

08004ee0 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004ee8:	4b05      	ldr	r3, [pc, #20]	@ (8004f00 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	4904      	ldr	r1, [pc, #16]	@ (8004f00 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60cb      	str	r3, [r1, #12]
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	40010400 	.word	0x40010400

08004f04 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004f0c:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	43db      	mvns	r3, r3
 8004f14:	4904      	ldr	r1, [pc, #16]	@ (8004f28 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	60cb      	str	r3, [r1, #12]
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40010400 	.word	0x40010400

08004f2c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004f34:	4b07      	ldr	r3, [pc, #28]	@ (8004f54 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d101      	bne.n	8004f46 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	40010400 	.word	0x40010400

08004f58 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004f60:	4a04      	ldr	r2, [pc, #16]	@ (8004f74 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6153      	str	r3, [r2, #20]
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40010400 	.word	0x40010400

08004f78 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d102      	bne.n	8004f94 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	77fb      	strb	r3, [r7, #31]
 8004f92:	e0bc      	b.n	800510e <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fa2:	d102      	bne.n	8004faa <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	77fb      	strb	r3, [r7, #31]
 8004fa8:	e0b1      	b.n	800510e <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	7f5b      	ldrb	r3, [r3, #29]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d108      	bne.n	8004fc6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7fd fd1d 	bl	8002a00 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fd0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4b48      	ldr	r3, [pc, #288]	@ (8005118 <HAL_COMP_Init+0x1a0>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	6979      	ldr	r1, [r7, #20]
 8005000:	430b      	orrs	r3, r1
 8005002:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d016      	beq.n	8005040 <HAL_COMP_Init+0xc8>
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d113      	bne.n	8005040 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005018:	4b40      	ldr	r3, [pc, #256]	@ (800511c <HAL_COMP_Init+0x1a4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	099b      	lsrs	r3, r3, #6
 800501e:	4a40      	ldr	r2, [pc, #256]	@ (8005120 <HAL_COMP_Init+0x1a8>)
 8005020:	fba2 2303 	umull	r2, r3, r2, r3
 8005024:	099b      	lsrs	r3, r3, #6
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005032:	e002      	b.n	800503a <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3b01      	subs	r3, #1
 8005038:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f9      	bne.n	8005034 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a37      	ldr	r2, [pc, #220]	@ (8005124 <HAL_COMP_Init+0x1ac>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d012      	beq.n	8005070 <HAL_COMP_Init+0xf8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a36      	ldr	r2, [pc, #216]	@ (8005128 <HAL_COMP_Init+0x1b0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00a      	beq.n	800506a <HAL_COMP_Init+0xf2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a34      	ldr	r2, [pc, #208]	@ (800512c <HAL_COMP_Init+0x1b4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d102      	bne.n	8005064 <HAL_COMP_Init+0xec>
 800505e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005062:	e007      	b.n	8005074 <HAL_COMP_Init+0xfc>
 8005064:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005068:	e004      	b.n	8005074 <HAL_COMP_Init+0xfc>
 800506a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800506e:	e001      	b.n	8005074 <HAL_COMP_Init+0xfc>
 8005070:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005074:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d037      	beq.n	80050f2 <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800508e:	6938      	ldr	r0, [r7, #16]
 8005090:	f7ff ff00 	bl	8004e94 <LL_EXTI_EnableRisingTrig_0_31>
 8005094:	e002      	b.n	800509c <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005096:	6938      	ldr	r0, [r7, #16]
 8005098:	f7ff ff0e 	bl	8004eb8 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80050a8:	6938      	ldr	r0, [r7, #16]
 80050aa:	f7ff ff19 	bl	8004ee0 <LL_EXTI_EnableFallingTrig_0_31>
 80050ae:	e002      	b.n	80050b6 <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80050b0:	6938      	ldr	r0, [r7, #16]
 80050b2:	f7ff ff27 	bl	8004f04 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 80050b6:	6938      	ldr	r0, [r7, #16]
 80050b8:	f7ff ff4e 	bl	8004f58 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80050c8:	6938      	ldr	r0, [r7, #16]
 80050ca:	f7ff febd 	bl	8004e48 <LL_EXTI_EnableEvent_0_31>
 80050ce:	e002      	b.n	80050d6 <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 80050d0:	6938      	ldr	r0, [r7, #16]
 80050d2:	f7ff fecb 	bl	8004e6c <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 80050e2:	6938      	ldr	r0, [r7, #16]
 80050e4:	f7ff fe8a 	bl	8004dfc <LL_EXTI_EnableIT_0_31>
 80050e8:	e009      	b.n	80050fe <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 80050ea:	6938      	ldr	r0, [r7, #16]
 80050ec:	f7ff fe98 	bl	8004e20 <LL_EXTI_DisableIT_0_31>
 80050f0:	e005      	b.n	80050fe <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 80050f2:	6938      	ldr	r0, [r7, #16]
 80050f4:	f7ff feba 	bl	8004e6c <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 80050f8:	6938      	ldr	r0, [r7, #16]
 80050fa:	f7ff fe91 	bl	8004e20 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	7f5b      	ldrb	r3, [r3, #29]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d102      	bne.n	800510e <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800510e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3720      	adds	r7, #32
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	ff007e0f 	.word	0xff007e0f
 800511c:	20000004 	.word	0x20000004
 8005120:	053e2d63 	.word	0x053e2d63
 8005124:	40010200 	.word	0x40010200
 8005128:	40010204 	.word	0x40010204
 800512c:	40010208 	.word	0x40010208

08005130 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005138:	2300      	movs	r3, #0
 800513a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d102      	bne.n	800514c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	73fb      	strb	r3, [r7, #15]
 800514a:	e02e      	b.n	80051aa <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005156:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800515a:	d102      	bne.n	8005162 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
 8005160:	e023      	b.n	80051aa <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7f5b      	ldrb	r3, [r3, #29]
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	d11c      	bne.n	80051a6 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 8005182:	4b0d      	ldr	r3, [pc, #52]	@ (80051b8 <HAL_COMP_Start+0x88>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a0d      	ldr	r2, [pc, #52]	@ (80051bc <HAL_COMP_Start+0x8c>)
 8005188:	fba2 2303 	umull	r2, r3, r2, r3
 800518c:	0cda      	lsrs	r2, r3, #19
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005196:	e002      	b.n	800519e <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	3b01      	subs	r3, #1
 800519c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1f9      	bne.n	8005198 <HAL_COMP_Start+0x68>
 80051a4:	e001      	b.n	80051aa <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	20000004 	.word	0x20000004
 80051bc:	431bde83 	.word	0x431bde83

080051c0 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a17      	ldr	r2, [pc, #92]	@ (800522c <HAL_COMP_IRQHandler+0x6c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d012      	beq.n	80051f8 <HAL_COMP_IRQHandler+0x38>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a16      	ldr	r2, [pc, #88]	@ (8005230 <HAL_COMP_IRQHandler+0x70>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00a      	beq.n	80051f2 <HAL_COMP_IRQHandler+0x32>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a14      	ldr	r2, [pc, #80]	@ (8005234 <HAL_COMP_IRQHandler+0x74>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d102      	bne.n	80051ec <HAL_COMP_IRQHandler+0x2c>
 80051e6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80051ea:	e007      	b.n	80051fc <HAL_COMP_IRQHandler+0x3c>
 80051ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80051f0:	e004      	b.n	80051fc <HAL_COMP_IRQHandler+0x3c>
 80051f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80051f6:	e001      	b.n	80051fc <HAL_COMP_IRQHandler+0x3c>
 80051f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80051fc:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8005202:	68b8      	ldr	r0, [r7, #8]
 8005204:	f7ff fe92 	bl	8004f2c <LL_EXTI_IsActiveFlag_0_31>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 800520e:	2301      	movs	r3, #1
 8005210:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 8005218:	68b8      	ldr	r0, [r7, #8]
 800521a:	f7ff fe9d 	bl	8004f58 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fd f908 	bl	8002434 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8005224:	bf00      	nop
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40010200 	.word	0x40010200
 8005230:	40010204 	.word	0x40010204
 8005234:	40010208 	.word	0x40010208

08005238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005248:	4b0c      	ldr	r3, [pc, #48]	@ (800527c <__NVIC_SetPriorityGrouping+0x44>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005254:	4013      	ands	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005260:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800526a:	4a04      	ldr	r2, [pc, #16]	@ (800527c <__NVIC_SetPriorityGrouping+0x44>)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	60d3      	str	r3, [r2, #12]
}
 8005270:	bf00      	nop
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	e000ed00 	.word	0xe000ed00

08005280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005284:	4b04      	ldr	r3, [pc, #16]	@ (8005298 <__NVIC_GetPriorityGrouping+0x18>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	0a1b      	lsrs	r3, r3, #8
 800528a:	f003 0307 	and.w	r3, r3, #7
}
 800528e:	4618      	mov	r0, r3
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	e000ed00 	.word	0xe000ed00

0800529c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	db0b      	blt.n	80052c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	f003 021f 	and.w	r2, r3, #31
 80052b4:	4907      	ldr	r1, [pc, #28]	@ (80052d4 <__NVIC_EnableIRQ+0x38>)
 80052b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	2001      	movs	r0, #1
 80052be:	fa00 f202 	lsl.w	r2, r0, r2
 80052c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	e000e100 	.word	0xe000e100

080052d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	4603      	mov	r3, r0
 80052e0:	6039      	str	r1, [r7, #0]
 80052e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	db0a      	blt.n	8005302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	490c      	ldr	r1, [pc, #48]	@ (8005324 <__NVIC_SetPriority+0x4c>)
 80052f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f6:	0112      	lsls	r2, r2, #4
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	440b      	add	r3, r1
 80052fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005300:	e00a      	b.n	8005318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	b2da      	uxtb	r2, r3
 8005306:	4908      	ldr	r1, [pc, #32]	@ (8005328 <__NVIC_SetPriority+0x50>)
 8005308:	79fb      	ldrb	r3, [r7, #7]
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	3b04      	subs	r3, #4
 8005310:	0112      	lsls	r2, r2, #4
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	440b      	add	r3, r1
 8005316:	761a      	strb	r2, [r3, #24]
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	e000e100 	.word	0xe000e100
 8005328:	e000ed00 	.word	0xe000ed00

0800532c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800532c:	b480      	push	{r7}
 800532e:	b089      	sub	sp, #36	@ 0x24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f1c3 0307 	rsb	r3, r3, #7
 8005346:	2b04      	cmp	r3, #4
 8005348:	bf28      	it	cs
 800534a:	2304      	movcs	r3, #4
 800534c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	3304      	adds	r3, #4
 8005352:	2b06      	cmp	r3, #6
 8005354:	d902      	bls.n	800535c <NVIC_EncodePriority+0x30>
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	3b03      	subs	r3, #3
 800535a:	e000      	b.n	800535e <NVIC_EncodePriority+0x32>
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005360:	f04f 32ff 	mov.w	r2, #4294967295
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	43da      	mvns	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	401a      	ands	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005374:	f04f 31ff 	mov.w	r1, #4294967295
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	fa01 f303 	lsl.w	r3, r1, r3
 800537e:	43d9      	mvns	r1, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005384:	4313      	orrs	r3, r2
         );
}
 8005386:	4618      	mov	r0, r3
 8005388:	3724      	adds	r7, #36	@ 0x24
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3b01      	subs	r3, #1
 80053a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053a4:	d301      	bcc.n	80053aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053a6:	2301      	movs	r3, #1
 80053a8:	e00f      	b.n	80053ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053aa:	4a0a      	ldr	r2, [pc, #40]	@ (80053d4 <SysTick_Config+0x40>)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053b2:	210f      	movs	r1, #15
 80053b4:	f04f 30ff 	mov.w	r0, #4294967295
 80053b8:	f7ff ff8e 	bl	80052d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053bc:	4b05      	ldr	r3, [pc, #20]	@ (80053d4 <SysTick_Config+0x40>)
 80053be:	2200      	movs	r2, #0
 80053c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053c2:	4b04      	ldr	r3, [pc, #16]	@ (80053d4 <SysTick_Config+0x40>)
 80053c4:	2207      	movs	r2, #7
 80053c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	e000e010 	.word	0xe000e010

080053d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff ff29 	bl	8005238 <__NVIC_SetPriorityGrouping>
}
 80053e6:	bf00      	nop
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b086      	sub	sp, #24
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	4603      	mov	r3, r0
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	607a      	str	r2, [r7, #4]
 80053fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053fc:	f7ff ff40 	bl	8005280 <__NVIC_GetPriorityGrouping>
 8005400:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	6978      	ldr	r0, [r7, #20]
 8005408:	f7ff ff90 	bl	800532c <NVIC_EncodePriority>
 800540c:	4602      	mov	r2, r0
 800540e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005412:	4611      	mov	r1, r2
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff ff5f 	bl	80052d8 <__NVIC_SetPriority>
}
 800541a:	bf00      	nop
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	4603      	mov	r3, r0
 800542a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800542c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ff33 	bl	800529c <__NVIC_EnableIRQ>
}
 8005436:	bf00      	nop
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b082      	sub	sp, #8
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7ff ffa4 	bl	8005394 <SysTick_Config>
 800544c:	4603      	mov	r3, r0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b082      	sub	sp, #8
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e014      	b.n	8005492 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	791b      	ldrb	r3, [r3, #4]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d105      	bne.n	800547e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7fd fb1d 	bl	8002ab8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2202      	movs	r2, #2
 8005482:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e056      	b.n	800555e <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	795b      	ldrb	r3, [r3, #5]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_DAC_Start+0x20>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e050      	b.n	800555e <HAL_DAC_Start+0xc2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6819      	ldr	r1, [r3, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2201      	movs	r2, #1
 80054d6:	409a      	lsls	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054e0:	4b22      	ldr	r3, [pc, #136]	@ (800556c <HAL_DAC_Start+0xd0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	099b      	lsrs	r3, r3, #6
 80054e6:	4a22      	ldr	r2, [pc, #136]	@ (8005570 <HAL_DAC_Start+0xd4>)
 80054e8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ec:	099b      	lsrs	r3, r3, #6
 80054ee:	3301      	adds	r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80054f2:	e002      	b.n	80054fa <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1f9      	bne.n	80054f4 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10f      	bne.n	8005526 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005510:	2b02      	cmp	r3, #2
 8005512:	d11d      	bne.n	8005550 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0201 	orr.w	r2, r2, #1
 8005522:	605a      	str	r2, [r3, #4]
 8005524:	e014      	b.n	8005550 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	f003 0310 	and.w	r3, r3, #16
 8005536:	2102      	movs	r1, #2
 8005538:	fa01 f303 	lsl.w	r3, r1, r3
 800553c:	429a      	cmp	r2, r3
 800553e:	d107      	bne.n	8005550 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0202 	orr.w	r2, r2, #2
 800554e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20000004 	.word	0x20000004
 8005570:	053e2d63 	.word	0x053e2d63

08005574 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800558a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01d      	beq.n	80055d2 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d018      	beq.n	80055d2 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2204      	movs	r2, #4
 80055a4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f043 0201 	orr.w	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80055ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055ca:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f854 	bl	800567a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01d      	beq.n	8005618 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d018      	beq.n	8005618 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2204      	movs	r2, #4
 80055ea:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f043 0202 	orr.w	r2, r3, #2
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005600:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005610:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f9f6 	bl	8005a04 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e018      	b.n	800566e <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d105      	bne.n	800565a <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4413      	add	r3, r2
 8005654:	3308      	adds	r3, #8
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	e004      	b.n	8005664 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4413      	add	r3, r2
 8005660:	3314      	adds	r3, #20
 8005662:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	461a      	mov	r2, r3
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
	...

08005690 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	@ 0x28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_DAC_ConfigChannel+0x1c>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e1a1      	b.n	80059f4 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	795b      	ldrb	r3, [r3, #5]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_DAC_ConfigChannel+0x32>
 80056be:	2302      	movs	r3, #2
 80056c0:	e198      	b.n	80059f4 <HAL_DAC_ConfigChannel+0x364>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2202      	movs	r2, #2
 80056cc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d17a      	bne.n	80057cc <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80056d6:	f7fd fd99 	bl	800320c <HAL_GetTick>
 80056da:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d13d      	bne.n	800575e <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80056e2:	e018      	b.n	8005716 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80056e4:	f7fd fd92 	bl	800320c <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d911      	bls.n	8005716 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f043 0208 	orr.w	r2, r3, #8
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2203      	movs	r2, #3
 8005710:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e16e      	b.n	80059f4 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800571c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1df      	bne.n	80056e4 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800572c:	641a      	str	r2, [r3, #64]	@ 0x40
 800572e:	e020      	b.n	8005772 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005730:	f7fd fd6c 	bl	800320c <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b01      	cmp	r3, #1
 800573c:	d90f      	bls.n	800575e <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005744:	2b00      	cmp	r3, #0
 8005746:	da0a      	bge.n	800575e <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f043 0208 	orr.w	r2, r3, #8
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2203      	movs	r2, #3
 8005758:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e14a      	b.n	80059f4 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005764:	2b00      	cmp	r3, #0
 8005766:	dbe3      	blt.n	8005730 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005770:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f003 0310 	and.w	r3, r3, #16
 800577e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005782:	fa01 f303 	lsl.w	r3, r1, r3
 8005786:	43db      	mvns	r3, r3
 8005788:	ea02 0103 	and.w	r1, r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f003 0310 	and.w	r3, r3, #16
 8005796:	409a      	lsls	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	21ff      	movs	r1, #255	@ 0xff
 80057ae:	fa01 f303 	lsl.w	r3, r1, r3
 80057b2:	43db      	mvns	r3, r3
 80057b4:	ea02 0103 	and.w	r1, r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	409a      	lsls	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d11d      	bne.n	8005810 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057da:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	221f      	movs	r2, #31
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	43db      	mvns	r3, r3
 80057ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ec:	4013      	ands	r3, r2
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f003 0310 	and.w	r3, r3, #16
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005804:	4313      	orrs	r3, r2
 8005806:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800580e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005816:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	2207      	movs	r2, #7
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	43db      	mvns	r3, r3
 8005826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005828:	4013      	ands	r3, r2
 800582a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d102      	bne.n	800583a <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8005834:	2300      	movs	r3, #0
 8005836:	623b      	str	r3, [r7, #32]
 8005838:	e00f      	b.n	800585a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d102      	bne.n	8005848 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005842:	2301      	movs	r3, #1
 8005844:	623b      	str	r3, [r7, #32]
 8005846:	e008      	b.n	800585a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005850:	2301      	movs	r3, #1
 8005852:	623b      	str	r3, [r7, #32]
 8005854:	e001      	b.n	800585a <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005856:	2300      	movs	r3, #0
 8005858:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	6a3a      	ldr	r2, [r7, #32]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	43db      	mvns	r3, r3
 800587a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800587c:	4013      	ands	r3, r2
 800587e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	791b      	ldrb	r3, [r3, #4]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d102      	bne.n	800588e <HAL_DAC_ConfigChannel+0x1fe>
 8005888:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800588c:	e000      	b.n	8005890 <HAL_DAC_ConfigChannel+0x200>
 800588e:	2300      	movs	r3, #0
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	43db      	mvns	r3, r3
 80058a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a8:	4013      	ands	r3, r2
 80058aa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	795b      	ldrb	r3, [r3, #5]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d102      	bne.n	80058ba <HAL_DAC_ConfigChannel+0x22a>
 80058b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058b8:	e000      	b.n	80058bc <HAL_DAC_ConfigChannel+0x22c>
 80058ba:	2300      	movs	r3, #0
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d114      	bne.n	80058fc <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80058d2:	f001 fad3 	bl	8006e7c <HAL_RCC_GetHCLKFreq>
 80058d6:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4a48      	ldr	r2, [pc, #288]	@ (80059fc <HAL_DAC_ConfigChannel+0x36c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d904      	bls.n	80058ea <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80058e8:	e00f      	b.n	800590a <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	4a44      	ldr	r2, [pc, #272]	@ (8005a00 <HAL_DAC_ConfigChannel+0x370>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d90a      	bls.n	8005908 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058fa:	e006      	b.n	800590a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005902:	4313      	orrs	r3, r2
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24
 8005906:	e000      	b.n	800590a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005908:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005918:	4313      	orrs	r3, r2
 800591a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005922:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6819      	ldr	r1, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	43da      	mvns	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	400a      	ands	r2, r1
 8005940:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f003 0310 	and.w	r3, r3, #16
 8005950:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	43db      	mvns	r3, r3
 800595a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800595c:	4013      	ands	r3, r2
 800595e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005974:	4313      	orrs	r3, r2
 8005976:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800597e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6819      	ldr	r1, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	22c0      	movs	r2, #192	@ 0xc0
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	43da      	mvns	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	400a      	ands	r2, r1
 800599a:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	089b      	lsrs	r3, r3, #2
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	089b      	lsrs	r3, r3, #2
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80059ca:	fa01 f303 	lsl.w	r3, r1, r3
 80059ce:	43db      	mvns	r3, r3
 80059d0:	ea02 0103 	and.w	r1, r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	409a      	lsls	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80059f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3728      	adds	r7, #40	@ 0x28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	09896800 	.word	0x09896800
 8005a00:	04c4b400 	.word	0x04c4b400

08005a04 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e08d      	b.n	8005b46 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	4b47      	ldr	r3, [pc, #284]	@ (8005b50 <HAL_DMA_Init+0x138>)
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d80f      	bhi.n	8005a56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4b45      	ldr	r3, [pc, #276]	@ (8005b54 <HAL_DMA_Init+0x13c>)
 8005a3e:	4413      	add	r3, r2
 8005a40:	4a45      	ldr	r2, [pc, #276]	@ (8005b58 <HAL_DMA_Init+0x140>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	091b      	lsrs	r3, r3, #4
 8005a48:	009a      	lsls	r2, r3, #2
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a42      	ldr	r2, [pc, #264]	@ (8005b5c <HAL_DMA_Init+0x144>)
 8005a52:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a54:	e00e      	b.n	8005a74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4b40      	ldr	r3, [pc, #256]	@ (8005b60 <HAL_DMA_Init+0x148>)
 8005a5e:	4413      	add	r3, r2
 8005a60:	4a3d      	ldr	r2, [pc, #244]	@ (8005b58 <HAL_DMA_Init+0x140>)
 8005a62:	fba2 2303 	umull	r2, r3, r2, r3
 8005a66:	091b      	lsrs	r3, r3, #4
 8005a68:	009a      	lsls	r2, r3, #2
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a3c      	ldr	r2, [pc, #240]	@ (8005b64 <HAL_DMA_Init+0x14c>)
 8005a72:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fa76 	bl	8005fb8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ad4:	d102      	bne.n	8005adc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005af0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d010      	beq.n	8005b1c <HAL_DMA_Init+0x104>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d80c      	bhi.n	8005b1c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fa96 	bl	8006034 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b18:	605a      	str	r2, [r3, #4]
 8005b1a:	e008      	b.n	8005b2e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40020407 	.word	0x40020407
 8005b54:	bffdfff8 	.word	0xbffdfff8
 8005b58:	cccccccd 	.word	0xcccccccd
 8005b5c:	40020000 	.word	0x40020000
 8005b60:	bffdfbf8 	.word	0xbffdfbf8
 8005b64:	40020400 	.word	0x40020400

08005b68 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_DMA_Start_IT+0x20>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e066      	b.n	8005c56 <HAL_DMA_Start_IT+0xee>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d155      	bne.n	8005c48 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0201 	bic.w	r2, r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 f9bb 	bl	8005f3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d008      	beq.n	8005be0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 020e 	orr.w	r2, r2, #14
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e00f      	b.n	8005c00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0204 	bic.w	r2, r2, #4
 8005bee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 020a 	orr.w	r2, r2, #10
 8005bfe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d007      	beq.n	8005c1e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c1c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d007      	beq.n	8005c36 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c34:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0201 	orr.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	e005      	b.n	8005c54 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c50:	2302      	movs	r3, #2
 8005c52:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d005      	beq.n	8005c82 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2204      	movs	r2, #4
 8005c7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	73fb      	strb	r3, [r7, #15]
 8005c80:	e037      	b.n	8005cf2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 020e 	bic.w	r2, r2, #14
 8005c90:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ca0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0201 	bic.w	r2, r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb6:	f003 021f 	and.w	r2, r3, #31
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8005cc4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005cce:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00c      	beq.n	8005cf2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ce6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005cf0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d00d      	beq.n	8005d44 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	73fb      	strb	r3, [r7, #15]
 8005d42:	e047      	b.n	8005dd4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 020e 	bic.w	r2, r2, #14
 8005d52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0201 	bic.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d78:	f003 021f 	and.w	r2, r3, #31
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d80:	2101      	movs	r1, #1
 8005d82:	fa01 f202 	lsl.w	r2, r1, r2
 8005d86:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d90:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00c      	beq.n	8005db4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005da8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005db2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
    }
  }
  return status;
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	2204      	movs	r2, #4
 8005e00:	409a      	lsls	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4013      	ands	r3, r2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d026      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x7a>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d021      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d107      	bne.n	8005e32 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0204 	bic.w	r2, r2, #4
 8005e30:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e36:	f003 021f 	and.w	r2, r3, #31
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3e:	2104      	movs	r1, #4
 8005e40:	fa01 f202 	lsl.w	r2, r1, r2
 8005e44:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d071      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005e56:	e06c      	b.n	8005f32 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5c:	f003 031f 	and.w	r3, r3, #31
 8005e60:	2202      	movs	r2, #2
 8005e62:	409a      	lsls	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4013      	ands	r3, r2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d02e      	beq.n	8005eca <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d029      	beq.n	8005eca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10b      	bne.n	8005e9c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 020a 	bic.w	r2, r2, #10
 8005e92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea0:	f003 021f 	and.w	r2, r3, #31
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea8:	2102      	movs	r1, #2
 8005eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8005eae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d038      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005ec8:	e033      	b.n	8005f32 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ece:	f003 031f 	and.w	r3, r3, #31
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	409a      	lsls	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d02a      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d025      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 020e 	bic.w	r2, r2, #14
 8005ef6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005efc:	f003 021f 	and.w	r2, r3, #31
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f04:	2101      	movs	r1, #1
 8005f06:	fa01 f202 	lsl.w	r2, r1, r2
 8005f0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d004      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005f32:	bf00      	nop
 8005f34:	bf00      	nop
}
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f52:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d004      	beq.n	8005f66 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f64:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6a:	f003 021f 	and.w	r2, r3, #31
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f72:	2101      	movs	r1, #1
 8005f74:	fa01 f202 	lsl.w	r2, r1, r2
 8005f78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	2b10      	cmp	r3, #16
 8005f88:	d108      	bne.n	8005f9c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f9a:	e007      	b.n	8005fac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	60da      	str	r2, [r3, #12]
}
 8005fac:	bf00      	nop
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	4b16      	ldr	r3, [pc, #88]	@ (8006020 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d802      	bhi.n	8005fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005fcc:	4b15      	ldr	r3, [pc, #84]	@ (8006024 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	e001      	b.n	8005fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005fd2:	4b15      	ldr	r3, [pc, #84]	@ (8006028 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005fd4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	3b08      	subs	r3, #8
 8005fe2:	4a12      	ldr	r2, [pc, #72]	@ (800602c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe8:	091b      	lsrs	r3, r3, #4
 8005fea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff0:	089b      	lsrs	r3, r3, #2
 8005ff2:	009a      	lsls	r2, r3, #2
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a0b      	ldr	r2, [pc, #44]	@ (8006030 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006002:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f003 031f 	and.w	r3, r3, #31
 800600a:	2201      	movs	r2, #1
 800600c:	409a      	lsls	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006012:	bf00      	nop
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40020407 	.word	0x40020407
 8006024:	40020800 	.word	0x40020800
 8006028:	40020820 	.word	0x40020820
 800602c:	cccccccd 	.word	0xcccccccd
 8006030:	40020880 	.word	0x40020880

08006034 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4b0b      	ldr	r3, [pc, #44]	@ (8006074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006048:	4413      	add	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	461a      	mov	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a08      	ldr	r2, [pc, #32]	@ (8006078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006056:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3b01      	subs	r3, #1
 800605c:	f003 031f 	and.w	r3, r3, #31
 8006060:	2201      	movs	r2, #1
 8006062:	409a      	lsls	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006068:	bf00      	nop
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	1000823f 	.word	0x1000823f
 8006078:	40020940 	.word	0x40020940

0800607c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800608a:	e15a      	b.n	8006342 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	2101      	movs	r1, #1
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	fa01 f303 	lsl.w	r3, r1, r3
 8006098:	4013      	ands	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 814c 	beq.w	800633c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f003 0303 	and.w	r3, r3, #3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d005      	beq.n	80060bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d130      	bne.n	800611e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	2203      	movs	r2, #3
 80060c8:	fa02 f303 	lsl.w	r3, r2, r3
 80060cc:	43db      	mvns	r3, r3
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4013      	ands	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060f2:	2201      	movs	r2, #1
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4013      	ands	r3, r2
 8006100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	091b      	lsrs	r3, r3, #4
 8006108:	f003 0201 	and.w	r2, r3, #1
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f003 0303 	and.w	r3, r3, #3
 8006126:	2b03      	cmp	r3, #3
 8006128:	d017      	beq.n	800615a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	2203      	movs	r2, #3
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	43db      	mvns	r3, r3
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	4013      	ands	r3, r2
 8006140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f003 0303 	and.w	r3, r3, #3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d123      	bne.n	80061ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	08da      	lsrs	r2, r3, #3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3208      	adds	r2, #8
 800616e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006172:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	220f      	movs	r2, #15
 800617e:	fa02 f303 	lsl.w	r3, r2, r3
 8006182:	43db      	mvns	r3, r3
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4013      	ands	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	691a      	ldr	r2, [r3, #16]
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	08da      	lsrs	r2, r3, #3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3208      	adds	r2, #8
 80061a8:	6939      	ldr	r1, [r7, #16]
 80061aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	2203      	movs	r2, #3
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	43db      	mvns	r3, r3
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4013      	ands	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f003 0203 	and.w	r2, r3, #3
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 80a6 	beq.w	800633c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061f0:	4b5b      	ldr	r3, [pc, #364]	@ (8006360 <HAL_GPIO_Init+0x2e4>)
 80061f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061f4:	4a5a      	ldr	r2, [pc, #360]	@ (8006360 <HAL_GPIO_Init+0x2e4>)
 80061f6:	f043 0301 	orr.w	r3, r3, #1
 80061fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80061fc:	4b58      	ldr	r3, [pc, #352]	@ (8006360 <HAL_GPIO_Init+0x2e4>)
 80061fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	60bb      	str	r3, [r7, #8]
 8006206:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006208:	4a56      	ldr	r2, [pc, #344]	@ (8006364 <HAL_GPIO_Init+0x2e8>)
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	089b      	lsrs	r3, r3, #2
 800620e:	3302      	adds	r3, #2
 8006210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006214:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f003 0303 	and.w	r3, r3, #3
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	220f      	movs	r2, #15
 8006220:	fa02 f303 	lsl.w	r3, r2, r3
 8006224:	43db      	mvns	r3, r3
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	4013      	ands	r3, r2
 800622a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006232:	d01f      	beq.n	8006274 <HAL_GPIO_Init+0x1f8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a4c      	ldr	r2, [pc, #304]	@ (8006368 <HAL_GPIO_Init+0x2ec>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d019      	beq.n	8006270 <HAL_GPIO_Init+0x1f4>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a4b      	ldr	r2, [pc, #300]	@ (800636c <HAL_GPIO_Init+0x2f0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d013      	beq.n	800626c <HAL_GPIO_Init+0x1f0>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a4a      	ldr	r2, [pc, #296]	@ (8006370 <HAL_GPIO_Init+0x2f4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00d      	beq.n	8006268 <HAL_GPIO_Init+0x1ec>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a49      	ldr	r2, [pc, #292]	@ (8006374 <HAL_GPIO_Init+0x2f8>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d007      	beq.n	8006264 <HAL_GPIO_Init+0x1e8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a48      	ldr	r2, [pc, #288]	@ (8006378 <HAL_GPIO_Init+0x2fc>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d101      	bne.n	8006260 <HAL_GPIO_Init+0x1e4>
 800625c:	2305      	movs	r3, #5
 800625e:	e00a      	b.n	8006276 <HAL_GPIO_Init+0x1fa>
 8006260:	2306      	movs	r3, #6
 8006262:	e008      	b.n	8006276 <HAL_GPIO_Init+0x1fa>
 8006264:	2304      	movs	r3, #4
 8006266:	e006      	b.n	8006276 <HAL_GPIO_Init+0x1fa>
 8006268:	2303      	movs	r3, #3
 800626a:	e004      	b.n	8006276 <HAL_GPIO_Init+0x1fa>
 800626c:	2302      	movs	r3, #2
 800626e:	e002      	b.n	8006276 <HAL_GPIO_Init+0x1fa>
 8006270:	2301      	movs	r3, #1
 8006272:	e000      	b.n	8006276 <HAL_GPIO_Init+0x1fa>
 8006274:	2300      	movs	r3, #0
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	f002 0203 	and.w	r2, r2, #3
 800627c:	0092      	lsls	r2, r2, #2
 800627e:	4093      	lsls	r3, r2
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4313      	orrs	r3, r2
 8006284:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006286:	4937      	ldr	r1, [pc, #220]	@ (8006364 <HAL_GPIO_Init+0x2e8>)
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	089b      	lsrs	r3, r3, #2
 800628c:	3302      	adds	r3, #2
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006294:	4b39      	ldr	r3, [pc, #228]	@ (800637c <HAL_GPIO_Init+0x300>)
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	43db      	mvns	r3, r3
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4013      	ands	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80062b8:	4a30      	ldr	r2, [pc, #192]	@ (800637c <HAL_GPIO_Init+0x300>)
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80062be:	4b2f      	ldr	r3, [pc, #188]	@ (800637c <HAL_GPIO_Init+0x300>)
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	43db      	mvns	r3, r3
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4013      	ands	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80062e2:	4a26      	ldr	r2, [pc, #152]	@ (800637c <HAL_GPIO_Init+0x300>)
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80062e8:	4b24      	ldr	r3, [pc, #144]	@ (800637c <HAL_GPIO_Init+0x300>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	43db      	mvns	r3, r3
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	4013      	ands	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800630c:	4a1b      	ldr	r2, [pc, #108]	@ (800637c <HAL_GPIO_Init+0x300>)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006312:	4b1a      	ldr	r3, [pc, #104]	@ (800637c <HAL_GPIO_Init+0x300>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	43db      	mvns	r3, r3
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	4013      	ands	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006336:	4a11      	ldr	r2, [pc, #68]	@ (800637c <HAL_GPIO_Init+0x300>)
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	3301      	adds	r3, #1
 8006340:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	fa22 f303 	lsr.w	r3, r2, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	f47f ae9d 	bne.w	800608c <HAL_GPIO_Init+0x10>
  }
}
 8006352:	bf00      	nop
 8006354:	bf00      	nop
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	40021000 	.word	0x40021000
 8006364:	40010000 	.word	0x40010000
 8006368:	48000400 	.word	0x48000400
 800636c:	48000800 	.word	0x48000800
 8006370:	48000c00 	.word	0x48000c00
 8006374:	48001000 	.word	0x48001000
 8006378:	48001400 	.word	0x48001400
 800637c:	40010400 	.word	0x40010400

08006380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	807b      	strh	r3, [r7, #2]
 800638c:	4613      	mov	r3, r2
 800638e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006390:	787b      	ldrb	r3, [r7, #1]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006396:	887a      	ldrh	r2, [r7, #2]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800639c:	e002      	b.n	80063a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800639e:	887a      	ldrh	r2, [r7, #2]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d141      	bne.n	8006442 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063be:	4b4b      	ldr	r3, [pc, #300]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ca:	d131      	bne.n	8006430 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063cc:	4b47      	ldr	r3, [pc, #284]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063d2:	4a46      	ldr	r2, [pc, #280]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80063dc:	4b43      	ldr	r3, [pc, #268]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80063e4:	4a41      	ldr	r2, [pc, #260]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063ec:	4b40      	ldr	r3, [pc, #256]	@ (80064f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2232      	movs	r2, #50	@ 0x32
 80063f2:	fb02 f303 	mul.w	r3, r2, r3
 80063f6:	4a3f      	ldr	r2, [pc, #252]	@ (80064f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80063f8:	fba2 2303 	umull	r2, r3, r2, r3
 80063fc:	0c9b      	lsrs	r3, r3, #18
 80063fe:	3301      	adds	r3, #1
 8006400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006402:	e002      	b.n	800640a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3b01      	subs	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800640a:	4b38      	ldr	r3, [pc, #224]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006416:	d102      	bne.n	800641e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f2      	bne.n	8006404 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800641e:	4b33      	ldr	r3, [pc, #204]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800642a:	d158      	bne.n	80064de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e057      	b.n	80064e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006430:	4b2e      	ldr	r3, [pc, #184]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006436:	4a2d      	ldr	r2, [pc, #180]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800643c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006440:	e04d      	b.n	80064de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006448:	d141      	bne.n	80064ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800644a:	4b28      	ldr	r3, [pc, #160]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006456:	d131      	bne.n	80064bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006458:	4b24      	ldr	r3, [pc, #144]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800645a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800645e:	4a23      	ldr	r2, [pc, #140]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006464:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006468:	4b20      	ldr	r3, [pc, #128]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006470:	4a1e      	ldr	r2, [pc, #120]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006472:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006476:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006478:	4b1d      	ldr	r3, [pc, #116]	@ (80064f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2232      	movs	r2, #50	@ 0x32
 800647e:	fb02 f303 	mul.w	r3, r2, r3
 8006482:	4a1c      	ldr	r2, [pc, #112]	@ (80064f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006484:	fba2 2303 	umull	r2, r3, r2, r3
 8006488:	0c9b      	lsrs	r3, r3, #18
 800648a:	3301      	adds	r3, #1
 800648c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800648e:	e002      	b.n	8006496 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3b01      	subs	r3, #1
 8006494:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006496:	4b15      	ldr	r3, [pc, #84]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800649e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a2:	d102      	bne.n	80064aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1f2      	bne.n	8006490 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80064aa:	4b10      	ldr	r3, [pc, #64]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064b6:	d112      	bne.n	80064de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e011      	b.n	80064e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064bc:	4b0b      	ldr	r3, [pc, #44]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c2:	4a0a      	ldr	r2, [pc, #40]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80064cc:	e007      	b.n	80064de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80064ce:	4b07      	ldr	r3, [pc, #28]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80064d6:	4a05      	ldr	r2, [pc, #20]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80064dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	40007000 	.word	0x40007000
 80064f0:	20000004 	.word	0x20000004
 80064f4:	431bde83 	.word	0x431bde83

080064f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80064fc:	4b05      	ldr	r3, [pc, #20]	@ (8006514 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	4a04      	ldr	r2, [pc, #16]	@ (8006514 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006502:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006506:	6093      	str	r3, [r2, #8]
}
 8006508:	bf00      	nop
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40007000 	.word	0x40007000

08006518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e300      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d077      	beq.n	8006626 <HAL_RCC_OscConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006536:	4b98      	ldr	r3, [pc, #608]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 030c 	and.w	r3, r3, #12
 800653e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006540:	4b95      	ldr	r3, [pc, #596]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	2b0c      	cmp	r3, #12
 800654e:	d102      	bne.n	8006556 <HAL_RCC_OscConfig+0x3e>
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2b03      	cmp	r3, #3
 8006554:	d002      	beq.n	800655c <HAL_RCC_OscConfig+0x44>
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b08      	cmp	r3, #8
 800655a:	d10b      	bne.n	8006574 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800655c:	4b8e      	ldr	r3, [pc, #568]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d05d      	beq.n	8006624 <HAL_RCC_OscConfig+0x10c>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d159      	bne.n	8006624 <HAL_RCC_OscConfig+0x10c>
      {
        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e2db      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800657c:	d106      	bne.n	800658c <HAL_RCC_OscConfig+0x74>
 800657e:	4b86      	ldr	r3, [pc, #536]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a85      	ldr	r2, [pc, #532]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 8006584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	e01d      	b.n	80065c8 <HAL_RCC_OscConfig+0xb0>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006594:	d10c      	bne.n	80065b0 <HAL_RCC_OscConfig+0x98>
 8006596:	4b80      	ldr	r3, [pc, #512]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a7f      	ldr	r2, [pc, #508]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 800659c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	4b7d      	ldr	r3, [pc, #500]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 80065a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	e00b      	b.n	80065c8 <HAL_RCC_OscConfig+0xb0>
 80065b0:	4b79      	ldr	r3, [pc, #484]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a78      	ldr	r2, [pc, #480]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 80065b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	4b76      	ldr	r3, [pc, #472]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a75      	ldr	r2, [pc, #468]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 80065c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d014      	beq.n	80065fa <HAL_RCC_OscConfig+0xe2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d0:	f7fc fe1c 	bl	800320c <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065d6:	e009      	b.n	80065ec <HAL_RCC_OscConfig+0xd4>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065d8:	f7fc fe18 	bl	800320c <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e29f      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065ec:	4b6a      	ldr	r3, [pc, #424]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0ef      	beq.n	80065d8 <HAL_RCC_OscConfig+0xc0>
 80065f8:	e015      	b.n	8006626 <HAL_RCC_OscConfig+0x10e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fa:	f7fc fe07 	bl	800320c <HAL_GetTick>
 80065fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006600:	e009      	b.n	8006616 <HAL_RCC_OscConfig+0xfe>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006602:	f7fc fe03 	bl	800320c <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e28a      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006616:	4b60      	ldr	r3, [pc, #384]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1ef      	bne.n	8006602 <HAL_RCC_OscConfig+0xea>
 8006622:	e000      	b.n	8006626 <HAL_RCC_OscConfig+0x10e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d075      	beq.n	800671e <HAL_RCC_OscConfig+0x206>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006632:	4b59      	ldr	r3, [pc, #356]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 030c 	and.w	r3, r3, #12
 800663a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800663c:	4b56      	ldr	r3, [pc, #344]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	2b0c      	cmp	r3, #12
 800664a:	d102      	bne.n	8006652 <HAL_RCC_OscConfig+0x13a>
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2b02      	cmp	r3, #2
 8006650:	d002      	beq.n	8006658 <HAL_RCC_OscConfig+0x140>
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	2b04      	cmp	r3, #4
 8006656:	d11f      	bne.n	8006698 <HAL_RCC_OscConfig+0x180>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006658:	4b4f      	ldr	r3, [pc, #316]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <HAL_RCC_OscConfig+0x158>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_RCC_OscConfig+0x158>
      {
        return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e25d      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006670:	4b49      	ldr	r3, [pc, #292]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	061b      	lsls	r3, r3, #24
 800667e:	4946      	ldr	r1, [pc, #280]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 8006680:	4313      	orrs	r3, r2
 8006682:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006684:	4b45      	ldr	r3, [pc, #276]	@ (800679c <HAL_RCC_OscConfig+0x284>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f7fc fd73 	bl	8003174 <HAL_InitTick>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d043      	beq.n	800671c <HAL_RCC_OscConfig+0x204>
        {
          return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e249      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d023      	beq.n	80066e8 <HAL_RCC_OscConfig+0x1d0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066a0:	4b3d      	ldr	r3, [pc, #244]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a3c      	ldr	r2, [pc, #240]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 80066a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ac:	f7fc fdae 	bl	800320c <HAL_GetTick>
 80066b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066b2:	e008      	b.n	80066c6 <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066b4:	f7fc fdaa 	bl	800320c <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e232      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066c6:	4b34      	ldr	r3, [pc, #208]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0f0      	beq.n	80066b4 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066d2:	4b31      	ldr	r3, [pc, #196]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	061b      	lsls	r3, r3, #24
 80066e0:	492d      	ldr	r1, [pc, #180]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	604b      	str	r3, [r1, #4]
 80066e6:	e01a      	b.n	800671e <HAL_RCC_OscConfig+0x206>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 80066ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f4:	f7fc fd8a 	bl	800320c <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066fc:	f7fc fd86 	bl	800320c <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e20e      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800670e:	4b22      	ldr	r3, [pc, #136]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1f0      	bne.n	80066fc <HAL_RCC_OscConfig+0x1e4>
 800671a:	e000      	b.n	800671e <HAL_RCC_OscConfig+0x206>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800671c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d041      	beq.n	80067ae <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d01c      	beq.n	800676c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006732:	4b19      	ldr	r3, [pc, #100]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 8006734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006738:	4a17      	ldr	r2, [pc, #92]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006742:	f7fc fd63 	bl	800320c <HAL_GetTick>
 8006746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006748:	e008      	b.n	800675c <HAL_RCC_OscConfig+0x244>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800674a:	f7fc fd5f 	bl	800320c <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <HAL_RCC_OscConfig+0x244>
        {
          return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e1e7      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800675c:	4b0e      	ldr	r3, [pc, #56]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 800675e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0ef      	beq.n	800674a <HAL_RCC_OscConfig+0x232>
 800676a:	e020      	b.n	80067ae <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800676c:	4b0a      	ldr	r3, [pc, #40]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 800676e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006772:	4a09      	ldr	r2, [pc, #36]	@ (8006798 <HAL_RCC_OscConfig+0x280>)
 8006774:	f023 0301 	bic.w	r3, r3, #1
 8006778:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677c:	f7fc fd46 	bl	800320c <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006782:	e00d      	b.n	80067a0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006784:	f7fc fd42 	bl	800320c <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d906      	bls.n	80067a0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e1ca      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
 8006796:	bf00      	nop
 8006798:	40021000 	.word	0x40021000
 800679c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067a0:	4b8c      	ldr	r3, [pc, #560]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 80067a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1ea      	bne.n	8006784 <HAL_RCC_OscConfig+0x26c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0304 	and.w	r3, r3, #4
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 80a6 	beq.w	8006908 <HAL_RCC_OscConfig+0x3f0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067bc:	2300      	movs	r3, #0
 80067be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80067c0:	4b84      	ldr	r3, [pc, #528]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 80067c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_RCC_OscConfig+0x2b8>
 80067cc:	2301      	movs	r3, #1
 80067ce:	e000      	b.n	80067d2 <HAL_RCC_OscConfig+0x2ba>
 80067d0:	2300      	movs	r3, #0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00d      	beq.n	80067f2 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067d6:	4b7f      	ldr	r3, [pc, #508]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 80067d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067da:	4a7e      	ldr	r2, [pc, #504]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 80067dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80067e2:	4b7c      	ldr	r3, [pc, #496]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 80067e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80067ee:	2301      	movs	r3, #1
 80067f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067f2:	4b79      	ldr	r3, [pc, #484]	@ (80069d8 <HAL_RCC_OscConfig+0x4c0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d118      	bne.n	8006830 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067fe:	4b76      	ldr	r3, [pc, #472]	@ (80069d8 <HAL_RCC_OscConfig+0x4c0>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a75      	ldr	r2, [pc, #468]	@ (80069d8 <HAL_RCC_OscConfig+0x4c0>)
 8006804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800680a:	f7fc fcff 	bl	800320c <HAL_GetTick>
 800680e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006810:	e008      	b.n	8006824 <HAL_RCC_OscConfig+0x30c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006812:	f7fc fcfb 	bl	800320c <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e183      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006824:	4b6c      	ldr	r3, [pc, #432]	@ (80069d8 <HAL_RCC_OscConfig+0x4c0>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0f0      	beq.n	8006812 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d108      	bne.n	800684a <HAL_RCC_OscConfig+0x332>
 8006838:	4b66      	ldr	r3, [pc, #408]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 800683a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800683e:	4a65      	ldr	r2, [pc, #404]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 8006840:	f043 0301 	orr.w	r3, r3, #1
 8006844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006848:	e024      	b.n	8006894 <HAL_RCC_OscConfig+0x37c>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2b05      	cmp	r3, #5
 8006850:	d110      	bne.n	8006874 <HAL_RCC_OscConfig+0x35c>
 8006852:	4b60      	ldr	r3, [pc, #384]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 8006854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006858:	4a5e      	ldr	r2, [pc, #376]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 800685a:	f043 0304 	orr.w	r3, r3, #4
 800685e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006862:	4b5c      	ldr	r3, [pc, #368]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 8006864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006868:	4a5a      	ldr	r2, [pc, #360]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 800686a:	f043 0301 	orr.w	r3, r3, #1
 800686e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006872:	e00f      	b.n	8006894 <HAL_RCC_OscConfig+0x37c>
 8006874:	4b57      	ldr	r3, [pc, #348]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 8006876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687a:	4a56      	ldr	r2, [pc, #344]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 800687c:	f023 0301 	bic.w	r3, r3, #1
 8006880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006884:	4b53      	ldr	r3, [pc, #332]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 8006886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800688a:	4a52      	ldr	r2, [pc, #328]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 800688c:	f023 0304 	bic.w	r3, r3, #4
 8006890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d016      	beq.n	80068ca <HAL_RCC_OscConfig+0x3b2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800689c:	f7fc fcb6 	bl	800320c <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068a2:	e00a      	b.n	80068ba <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068a4:	f7fc fcb2 	bl	800320c <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e138      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068ba:	4b46      	ldr	r3, [pc, #280]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 80068bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0ed      	beq.n	80068a4 <HAL_RCC_OscConfig+0x38c>
 80068c8:	e015      	b.n	80068f6 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ca:	f7fc fc9f 	bl	800320c <HAL_GetTick>
 80068ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068d0:	e00a      	b.n	80068e8 <HAL_RCC_OscConfig+0x3d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d2:	f7fc fc9b 	bl	800320c <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d901      	bls.n	80068e8 <HAL_RCC_OscConfig+0x3d0>
        {
          return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e121      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068e8:	4b3a      	ldr	r3, [pc, #232]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 80068ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1ed      	bne.n	80068d2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068f6:	7ffb      	ldrb	r3, [r7, #31]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d105      	bne.n	8006908 <HAL_RCC_OscConfig+0x3f0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068fc:	4b35      	ldr	r3, [pc, #212]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 80068fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006900:	4a34      	ldr	r2, [pc, #208]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 8006902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006906:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	d03c      	beq.n	800698e <HAL_RCC_OscConfig+0x476>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01c      	beq.n	8006956 <HAL_RCC_OscConfig+0x43e>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800691c:	4b2d      	ldr	r3, [pc, #180]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 800691e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006922:	4a2c      	ldr	r2, [pc, #176]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 8006924:	f043 0301 	orr.w	r3, r3, #1
 8006928:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692c:	f7fc fc6e 	bl	800320c <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x42e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006934:	f7fc fc6a 	bl	800320c <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x42e>
        {
          return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e0f2      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006946:	4b23      	ldr	r3, [pc, #140]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 8006948:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0ef      	beq.n	8006934 <HAL_RCC_OscConfig+0x41c>
 8006954:	e01b      	b.n	800698e <HAL_RCC_OscConfig+0x476>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006956:	4b1f      	ldr	r3, [pc, #124]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 8006958:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800695c:	4a1d      	ldr	r2, [pc, #116]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006966:	f7fc fc51 	bl	800320c <HAL_GetTick>
 800696a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800696c:	e008      	b.n	8006980 <HAL_RCC_OscConfig+0x468>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800696e:	f7fc fc4d 	bl	800320c <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d901      	bls.n	8006980 <HAL_RCC_OscConfig+0x468>
        {
          return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e0d5      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006980:	4b14      	ldr	r3, [pc, #80]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 8006982:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1ef      	bne.n	800696e <HAL_RCC_OscConfig+0x456>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 80c9 	beq.w	8006b2a <HAL_RCC_OscConfig+0x612>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006998:	4b0e      	ldr	r3, [pc, #56]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f003 030c 	and.w	r3, r3, #12
 80069a0:	2b0c      	cmp	r3, #12
 80069a2:	f000 8083 	beq.w	8006aac <HAL_RCC_OscConfig+0x594>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d15e      	bne.n	8006a6c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ae:	4b09      	ldr	r3, [pc, #36]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a08      	ldr	r2, [pc, #32]	@ (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 80069b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ba:	f7fc fc27 	bl	800320c <HAL_GetTick>
 80069be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069c0:	e00c      	b.n	80069dc <HAL_RCC_OscConfig+0x4c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c2:	f7fc fc23 	bl	800320c <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d905      	bls.n	80069dc <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e0ab      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
 80069d4:	40021000 	.word	0x40021000
 80069d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069dc:	4b55      	ldr	r3, [pc, #340]	@ (8006b34 <HAL_RCC_OscConfig+0x61c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1ec      	bne.n	80069c2 <HAL_RCC_OscConfig+0x4aa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069e8:	4b52      	ldr	r3, [pc, #328]	@ (8006b34 <HAL_RCC_OscConfig+0x61c>)
 80069ea:	68da      	ldr	r2, [r3, #12]
 80069ec:	4b52      	ldr	r3, [pc, #328]	@ (8006b38 <HAL_RCC_OscConfig+0x620>)
 80069ee:	4013      	ands	r3, r2
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	6a11      	ldr	r1, [r2, #32]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069f8:	3a01      	subs	r2, #1
 80069fa:	0112      	lsls	r2, r2, #4
 80069fc:	4311      	orrs	r1, r2
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006a02:	0212      	lsls	r2, r2, #8
 8006a04:	4311      	orrs	r1, r2
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006a0a:	0852      	lsrs	r2, r2, #1
 8006a0c:	3a01      	subs	r2, #1
 8006a0e:	0552      	lsls	r2, r2, #21
 8006a10:	4311      	orrs	r1, r2
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006a16:	0852      	lsrs	r2, r2, #1
 8006a18:	3a01      	subs	r2, #1
 8006a1a:	0652      	lsls	r2, r2, #25
 8006a1c:	4311      	orrs	r1, r2
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a22:	06d2      	lsls	r2, r2, #27
 8006a24:	430a      	orrs	r2, r1
 8006a26:	4943      	ldr	r1, [pc, #268]	@ (8006b34 <HAL_RCC_OscConfig+0x61c>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a2c:	4b41      	ldr	r3, [pc, #260]	@ (8006b34 <HAL_RCC_OscConfig+0x61c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a40      	ldr	r2, [pc, #256]	@ (8006b34 <HAL_RCC_OscConfig+0x61c>)
 8006a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a38:	4b3e      	ldr	r3, [pc, #248]	@ (8006b34 <HAL_RCC_OscConfig+0x61c>)
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8006b34 <HAL_RCC_OscConfig+0x61c>)
 8006a3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a44:	f7fc fbe2 	bl	800320c <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a4c:	f7fc fbde 	bl	800320c <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e066      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a5e:	4b35      	ldr	r3, [pc, #212]	@ (8006b34 <HAL_RCC_OscConfig+0x61c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d0f0      	beq.n	8006a4c <HAL_RCC_OscConfig+0x534>
 8006a6a:	e05e      	b.n	8006b2a <HAL_RCC_OscConfig+0x612>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a6c:	4b31      	ldr	r3, [pc, #196]	@ (8006b34 <HAL_RCC_OscConfig+0x61c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a30      	ldr	r2, [pc, #192]	@ (8006b34 <HAL_RCC_OscConfig+0x61c>)
 8006a72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fc fbc8 	bl	800320c <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x57a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a80:	f7fc fbc4 	bl	800320c <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x57a>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e04c      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a92:	4b28      	ldr	r3, [pc, #160]	@ (8006b34 <HAL_RCC_OscConfig+0x61c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f0      	bne.n	8006a80 <HAL_RCC_OscConfig+0x568>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a9e:	4b25      	ldr	r3, [pc, #148]	@ (8006b34 <HAL_RCC_OscConfig+0x61c>)
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	4924      	ldr	r1, [pc, #144]	@ (8006b34 <HAL_RCC_OscConfig+0x61c>)
 8006aa4:	4b25      	ldr	r3, [pc, #148]	@ (8006b3c <HAL_RCC_OscConfig+0x624>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	60cb      	str	r3, [r1, #12]
 8006aaa:	e03e      	b.n	8006b2a <HAL_RCC_OscConfig+0x612>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e039      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8006b34 <HAL_RCC_OscConfig+0x61c>)
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f003 0203 	and.w	r2, r3, #3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d12c      	bne.n	8006b26 <HAL_RCC_OscConfig+0x60e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d123      	bne.n	8006b26 <HAL_RCC_OscConfig+0x60e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d11b      	bne.n	8006b26 <HAL_RCC_OscConfig+0x60e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d113      	bne.n	8006b26 <HAL_RCC_OscConfig+0x60e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b08:	085b      	lsrs	r3, r3, #1
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d109      	bne.n	8006b26 <HAL_RCC_OscConfig+0x60e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d001      	beq.n	8006b2a <HAL_RCC_OscConfig+0x612>
      {
        return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e000      	b.n	8006b2c <HAL_RCC_OscConfig+0x614>
      }
    }
  }
  }

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3720      	adds	r7, #32
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40021000 	.word	0x40021000
 8006b38:	019f800c 	.word	0x019f800c
 8006b3c:	feeefffc 	.word	0xfeeefffc

08006b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e11e      	b.n	8006d96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b58:	4b91      	ldr	r3, [pc, #580]	@ (8006da0 <HAL_RCC_ClockConfig+0x260>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d910      	bls.n	8006b88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b66:	4b8e      	ldr	r3, [pc, #568]	@ (8006da0 <HAL_RCC_ClockConfig+0x260>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f023 020f 	bic.w	r2, r3, #15
 8006b6e:	498c      	ldr	r1, [pc, #560]	@ (8006da0 <HAL_RCC_ClockConfig+0x260>)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b76:	4b8a      	ldr	r3, [pc, #552]	@ (8006da0 <HAL_RCC_ClockConfig+0x260>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d001      	beq.n	8006b88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e106      	b.n	8006d96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d073      	beq.n	8006c7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d129      	bne.n	8006bf0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b9c:	4b81      	ldr	r3, [pc, #516]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e0f4      	b.n	8006d96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006bac:	f000 f99e 	bl	8006eec <RCC_GetSysClockFreqFromPLLSource>
 8006bb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	4a7c      	ldr	r2, [pc, #496]	@ (8006da8 <HAL_RCC_ClockConfig+0x268>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d93f      	bls.n	8006c3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006bba:	4b7a      	ldr	r3, [pc, #488]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d009      	beq.n	8006bda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d033      	beq.n	8006c3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d12f      	bne.n	8006c3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bda:	4b72      	ldr	r3, [pc, #456]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006be2:	4a70      	ldr	r2, [pc, #448]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006be8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006bea:	2380      	movs	r3, #128	@ 0x80
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	e024      	b.n	8006c3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d107      	bne.n	8006c08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d109      	bne.n	8006c18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e0c6      	b.n	8006d96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c08:	4b66      	ldr	r3, [pc, #408]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e0be      	b.n	8006d96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006c18:	f000 f8ce 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 8006c1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4a61      	ldr	r2, [pc, #388]	@ (8006da8 <HAL_RCC_ClockConfig+0x268>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d909      	bls.n	8006c3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006c26:	4b5f      	ldr	r3, [pc, #380]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c2e:	4a5d      	ldr	r2, [pc, #372]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006c36:	2380      	movs	r3, #128	@ 0x80
 8006c38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c3a:	4b5a      	ldr	r3, [pc, #360]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f023 0203 	bic.w	r2, r3, #3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	4957      	ldr	r1, [pc, #348]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c4c:	f7fc fade 	bl	800320c <HAL_GetTick>
 8006c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c52:	e00a      	b.n	8006c6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c54:	f7fc fada 	bl	800320c <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e095      	b.n	8006d96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 020c 	and.w	r2, r3, #12
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d1eb      	bne.n	8006c54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d023      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c94:	4b43      	ldr	r3, [pc, #268]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	4a42      	ldr	r2, [pc, #264]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006c9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d007      	beq.n	8006cbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006cac:	4b3d      	ldr	r3, [pc, #244]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006cb4:	4a3b      	ldr	r2, [pc, #236]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006cb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006cba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cbc:	4b39      	ldr	r3, [pc, #228]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	4936      	ldr	r1, [pc, #216]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	608b      	str	r3, [r1, #8]
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	2b80      	cmp	r3, #128	@ 0x80
 8006cd4:	d105      	bne.n	8006ce2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006cd6:	4b33      	ldr	r3, [pc, #204]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	4a32      	ldr	r2, [pc, #200]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006cdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ce0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8006da0 <HAL_RCC_ClockConfig+0x260>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d21d      	bcs.n	8006d2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8006da0 <HAL_RCC_ClockConfig+0x260>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f023 020f 	bic.w	r2, r3, #15
 8006cf8:	4929      	ldr	r1, [pc, #164]	@ (8006da0 <HAL_RCC_ClockConfig+0x260>)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006d00:	f7fc fa84 	bl	800320c <HAL_GetTick>
 8006d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d06:	e00a      	b.n	8006d1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d08:	f7fc fa80 	bl	800320c <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e03b      	b.n	8006d96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d1e:	4b20      	ldr	r3, [pc, #128]	@ (8006da0 <HAL_RCC_ClockConfig+0x260>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d1ed      	bne.n	8006d08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d008      	beq.n	8006d4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d38:	4b1a      	ldr	r3, [pc, #104]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	4917      	ldr	r1, [pc, #92]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0308 	and.w	r3, r3, #8
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d009      	beq.n	8006d6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d56:	4b13      	ldr	r3, [pc, #76]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	490f      	ldr	r1, [pc, #60]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d6a:	f000 f825 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	4b0c      	ldr	r3, [pc, #48]	@ (8006da4 <HAL_RCC_ClockConfig+0x264>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	091b      	lsrs	r3, r3, #4
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	490c      	ldr	r1, [pc, #48]	@ (8006dac <HAL_RCC_ClockConfig+0x26c>)
 8006d7c:	5ccb      	ldrb	r3, [r1, r3]
 8006d7e:	f003 031f 	and.w	r3, r3, #31
 8006d82:	fa22 f303 	lsr.w	r3, r2, r3
 8006d86:	4a0a      	ldr	r2, [pc, #40]	@ (8006db0 <HAL_RCC_ClockConfig+0x270>)
 8006d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006db4 <HAL_RCC_ClockConfig+0x274>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fc f9f0 	bl	8003174 <HAL_InitTick>
 8006d94:	4603      	mov	r3, r0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	40022000 	.word	0x40022000
 8006da4:	40021000 	.word	0x40021000
 8006da8:	04c4b400 	.word	0x04c4b400
 8006dac:	0800c21c 	.word	0x0800c21c
 8006db0:	20000004 	.word	0x20000004
 8006db4:	20000008 	.word	0x20000008

08006db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f003 030c 	and.w	r3, r3, #12
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d102      	bne.n	8006dd0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006dca:	4b2a      	ldr	r3, [pc, #168]	@ (8006e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006dcc:	613b      	str	r3, [r7, #16]
 8006dce:	e047      	b.n	8006e60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006dd0:	4b27      	ldr	r3, [pc, #156]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 030c 	and.w	r3, r3, #12
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d102      	bne.n	8006de2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ddc:	4b26      	ldr	r3, [pc, #152]	@ (8006e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006dde:	613b      	str	r3, [r7, #16]
 8006de0:	e03e      	b.n	8006e60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006de2:	4b23      	ldr	r3, [pc, #140]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 030c 	and.w	r3, r3, #12
 8006dea:	2b0c      	cmp	r3, #12
 8006dec:	d136      	bne.n	8006e5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006dee:	4b20      	ldr	r3, [pc, #128]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006df8:	4b1d      	ldr	r3, [pc, #116]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	091b      	lsrs	r3, r3, #4
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	3301      	adds	r3, #1
 8006e04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d10c      	bne.n	8006e26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8006e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e14:	4a16      	ldr	r2, [pc, #88]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e16:	68d2      	ldr	r2, [r2, #12]
 8006e18:	0a12      	lsrs	r2, r2, #8
 8006e1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	617b      	str	r3, [r7, #20]
      break;
 8006e24:	e00c      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e26:	4a13      	ldr	r2, [pc, #76]	@ (8006e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2e:	4a10      	ldr	r2, [pc, #64]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e30:	68d2      	ldr	r2, [r2, #12]
 8006e32:	0a12      	lsrs	r2, r2, #8
 8006e34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006e38:	fb02 f303 	mul.w	r3, r2, r3
 8006e3c:	617b      	str	r3, [r7, #20]
      break;
 8006e3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e40:	4b0b      	ldr	r3, [pc, #44]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	0e5b      	lsrs	r3, r3, #25
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e58:	613b      	str	r3, [r7, #16]
 8006e5a:	e001      	b.n	8006e60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006e60:	693b      	ldr	r3, [r7, #16]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	40021000 	.word	0x40021000
 8006e74:	00f42400 	.word	0x00f42400
 8006e78:	007a1200 	.word	0x007a1200

08006e7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e80:	4b03      	ldr	r3, [pc, #12]	@ (8006e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e82:	681b      	ldr	r3, [r3, #0]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	20000004 	.word	0x20000004

08006e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e98:	f7ff fff0 	bl	8006e7c <HAL_RCC_GetHCLKFreq>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	4b06      	ldr	r3, [pc, #24]	@ (8006eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	0a1b      	lsrs	r3, r3, #8
 8006ea4:	f003 0307 	and.w	r3, r3, #7
 8006ea8:	4904      	ldr	r1, [pc, #16]	@ (8006ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006eaa:	5ccb      	ldrb	r3, [r1, r3]
 8006eac:	f003 031f 	and.w	r3, r3, #31
 8006eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	0800c22c 	.word	0x0800c22c

08006ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ec4:	f7ff ffda 	bl	8006e7c <HAL_RCC_GetHCLKFreq>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	4b06      	ldr	r3, [pc, #24]	@ (8006ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	0adb      	lsrs	r3, r3, #11
 8006ed0:	f003 0307 	and.w	r3, r3, #7
 8006ed4:	4904      	ldr	r1, [pc, #16]	@ (8006ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ed6:	5ccb      	ldrb	r3, [r1, r3]
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40021000 	.word	0x40021000
 8006ee8:	0800c22c 	.word	0x0800c22c

08006eec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8006f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006efc:	4b1b      	ldr	r3, [pc, #108]	@ (8006f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	091b      	lsrs	r3, r3, #4
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	3301      	adds	r3, #1
 8006f08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	2b03      	cmp	r3, #3
 8006f0e:	d10c      	bne.n	8006f2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f10:	4a17      	ldr	r2, [pc, #92]	@ (8006f70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f18:	4a14      	ldr	r2, [pc, #80]	@ (8006f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f1a:	68d2      	ldr	r2, [r2, #12]
 8006f1c:	0a12      	lsrs	r2, r2, #8
 8006f1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f22:	fb02 f303 	mul.w	r3, r2, r3
 8006f26:	617b      	str	r3, [r7, #20]
    break;
 8006f28:	e00c      	b.n	8006f44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f2a:	4a12      	ldr	r2, [pc, #72]	@ (8006f74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f32:	4a0e      	ldr	r2, [pc, #56]	@ (8006f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f34:	68d2      	ldr	r2, [r2, #12]
 8006f36:	0a12      	lsrs	r2, r2, #8
 8006f38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f3c:	fb02 f303 	mul.w	r3, r2, r3
 8006f40:	617b      	str	r3, [r7, #20]
    break;
 8006f42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f44:	4b09      	ldr	r3, [pc, #36]	@ (8006f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	0e5b      	lsrs	r3, r3, #25
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	3301      	adds	r3, #1
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006f5e:	687b      	ldr	r3, [r7, #4]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	371c      	adds	r7, #28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	40021000 	.word	0x40021000
 8006f70:	007a1200 	.word	0x007a1200
 8006f74:	00f42400 	.word	0x00f42400

08006f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f80:	2300      	movs	r3, #0
 8006f82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f84:	2300      	movs	r3, #0
 8006f86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 8098 	beq.w	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f96:	2300      	movs	r3, #0
 8006f98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f9a:	4b43      	ldr	r3, [pc, #268]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10d      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fa6:	4b40      	ldr	r3, [pc, #256]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006faa:	4a3f      	ldr	r2, [pc, #252]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fba:	60bb      	str	r3, [r7, #8]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a39      	ldr	r2, [pc, #228]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fce:	f7fc f91d 	bl	800320c <HAL_GetTick>
 8006fd2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fd4:	e009      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fd6:	f7fc f919 	bl	800320c <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d902      	bls.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	74fb      	strb	r3, [r7, #19]
        break;
 8006fe8:	e005      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fea:	4b30      	ldr	r3, [pc, #192]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0ef      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006ff6:	7cfb      	ldrb	r3, [r7, #19]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d159      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007006:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d01e      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	429a      	cmp	r2, r3
 8007016:	d019      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007018:	4b23      	ldr	r3, [pc, #140]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800701a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800701e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007022:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007024:	4b20      	ldr	r3, [pc, #128]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800702a:	4a1f      	ldr	r2, [pc, #124]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800702c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007034:	4b1c      	ldr	r3, [pc, #112]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800703a:	4a1b      	ldr	r2, [pc, #108]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800703c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007044:	4a18      	ldr	r2, [pc, #96]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d016      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007056:	f7fc f8d9 	bl	800320c <HAL_GetTick>
 800705a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800705c:	e00b      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800705e:	f7fc f8d5 	bl	800320c <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800706c:	4293      	cmp	r3, r2
 800706e:	d902      	bls.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	74fb      	strb	r3, [r7, #19]
            break;
 8007074:	e006      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007076:	4b0c      	ldr	r3, [pc, #48]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d0ec      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007084:	7cfb      	ldrb	r3, [r7, #19]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10b      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800708a:	4b07      	ldr	r3, [pc, #28]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800708c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007098:	4903      	ldr	r1, [pc, #12]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800709a:	4313      	orrs	r3, r2
 800709c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80070a0:	e008      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070a2:	7cfb      	ldrb	r3, [r7, #19]
 80070a4:	74bb      	strb	r3, [r7, #18]
 80070a6:	e005      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80070a8:	40021000 	.word	0x40021000
 80070ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b0:	7cfb      	ldrb	r3, [r7, #19]
 80070b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070b4:	7c7b      	ldrb	r3, [r7, #17]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d105      	bne.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070ba:	4ba6      	ldr	r3, [pc, #664]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070be:	4aa5      	ldr	r2, [pc, #660]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070d2:	4ba0      	ldr	r3, [pc, #640]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d8:	f023 0203 	bic.w	r2, r3, #3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	499c      	ldr	r1, [pc, #624]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070f4:	4b97      	ldr	r3, [pc, #604]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070fa:	f023 020c 	bic.w	r2, r3, #12
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	4994      	ldr	r1, [pc, #592]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007104:	4313      	orrs	r3, r2
 8007106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007116:	4b8f      	ldr	r3, [pc, #572]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800711c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	498b      	ldr	r1, [pc, #556]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007126:	4313      	orrs	r3, r2
 8007128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007138:	4b86      	ldr	r3, [pc, #536]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800713a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800713e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	4983      	ldr	r1, [pc, #524]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007148:	4313      	orrs	r3, r2
 800714a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800715a:	4b7e      	ldr	r3, [pc, #504]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800715c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007160:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	497a      	ldr	r1, [pc, #488]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800716a:	4313      	orrs	r3, r2
 800716c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800717c:	4b75      	ldr	r3, [pc, #468]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800717e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007182:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	4972      	ldr	r1, [pc, #456]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800718c:	4313      	orrs	r3, r2
 800718e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800719e:	4b6d      	ldr	r3, [pc, #436]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	4969      	ldr	r1, [pc, #420]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071c0:	4b64      	ldr	r3, [pc, #400]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	4961      	ldr	r1, [pc, #388]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071e2:	4b5c      	ldr	r3, [pc, #368]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f0:	4958      	ldr	r1, [pc, #352]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007200:	2b00      	cmp	r3, #0
 8007202:	d015      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007204:	4b53      	ldr	r3, [pc, #332]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800720a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007212:	4950      	ldr	r1, [pc, #320]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007214:	4313      	orrs	r3, r2
 8007216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007222:	d105      	bne.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007224:	4b4b      	ldr	r3, [pc, #300]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	4a4a      	ldr	r2, [pc, #296]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800722a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800722e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007238:	2b00      	cmp	r3, #0
 800723a:	d015      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800723c:	4b45      	ldr	r3, [pc, #276]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007242:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724a:	4942      	ldr	r1, [pc, #264]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800724c:	4313      	orrs	r3, r2
 800724e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007256:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800725a:	d105      	bne.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800725c:	4b3d      	ldr	r3, [pc, #244]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	4a3c      	ldr	r2, [pc, #240]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007266:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d015      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007274:	4b37      	ldr	r3, [pc, #220]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800727a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007282:	4934      	ldr	r1, [pc, #208]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007284:	4313      	orrs	r3, r2
 8007286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007292:	d105      	bne.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007294:	4b2f      	ldr	r3, [pc, #188]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	4a2e      	ldr	r2, [pc, #184]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800729a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800729e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d015      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072ac:	4b29      	ldr	r3, [pc, #164]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ba:	4926      	ldr	r1, [pc, #152]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072ca:	d105      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072cc:	4b21      	ldr	r3, [pc, #132]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	4a20      	ldr	r2, [pc, #128]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d015      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f2:	4918      	ldr	r1, [pc, #96]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007302:	d105      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007304:	4b13      	ldr	r3, [pc, #76]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	4a12      	ldr	r2, [pc, #72]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800730a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800730e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d015      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800731c:	4b0d      	ldr	r3, [pc, #52]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800731e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007322:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732a:	490a      	ldr	r1, [pc, #40]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800732c:	4313      	orrs	r3, r2
 800732e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007336:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800733a:	d105      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800733c:	4b05      	ldr	r3, [pc, #20]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	4a04      	ldr	r2, [pc, #16]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007342:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007346:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007348:	7cbb      	ldrb	r3, [r7, #18]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	40021000 	.word	0x40021000

08007358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e049      	b.n	80073fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7fb fbc0 	bl	8002b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3304      	adds	r3, #4
 8007394:	4619      	mov	r1, r3
 8007396:	4610      	mov	r0, r2
 8007398:	f001 fa62 	bl	8008860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
	...

08007408 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b01      	cmp	r3, #1
 800741a:	d001      	beq.n	8007420 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e042      	b.n	80074a6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a21      	ldr	r2, [pc, #132]	@ (80074b4 <HAL_TIM_Base_Start+0xac>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d018      	beq.n	8007464 <HAL_TIM_Base_Start+0x5c>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800743a:	d013      	beq.n	8007464 <HAL_TIM_Base_Start+0x5c>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a1d      	ldr	r2, [pc, #116]	@ (80074b8 <HAL_TIM_Base_Start+0xb0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00e      	beq.n	8007464 <HAL_TIM_Base_Start+0x5c>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a1c      	ldr	r2, [pc, #112]	@ (80074bc <HAL_TIM_Base_Start+0xb4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d009      	beq.n	8007464 <HAL_TIM_Base_Start+0x5c>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a1a      	ldr	r2, [pc, #104]	@ (80074c0 <HAL_TIM_Base_Start+0xb8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d004      	beq.n	8007464 <HAL_TIM_Base_Start+0x5c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a19      	ldr	r2, [pc, #100]	@ (80074c4 <HAL_TIM_Base_Start+0xbc>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d115      	bne.n	8007490 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	4b17      	ldr	r3, [pc, #92]	@ (80074c8 <HAL_TIM_Base_Start+0xc0>)
 800746c:	4013      	ands	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b06      	cmp	r3, #6
 8007474:	d015      	beq.n	80074a2 <HAL_TIM_Base_Start+0x9a>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800747c:	d011      	beq.n	80074a2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f042 0201 	orr.w	r2, r2, #1
 800748c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800748e:	e008      	b.n	80074a2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 0201 	orr.w	r2, r2, #1
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	e000      	b.n	80074a4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	40012c00 	.word	0x40012c00
 80074b8:	40000400 	.word	0x40000400
 80074bc:	40000800 	.word	0x40000800
 80074c0:	40013400 	.word	0x40013400
 80074c4:	40014000 	.word	0x40014000
 80074c8:	00010007 	.word	0x00010007

080074cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6a1a      	ldr	r2, [r3, #32]
 80074da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80074de:	4013      	ands	r3, r2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10f      	bne.n	8007504 <HAL_TIM_Base_Stop+0x38>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6a1a      	ldr	r2, [r3, #32]
 80074ea:	f244 4344 	movw	r3, #17476	@ 0x4444
 80074ee:	4013      	ands	r3, r2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d107      	bne.n	8007504 <HAL_TIM_Base_Stop+0x38>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0201 	bic.w	r2, r2, #1
 8007502:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
	...

0800751c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b01      	cmp	r3, #1
 800752e:	d001      	beq.n	8007534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e04a      	b.n	80075ca <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f042 0201 	orr.w	r2, r2, #1
 800754a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a21      	ldr	r2, [pc, #132]	@ (80075d8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d018      	beq.n	8007588 <HAL_TIM_Base_Start_IT+0x6c>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800755e:	d013      	beq.n	8007588 <HAL_TIM_Base_Start_IT+0x6c>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a1d      	ldr	r2, [pc, #116]	@ (80075dc <HAL_TIM_Base_Start_IT+0xc0>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00e      	beq.n	8007588 <HAL_TIM_Base_Start_IT+0x6c>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a1c      	ldr	r2, [pc, #112]	@ (80075e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d009      	beq.n	8007588 <HAL_TIM_Base_Start_IT+0x6c>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a1a      	ldr	r2, [pc, #104]	@ (80075e4 <HAL_TIM_Base_Start_IT+0xc8>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d004      	beq.n	8007588 <HAL_TIM_Base_Start_IT+0x6c>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a19      	ldr	r2, [pc, #100]	@ (80075e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d115      	bne.n	80075b4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689a      	ldr	r2, [r3, #8]
 800758e:	4b17      	ldr	r3, [pc, #92]	@ (80075ec <HAL_TIM_Base_Start_IT+0xd0>)
 8007590:	4013      	ands	r3, r2
 8007592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b06      	cmp	r3, #6
 8007598:	d015      	beq.n	80075c6 <HAL_TIM_Base_Start_IT+0xaa>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075a0:	d011      	beq.n	80075c6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f042 0201 	orr.w	r2, r2, #1
 80075b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b2:	e008      	b.n	80075c6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0201 	orr.w	r2, r2, #1
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	e000      	b.n	80075c8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	40012c00 	.word	0x40012c00
 80075dc:	40000400 	.word	0x40000400
 80075e0:	40000800 	.word	0x40000800
 80075e4:	40013400 	.word	0x40013400
 80075e8:	40014000 	.word	0x40014000
 80075ec:	00010007 	.word	0x00010007

080075f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e049      	b.n	8007696 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f841 	bl	800769e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3304      	adds	r3, #4
 800762c:	4619      	mov	r1, r3
 800762e:	4610      	mov	r0, r2
 8007630:	f001 f916 	bl	8008860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
	...

080076b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d109      	bne.n	80076d8 <HAL_TIM_PWM_Start+0x24>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	bf14      	ite	ne
 80076d0:	2301      	movne	r3, #1
 80076d2:	2300      	moveq	r3, #0
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	e03c      	b.n	8007752 <HAL_TIM_PWM_Start+0x9e>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2b04      	cmp	r3, #4
 80076dc:	d109      	bne.n	80076f2 <HAL_TIM_PWM_Start+0x3e>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	bf14      	ite	ne
 80076ea:	2301      	movne	r3, #1
 80076ec:	2300      	moveq	r3, #0
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	e02f      	b.n	8007752 <HAL_TIM_PWM_Start+0x9e>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d109      	bne.n	800770c <HAL_TIM_PWM_Start+0x58>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b01      	cmp	r3, #1
 8007702:	bf14      	ite	ne
 8007704:	2301      	movne	r3, #1
 8007706:	2300      	moveq	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	e022      	b.n	8007752 <HAL_TIM_PWM_Start+0x9e>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b0c      	cmp	r3, #12
 8007710:	d109      	bne.n	8007726 <HAL_TIM_PWM_Start+0x72>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b01      	cmp	r3, #1
 800771c:	bf14      	ite	ne
 800771e:	2301      	movne	r3, #1
 8007720:	2300      	moveq	r3, #0
 8007722:	b2db      	uxtb	r3, r3
 8007724:	e015      	b.n	8007752 <HAL_TIM_PWM_Start+0x9e>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b10      	cmp	r3, #16
 800772a:	d109      	bne.n	8007740 <HAL_TIM_PWM_Start+0x8c>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b01      	cmp	r3, #1
 8007736:	bf14      	ite	ne
 8007738:	2301      	movne	r3, #1
 800773a:	2300      	moveq	r3, #0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	e008      	b.n	8007752 <HAL_TIM_PWM_Start+0x9e>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b01      	cmp	r3, #1
 800774a:	bf14      	ite	ne
 800774c:	2301      	movne	r3, #1
 800774e:	2300      	moveq	r3, #0
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e097      	b.n	800788a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d104      	bne.n	800776a <HAL_TIM_PWM_Start+0xb6>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007768:	e023      	b.n	80077b2 <HAL_TIM_PWM_Start+0xfe>
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b04      	cmp	r3, #4
 800776e:	d104      	bne.n	800777a <HAL_TIM_PWM_Start+0xc6>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007778:	e01b      	b.n	80077b2 <HAL_TIM_PWM_Start+0xfe>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b08      	cmp	r3, #8
 800777e:	d104      	bne.n	800778a <HAL_TIM_PWM_Start+0xd6>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007788:	e013      	b.n	80077b2 <HAL_TIM_PWM_Start+0xfe>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b0c      	cmp	r3, #12
 800778e:	d104      	bne.n	800779a <HAL_TIM_PWM_Start+0xe6>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007798:	e00b      	b.n	80077b2 <HAL_TIM_PWM_Start+0xfe>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b10      	cmp	r3, #16
 800779e:	d104      	bne.n	80077aa <HAL_TIM_PWM_Start+0xf6>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077a8:	e003      	b.n	80077b2 <HAL_TIM_PWM_Start+0xfe>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2202      	movs	r2, #2
 80077ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2201      	movs	r2, #1
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f001 fe60 	bl	8009480 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a33      	ldr	r2, [pc, #204]	@ (8007894 <HAL_TIM_PWM_Start+0x1e0>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d013      	beq.n	80077f2 <HAL_TIM_PWM_Start+0x13e>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a32      	ldr	r2, [pc, #200]	@ (8007898 <HAL_TIM_PWM_Start+0x1e4>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d00e      	beq.n	80077f2 <HAL_TIM_PWM_Start+0x13e>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a30      	ldr	r2, [pc, #192]	@ (800789c <HAL_TIM_PWM_Start+0x1e8>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d009      	beq.n	80077f2 <HAL_TIM_PWM_Start+0x13e>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a2f      	ldr	r2, [pc, #188]	@ (80078a0 <HAL_TIM_PWM_Start+0x1ec>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d004      	beq.n	80077f2 <HAL_TIM_PWM_Start+0x13e>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a2d      	ldr	r2, [pc, #180]	@ (80078a4 <HAL_TIM_PWM_Start+0x1f0>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d101      	bne.n	80077f6 <HAL_TIM_PWM_Start+0x142>
 80077f2:	2301      	movs	r3, #1
 80077f4:	e000      	b.n	80077f8 <HAL_TIM_PWM_Start+0x144>
 80077f6:	2300      	movs	r3, #0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d007      	beq.n	800780c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800780a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a20      	ldr	r2, [pc, #128]	@ (8007894 <HAL_TIM_PWM_Start+0x1e0>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d018      	beq.n	8007848 <HAL_TIM_PWM_Start+0x194>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800781e:	d013      	beq.n	8007848 <HAL_TIM_PWM_Start+0x194>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a20      	ldr	r2, [pc, #128]	@ (80078a8 <HAL_TIM_PWM_Start+0x1f4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d00e      	beq.n	8007848 <HAL_TIM_PWM_Start+0x194>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a1f      	ldr	r2, [pc, #124]	@ (80078ac <HAL_TIM_PWM_Start+0x1f8>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d009      	beq.n	8007848 <HAL_TIM_PWM_Start+0x194>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a17      	ldr	r2, [pc, #92]	@ (8007898 <HAL_TIM_PWM_Start+0x1e4>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d004      	beq.n	8007848 <HAL_TIM_PWM_Start+0x194>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a16      	ldr	r2, [pc, #88]	@ (800789c <HAL_TIM_PWM_Start+0x1e8>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d115      	bne.n	8007874 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689a      	ldr	r2, [r3, #8]
 800784e:	4b18      	ldr	r3, [pc, #96]	@ (80078b0 <HAL_TIM_PWM_Start+0x1fc>)
 8007850:	4013      	ands	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b06      	cmp	r3, #6
 8007858:	d015      	beq.n	8007886 <HAL_TIM_PWM_Start+0x1d2>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007860:	d011      	beq.n	8007886 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f042 0201 	orr.w	r2, r2, #1
 8007870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007872:	e008      	b.n	8007886 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f042 0201 	orr.w	r2, r2, #1
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	e000      	b.n	8007888 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007886:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	40012c00 	.word	0x40012c00
 8007898:	40013400 	.word	0x40013400
 800789c:	40014000 	.word	0x40014000
 80078a0:	40014400 	.word	0x40014400
 80078a4:	40014800 	.word	0x40014800
 80078a8:	40000400 	.word	0x40000400
 80078ac:	40000800 	.word	0x40000800
 80078b0:	00010007 	.word	0x00010007

080078b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2200      	movs	r2, #0
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f001 fdda 	bl	8009480 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a3e      	ldr	r2, [pc, #248]	@ (80079cc <HAL_TIM_PWM_Stop+0x118>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d013      	beq.n	80078fe <HAL_TIM_PWM_Stop+0x4a>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a3d      	ldr	r2, [pc, #244]	@ (80079d0 <HAL_TIM_PWM_Stop+0x11c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d00e      	beq.n	80078fe <HAL_TIM_PWM_Stop+0x4a>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a3b      	ldr	r2, [pc, #236]	@ (80079d4 <HAL_TIM_PWM_Stop+0x120>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d009      	beq.n	80078fe <HAL_TIM_PWM_Stop+0x4a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a3a      	ldr	r2, [pc, #232]	@ (80079d8 <HAL_TIM_PWM_Stop+0x124>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d004      	beq.n	80078fe <HAL_TIM_PWM_Stop+0x4a>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a38      	ldr	r2, [pc, #224]	@ (80079dc <HAL_TIM_PWM_Stop+0x128>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d101      	bne.n	8007902 <HAL_TIM_PWM_Stop+0x4e>
 80078fe:	2301      	movs	r3, #1
 8007900:	e000      	b.n	8007904 <HAL_TIM_PWM_Stop+0x50>
 8007902:	2300      	movs	r3, #0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d017      	beq.n	8007938 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6a1a      	ldr	r2, [r3, #32]
 800790e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007912:	4013      	ands	r3, r2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10f      	bne.n	8007938 <HAL_TIM_PWM_Stop+0x84>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6a1a      	ldr	r2, [r3, #32]
 800791e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007922:	4013      	ands	r3, r2
 8007924:	2b00      	cmp	r3, #0
 8007926:	d107      	bne.n	8007938 <HAL_TIM_PWM_Stop+0x84>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007936:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6a1a      	ldr	r2, [r3, #32]
 800793e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007942:	4013      	ands	r3, r2
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10f      	bne.n	8007968 <HAL_TIM_PWM_Stop+0xb4>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6a1a      	ldr	r2, [r3, #32]
 800794e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007952:	4013      	ands	r3, r2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d107      	bne.n	8007968 <HAL_TIM_PWM_Stop+0xb4>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 0201 	bic.w	r2, r2, #1
 8007966:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d104      	bne.n	8007978 <HAL_TIM_PWM_Stop+0xc4>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007976:	e023      	b.n	80079c0 <HAL_TIM_PWM_Stop+0x10c>
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b04      	cmp	r3, #4
 800797c:	d104      	bne.n	8007988 <HAL_TIM_PWM_Stop+0xd4>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007986:	e01b      	b.n	80079c0 <HAL_TIM_PWM_Stop+0x10c>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b08      	cmp	r3, #8
 800798c:	d104      	bne.n	8007998 <HAL_TIM_PWM_Stop+0xe4>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007996:	e013      	b.n	80079c0 <HAL_TIM_PWM_Stop+0x10c>
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2b0c      	cmp	r3, #12
 800799c:	d104      	bne.n	80079a8 <HAL_TIM_PWM_Stop+0xf4>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079a6:	e00b      	b.n	80079c0 <HAL_TIM_PWM_Stop+0x10c>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b10      	cmp	r3, #16
 80079ac:	d104      	bne.n	80079b8 <HAL_TIM_PWM_Stop+0x104>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079b6:	e003      	b.n	80079c0 <HAL_TIM_PWM_Stop+0x10c>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	40012c00 	.word	0x40012c00
 80079d0:	40013400 	.word	0x40013400
 80079d4:	40014000 	.word	0x40014000
 80079d8:	40014400 	.word	0x40014400
 80079dc:	40014800 	.word	0x40014800

080079e0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d109      	bne.n	8007a08 <HAL_TIM_PWM_Start_IT+0x28>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	bf14      	ite	ne
 8007a00:	2301      	movne	r3, #1
 8007a02:	2300      	moveq	r3, #0
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	e03c      	b.n	8007a82 <HAL_TIM_PWM_Start_IT+0xa2>
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d109      	bne.n	8007a22 <HAL_TIM_PWM_Start_IT+0x42>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	bf14      	ite	ne
 8007a1a:	2301      	movne	r3, #1
 8007a1c:	2300      	moveq	r3, #0
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	e02f      	b.n	8007a82 <HAL_TIM_PWM_Start_IT+0xa2>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d109      	bne.n	8007a3c <HAL_TIM_PWM_Start_IT+0x5c>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	bf14      	ite	ne
 8007a34:	2301      	movne	r3, #1
 8007a36:	2300      	moveq	r3, #0
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	e022      	b.n	8007a82 <HAL_TIM_PWM_Start_IT+0xa2>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b0c      	cmp	r3, #12
 8007a40:	d109      	bne.n	8007a56 <HAL_TIM_PWM_Start_IT+0x76>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	bf14      	ite	ne
 8007a4e:	2301      	movne	r3, #1
 8007a50:	2300      	moveq	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	e015      	b.n	8007a82 <HAL_TIM_PWM_Start_IT+0xa2>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b10      	cmp	r3, #16
 8007a5a:	d109      	bne.n	8007a70 <HAL_TIM_PWM_Start_IT+0x90>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	bf14      	ite	ne
 8007a68:	2301      	movne	r3, #1
 8007a6a:	2300      	moveq	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	e008      	b.n	8007a82 <HAL_TIM_PWM_Start_IT+0xa2>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	bf14      	ite	ne
 8007a7c:	2301      	movne	r3, #1
 8007a7e:	2300      	moveq	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e0e2      	b.n	8007c50 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d104      	bne.n	8007a9a <HAL_TIM_PWM_Start_IT+0xba>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a98:	e023      	b.n	8007ae2 <HAL_TIM_PWM_Start_IT+0x102>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d104      	bne.n	8007aaa <HAL_TIM_PWM_Start_IT+0xca>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007aa8:	e01b      	b.n	8007ae2 <HAL_TIM_PWM_Start_IT+0x102>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d104      	bne.n	8007aba <HAL_TIM_PWM_Start_IT+0xda>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ab8:	e013      	b.n	8007ae2 <HAL_TIM_PWM_Start_IT+0x102>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b0c      	cmp	r3, #12
 8007abe:	d104      	bne.n	8007aca <HAL_TIM_PWM_Start_IT+0xea>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ac8:	e00b      	b.n	8007ae2 <HAL_TIM_PWM_Start_IT+0x102>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b10      	cmp	r3, #16
 8007ace:	d104      	bne.n	8007ada <HAL_TIM_PWM_Start_IT+0xfa>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ad8:	e003      	b.n	8007ae2 <HAL_TIM_PWM_Start_IT+0x102>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2202      	movs	r2, #2
 8007ade:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b0c      	cmp	r3, #12
 8007ae6:	d841      	bhi.n	8007b6c <HAL_TIM_PWM_Start_IT+0x18c>
 8007ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8007af0 <HAL_TIM_PWM_Start_IT+0x110>)
 8007aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aee:	bf00      	nop
 8007af0:	08007b25 	.word	0x08007b25
 8007af4:	08007b6d 	.word	0x08007b6d
 8007af8:	08007b6d 	.word	0x08007b6d
 8007afc:	08007b6d 	.word	0x08007b6d
 8007b00:	08007b37 	.word	0x08007b37
 8007b04:	08007b6d 	.word	0x08007b6d
 8007b08:	08007b6d 	.word	0x08007b6d
 8007b0c:	08007b6d 	.word	0x08007b6d
 8007b10:	08007b49 	.word	0x08007b49
 8007b14:	08007b6d 	.word	0x08007b6d
 8007b18:	08007b6d 	.word	0x08007b6d
 8007b1c:	08007b6d 	.word	0x08007b6d
 8007b20:	08007b5b 	.word	0x08007b5b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68da      	ldr	r2, [r3, #12]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f042 0202 	orr.w	r2, r2, #2
 8007b32:	60da      	str	r2, [r3, #12]
      break;
 8007b34:	e01d      	b.n	8007b72 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0204 	orr.w	r2, r2, #4
 8007b44:	60da      	str	r2, [r3, #12]
      break;
 8007b46:	e014      	b.n	8007b72 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f042 0208 	orr.w	r2, r2, #8
 8007b56:	60da      	str	r2, [r3, #12]
      break;
 8007b58:	e00b      	b.n	8007b72 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68da      	ldr	r2, [r3, #12]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f042 0210 	orr.w	r2, r2, #16
 8007b68:	60da      	str	r2, [r3, #12]
      break;
 8007b6a:	e002      	b.n	8007b72 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b70:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d16a      	bne.n	8007c4e <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f001 fc7d 	bl	8009480 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a33      	ldr	r2, [pc, #204]	@ (8007c58 <HAL_TIM_PWM_Start_IT+0x278>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d013      	beq.n	8007bb8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a31      	ldr	r2, [pc, #196]	@ (8007c5c <HAL_TIM_PWM_Start_IT+0x27c>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d00e      	beq.n	8007bb8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a30      	ldr	r2, [pc, #192]	@ (8007c60 <HAL_TIM_PWM_Start_IT+0x280>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d009      	beq.n	8007bb8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8007c64 <HAL_TIM_PWM_Start_IT+0x284>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d004      	beq.n	8007bb8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a2d      	ldr	r2, [pc, #180]	@ (8007c68 <HAL_TIM_PWM_Start_IT+0x288>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d101      	bne.n	8007bbc <HAL_TIM_PWM_Start_IT+0x1dc>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e000      	b.n	8007bbe <HAL_TIM_PWM_Start_IT+0x1de>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d007      	beq.n	8007bd2 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a20      	ldr	r2, [pc, #128]	@ (8007c58 <HAL_TIM_PWM_Start_IT+0x278>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d018      	beq.n	8007c0e <HAL_TIM_PWM_Start_IT+0x22e>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007be4:	d013      	beq.n	8007c0e <HAL_TIM_PWM_Start_IT+0x22e>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a20      	ldr	r2, [pc, #128]	@ (8007c6c <HAL_TIM_PWM_Start_IT+0x28c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d00e      	beq.n	8007c0e <HAL_TIM_PWM_Start_IT+0x22e>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8007c70 <HAL_TIM_PWM_Start_IT+0x290>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d009      	beq.n	8007c0e <HAL_TIM_PWM_Start_IT+0x22e>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a17      	ldr	r2, [pc, #92]	@ (8007c5c <HAL_TIM_PWM_Start_IT+0x27c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d004      	beq.n	8007c0e <HAL_TIM_PWM_Start_IT+0x22e>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a15      	ldr	r2, [pc, #84]	@ (8007c60 <HAL_TIM_PWM_Start_IT+0x280>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d115      	bne.n	8007c3a <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	4b17      	ldr	r3, [pc, #92]	@ (8007c74 <HAL_TIM_PWM_Start_IT+0x294>)
 8007c16:	4013      	ands	r3, r2
 8007c18:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	2b06      	cmp	r3, #6
 8007c1e:	d015      	beq.n	8007c4c <HAL_TIM_PWM_Start_IT+0x26c>
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c26:	d011      	beq.n	8007c4c <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f042 0201 	orr.w	r2, r2, #1
 8007c36:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c38:	e008      	b.n	8007c4c <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f042 0201 	orr.w	r2, r2, #1
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	e000      	b.n	8007c4e <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	40012c00 	.word	0x40012c00
 8007c5c:	40013400 	.word	0x40013400
 8007c60:	40014000 	.word	0x40014000
 8007c64:	40014400 	.word	0x40014400
 8007c68:	40014800 	.word	0x40014800
 8007c6c:	40000400 	.word	0x40000400
 8007c70:	40000800 	.word	0x40000800
 8007c74:	00010007 	.word	0x00010007

08007c78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e049      	b.n	8007d1e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f841 	bl	8007d26 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	f000 fdd2 	bl	8008860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
	...

08007d3c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d104      	bne.n	8007d5a <HAL_TIM_IC_Start_IT+0x1e>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	e023      	b.n	8007da2 <HAL_TIM_IC_Start_IT+0x66>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b04      	cmp	r3, #4
 8007d5e:	d104      	bne.n	8007d6a <HAL_TIM_IC_Start_IT+0x2e>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	e01b      	b.n	8007da2 <HAL_TIM_IC_Start_IT+0x66>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d104      	bne.n	8007d7a <HAL_TIM_IC_Start_IT+0x3e>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	e013      	b.n	8007da2 <HAL_TIM_IC_Start_IT+0x66>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b0c      	cmp	r3, #12
 8007d7e:	d104      	bne.n	8007d8a <HAL_TIM_IC_Start_IT+0x4e>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	e00b      	b.n	8007da2 <HAL_TIM_IC_Start_IT+0x66>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b10      	cmp	r3, #16
 8007d8e:	d104      	bne.n	8007d9a <HAL_TIM_IC_Start_IT+0x5e>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	e003      	b.n	8007da2 <HAL_TIM_IC_Start_IT+0x66>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d104      	bne.n	8007db4 <HAL_TIM_IC_Start_IT+0x78>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	e013      	b.n	8007ddc <HAL_TIM_IC_Start_IT+0xa0>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d104      	bne.n	8007dc4 <HAL_TIM_IC_Start_IT+0x88>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	e00b      	b.n	8007ddc <HAL_TIM_IC_Start_IT+0xa0>
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	2b08      	cmp	r3, #8
 8007dc8:	d104      	bne.n	8007dd4 <HAL_TIM_IC_Start_IT+0x98>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	e003      	b.n	8007ddc <HAL_TIM_IC_Start_IT+0xa0>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d102      	bne.n	8007dea <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007de4:	7b7b      	ldrb	r3, [r7, #13]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d001      	beq.n	8007dee <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e0d8      	b.n	8007fa0 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <HAL_TIM_IC_Start_IT+0xc2>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dfc:	e023      	b.n	8007e46 <HAL_TIM_IC_Start_IT+0x10a>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d104      	bne.n	8007e0e <HAL_TIM_IC_Start_IT+0xd2>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e0c:	e01b      	b.n	8007e46 <HAL_TIM_IC_Start_IT+0x10a>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d104      	bne.n	8007e1e <HAL_TIM_IC_Start_IT+0xe2>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2202      	movs	r2, #2
 8007e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e1c:	e013      	b.n	8007e46 <HAL_TIM_IC_Start_IT+0x10a>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b0c      	cmp	r3, #12
 8007e22:	d104      	bne.n	8007e2e <HAL_TIM_IC_Start_IT+0xf2>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e2c:	e00b      	b.n	8007e46 <HAL_TIM_IC_Start_IT+0x10a>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d104      	bne.n	8007e3e <HAL_TIM_IC_Start_IT+0x102>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e3c:	e003      	b.n	8007e46 <HAL_TIM_IC_Start_IT+0x10a>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2202      	movs	r2, #2
 8007e42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <HAL_TIM_IC_Start_IT+0x11a>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e54:	e013      	b.n	8007e7e <HAL_TIM_IC_Start_IT+0x142>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d104      	bne.n	8007e66 <HAL_TIM_IC_Start_IT+0x12a>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e64:	e00b      	b.n	8007e7e <HAL_TIM_IC_Start_IT+0x142>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d104      	bne.n	8007e76 <HAL_TIM_IC_Start_IT+0x13a>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e74:	e003      	b.n	8007e7e <HAL_TIM_IC_Start_IT+0x142>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2202      	movs	r2, #2
 8007e7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b0c      	cmp	r3, #12
 8007e82:	d841      	bhi.n	8007f08 <HAL_TIM_IC_Start_IT+0x1cc>
 8007e84:	a201      	add	r2, pc, #4	@ (adr r2, 8007e8c <HAL_TIM_IC_Start_IT+0x150>)
 8007e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8a:	bf00      	nop
 8007e8c:	08007ec1 	.word	0x08007ec1
 8007e90:	08007f09 	.word	0x08007f09
 8007e94:	08007f09 	.word	0x08007f09
 8007e98:	08007f09 	.word	0x08007f09
 8007e9c:	08007ed3 	.word	0x08007ed3
 8007ea0:	08007f09 	.word	0x08007f09
 8007ea4:	08007f09 	.word	0x08007f09
 8007ea8:	08007f09 	.word	0x08007f09
 8007eac:	08007ee5 	.word	0x08007ee5
 8007eb0:	08007f09 	.word	0x08007f09
 8007eb4:	08007f09 	.word	0x08007f09
 8007eb8:	08007f09 	.word	0x08007f09
 8007ebc:	08007ef7 	.word	0x08007ef7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f042 0202 	orr.w	r2, r2, #2
 8007ece:	60da      	str	r2, [r3, #12]
      break;
 8007ed0:	e01d      	b.n	8007f0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68da      	ldr	r2, [r3, #12]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0204 	orr.w	r2, r2, #4
 8007ee0:	60da      	str	r2, [r3, #12]
      break;
 8007ee2:	e014      	b.n	8007f0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0208 	orr.w	r2, r2, #8
 8007ef2:	60da      	str	r2, [r3, #12]
      break;
 8007ef4:	e00b      	b.n	8007f0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68da      	ldr	r2, [r3, #12]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f042 0210 	orr.w	r2, r2, #16
 8007f04:	60da      	str	r2, [r3, #12]
      break;
 8007f06:	e002      	b.n	8007f0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d144      	bne.n	8007f9e <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 faaf 	bl	8009480 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a20      	ldr	r2, [pc, #128]	@ (8007fa8 <HAL_TIM_IC_Start_IT+0x26c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d018      	beq.n	8007f5e <HAL_TIM_IC_Start_IT+0x222>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f34:	d013      	beq.n	8007f5e <HAL_TIM_IC_Start_IT+0x222>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8007fac <HAL_TIM_IC_Start_IT+0x270>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d00e      	beq.n	8007f5e <HAL_TIM_IC_Start_IT+0x222>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a1a      	ldr	r2, [pc, #104]	@ (8007fb0 <HAL_TIM_IC_Start_IT+0x274>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d009      	beq.n	8007f5e <HAL_TIM_IC_Start_IT+0x222>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a19      	ldr	r2, [pc, #100]	@ (8007fb4 <HAL_TIM_IC_Start_IT+0x278>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d004      	beq.n	8007f5e <HAL_TIM_IC_Start_IT+0x222>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a17      	ldr	r2, [pc, #92]	@ (8007fb8 <HAL_TIM_IC_Start_IT+0x27c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d115      	bne.n	8007f8a <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	4b15      	ldr	r3, [pc, #84]	@ (8007fbc <HAL_TIM_IC_Start_IT+0x280>)
 8007f66:	4013      	ands	r3, r2
 8007f68:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b06      	cmp	r3, #6
 8007f6e:	d015      	beq.n	8007f9c <HAL_TIM_IC_Start_IT+0x260>
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f76:	d011      	beq.n	8007f9c <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f042 0201 	orr.w	r2, r2, #1
 8007f86:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f88:	e008      	b.n	8007f9c <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f042 0201 	orr.w	r2, r2, #1
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	e000      	b.n	8007f9e <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f9c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	40012c00 	.word	0x40012c00
 8007fac:	40000400 	.word	0x40000400
 8007fb0:	40000800 	.word	0x40000800
 8007fb4:	40013400 	.word	0x40013400
 8007fb8:	40014000 	.word	0x40014000
 8007fbc:	00010007 	.word	0x00010007

08007fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d020      	beq.n	8008024 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01b      	beq.n	8008024 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0202 	mvn.w	r2, #2
 8007ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7fa f9fe 	bl	800240c <HAL_TIM_IC_CaptureCallback>
 8008010:	e005      	b.n	800801e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fc10 	bl	8008838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7fa fa21 	bl	8002460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f003 0304 	and.w	r3, r3, #4
 800802a:	2b00      	cmp	r3, #0
 800802c:	d020      	beq.n	8008070 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01b      	beq.n	8008070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f06f 0204 	mvn.w	r2, #4
 8008040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2202      	movs	r2, #2
 8008046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7fa f9d8 	bl	800240c <HAL_TIM_IC_CaptureCallback>
 800805c:	e005      	b.n	800806a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fbea 	bl	8008838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7fa f9fb 	bl	8002460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d020      	beq.n	80080bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f003 0308 	and.w	r3, r3, #8
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01b      	beq.n	80080bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f06f 0208 	mvn.w	r2, #8
 800808c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2204      	movs	r2, #4
 8008092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	f003 0303 	and.w	r3, r3, #3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7fa f9b2 	bl	800240c <HAL_TIM_IC_CaptureCallback>
 80080a8:	e005      	b.n	80080b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fbc4 	bl	8008838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7fa f9d5 	bl	8002460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f003 0310 	and.w	r3, r3, #16
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d020      	beq.n	8008108 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f003 0310 	and.w	r3, r3, #16
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01b      	beq.n	8008108 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f06f 0210 	mvn.w	r2, #16
 80080d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2208      	movs	r2, #8
 80080de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7fa f98c 	bl	800240c <HAL_TIM_IC_CaptureCallback>
 80080f4:	e005      	b.n	8008102 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fb9e 	bl	8008838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7fa f9af 	bl	8002460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00c      	beq.n	800812c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	d007      	beq.n	800812c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f06f 0201 	mvn.w	r2, #1
 8008124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7fa f9fc 	bl	8002524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008132:	2b00      	cmp	r3, #0
 8008134:	d104      	bne.n	8008140 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00c      	beq.n	800815a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008146:	2b00      	cmp	r3, #0
 8008148:	d007      	beq.n	800815a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f001 fb85 	bl	8009864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00c      	beq.n	800817e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800816a:	2b00      	cmp	r3, #0
 800816c:	d007      	beq.n	800817e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f001 fb7d 	bl	8009878 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00c      	beq.n	80081a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800818e:	2b00      	cmp	r3, #0
 8008190:	d007      	beq.n	80081a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800819a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fb55 	bl	800884c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	f003 0320 	and.w	r3, r3, #32
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00c      	beq.n	80081c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d007      	beq.n	80081c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f06f 0220 	mvn.w	r2, #32
 80081be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f001 fb45 	bl	8009850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00c      	beq.n	80081ea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d007      	beq.n	80081ea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80081e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f001 fb51 	bl	800988c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00c      	beq.n	800820e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d007      	beq.n	800820e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 fb49 	bl	80098a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00c      	beq.n	8008232 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d007      	beq.n	8008232 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800822a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f001 fb41 	bl	80098b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00c      	beq.n	8008256 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d007      	beq.n	8008256 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800824e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f001 fb39 	bl	80098c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008256:	bf00      	nop
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b086      	sub	sp, #24
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008274:	2b01      	cmp	r3, #1
 8008276:	d101      	bne.n	800827c <HAL_TIM_IC_ConfigChannel+0x1e>
 8008278:	2302      	movs	r3, #2
 800827a:	e088      	b.n	800838e <HAL_TIM_IC_ConfigChannel+0x130>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d11b      	bne.n	80082c2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800829a:	f000 ff37 	bl	800910c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	699a      	ldr	r2, [r3, #24]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 020c 	bic.w	r2, r2, #12
 80082ac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6999      	ldr	r1, [r3, #24]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	430a      	orrs	r2, r1
 80082be:	619a      	str	r2, [r3, #24]
 80082c0:	e060      	b.n	8008384 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	d11c      	bne.n	8008302 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80082d8:	f000 ffaf 	bl	800923a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	699a      	ldr	r2, [r3, #24]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80082ea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6999      	ldr	r1, [r3, #24]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	021a      	lsls	r2, r3, #8
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	619a      	str	r2, [r3, #24]
 8008300:	e040      	b.n	8008384 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b08      	cmp	r3, #8
 8008306:	d11b      	bne.n	8008340 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008318:	f000 fffc 	bl	8009314 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69da      	ldr	r2, [r3, #28]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 020c 	bic.w	r2, r2, #12
 800832a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	69d9      	ldr	r1, [r3, #28]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	689a      	ldr	r2, [r3, #8]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	61da      	str	r2, [r3, #28]
 800833e:	e021      	b.n	8008384 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b0c      	cmp	r3, #12
 8008344:	d11c      	bne.n	8008380 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008356:	f001 f819 	bl	800938c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69da      	ldr	r2, [r3, #28]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008368:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69d9      	ldr	r1, [r3, #28]
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	021a      	lsls	r2, r3, #8
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	61da      	str	r2, [r3, #28]
 800837e:	e001      	b.n	8008384 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e0ff      	b.n	80085b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b14      	cmp	r3, #20
 80083c2:	f200 80f0 	bhi.w	80085a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80083c6:	a201      	add	r2, pc, #4	@ (adr r2, 80083cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083cc:	08008421 	.word	0x08008421
 80083d0:	080085a7 	.word	0x080085a7
 80083d4:	080085a7 	.word	0x080085a7
 80083d8:	080085a7 	.word	0x080085a7
 80083dc:	08008461 	.word	0x08008461
 80083e0:	080085a7 	.word	0x080085a7
 80083e4:	080085a7 	.word	0x080085a7
 80083e8:	080085a7 	.word	0x080085a7
 80083ec:	080084a3 	.word	0x080084a3
 80083f0:	080085a7 	.word	0x080085a7
 80083f4:	080085a7 	.word	0x080085a7
 80083f8:	080085a7 	.word	0x080085a7
 80083fc:	080084e3 	.word	0x080084e3
 8008400:	080085a7 	.word	0x080085a7
 8008404:	080085a7 	.word	0x080085a7
 8008408:	080085a7 	.word	0x080085a7
 800840c:	08008525 	.word	0x08008525
 8008410:	080085a7 	.word	0x080085a7
 8008414:	080085a7 	.word	0x080085a7
 8008418:	080085a7 	.word	0x080085a7
 800841c:	08008565 	.word	0x08008565
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68b9      	ldr	r1, [r7, #8]
 8008426:	4618      	mov	r0, r3
 8008428:	f000 fab6 	bl	8008998 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	699a      	ldr	r2, [r3, #24]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0208 	orr.w	r2, r2, #8
 800843a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699a      	ldr	r2, [r3, #24]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 0204 	bic.w	r2, r2, #4
 800844a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6999      	ldr	r1, [r3, #24]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	691a      	ldr	r2, [r3, #16]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	430a      	orrs	r2, r1
 800845c:	619a      	str	r2, [r3, #24]
      break;
 800845e:	e0a5      	b.n	80085ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68b9      	ldr	r1, [r7, #8]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 fb26 	bl	8008ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800847a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	699a      	ldr	r2, [r3, #24]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800848a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6999      	ldr	r1, [r3, #24]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	021a      	lsls	r2, r3, #8
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	430a      	orrs	r2, r1
 800849e:	619a      	str	r2, [r3, #24]
      break;
 80084a0:	e084      	b.n	80085ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68b9      	ldr	r1, [r7, #8]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 fb8f 	bl	8008bcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	69da      	ldr	r2, [r3, #28]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f042 0208 	orr.w	r2, r2, #8
 80084bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	69da      	ldr	r2, [r3, #28]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f022 0204 	bic.w	r2, r2, #4
 80084cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	69d9      	ldr	r1, [r3, #28]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	691a      	ldr	r2, [r3, #16]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	61da      	str	r2, [r3, #28]
      break;
 80084e0:	e064      	b.n	80085ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68b9      	ldr	r1, [r7, #8]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 fbf7 	bl	8008cdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	69da      	ldr	r2, [r3, #28]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	69da      	ldr	r2, [r3, #28]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800850c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	69d9      	ldr	r1, [r3, #28]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	021a      	lsls	r2, r3, #8
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	61da      	str	r2, [r3, #28]
      break;
 8008522:	e043      	b.n	80085ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68b9      	ldr	r1, [r7, #8]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fc60 	bl	8008df0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 0208 	orr.w	r2, r2, #8
 800853e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 0204 	bic.w	r2, r2, #4
 800854e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	691a      	ldr	r2, [r3, #16]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008562:	e023      	b.n	80085ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68b9      	ldr	r1, [r7, #8]
 800856a:	4618      	mov	r0, r3
 800856c:	f000 fca4 	bl	8008eb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800857e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800858e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	021a      	lsls	r2, r3, #8
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80085a4:	e002      	b.n	80085ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	75fb      	strb	r3, [r7, #23]
      break;
 80085aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3718      	adds	r7, #24
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop

080085c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <HAL_TIM_ConfigClockSource+0x1c>
 80085d8:	2302      	movs	r3, #2
 80085da:	e0de      	b.n	800879a <HAL_TIM_ConfigClockSource+0x1da>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80085fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80085fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008606:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a63      	ldr	r2, [pc, #396]	@ (80087a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008616:	4293      	cmp	r3, r2
 8008618:	f000 80a9 	beq.w	800876e <HAL_TIM_ConfigClockSource+0x1ae>
 800861c:	4a61      	ldr	r2, [pc, #388]	@ (80087a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800861e:	4293      	cmp	r3, r2
 8008620:	f200 80ae 	bhi.w	8008780 <HAL_TIM_ConfigClockSource+0x1c0>
 8008624:	4a60      	ldr	r2, [pc, #384]	@ (80087a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008626:	4293      	cmp	r3, r2
 8008628:	f000 80a1 	beq.w	800876e <HAL_TIM_ConfigClockSource+0x1ae>
 800862c:	4a5e      	ldr	r2, [pc, #376]	@ (80087a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	f200 80a6 	bhi.w	8008780 <HAL_TIM_ConfigClockSource+0x1c0>
 8008634:	4a5d      	ldr	r2, [pc, #372]	@ (80087ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8008636:	4293      	cmp	r3, r2
 8008638:	f000 8099 	beq.w	800876e <HAL_TIM_ConfigClockSource+0x1ae>
 800863c:	4a5b      	ldr	r2, [pc, #364]	@ (80087ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800863e:	4293      	cmp	r3, r2
 8008640:	f200 809e 	bhi.w	8008780 <HAL_TIM_ConfigClockSource+0x1c0>
 8008644:	4a5a      	ldr	r2, [pc, #360]	@ (80087b0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008646:	4293      	cmp	r3, r2
 8008648:	f000 8091 	beq.w	800876e <HAL_TIM_ConfigClockSource+0x1ae>
 800864c:	4a58      	ldr	r2, [pc, #352]	@ (80087b0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800864e:	4293      	cmp	r3, r2
 8008650:	f200 8096 	bhi.w	8008780 <HAL_TIM_ConfigClockSource+0x1c0>
 8008654:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008658:	f000 8089 	beq.w	800876e <HAL_TIM_ConfigClockSource+0x1ae>
 800865c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008660:	f200 808e 	bhi.w	8008780 <HAL_TIM_ConfigClockSource+0x1c0>
 8008664:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008668:	d03e      	beq.n	80086e8 <HAL_TIM_ConfigClockSource+0x128>
 800866a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800866e:	f200 8087 	bhi.w	8008780 <HAL_TIM_ConfigClockSource+0x1c0>
 8008672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008676:	f000 8086 	beq.w	8008786 <HAL_TIM_ConfigClockSource+0x1c6>
 800867a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800867e:	d87f      	bhi.n	8008780 <HAL_TIM_ConfigClockSource+0x1c0>
 8008680:	2b70      	cmp	r3, #112	@ 0x70
 8008682:	d01a      	beq.n	80086ba <HAL_TIM_ConfigClockSource+0xfa>
 8008684:	2b70      	cmp	r3, #112	@ 0x70
 8008686:	d87b      	bhi.n	8008780 <HAL_TIM_ConfigClockSource+0x1c0>
 8008688:	2b60      	cmp	r3, #96	@ 0x60
 800868a:	d050      	beq.n	800872e <HAL_TIM_ConfigClockSource+0x16e>
 800868c:	2b60      	cmp	r3, #96	@ 0x60
 800868e:	d877      	bhi.n	8008780 <HAL_TIM_ConfigClockSource+0x1c0>
 8008690:	2b50      	cmp	r3, #80	@ 0x50
 8008692:	d03c      	beq.n	800870e <HAL_TIM_ConfigClockSource+0x14e>
 8008694:	2b50      	cmp	r3, #80	@ 0x50
 8008696:	d873      	bhi.n	8008780 <HAL_TIM_ConfigClockSource+0x1c0>
 8008698:	2b40      	cmp	r3, #64	@ 0x40
 800869a:	d058      	beq.n	800874e <HAL_TIM_ConfigClockSource+0x18e>
 800869c:	2b40      	cmp	r3, #64	@ 0x40
 800869e:	d86f      	bhi.n	8008780 <HAL_TIM_ConfigClockSource+0x1c0>
 80086a0:	2b30      	cmp	r3, #48	@ 0x30
 80086a2:	d064      	beq.n	800876e <HAL_TIM_ConfigClockSource+0x1ae>
 80086a4:	2b30      	cmp	r3, #48	@ 0x30
 80086a6:	d86b      	bhi.n	8008780 <HAL_TIM_ConfigClockSource+0x1c0>
 80086a8:	2b20      	cmp	r3, #32
 80086aa:	d060      	beq.n	800876e <HAL_TIM_ConfigClockSource+0x1ae>
 80086ac:	2b20      	cmp	r3, #32
 80086ae:	d867      	bhi.n	8008780 <HAL_TIM_ConfigClockSource+0x1c0>
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d05c      	beq.n	800876e <HAL_TIM_ConfigClockSource+0x1ae>
 80086b4:	2b10      	cmp	r3, #16
 80086b6:	d05a      	beq.n	800876e <HAL_TIM_ConfigClockSource+0x1ae>
 80086b8:	e062      	b.n	8008780 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086ca:	f000 feb9 	bl	8009440 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	609a      	str	r2, [r3, #8]
      break;
 80086e6:	e04f      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086f8:	f000 fea2 	bl	8009440 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	689a      	ldr	r2, [r3, #8]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800870a:	609a      	str	r2, [r3, #8]
      break;
 800870c:	e03c      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800871a:	461a      	mov	r2, r3
 800871c:	f000 fd5e 	bl	80091dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2150      	movs	r1, #80	@ 0x50
 8008726:	4618      	mov	r0, r3
 8008728:	f000 fe6d 	bl	8009406 <TIM_ITRx_SetConfig>
      break;
 800872c:	e02c      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800873a:	461a      	mov	r2, r3
 800873c:	f000 fdba 	bl	80092b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2160      	movs	r1, #96	@ 0x60
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fe5d 	bl	8009406 <TIM_ITRx_SetConfig>
      break;
 800874c:	e01c      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800875a:	461a      	mov	r2, r3
 800875c:	f000 fd3e 	bl	80091dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2140      	movs	r1, #64	@ 0x40
 8008766:	4618      	mov	r0, r3
 8008768:	f000 fe4d 	bl	8009406 <TIM_ITRx_SetConfig>
      break;
 800876c:	e00c      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4619      	mov	r1, r3
 8008778:	4610      	mov	r0, r2
 800877a:	f000 fe44 	bl	8009406 <TIM_ITRx_SetConfig>
      break;
 800877e:	e003      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	73fb      	strb	r3, [r7, #15]
      break;
 8008784:	e000      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008786:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	00100070 	.word	0x00100070
 80087a8:	00100040 	.word	0x00100040
 80087ac:	00100030 	.word	0x00100030
 80087b0:	00100020 	.word	0x00100020

080087b4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d101      	bne.n	80087cc <HAL_TIM_SlaveConfigSynchro+0x18>
 80087c8:	2302      	movs	r3, #2
 80087ca:	e031      	b.n	8008830 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fbd0 	bl	8008f84 <TIM_SlaveTimer_SetConfig>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d009      	beq.n	80087fe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e018      	b.n	8008830 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68da      	ldr	r2, [r3, #12]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800880c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68da      	ldr	r2, [r3, #12]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800881c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a42      	ldr	r2, [pc, #264]	@ (800897c <TIM_Base_SetConfig+0x11c>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d00f      	beq.n	8008898 <TIM_Base_SetConfig+0x38>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800887e:	d00b      	beq.n	8008898 <TIM_Base_SetConfig+0x38>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a3f      	ldr	r2, [pc, #252]	@ (8008980 <TIM_Base_SetConfig+0x120>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d007      	beq.n	8008898 <TIM_Base_SetConfig+0x38>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a3e      	ldr	r2, [pc, #248]	@ (8008984 <TIM_Base_SetConfig+0x124>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d003      	beq.n	8008898 <TIM_Base_SetConfig+0x38>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a3d      	ldr	r2, [pc, #244]	@ (8008988 <TIM_Base_SetConfig+0x128>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d108      	bne.n	80088aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800889e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a33      	ldr	r2, [pc, #204]	@ (800897c <TIM_Base_SetConfig+0x11c>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d01b      	beq.n	80088ea <TIM_Base_SetConfig+0x8a>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088b8:	d017      	beq.n	80088ea <TIM_Base_SetConfig+0x8a>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a30      	ldr	r2, [pc, #192]	@ (8008980 <TIM_Base_SetConfig+0x120>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d013      	beq.n	80088ea <TIM_Base_SetConfig+0x8a>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a2f      	ldr	r2, [pc, #188]	@ (8008984 <TIM_Base_SetConfig+0x124>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d00f      	beq.n	80088ea <TIM_Base_SetConfig+0x8a>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a2e      	ldr	r2, [pc, #184]	@ (8008988 <TIM_Base_SetConfig+0x128>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d00b      	beq.n	80088ea <TIM_Base_SetConfig+0x8a>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a2d      	ldr	r2, [pc, #180]	@ (800898c <TIM_Base_SetConfig+0x12c>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d007      	beq.n	80088ea <TIM_Base_SetConfig+0x8a>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a2c      	ldr	r2, [pc, #176]	@ (8008990 <TIM_Base_SetConfig+0x130>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d003      	beq.n	80088ea <TIM_Base_SetConfig+0x8a>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a2b      	ldr	r2, [pc, #172]	@ (8008994 <TIM_Base_SetConfig+0x134>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d108      	bne.n	80088fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	4313      	orrs	r3, r2
 8008908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	689a      	ldr	r2, [r3, #8]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a16      	ldr	r2, [pc, #88]	@ (800897c <TIM_Base_SetConfig+0x11c>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d00f      	beq.n	8008948 <TIM_Base_SetConfig+0xe8>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a17      	ldr	r2, [pc, #92]	@ (8008988 <TIM_Base_SetConfig+0x128>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d00b      	beq.n	8008948 <TIM_Base_SetConfig+0xe8>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a16      	ldr	r2, [pc, #88]	@ (800898c <TIM_Base_SetConfig+0x12c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d007      	beq.n	8008948 <TIM_Base_SetConfig+0xe8>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a15      	ldr	r2, [pc, #84]	@ (8008990 <TIM_Base_SetConfig+0x130>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d003      	beq.n	8008948 <TIM_Base_SetConfig+0xe8>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a14      	ldr	r2, [pc, #80]	@ (8008994 <TIM_Base_SetConfig+0x134>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d103      	bne.n	8008950 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	691a      	ldr	r2, [r3, #16]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	2b01      	cmp	r3, #1
 8008960:	d105      	bne.n	800896e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	f023 0201 	bic.w	r2, r3, #1
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	611a      	str	r2, [r3, #16]
  }
}
 800896e:	bf00      	nop
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	40012c00 	.word	0x40012c00
 8008980:	40000400 	.word	0x40000400
 8008984:	40000800 	.word	0x40000800
 8008988:	40013400 	.word	0x40013400
 800898c:	40014000 	.word	0x40014000
 8008990:	40014400 	.word	0x40014400
 8008994:	40014800 	.word	0x40014800

08008998 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a1b      	ldr	r3, [r3, #32]
 80089ac:	f023 0201 	bic.w	r2, r3, #1
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f023 0303 	bic.w	r3, r3, #3
 80089d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	4313      	orrs	r3, r2
 80089dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f023 0302 	bic.w	r3, r3, #2
 80089e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a2c      	ldr	r2, [pc, #176]	@ (8008aa4 <TIM_OC1_SetConfig+0x10c>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d00f      	beq.n	8008a18 <TIM_OC1_SetConfig+0x80>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a2b      	ldr	r2, [pc, #172]	@ (8008aa8 <TIM_OC1_SetConfig+0x110>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d00b      	beq.n	8008a18 <TIM_OC1_SetConfig+0x80>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a2a      	ldr	r2, [pc, #168]	@ (8008aac <TIM_OC1_SetConfig+0x114>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d007      	beq.n	8008a18 <TIM_OC1_SetConfig+0x80>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a29      	ldr	r2, [pc, #164]	@ (8008ab0 <TIM_OC1_SetConfig+0x118>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d003      	beq.n	8008a18 <TIM_OC1_SetConfig+0x80>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a28      	ldr	r2, [pc, #160]	@ (8008ab4 <TIM_OC1_SetConfig+0x11c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d10c      	bne.n	8008a32 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f023 0308 	bic.w	r3, r3, #8
 8008a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f023 0304 	bic.w	r3, r3, #4
 8008a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a1b      	ldr	r2, [pc, #108]	@ (8008aa4 <TIM_OC1_SetConfig+0x10c>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d00f      	beq.n	8008a5a <TIM_OC1_SetConfig+0xc2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8008aa8 <TIM_OC1_SetConfig+0x110>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d00b      	beq.n	8008a5a <TIM_OC1_SetConfig+0xc2>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a19      	ldr	r2, [pc, #100]	@ (8008aac <TIM_OC1_SetConfig+0x114>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d007      	beq.n	8008a5a <TIM_OC1_SetConfig+0xc2>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a18      	ldr	r2, [pc, #96]	@ (8008ab0 <TIM_OC1_SetConfig+0x118>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d003      	beq.n	8008a5a <TIM_OC1_SetConfig+0xc2>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a17      	ldr	r2, [pc, #92]	@ (8008ab4 <TIM_OC1_SetConfig+0x11c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d111      	bne.n	8008a7e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	621a      	str	r2, [r3, #32]
}
 8008a98:	bf00      	nop
 8008a9a:	371c      	adds	r7, #28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	40012c00 	.word	0x40012c00
 8008aa8:	40013400 	.word	0x40013400
 8008aac:	40014000 	.word	0x40014000
 8008ab0:	40014400 	.word	0x40014400
 8008ab4:	40014800 	.word	0x40014800

08008ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a1b      	ldr	r3, [r3, #32]
 8008acc:	f023 0210 	bic.w	r2, r3, #16
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	021b      	lsls	r3, r3, #8
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f023 0320 	bic.w	r3, r3, #32
 8008b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a28      	ldr	r2, [pc, #160]	@ (8008bb8 <TIM_OC2_SetConfig+0x100>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d003      	beq.n	8008b24 <TIM_OC2_SetConfig+0x6c>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a27      	ldr	r2, [pc, #156]	@ (8008bbc <TIM_OC2_SetConfig+0x104>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d10d      	bne.n	8008b40 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a1d      	ldr	r2, [pc, #116]	@ (8008bb8 <TIM_OC2_SetConfig+0x100>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d00f      	beq.n	8008b68 <TIM_OC2_SetConfig+0xb0>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8008bbc <TIM_OC2_SetConfig+0x104>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d00b      	beq.n	8008b68 <TIM_OC2_SetConfig+0xb0>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a1b      	ldr	r2, [pc, #108]	@ (8008bc0 <TIM_OC2_SetConfig+0x108>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d007      	beq.n	8008b68 <TIM_OC2_SetConfig+0xb0>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8008bc4 <TIM_OC2_SetConfig+0x10c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d003      	beq.n	8008b68 <TIM_OC2_SetConfig+0xb0>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a19      	ldr	r2, [pc, #100]	@ (8008bc8 <TIM_OC2_SetConfig+0x110>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d113      	bne.n	8008b90 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	695b      	ldr	r3, [r3, #20]
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	621a      	str	r2, [r3, #32]
}
 8008baa:	bf00      	nop
 8008bac:	371c      	adds	r7, #28
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	40012c00 	.word	0x40012c00
 8008bbc:	40013400 	.word	0x40013400
 8008bc0:	40014000 	.word	0x40014000
 8008bc4:	40014400 	.word	0x40014400
 8008bc8:	40014800 	.word	0x40014800

08008bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f023 0303 	bic.w	r3, r3, #3
 8008c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	021b      	lsls	r3, r3, #8
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a27      	ldr	r2, [pc, #156]	@ (8008cc8 <TIM_OC3_SetConfig+0xfc>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d003      	beq.n	8008c36 <TIM_OC3_SetConfig+0x6a>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a26      	ldr	r2, [pc, #152]	@ (8008ccc <TIM_OC3_SetConfig+0x100>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d10d      	bne.n	8008c52 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	021b      	lsls	r3, r3, #8
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a1c      	ldr	r2, [pc, #112]	@ (8008cc8 <TIM_OC3_SetConfig+0xfc>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d00f      	beq.n	8008c7a <TIM_OC3_SetConfig+0xae>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8008ccc <TIM_OC3_SetConfig+0x100>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d00b      	beq.n	8008c7a <TIM_OC3_SetConfig+0xae>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a1a      	ldr	r2, [pc, #104]	@ (8008cd0 <TIM_OC3_SetConfig+0x104>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d007      	beq.n	8008c7a <TIM_OC3_SetConfig+0xae>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a19      	ldr	r2, [pc, #100]	@ (8008cd4 <TIM_OC3_SetConfig+0x108>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d003      	beq.n	8008c7a <TIM_OC3_SetConfig+0xae>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a18      	ldr	r2, [pc, #96]	@ (8008cd8 <TIM_OC3_SetConfig+0x10c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d113      	bne.n	8008ca2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	011b      	lsls	r3, r3, #4
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	011b      	lsls	r3, r3, #4
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	621a      	str	r2, [r3, #32]
}
 8008cbc:	bf00      	nop
 8008cbe:	371c      	adds	r7, #28
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	40012c00 	.word	0x40012c00
 8008ccc:	40013400 	.word	0x40013400
 8008cd0:	40014000 	.word	0x40014000
 8008cd4:	40014400 	.word	0x40014400
 8008cd8:	40014800 	.word	0x40014800

08008cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a1b      	ldr	r3, [r3, #32]
 8008cf0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	021b      	lsls	r3, r3, #8
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	031b      	lsls	r3, r3, #12
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a28      	ldr	r2, [pc, #160]	@ (8008ddc <TIM_OC4_SetConfig+0x100>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d003      	beq.n	8008d48 <TIM_OC4_SetConfig+0x6c>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a27      	ldr	r2, [pc, #156]	@ (8008de0 <TIM_OC4_SetConfig+0x104>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d10d      	bne.n	8008d64 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	031b      	lsls	r3, r3, #12
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a1d      	ldr	r2, [pc, #116]	@ (8008ddc <TIM_OC4_SetConfig+0x100>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d00f      	beq.n	8008d8c <TIM_OC4_SetConfig+0xb0>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8008de0 <TIM_OC4_SetConfig+0x104>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d00b      	beq.n	8008d8c <TIM_OC4_SetConfig+0xb0>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a1b      	ldr	r2, [pc, #108]	@ (8008de4 <TIM_OC4_SetConfig+0x108>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d007      	beq.n	8008d8c <TIM_OC4_SetConfig+0xb0>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8008de8 <TIM_OC4_SetConfig+0x10c>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d003      	beq.n	8008d8c <TIM_OC4_SetConfig+0xb0>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a19      	ldr	r2, [pc, #100]	@ (8008dec <TIM_OC4_SetConfig+0x110>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d113      	bne.n	8008db4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d92:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d9a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	695b      	ldr	r3, [r3, #20]
 8008da0:	019b      	lsls	r3, r3, #6
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	019b      	lsls	r3, r3, #6
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	621a      	str	r2, [r3, #32]
}
 8008dce:	bf00      	nop
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	40012c00 	.word	0x40012c00
 8008de0:	40013400 	.word	0x40013400
 8008de4:	40014000 	.word	0x40014000
 8008de8:	40014400 	.word	0x40014400
 8008dec:	40014800 	.word	0x40014800

08008df0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008e34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	041b      	lsls	r3, r3, #16
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a17      	ldr	r2, [pc, #92]	@ (8008ea4 <TIM_OC5_SetConfig+0xb4>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d00f      	beq.n	8008e6a <TIM_OC5_SetConfig+0x7a>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a16      	ldr	r2, [pc, #88]	@ (8008ea8 <TIM_OC5_SetConfig+0xb8>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d00b      	beq.n	8008e6a <TIM_OC5_SetConfig+0x7a>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a15      	ldr	r2, [pc, #84]	@ (8008eac <TIM_OC5_SetConfig+0xbc>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d007      	beq.n	8008e6a <TIM_OC5_SetConfig+0x7a>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a14      	ldr	r2, [pc, #80]	@ (8008eb0 <TIM_OC5_SetConfig+0xc0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d003      	beq.n	8008e6a <TIM_OC5_SetConfig+0x7a>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a13      	ldr	r2, [pc, #76]	@ (8008eb4 <TIM_OC5_SetConfig+0xc4>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d109      	bne.n	8008e7e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	021b      	lsls	r3, r3, #8
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	621a      	str	r2, [r3, #32]
}
 8008e98:	bf00      	nop
 8008e9a:	371c      	adds	r7, #28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	40012c00 	.word	0x40012c00
 8008ea8:	40013400 	.word	0x40013400
 8008eac:	40014000 	.word	0x40014000
 8008eb0:	40014400 	.word	0x40014400
 8008eb4:	40014800 	.word	0x40014800

08008eb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b087      	sub	sp, #28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a1b      	ldr	r3, [r3, #32]
 8008ecc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	021b      	lsls	r3, r3, #8
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	051b      	lsls	r3, r3, #20
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a18      	ldr	r2, [pc, #96]	@ (8008f70 <TIM_OC6_SetConfig+0xb8>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d00f      	beq.n	8008f34 <TIM_OC6_SetConfig+0x7c>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a17      	ldr	r2, [pc, #92]	@ (8008f74 <TIM_OC6_SetConfig+0xbc>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d00b      	beq.n	8008f34 <TIM_OC6_SetConfig+0x7c>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a16      	ldr	r2, [pc, #88]	@ (8008f78 <TIM_OC6_SetConfig+0xc0>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d007      	beq.n	8008f34 <TIM_OC6_SetConfig+0x7c>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a15      	ldr	r2, [pc, #84]	@ (8008f7c <TIM_OC6_SetConfig+0xc4>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d003      	beq.n	8008f34 <TIM_OC6_SetConfig+0x7c>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a14      	ldr	r2, [pc, #80]	@ (8008f80 <TIM_OC6_SetConfig+0xc8>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d109      	bne.n	8008f48 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	695b      	ldr	r3, [r3, #20]
 8008f40:	029b      	lsls	r3, r3, #10
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	621a      	str	r2, [r3, #32]
}
 8008f62:	bf00      	nop
 8008f64:	371c      	adds	r7, #28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	40012c00 	.word	0x40012c00
 8008f74:	40013400 	.word	0x40013400
 8008f78:	40014000 	.word	0x40014000
 8008f7c:	40014400 	.word	0x40014400
 8008f80:	40014800 	.word	0x40014800

08008f84 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fa4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fb6:	f023 0307 	bic.w	r3, r3, #7
 8008fba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	4a4a      	ldr	r2, [pc, #296]	@ (80090fc <TIM_SlaveTimer_SetConfig+0x178>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	f000 808a 	beq.w	80090ee <TIM_SlaveTimer_SetConfig+0x16a>
 8008fda:	4a48      	ldr	r2, [pc, #288]	@ (80090fc <TIM_SlaveTimer_SetConfig+0x178>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	f200 8083 	bhi.w	80090e8 <TIM_SlaveTimer_SetConfig+0x164>
 8008fe2:	4a47      	ldr	r2, [pc, #284]	@ (8009100 <TIM_SlaveTimer_SetConfig+0x17c>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	f000 8082 	beq.w	80090ee <TIM_SlaveTimer_SetConfig+0x16a>
 8008fea:	4a45      	ldr	r2, [pc, #276]	@ (8009100 <TIM_SlaveTimer_SetConfig+0x17c>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d87b      	bhi.n	80090e8 <TIM_SlaveTimer_SetConfig+0x164>
 8008ff0:	4a44      	ldr	r2, [pc, #272]	@ (8009104 <TIM_SlaveTimer_SetConfig+0x180>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d07b      	beq.n	80090ee <TIM_SlaveTimer_SetConfig+0x16a>
 8008ff6:	4a43      	ldr	r2, [pc, #268]	@ (8009104 <TIM_SlaveTimer_SetConfig+0x180>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d875      	bhi.n	80090e8 <TIM_SlaveTimer_SetConfig+0x164>
 8008ffc:	4a42      	ldr	r2, [pc, #264]	@ (8009108 <TIM_SlaveTimer_SetConfig+0x184>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d075      	beq.n	80090ee <TIM_SlaveTimer_SetConfig+0x16a>
 8009002:	4a41      	ldr	r2, [pc, #260]	@ (8009108 <TIM_SlaveTimer_SetConfig+0x184>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d86f      	bhi.n	80090e8 <TIM_SlaveTimer_SetConfig+0x164>
 8009008:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800900c:	d06f      	beq.n	80090ee <TIM_SlaveTimer_SetConfig+0x16a>
 800900e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009012:	d869      	bhi.n	80090e8 <TIM_SlaveTimer_SetConfig+0x164>
 8009014:	2b70      	cmp	r3, #112	@ 0x70
 8009016:	d01a      	beq.n	800904e <TIM_SlaveTimer_SetConfig+0xca>
 8009018:	2b70      	cmp	r3, #112	@ 0x70
 800901a:	d865      	bhi.n	80090e8 <TIM_SlaveTimer_SetConfig+0x164>
 800901c:	2b60      	cmp	r3, #96	@ 0x60
 800901e:	d059      	beq.n	80090d4 <TIM_SlaveTimer_SetConfig+0x150>
 8009020:	2b60      	cmp	r3, #96	@ 0x60
 8009022:	d861      	bhi.n	80090e8 <TIM_SlaveTimer_SetConfig+0x164>
 8009024:	2b50      	cmp	r3, #80	@ 0x50
 8009026:	d04b      	beq.n	80090c0 <TIM_SlaveTimer_SetConfig+0x13c>
 8009028:	2b50      	cmp	r3, #80	@ 0x50
 800902a:	d85d      	bhi.n	80090e8 <TIM_SlaveTimer_SetConfig+0x164>
 800902c:	2b40      	cmp	r3, #64	@ 0x40
 800902e:	d019      	beq.n	8009064 <TIM_SlaveTimer_SetConfig+0xe0>
 8009030:	2b40      	cmp	r3, #64	@ 0x40
 8009032:	d859      	bhi.n	80090e8 <TIM_SlaveTimer_SetConfig+0x164>
 8009034:	2b30      	cmp	r3, #48	@ 0x30
 8009036:	d05a      	beq.n	80090ee <TIM_SlaveTimer_SetConfig+0x16a>
 8009038:	2b30      	cmp	r3, #48	@ 0x30
 800903a:	d855      	bhi.n	80090e8 <TIM_SlaveTimer_SetConfig+0x164>
 800903c:	2b20      	cmp	r3, #32
 800903e:	d056      	beq.n	80090ee <TIM_SlaveTimer_SetConfig+0x16a>
 8009040:	2b20      	cmp	r3, #32
 8009042:	d851      	bhi.n	80090e8 <TIM_SlaveTimer_SetConfig+0x164>
 8009044:	2b00      	cmp	r3, #0
 8009046:	d052      	beq.n	80090ee <TIM_SlaveTimer_SetConfig+0x16a>
 8009048:	2b10      	cmp	r3, #16
 800904a:	d050      	beq.n	80090ee <TIM_SlaveTimer_SetConfig+0x16a>
 800904c:	e04c      	b.n	80090e8 <TIM_SlaveTimer_SetConfig+0x164>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800905e:	f000 f9ef 	bl	8009440 <TIM_ETR_SetConfig>
      break;
 8009062:	e045      	b.n	80090f0 <TIM_SlaveTimer_SetConfig+0x16c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b05      	cmp	r3, #5
 800906a:	d004      	beq.n	8009076 <TIM_SlaveTimer_SetConfig+0xf2>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009070:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8009074:	d101      	bne.n	800907a <TIM_SlaveTimer_SetConfig+0xf6>
      {
        return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e03b      	b.n	80090f2 <TIM_SlaveTimer_SetConfig+0x16e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6a1a      	ldr	r2, [r3, #32]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f022 0201 	bic.w	r2, r2, #1
 8009090:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090a0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	621a      	str	r2, [r3, #32]
      break;
 80090be:	e017      	b.n	80090f0 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090cc:	461a      	mov	r2, r3
 80090ce:	f000 f885 	bl	80091dc <TIM_TI1_ConfigInputStage>
      break;
 80090d2:	e00d      	b.n	80090f0 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090e0:	461a      	mov	r2, r3
 80090e2:	f000 f8e7 	bl	80092b4 <TIM_TI2_ConfigInputStage>
      break;
 80090e6:	e003      	b.n	80090f0 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	75fb      	strb	r3, [r7, #23]
      break;
 80090ec:	e000      	b.n	80090f0 <TIM_SlaveTimer_SetConfig+0x16c>
      break;
 80090ee:	bf00      	nop
  }

  return status;
 80090f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3718      	adds	r7, #24
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	00100070 	.word	0x00100070
 8009100:	00100040 	.word	0x00100040
 8009104:	00100030 	.word	0x00100030
 8009108:	00100020 	.word	0x00100020

0800910c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800910c:	b480      	push	{r7}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	f023 0201 	bic.w	r2, r3, #1
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	4a24      	ldr	r2, [pc, #144]	@ (80091c8 <TIM_TI1_SetConfig+0xbc>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d013      	beq.n	8009162 <TIM_TI1_SetConfig+0x56>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009140:	d00f      	beq.n	8009162 <TIM_TI1_SetConfig+0x56>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	4a21      	ldr	r2, [pc, #132]	@ (80091cc <TIM_TI1_SetConfig+0xc0>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d00b      	beq.n	8009162 <TIM_TI1_SetConfig+0x56>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	4a20      	ldr	r2, [pc, #128]	@ (80091d0 <TIM_TI1_SetConfig+0xc4>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d007      	beq.n	8009162 <TIM_TI1_SetConfig+0x56>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4a1f      	ldr	r2, [pc, #124]	@ (80091d4 <TIM_TI1_SetConfig+0xc8>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d003      	beq.n	8009162 <TIM_TI1_SetConfig+0x56>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	4a1e      	ldr	r2, [pc, #120]	@ (80091d8 <TIM_TI1_SetConfig+0xcc>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d101      	bne.n	8009166 <TIM_TI1_SetConfig+0x5a>
 8009162:	2301      	movs	r3, #1
 8009164:	e000      	b.n	8009168 <TIM_TI1_SetConfig+0x5c>
 8009166:	2300      	movs	r3, #0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d008      	beq.n	800917e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	f023 0303 	bic.w	r3, r3, #3
 8009172:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4313      	orrs	r3, r2
 800917a:	617b      	str	r3, [r7, #20]
 800917c:	e003      	b.n	8009186 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f043 0301 	orr.w	r3, r3, #1
 8009184:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800918c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	011b      	lsls	r3, r3, #4
 8009192:	b2db      	uxtb	r3, r3
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	4313      	orrs	r3, r2
 8009198:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f023 030a 	bic.w	r3, r3, #10
 80091a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	f003 030a 	and.w	r3, r3, #10
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	621a      	str	r2, [r3, #32]
}
 80091ba:	bf00      	nop
 80091bc:	371c      	adds	r7, #28
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	40012c00 	.word	0x40012c00
 80091cc:	40000400 	.word	0x40000400
 80091d0:	40000800 	.word	0x40000800
 80091d4:	40013400 	.word	0x40013400
 80091d8:	40014000 	.word	0x40014000

080091dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091dc:	b480      	push	{r7}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	f023 0201 	bic.w	r2, r3, #1
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f023 030a 	bic.w	r3, r3, #10
 8009218:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	4313      	orrs	r3, r2
 8009220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	621a      	str	r2, [r3, #32]
}
 800922e:	bf00      	nop
 8009230:	371c      	adds	r7, #28
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800923a:	b480      	push	{r7}
 800923c:	b087      	sub	sp, #28
 800923e:	af00      	add	r7, sp, #0
 8009240:	60f8      	str	r0, [r7, #12]
 8009242:	60b9      	str	r1, [r7, #8]
 8009244:	607a      	str	r2, [r7, #4]
 8009246:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6a1b      	ldr	r3, [r3, #32]
 800924c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6a1b      	ldr	r3, [r3, #32]
 8009252:	f023 0210 	bic.w	r2, r3, #16
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	021b      	lsls	r3, r3, #8
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	4313      	orrs	r3, r2
 8009270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009278:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	031b      	lsls	r3, r3, #12
 800927e:	b29b      	uxth	r3, r3
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	4313      	orrs	r3, r2
 8009284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800928c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	011b      	lsls	r3, r3, #4
 8009292:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	4313      	orrs	r3, r2
 800929a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	621a      	str	r2, [r3, #32]
}
 80092a8:	bf00      	nop
 80092aa:	371c      	adds	r7, #28
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b087      	sub	sp, #28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6a1b      	ldr	r3, [r3, #32]
 80092c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6a1b      	ldr	r3, [r3, #32]
 80092ca:	f023 0210 	bic.w	r2, r3, #16
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	031b      	lsls	r3, r3, #12
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	011b      	lsls	r3, r3, #4
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	693a      	ldr	r2, [r7, #16]
 8009300:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	621a      	str	r2, [r3, #32]
}
 8009308:	bf00      	nop
 800930a:	371c      	adds	r7, #28
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009314:	b480      	push	{r7}
 8009316:	b087      	sub	sp, #28
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	607a      	str	r2, [r7, #4]
 8009320:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f023 0303 	bic.w	r3, r3, #3
 8009340:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4313      	orrs	r3, r2
 8009348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009350:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	011b      	lsls	r3, r3, #4
 8009356:	b2db      	uxtb	r3, r3
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	4313      	orrs	r3, r2
 800935c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009364:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	021b      	lsls	r3, r3, #8
 800936a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	4313      	orrs	r3, r2
 8009372:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	621a      	str	r2, [r3, #32]
}
 8009380:	bf00      	nop
 8009382:	371c      	adds	r7, #28
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
 8009398:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	021b      	lsls	r3, r3, #8
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80093ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	031b      	lsls	r3, r3, #12
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80093de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	031b      	lsls	r3, r3, #12
 80093e4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	621a      	str	r2, [r3, #32]
}
 80093fa:	bf00      	nop
 80093fc:	371c      	adds	r7, #28
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr

08009406 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009406:	b480      	push	{r7}
 8009408:	b085      	sub	sp, #20
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800941c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4313      	orrs	r3, r2
 8009428:	f043 0307 	orr.w	r3, r3, #7
 800942c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	609a      	str	r2, [r3, #8]
}
 8009434:	bf00      	nop
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009440:	b480      	push	{r7}
 8009442:	b087      	sub	sp, #28
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
 800944c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800945a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	021a      	lsls	r2, r3, #8
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	431a      	orrs	r2, r3
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	4313      	orrs	r3, r2
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	4313      	orrs	r3, r2
 800946c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	609a      	str	r2, [r3, #8]
}
 8009474:	bf00      	nop
 8009476:	371c      	adds	r7, #28
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009480:	b480      	push	{r7}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	f003 031f 	and.w	r3, r3, #31
 8009492:	2201      	movs	r2, #1
 8009494:	fa02 f303 	lsl.w	r3, r2, r3
 8009498:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6a1a      	ldr	r2, [r3, #32]
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	43db      	mvns	r3, r3
 80094a2:	401a      	ands	r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6a1a      	ldr	r2, [r3, #32]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f003 031f 	and.w	r3, r3, #31
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	fa01 f303 	lsl.w	r3, r1, r3
 80094b8:	431a      	orrs	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	621a      	str	r2, [r3, #32]
}
 80094be:	bf00      	nop
 80094c0:	371c      	adds	r7, #28
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
	...

080094cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d101      	bne.n	80094e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094e0:	2302      	movs	r3, #2
 80094e2:	e065      	b.n	80095b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2202      	movs	r2, #2
 80094f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a2c      	ldr	r2, [pc, #176]	@ (80095bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d004      	beq.n	8009518 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a2b      	ldr	r2, [pc, #172]	@ (80095c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d108      	bne.n	800952a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800951e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	4313      	orrs	r3, r2
 8009528:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009534:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	4313      	orrs	r3, r2
 800953e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a1b      	ldr	r2, [pc, #108]	@ (80095bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d018      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800955a:	d013      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a18      	ldr	r2, [pc, #96]	@ (80095c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d00e      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a17      	ldr	r2, [pc, #92]	@ (80095c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d009      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a12      	ldr	r2, [pc, #72]	@ (80095c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d004      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a13      	ldr	r2, [pc, #76]	@ (80095cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d10c      	bne.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800958a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	4313      	orrs	r3, r2
 8009594:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	40012c00 	.word	0x40012c00
 80095c0:	40013400 	.word	0x40013400
 80095c4:	40000400 	.word	0x40000400
 80095c8:	40000800 	.word	0x40000800
 80095cc:	40014000 	.word	0x40014000

080095d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d101      	bne.n	80095ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80095e8:	2302      	movs	r3, #2
 80095ea:	e073      	b.n	80096d4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	4313      	orrs	r3, r2
 8009600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	4313      	orrs	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	4313      	orrs	r3, r2
 800961c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4313      	orrs	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	4313      	orrs	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	695b      	ldr	r3, [r3, #20]
 8009644:	4313      	orrs	r3, r2
 8009646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009652:	4313      	orrs	r3, r2
 8009654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	041b      	lsls	r3, r3, #16
 8009662:	4313      	orrs	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	69db      	ldr	r3, [r3, #28]
 8009670:	4313      	orrs	r3, r2
 8009672:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a19      	ldr	r2, [pc, #100]	@ (80096e0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d004      	beq.n	8009688 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a18      	ldr	r2, [pc, #96]	@ (80096e4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d11c      	bne.n	80096c2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009692:	051b      	lsls	r3, r3, #20
 8009694:	4313      	orrs	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b0:	4313      	orrs	r3, r2
 80096b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096be:	4313      	orrs	r3, r2
 80096c0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	40012c00 	.word	0x40012c00
 80096e4:	40013400 	.word	0x40013400

080096e8 <HAL_TIMEx_RemapConfig>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  __HAL_LOCK(htim);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d101      	bne.n	8009700 <HAL_TIMEx_RemapConfig+0x18>
 80096fc:	2302      	movs	r3, #2
 80096fe:	e012      	b.n	8009726 <HAL_TIMEx_RemapConfig+0x3e>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  MODIFY_REG(htim->Instance->AF1, TIM1_AF1_ETRSEL_Msk, Remap);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800970e:	f423 3170 	bic.w	r1, r3, #245760	@ 0x3c000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	683a      	ldr	r2, [r7, #0]
 8009718:	430a      	orrs	r2, r1
 800971a:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(htim);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
	...

08009734 <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8009734:	b480      	push	{r7}
 8009736:	b087      	sub	sp, #28
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800974a:	2b01      	cmp	r3, #1
 800974c:	d101      	bne.n	8009752 <HAL_TIMEx_TISelection+0x1e>
 800974e:	2302      	movs	r3, #2
 8009750:	e073      	b.n	800983a <HAL_TIMEx_TISelection+0x106>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b0c      	cmp	r3, #12
 800975e:	d864      	bhi.n	800982a <HAL_TIMEx_TISelection+0xf6>
 8009760:	a201      	add	r2, pc, #4	@ (adr r2, 8009768 <HAL_TIMEx_TISelection+0x34>)
 8009762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009766:	bf00      	nop
 8009768:	0800979d 	.word	0x0800979d
 800976c:	0800982b 	.word	0x0800982b
 8009770:	0800982b 	.word	0x0800982b
 8009774:	0800982b 	.word	0x0800982b
 8009778:	080097e9 	.word	0x080097e9
 800977c:	0800982b 	.word	0x0800982b
 8009780:	0800982b 	.word	0x0800982b
 8009784:	0800982b 	.word	0x0800982b
 8009788:	080097ff 	.word	0x080097ff
 800978c:	0800982b 	.word	0x0800982b
 8009790:	0800982b 	.word	0x0800982b
 8009794:	0800982b 	.word	0x0800982b
 8009798:	08009815 	.word	0x08009815
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097a2:	f023 010f 	bic.w	r1, r3, #15
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	430a      	orrs	r2, r1
 80097ae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a24      	ldr	r2, [pc, #144]	@ (8009848 <HAL_TIMEx_TISelection+0x114>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d004      	beq.n	80097c4 <HAL_TIMEx_TISelection+0x90>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a23      	ldr	r2, [pc, #140]	@ (800984c <HAL_TIMEx_TISelection+0x118>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d108      	bne.n	80097d6 <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f042 0201 	orr.w	r2, r2, #1
 80097d2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 80097d4:	e02c      	b.n	8009830 <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 0201 	bic.w	r2, r2, #1
 80097e4:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80097e6:	e023      	b.n	8009830 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097ee:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	430a      	orrs	r2, r1
 80097fa:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80097fc:	e018      	b.n	8009830 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009804:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	430a      	orrs	r2, r1
 8009810:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8009812:	e00d      	b.n	8009830 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800981a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	430a      	orrs	r2, r1
 8009826:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8009828:	e002      	b.n	8009830 <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	75fb      	strb	r3, [r7, #23]
      break;
 800982e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009838:	7dfb      	ldrb	r3, [r7, #23]
}
 800983a:	4618      	mov	r0, r3
 800983c:	371c      	adds	r7, #28
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	40014400 	.word	0x40014400
 800984c:	40014800 	.word	0x40014800

08009850 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009894:	bf00      	nop
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80098a8:	bf00      	nop
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e04a      	b.n	8009984 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d106      	bne.n	8009906 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7f9 faa7 	bl	8002e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2224      	movs	r2, #36	@ 0x24
 800990a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f022 0201 	bic.w	r2, r2, #1
 800991c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fefe 	bl	800a728 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fc2f 	bl	800a190 <UART_SetConfig>
 8009932:	4603      	mov	r3, r0
 8009934:	2b01      	cmp	r3, #1
 8009936:	d101      	bne.n	800993c <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	e023      	b.n	8009984 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800994a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	689a      	ldr	r2, [r3, #8]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800995a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	689a      	ldr	r2, [r3, #8]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f042 0208 	orr.w	r2, r2, #8
 800996a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f042 0201 	orr.w	r2, r2, #1
 800997a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 ff75 	bl	800a86c <UART_CheckIdleState>
 8009982:	4603      	mov	r3, r0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3708      	adds	r7, #8
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b08a      	sub	sp, #40	@ 0x28
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	4613      	mov	r3, r2
 8009998:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099a0:	2b20      	cmp	r3, #32
 80099a2:	d137      	bne.n	8009a14 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d002      	beq.n	80099b0 <HAL_UART_Receive_IT+0x24>
 80099aa:	88fb      	ldrh	r3, [r7, #6]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d101      	bne.n	80099b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e030      	b.n	8009a16 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a18      	ldr	r2, [pc, #96]	@ (8009a20 <HAL_UART_Receive_IT+0x94>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d01f      	beq.n	8009a04 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d018      	beq.n	8009a04 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	e853 3f00 	ldrex	r3, [r3]
 80099de:	613b      	str	r3, [r7, #16]
   return(result);
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80099e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	461a      	mov	r2, r3
 80099ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f0:	623b      	str	r3, [r7, #32]
 80099f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f4:	69f9      	ldr	r1, [r7, #28]
 80099f6:	6a3a      	ldr	r2, [r7, #32]
 80099f8:	e841 2300 	strex	r3, r2, [r1]
 80099fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1e6      	bne.n	80099d2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009a04:	88fb      	ldrh	r3, [r7, #6]
 8009a06:	461a      	mov	r2, r3
 8009a08:	68b9      	ldr	r1, [r7, #8]
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f001 f846 	bl	800aa9c <UART_Start_Receive_IT>
 8009a10:	4603      	mov	r3, r0
 8009a12:	e000      	b.n	8009a16 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009a14:	2302      	movs	r3, #2
  }
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3728      	adds	r7, #40	@ 0x28
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	40008000 	.word	0x40008000

08009a24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b0ba      	sub	sp, #232	@ 0xe8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	69db      	ldr	r3, [r3, #28]
 8009a32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009a4e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009a52:	4013      	ands	r3, r2
 8009a54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009a58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d11b      	bne.n	8009a98 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a64:	f003 0320 	and.w	r3, r3, #32
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d015      	beq.n	8009a98 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a70:	f003 0320 	and.w	r3, r3, #32
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d105      	bne.n	8009a84 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d009      	beq.n	8009a98 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 8300 	beq.w	800a08e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	4798      	blx	r3
      }
      return;
 8009a96:	e2fa      	b.n	800a08e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 8123 	beq.w	8009ce8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009aa2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009aa6:	4b8d      	ldr	r3, [pc, #564]	@ (8009cdc <HAL_UART_IRQHandler+0x2b8>)
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d106      	bne.n	8009abc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009aae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009ab2:	4b8b      	ldr	r3, [pc, #556]	@ (8009ce0 <HAL_UART_IRQHandler+0x2bc>)
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 8116 	beq.w	8009ce8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d011      	beq.n	8009aec <HAL_UART_IRQHandler+0xc8>
 8009ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00b      	beq.n	8009aec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ae2:	f043 0201 	orr.w	r2, r3, #1
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009af0:	f003 0302 	and.w	r3, r3, #2
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d011      	beq.n	8009b1c <HAL_UART_IRQHandler+0xf8>
 8009af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00b      	beq.n	8009b1c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2202      	movs	r2, #2
 8009b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b12:	f043 0204 	orr.w	r2, r3, #4
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b20:	f003 0304 	and.w	r3, r3, #4
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d011      	beq.n	8009b4c <HAL_UART_IRQHandler+0x128>
 8009b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b2c:	f003 0301 	and.w	r3, r3, #1
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00b      	beq.n	8009b4c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2204      	movs	r2, #4
 8009b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b42:	f043 0202 	orr.w	r2, r3, #2
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b50:	f003 0308 	and.w	r3, r3, #8
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d017      	beq.n	8009b88 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b5c:	f003 0320 	and.w	r3, r3, #32
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d105      	bne.n	8009b70 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b68:	4b5c      	ldr	r3, [pc, #368]	@ (8009cdc <HAL_UART_IRQHandler+0x2b8>)
 8009b6a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2208      	movs	r2, #8
 8009b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b7e:	f043 0208 	orr.w	r2, r3, #8
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d012      	beq.n	8009bba <HAL_UART_IRQHandler+0x196>
 8009b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00c      	beq.n	8009bba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bb0:	f043 0220 	orr.w	r2, r3, #32
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 8266 	beq.w	800a092 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bca:	f003 0320 	and.w	r3, r3, #32
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d013      	beq.n	8009bfa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bd6:	f003 0320 	and.w	r3, r3, #32
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d105      	bne.n	8009bea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d007      	beq.n	8009bfa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d003      	beq.n	8009bfa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c0e:	2b40      	cmp	r3, #64	@ 0x40
 8009c10:	d005      	beq.n	8009c1e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d054      	beq.n	8009cc8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f001 f85e 	bl	800ace0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c2e:	2b40      	cmp	r3, #64	@ 0x40
 8009c30:	d146      	bne.n	8009cc0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	3308      	adds	r3, #8
 8009c38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c40:	e853 3f00 	ldrex	r3, [r3]
 8009c44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	3308      	adds	r3, #8
 8009c5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009c5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009c62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009c6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009c6e:	e841 2300 	strex	r3, r2, [r1]
 8009c72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1d9      	bne.n	8009c32 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d017      	beq.n	8009cb8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c8e:	4a15      	ldr	r2, [pc, #84]	@ (8009ce4 <HAL_UART_IRQHandler+0x2c0>)
 8009c90:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fc f839 	bl	8005d10 <HAL_DMA_Abort_IT>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d019      	beq.n	8009cd8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cb6:	e00f      	b.n	8009cd8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f9ff 	bl	800a0bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cbe:	e00b      	b.n	8009cd8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f9fb 	bl	800a0bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cc6:	e007      	b.n	8009cd8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f9f7 	bl	800a0bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009cd6:	e1dc      	b.n	800a092 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cd8:	bf00      	nop
    return;
 8009cda:	e1da      	b.n	800a092 <HAL_UART_IRQHandler+0x66e>
 8009cdc:	10000001 	.word	0x10000001
 8009ce0:	04000120 	.word	0x04000120
 8009ce4:	0800adad 	.word	0x0800adad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	f040 8170 	bne.w	8009fd2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cf6:	f003 0310 	and.w	r3, r3, #16
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 8169 	beq.w	8009fd2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d04:	f003 0310 	and.w	r3, r3, #16
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f000 8162 	beq.w	8009fd2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2210      	movs	r2, #16
 8009d14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d20:	2b40      	cmp	r3, #64	@ 0x40
 8009d22:	f040 80d8 	bne.w	8009ed6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 80af 	beq.w	8009e9c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	f080 80a7 	bcs.w	8009e9c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 0320 	and.w	r3, r3, #32
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f040 8087 	bne.w	8009e7a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d78:	e853 3f00 	ldrex	r3, [r3]
 8009d7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	461a      	mov	r2, r3
 8009d92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d9a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009da2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009da6:	e841 2300 	strex	r3, r2, [r1]
 8009daa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1da      	bne.n	8009d6c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3308      	adds	r3, #8
 8009dbc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009dc0:	e853 3f00 	ldrex	r3, [r3]
 8009dc4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009dc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dc8:	f023 0301 	bic.w	r3, r3, #1
 8009dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009dda:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009dde:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009de2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009de6:	e841 2300 	strex	r3, r2, [r1]
 8009dea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1e1      	bne.n	8009db6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	3308      	adds	r3, #8
 8009df8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009dfc:	e853 3f00 	ldrex	r3, [r3]
 8009e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	3308      	adds	r3, #8
 8009e12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009e16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e3      	bne.n	8009df2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2220      	movs	r2, #32
 8009e2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e40:	e853 3f00 	ldrex	r3, [r3]
 8009e44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e48:	f023 0310 	bic.w	r3, r3, #16
 8009e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	461a      	mov	r2, r3
 8009e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e4      	bne.n	8009e38 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7fb fef2 	bl	8005c5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2202      	movs	r2, #2
 8009e7e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 f91b 	bl	800a0d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009e9a:	e0fc      	b.n	800a096 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	f040 80f5 	bne.w	800a096 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 0320 	and.w	r3, r3, #32
 8009eba:	2b20      	cmp	r3, #32
 8009ebc:	f040 80eb 	bne.w	800a096 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f8fe 	bl	800a0d0 <HAL_UARTEx_RxEventCallback>
      return;
 8009ed4:	e0df      	b.n	800a096 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f000 80d1 	beq.w	800a09a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009ef8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 80cc 	beq.w	800a09a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0a:	e853 3f00 	ldrex	r3, [r3]
 8009f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f2c:	e841 2300 	strex	r3, r2, [r1]
 8009f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1e4      	bne.n	8009f02 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f42:	e853 3f00 	ldrex	r3, [r3]
 8009f46:	623b      	str	r3, [r7, #32]
   return(result);
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f4e:	f023 0301 	bic.w	r3, r3, #1
 8009f52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3308      	adds	r3, #8
 8009f5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009f60:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f68:	e841 2300 	strex	r3, r2, [r1]
 8009f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e1      	bne.n	8009f38 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2220      	movs	r2, #32
 8009f78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	e853 3f00 	ldrex	r3, [r3]
 8009f94:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f023 0310 	bic.w	r3, r3, #16
 8009f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009faa:	61fb      	str	r3, [r7, #28]
 8009fac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fae:	69b9      	ldr	r1, [r7, #24]
 8009fb0:	69fa      	ldr	r2, [r7, #28]
 8009fb2:	e841 2300 	strex	r3, r2, [r1]
 8009fb6:	617b      	str	r3, [r7, #20]
   return(result);
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1e4      	bne.n	8009f88 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f880 	bl	800a0d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009fd0:	e063      	b.n	800a09a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00e      	beq.n	8009ffc <HAL_UART_IRQHandler+0x5d8>
 8009fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d008      	beq.n	8009ffc <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009ff2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 fc37 	bl	800b868 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ffa:	e051      	b.n	800a0a0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a004:	2b00      	cmp	r3, #0
 800a006:	d014      	beq.n	800a032 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a00c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a010:	2b00      	cmp	r3, #0
 800a012:	d105      	bne.n	800a020 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a018:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d008      	beq.n	800a032 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a024:	2b00      	cmp	r3, #0
 800a026:	d03a      	beq.n	800a09e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	4798      	blx	r3
    }
    return;
 800a030:	e035      	b.n	800a09e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d009      	beq.n	800a052 <HAL_UART_IRQHandler+0x62e>
 800a03e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a046:	2b00      	cmp	r3, #0
 800a048:	d003      	beq.n	800a052 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fec0 	bl	800add0 <UART_EndTransmit_IT>
    return;
 800a050:	e026      	b.n	800a0a0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d009      	beq.n	800a072 <HAL_UART_IRQHandler+0x64e>
 800a05e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a062:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a066:	2b00      	cmp	r3, #0
 800a068:	d003      	beq.n	800a072 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f001 fc10 	bl	800b890 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a070:	e016      	b.n	800a0a0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a076:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d010      	beq.n	800a0a0 <HAL_UART_IRQHandler+0x67c>
 800a07e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a082:	2b00      	cmp	r3, #0
 800a084:	da0c      	bge.n	800a0a0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f001 fbf8 	bl	800b87c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a08c:	e008      	b.n	800a0a0 <HAL_UART_IRQHandler+0x67c>
      return;
 800a08e:	bf00      	nop
 800a090:	e006      	b.n	800a0a0 <HAL_UART_IRQHandler+0x67c>
    return;
 800a092:	bf00      	nop
 800a094:	e004      	b.n	800a0a0 <HAL_UART_IRQHandler+0x67c>
      return;
 800a096:	bf00      	nop
 800a098:	e002      	b.n	800a0a0 <HAL_UART_IRQHandler+0x67c>
      return;
 800a09a:	bf00      	nop
 800a09c:	e000      	b.n	800a0a0 <HAL_UART_IRQHandler+0x67c>
    return;
 800a09e:	bf00      	nop
  }
}
 800a0a0:	37e8      	adds	r7, #232	@ 0xe8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop

0800a0a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b08f      	sub	sp, #60	@ 0x3c
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d101      	bne.n	800a0fe <HAL_HalfDuplex_EnableReceiver+0x16>
 800a0fa:	2302      	movs	r3, #2
 800a0fc:	e042      	b.n	800a184 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2224      	movs	r2, #36	@ 0x24
 800a10a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	e853 3f00 	ldrex	r3, [r3]
 800a11a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	f023 030c 	bic.w	r3, r3, #12
 800a122:	637b      	str	r3, [r7, #52]	@ 0x34
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	461a      	mov	r2, r3
 800a12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a12c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a12e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a134:	e841 2300 	strex	r3, r2, [r1]
 800a138:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1e6      	bne.n	800a10e <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	e853 3f00 	ldrex	r3, [r3]
 800a14c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	f043 0304 	orr.w	r3, r3, #4
 800a154:	633b      	str	r3, [r7, #48]	@ 0x30
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15e:	61bb      	str	r3, [r7, #24]
 800a160:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a162:	6979      	ldr	r1, [r7, #20]
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	e841 2300 	strex	r3, r2, [r1]
 800a16a:	613b      	str	r3, [r7, #16]
   return(result);
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1e6      	bne.n	800a140 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2220      	movs	r2, #32
 800a176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	373c      	adds	r7, #60	@ 0x3c
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a194:	b08c      	sub	sp, #48	@ 0x30
 800a196:	af00      	add	r7, sp, #0
 800a198:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	689a      	ldr	r2, [r3, #8]
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	695b      	ldr	r3, [r3, #20]
 800a1ae:	431a      	orrs	r2, r3
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	69db      	ldr	r3, [r3, #28]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	4bab      	ldr	r3, [pc, #684]	@ (800a46c <UART_SetConfig+0x2dc>)
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	6812      	ldr	r2, [r2, #0]
 800a1c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1c8:	430b      	orrs	r3, r1
 800a1ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	68da      	ldr	r2, [r3, #12]
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	430a      	orrs	r2, r1
 800a1e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4aa0      	ldr	r2, [pc, #640]	@ (800a470 <UART_SetConfig+0x2e0>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d004      	beq.n	800a1fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a206:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	6812      	ldr	r2, [r2, #0]
 800a20e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a210:	430b      	orrs	r3, r1
 800a212:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a21a:	f023 010f 	bic.w	r1, r3, #15
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	430a      	orrs	r2, r1
 800a228:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a91      	ldr	r2, [pc, #580]	@ (800a474 <UART_SetConfig+0x2e4>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d125      	bne.n	800a280 <UART_SetConfig+0xf0>
 800a234:	4b90      	ldr	r3, [pc, #576]	@ (800a478 <UART_SetConfig+0x2e8>)
 800a236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a23a:	f003 0303 	and.w	r3, r3, #3
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d81a      	bhi.n	800a278 <UART_SetConfig+0xe8>
 800a242:	a201      	add	r2, pc, #4	@ (adr r2, 800a248 <UART_SetConfig+0xb8>)
 800a244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a248:	0800a259 	.word	0x0800a259
 800a24c:	0800a269 	.word	0x0800a269
 800a250:	0800a261 	.word	0x0800a261
 800a254:	0800a271 	.word	0x0800a271
 800a258:	2301      	movs	r3, #1
 800a25a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a25e:	e0d6      	b.n	800a40e <UART_SetConfig+0x27e>
 800a260:	2302      	movs	r3, #2
 800a262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a266:	e0d2      	b.n	800a40e <UART_SetConfig+0x27e>
 800a268:	2304      	movs	r3, #4
 800a26a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a26e:	e0ce      	b.n	800a40e <UART_SetConfig+0x27e>
 800a270:	2308      	movs	r3, #8
 800a272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a276:	e0ca      	b.n	800a40e <UART_SetConfig+0x27e>
 800a278:	2310      	movs	r3, #16
 800a27a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a27e:	e0c6      	b.n	800a40e <UART_SetConfig+0x27e>
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a7d      	ldr	r2, [pc, #500]	@ (800a47c <UART_SetConfig+0x2ec>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d138      	bne.n	800a2fc <UART_SetConfig+0x16c>
 800a28a:	4b7b      	ldr	r3, [pc, #492]	@ (800a478 <UART_SetConfig+0x2e8>)
 800a28c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a290:	f003 030c 	and.w	r3, r3, #12
 800a294:	2b0c      	cmp	r3, #12
 800a296:	d82d      	bhi.n	800a2f4 <UART_SetConfig+0x164>
 800a298:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a0 <UART_SetConfig+0x110>)
 800a29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29e:	bf00      	nop
 800a2a0:	0800a2d5 	.word	0x0800a2d5
 800a2a4:	0800a2f5 	.word	0x0800a2f5
 800a2a8:	0800a2f5 	.word	0x0800a2f5
 800a2ac:	0800a2f5 	.word	0x0800a2f5
 800a2b0:	0800a2e5 	.word	0x0800a2e5
 800a2b4:	0800a2f5 	.word	0x0800a2f5
 800a2b8:	0800a2f5 	.word	0x0800a2f5
 800a2bc:	0800a2f5 	.word	0x0800a2f5
 800a2c0:	0800a2dd 	.word	0x0800a2dd
 800a2c4:	0800a2f5 	.word	0x0800a2f5
 800a2c8:	0800a2f5 	.word	0x0800a2f5
 800a2cc:	0800a2f5 	.word	0x0800a2f5
 800a2d0:	0800a2ed 	.word	0x0800a2ed
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2da:	e098      	b.n	800a40e <UART_SetConfig+0x27e>
 800a2dc:	2302      	movs	r3, #2
 800a2de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2e2:	e094      	b.n	800a40e <UART_SetConfig+0x27e>
 800a2e4:	2304      	movs	r3, #4
 800a2e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ea:	e090      	b.n	800a40e <UART_SetConfig+0x27e>
 800a2ec:	2308      	movs	r3, #8
 800a2ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2f2:	e08c      	b.n	800a40e <UART_SetConfig+0x27e>
 800a2f4:	2310      	movs	r3, #16
 800a2f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2fa:	e088      	b.n	800a40e <UART_SetConfig+0x27e>
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a5f      	ldr	r2, [pc, #380]	@ (800a480 <UART_SetConfig+0x2f0>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d125      	bne.n	800a352 <UART_SetConfig+0x1c2>
 800a306:	4b5c      	ldr	r3, [pc, #368]	@ (800a478 <UART_SetConfig+0x2e8>)
 800a308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a30c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a310:	2b30      	cmp	r3, #48	@ 0x30
 800a312:	d016      	beq.n	800a342 <UART_SetConfig+0x1b2>
 800a314:	2b30      	cmp	r3, #48	@ 0x30
 800a316:	d818      	bhi.n	800a34a <UART_SetConfig+0x1ba>
 800a318:	2b20      	cmp	r3, #32
 800a31a:	d00a      	beq.n	800a332 <UART_SetConfig+0x1a2>
 800a31c:	2b20      	cmp	r3, #32
 800a31e:	d814      	bhi.n	800a34a <UART_SetConfig+0x1ba>
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <UART_SetConfig+0x19a>
 800a324:	2b10      	cmp	r3, #16
 800a326:	d008      	beq.n	800a33a <UART_SetConfig+0x1aa>
 800a328:	e00f      	b.n	800a34a <UART_SetConfig+0x1ba>
 800a32a:	2300      	movs	r3, #0
 800a32c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a330:	e06d      	b.n	800a40e <UART_SetConfig+0x27e>
 800a332:	2302      	movs	r3, #2
 800a334:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a338:	e069      	b.n	800a40e <UART_SetConfig+0x27e>
 800a33a:	2304      	movs	r3, #4
 800a33c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a340:	e065      	b.n	800a40e <UART_SetConfig+0x27e>
 800a342:	2308      	movs	r3, #8
 800a344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a348:	e061      	b.n	800a40e <UART_SetConfig+0x27e>
 800a34a:	2310      	movs	r3, #16
 800a34c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a350:	e05d      	b.n	800a40e <UART_SetConfig+0x27e>
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a4b      	ldr	r2, [pc, #300]	@ (800a484 <UART_SetConfig+0x2f4>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d125      	bne.n	800a3a8 <UART_SetConfig+0x218>
 800a35c:	4b46      	ldr	r3, [pc, #280]	@ (800a478 <UART_SetConfig+0x2e8>)
 800a35e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a362:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a366:	2bc0      	cmp	r3, #192	@ 0xc0
 800a368:	d016      	beq.n	800a398 <UART_SetConfig+0x208>
 800a36a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a36c:	d818      	bhi.n	800a3a0 <UART_SetConfig+0x210>
 800a36e:	2b80      	cmp	r3, #128	@ 0x80
 800a370:	d00a      	beq.n	800a388 <UART_SetConfig+0x1f8>
 800a372:	2b80      	cmp	r3, #128	@ 0x80
 800a374:	d814      	bhi.n	800a3a0 <UART_SetConfig+0x210>
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <UART_SetConfig+0x1f0>
 800a37a:	2b40      	cmp	r3, #64	@ 0x40
 800a37c:	d008      	beq.n	800a390 <UART_SetConfig+0x200>
 800a37e:	e00f      	b.n	800a3a0 <UART_SetConfig+0x210>
 800a380:	2300      	movs	r3, #0
 800a382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a386:	e042      	b.n	800a40e <UART_SetConfig+0x27e>
 800a388:	2302      	movs	r3, #2
 800a38a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a38e:	e03e      	b.n	800a40e <UART_SetConfig+0x27e>
 800a390:	2304      	movs	r3, #4
 800a392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a396:	e03a      	b.n	800a40e <UART_SetConfig+0x27e>
 800a398:	2308      	movs	r3, #8
 800a39a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a39e:	e036      	b.n	800a40e <UART_SetConfig+0x27e>
 800a3a0:	2310      	movs	r3, #16
 800a3a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3a6:	e032      	b.n	800a40e <UART_SetConfig+0x27e>
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a30      	ldr	r2, [pc, #192]	@ (800a470 <UART_SetConfig+0x2e0>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d12a      	bne.n	800a408 <UART_SetConfig+0x278>
 800a3b2:	4b31      	ldr	r3, [pc, #196]	@ (800a478 <UART_SetConfig+0x2e8>)
 800a3b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a3bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3c0:	d01a      	beq.n	800a3f8 <UART_SetConfig+0x268>
 800a3c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3c6:	d81b      	bhi.n	800a400 <UART_SetConfig+0x270>
 800a3c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3cc:	d00c      	beq.n	800a3e8 <UART_SetConfig+0x258>
 800a3ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3d2:	d815      	bhi.n	800a400 <UART_SetConfig+0x270>
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d003      	beq.n	800a3e0 <UART_SetConfig+0x250>
 800a3d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3dc:	d008      	beq.n	800a3f0 <UART_SetConfig+0x260>
 800a3de:	e00f      	b.n	800a400 <UART_SetConfig+0x270>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3e6:	e012      	b.n	800a40e <UART_SetConfig+0x27e>
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3ee:	e00e      	b.n	800a40e <UART_SetConfig+0x27e>
 800a3f0:	2304      	movs	r3, #4
 800a3f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3f6:	e00a      	b.n	800a40e <UART_SetConfig+0x27e>
 800a3f8:	2308      	movs	r3, #8
 800a3fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3fe:	e006      	b.n	800a40e <UART_SetConfig+0x27e>
 800a400:	2310      	movs	r3, #16
 800a402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a406:	e002      	b.n	800a40e <UART_SetConfig+0x27e>
 800a408:	2310      	movs	r3, #16
 800a40a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a17      	ldr	r2, [pc, #92]	@ (800a470 <UART_SetConfig+0x2e0>)
 800a414:	4293      	cmp	r3, r2
 800a416:	f040 80a8 	bne.w	800a56a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a41a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a41e:	2b08      	cmp	r3, #8
 800a420:	d834      	bhi.n	800a48c <UART_SetConfig+0x2fc>
 800a422:	a201      	add	r2, pc, #4	@ (adr r2, 800a428 <UART_SetConfig+0x298>)
 800a424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a428:	0800a44d 	.word	0x0800a44d
 800a42c:	0800a48d 	.word	0x0800a48d
 800a430:	0800a455 	.word	0x0800a455
 800a434:	0800a48d 	.word	0x0800a48d
 800a438:	0800a45b 	.word	0x0800a45b
 800a43c:	0800a48d 	.word	0x0800a48d
 800a440:	0800a48d 	.word	0x0800a48d
 800a444:	0800a48d 	.word	0x0800a48d
 800a448:	0800a463 	.word	0x0800a463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a44c:	f7fc fd22 	bl	8006e94 <HAL_RCC_GetPCLK1Freq>
 800a450:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a452:	e021      	b.n	800a498 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a454:	4b0c      	ldr	r3, [pc, #48]	@ (800a488 <UART_SetConfig+0x2f8>)
 800a456:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a458:	e01e      	b.n	800a498 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a45a:	f7fc fcad 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 800a45e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a460:	e01a      	b.n	800a498 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a468:	e016      	b.n	800a498 <UART_SetConfig+0x308>
 800a46a:	bf00      	nop
 800a46c:	cfff69f3 	.word	0xcfff69f3
 800a470:	40008000 	.word	0x40008000
 800a474:	40013800 	.word	0x40013800
 800a478:	40021000 	.word	0x40021000
 800a47c:	40004400 	.word	0x40004400
 800a480:	40004800 	.word	0x40004800
 800a484:	40004c00 	.word	0x40004c00
 800a488:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a48c:	2300      	movs	r3, #0
 800a48e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a496:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f000 812a 	beq.w	800a6f4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4a4:	4a9e      	ldr	r2, [pc, #632]	@ (800a720 <UART_SetConfig+0x590>)
 800a4a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4b2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	005b      	lsls	r3, r3, #1
 800a4bc:	4413      	add	r3, r2
 800a4be:	69ba      	ldr	r2, [r7, #24]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d305      	bcc.n	800a4d0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4ca:	69ba      	ldr	r2, [r7, #24]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d903      	bls.n	800a4d8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a4d6:	e10d      	b.n	800a6f4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4da:	2200      	movs	r2, #0
 800a4dc:	60bb      	str	r3, [r7, #8]
 800a4de:	60fa      	str	r2, [r7, #12]
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e4:	4a8e      	ldr	r2, [pc, #568]	@ (800a720 <UART_SetConfig+0x590>)
 800a4e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	607a      	str	r2, [r7, #4]
 800a4f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a4fa:	f7f6 fb69 	bl	8000bd0 <__aeabi_uldivmod>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	4610      	mov	r0, r2
 800a504:	4619      	mov	r1, r3
 800a506:	f04f 0200 	mov.w	r2, #0
 800a50a:	f04f 0300 	mov.w	r3, #0
 800a50e:	020b      	lsls	r3, r1, #8
 800a510:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a514:	0202      	lsls	r2, r0, #8
 800a516:	6979      	ldr	r1, [r7, #20]
 800a518:	6849      	ldr	r1, [r1, #4]
 800a51a:	0849      	lsrs	r1, r1, #1
 800a51c:	2000      	movs	r0, #0
 800a51e:	460c      	mov	r4, r1
 800a520:	4605      	mov	r5, r0
 800a522:	eb12 0804 	adds.w	r8, r2, r4
 800a526:	eb43 0905 	adc.w	r9, r3, r5
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	469a      	mov	sl, r3
 800a532:	4693      	mov	fp, r2
 800a534:	4652      	mov	r2, sl
 800a536:	465b      	mov	r3, fp
 800a538:	4640      	mov	r0, r8
 800a53a:	4649      	mov	r1, r9
 800a53c:	f7f6 fb48 	bl	8000bd0 <__aeabi_uldivmod>
 800a540:	4602      	mov	r2, r0
 800a542:	460b      	mov	r3, r1
 800a544:	4613      	mov	r3, r2
 800a546:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a548:	6a3b      	ldr	r3, [r7, #32]
 800a54a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a54e:	d308      	bcc.n	800a562 <UART_SetConfig+0x3d2>
 800a550:	6a3b      	ldr	r3, [r7, #32]
 800a552:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a556:	d204      	bcs.n	800a562 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	6a3a      	ldr	r2, [r7, #32]
 800a55e:	60da      	str	r2, [r3, #12]
 800a560:	e0c8      	b.n	800a6f4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a568:	e0c4      	b.n	800a6f4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a572:	d167      	bne.n	800a644 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a574:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a578:	2b08      	cmp	r3, #8
 800a57a:	d828      	bhi.n	800a5ce <UART_SetConfig+0x43e>
 800a57c:	a201      	add	r2, pc, #4	@ (adr r2, 800a584 <UART_SetConfig+0x3f4>)
 800a57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a582:	bf00      	nop
 800a584:	0800a5a9 	.word	0x0800a5a9
 800a588:	0800a5b1 	.word	0x0800a5b1
 800a58c:	0800a5b9 	.word	0x0800a5b9
 800a590:	0800a5cf 	.word	0x0800a5cf
 800a594:	0800a5bf 	.word	0x0800a5bf
 800a598:	0800a5cf 	.word	0x0800a5cf
 800a59c:	0800a5cf 	.word	0x0800a5cf
 800a5a0:	0800a5cf 	.word	0x0800a5cf
 800a5a4:	0800a5c7 	.word	0x0800a5c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5a8:	f7fc fc74 	bl	8006e94 <HAL_RCC_GetPCLK1Freq>
 800a5ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5ae:	e014      	b.n	800a5da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5b0:	f7fc fc86 	bl	8006ec0 <HAL_RCC_GetPCLK2Freq>
 800a5b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5b6:	e010      	b.n	800a5da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5b8:	4b5a      	ldr	r3, [pc, #360]	@ (800a724 <UART_SetConfig+0x594>)
 800a5ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a5bc:	e00d      	b.n	800a5da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5be:	f7fc fbfb 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 800a5c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5c4:	e009      	b.n	800a5da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a5cc:	e005      	b.n	800a5da <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a5d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f000 8089 	beq.w	800a6f4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e6:	4a4e      	ldr	r2, [pc, #312]	@ (800a720 <UART_SetConfig+0x590>)
 800a5e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5f4:	005a      	lsls	r2, r3, #1
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	085b      	lsrs	r3, r3, #1
 800a5fc:	441a      	add	r2, r3
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	fbb2 f3f3 	udiv	r3, r2, r3
 800a606:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	2b0f      	cmp	r3, #15
 800a60c:	d916      	bls.n	800a63c <UART_SetConfig+0x4ac>
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a614:	d212      	bcs.n	800a63c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	b29b      	uxth	r3, r3
 800a61a:	f023 030f 	bic.w	r3, r3, #15
 800a61e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	085b      	lsrs	r3, r3, #1
 800a624:	b29b      	uxth	r3, r3
 800a626:	f003 0307 	and.w	r3, r3, #7
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	8bfb      	ldrh	r3, [r7, #30]
 800a62e:	4313      	orrs	r3, r2
 800a630:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	8bfa      	ldrh	r2, [r7, #30]
 800a638:	60da      	str	r2, [r3, #12]
 800a63a:	e05b      	b.n	800a6f4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a642:	e057      	b.n	800a6f4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a644:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a648:	2b08      	cmp	r3, #8
 800a64a:	d828      	bhi.n	800a69e <UART_SetConfig+0x50e>
 800a64c:	a201      	add	r2, pc, #4	@ (adr r2, 800a654 <UART_SetConfig+0x4c4>)
 800a64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a652:	bf00      	nop
 800a654:	0800a679 	.word	0x0800a679
 800a658:	0800a681 	.word	0x0800a681
 800a65c:	0800a689 	.word	0x0800a689
 800a660:	0800a69f 	.word	0x0800a69f
 800a664:	0800a68f 	.word	0x0800a68f
 800a668:	0800a69f 	.word	0x0800a69f
 800a66c:	0800a69f 	.word	0x0800a69f
 800a670:	0800a69f 	.word	0x0800a69f
 800a674:	0800a697 	.word	0x0800a697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a678:	f7fc fc0c 	bl	8006e94 <HAL_RCC_GetPCLK1Freq>
 800a67c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a67e:	e014      	b.n	800a6aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a680:	f7fc fc1e 	bl	8006ec0 <HAL_RCC_GetPCLK2Freq>
 800a684:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a686:	e010      	b.n	800a6aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a688:	4b26      	ldr	r3, [pc, #152]	@ (800a724 <UART_SetConfig+0x594>)
 800a68a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a68c:	e00d      	b.n	800a6aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a68e:	f7fc fb93 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 800a692:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a694:	e009      	b.n	800a6aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a69a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a69c:	e005      	b.n	800a6aa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a6a8:	bf00      	nop
    }

    if (pclk != 0U)
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d021      	beq.n	800a6f4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b4:	4a1a      	ldr	r2, [pc, #104]	@ (800a720 <UART_SetConfig+0x590>)
 800a6b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6be:	fbb3 f2f2 	udiv	r2, r3, r2
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	085b      	lsrs	r3, r3, #1
 800a6c8:	441a      	add	r2, r3
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6d4:	6a3b      	ldr	r3, [r7, #32]
 800a6d6:	2b0f      	cmp	r3, #15
 800a6d8:	d909      	bls.n	800a6ee <UART_SetConfig+0x55e>
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6e0:	d205      	bcs.n	800a6ee <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6e2:	6a3b      	ldr	r3, [r7, #32]
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	60da      	str	r2, [r3, #12]
 800a6ec:	e002      	b.n	800a6f4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	2200      	movs	r2, #0
 800a708:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2200      	movs	r2, #0
 800a70e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a710:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a714:	4618      	mov	r0, r3
 800a716:	3730      	adds	r7, #48	@ 0x30
 800a718:	46bd      	mov	sp, r7
 800a71a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a71e:	bf00      	nop
 800a720:	0800c234 	.word	0x0800c234
 800a724:	00f42400 	.word	0x00f42400

0800a728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a734:	f003 0308 	and.w	r3, r3, #8
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00a      	beq.n	800a752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	430a      	orrs	r2, r1
 800a750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a756:	f003 0301 	and.w	r3, r3, #1
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00a      	beq.n	800a774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	430a      	orrs	r2, r1
 800a772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a778:	f003 0302 	and.w	r3, r3, #2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00a      	beq.n	800a796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	430a      	orrs	r2, r1
 800a794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a79a:	f003 0304 	and.w	r3, r3, #4
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00a      	beq.n	800a7b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	430a      	orrs	r2, r1
 800a7b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7bc:	f003 0310 	and.w	r3, r3, #16
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00a      	beq.n	800a7da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	430a      	orrs	r2, r1
 800a7d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7de:	f003 0320 	and.w	r3, r3, #32
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00a      	beq.n	800a7fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	430a      	orrs	r2, r1
 800a7fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a804:	2b00      	cmp	r3, #0
 800a806:	d01a      	beq.n	800a83e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	430a      	orrs	r2, r1
 800a81c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a826:	d10a      	bne.n	800a83e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	430a      	orrs	r2, r1
 800a83c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00a      	beq.n	800a860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	430a      	orrs	r2, r1
 800a85e:	605a      	str	r2, [r3, #4]
  }
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b098      	sub	sp, #96	@ 0x60
 800a870:	af02      	add	r7, sp, #8
 800a872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a87c:	f7f8 fcc6 	bl	800320c <HAL_GetTick>
 800a880:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 0308 	and.w	r3, r3, #8
 800a88c:	2b08      	cmp	r3, #8
 800a88e:	d12f      	bne.n	800a8f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a890:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a898:	2200      	movs	r2, #0
 800a89a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f88e 	bl	800a9c0 <UART_WaitOnFlagUntilTimeout>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d022      	beq.n	800a8f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b2:	e853 3f00 	ldrex	r3, [r3]
 800a8b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a8b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8be:	653b      	str	r3, [r7, #80]	@ 0x50
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a8ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8d0:	e841 2300 	strex	r3, r2, [r1]
 800a8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a8d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1e6      	bne.n	800a8aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2220      	movs	r2, #32
 800a8e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e063      	b.n	800a9b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0304 	and.w	r3, r3, #4
 800a8fa:	2b04      	cmp	r3, #4
 800a8fc:	d149      	bne.n	800a992 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a906:	2200      	movs	r2, #0
 800a908:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 f857 	bl	800a9c0 <UART_WaitOnFlagUntilTimeout>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d03c      	beq.n	800a992 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	623b      	str	r3, [r7, #32]
   return(result);
 800a926:	6a3b      	ldr	r3, [r7, #32]
 800a928:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a92c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a936:	633b      	str	r3, [r7, #48]	@ 0x30
 800a938:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a93c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e6      	bne.n	800a918 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3308      	adds	r3, #8
 800a950:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	e853 3f00 	ldrex	r3, [r3]
 800a958:	60fb      	str	r3, [r7, #12]
   return(result);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f023 0301 	bic.w	r3, r3, #1
 800a960:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3308      	adds	r3, #8
 800a968:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a96a:	61fa      	str	r2, [r7, #28]
 800a96c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96e:	69b9      	ldr	r1, [r7, #24]
 800a970:	69fa      	ldr	r2, [r7, #28]
 800a972:	e841 2300 	strex	r3, r2, [r1]
 800a976:	617b      	str	r3, [r7, #20]
   return(result);
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1e5      	bne.n	800a94a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2220      	movs	r2, #32
 800a982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	e012      	b.n	800a9b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2220      	movs	r2, #32
 800a996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2220      	movs	r2, #32
 800a99e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3758      	adds	r7, #88	@ 0x58
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	603b      	str	r3, [r7, #0]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9d0:	e04f      	b.n	800aa72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d8:	d04b      	beq.n	800aa72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9da:	f7f8 fc17 	bl	800320c <HAL_GetTick>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	69ba      	ldr	r2, [r7, #24]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d302      	bcc.n	800a9f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d101      	bne.n	800a9f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e04e      	b.n	800aa92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 0304 	and.w	r3, r3, #4
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d037      	beq.n	800aa72 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	2b80      	cmp	r3, #128	@ 0x80
 800aa06:	d034      	beq.n	800aa72 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	2b40      	cmp	r3, #64	@ 0x40
 800aa0c:	d031      	beq.n	800aa72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	69db      	ldr	r3, [r3, #28]
 800aa14:	f003 0308 	and.w	r3, r3, #8
 800aa18:	2b08      	cmp	r3, #8
 800aa1a:	d110      	bne.n	800aa3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2208      	movs	r2, #8
 800aa22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 f95b 	bl	800ace0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2208      	movs	r2, #8
 800aa2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e029      	b.n	800aa92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	69db      	ldr	r3, [r3, #28]
 800aa44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa4c:	d111      	bne.n	800aa72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f000 f941 	bl	800ace0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2220      	movs	r2, #32
 800aa62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	e00f      	b.n	800aa92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	69da      	ldr	r2, [r3, #28]
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	4013      	ands	r3, r2
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	bf0c      	ite	eq
 800aa82:	2301      	moveq	r3, #1
 800aa84:	2300      	movne	r3, #0
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	461a      	mov	r2, r3
 800aa8a:	79fb      	ldrb	r3, [r7, #7]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d0a0      	beq.n	800a9d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
	...

0800aa9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b0a3      	sub	sp, #140	@ 0x8c
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	88fa      	ldrh	r2, [r7, #6]
 800aab4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	88fa      	ldrh	r2, [r7, #6]
 800aabc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aace:	d10e      	bne.n	800aaee <UART_Start_Receive_IT+0x52>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d105      	bne.n	800aae4 <UART_Start_Receive_IT+0x48>
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800aade:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aae2:	e02d      	b.n	800ab40 <UART_Start_Receive_IT+0xa4>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	22ff      	movs	r2, #255	@ 0xff
 800aae8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aaec:	e028      	b.n	800ab40 <UART_Start_Receive_IT+0xa4>
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10d      	bne.n	800ab12 <UART_Start_Receive_IT+0x76>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d104      	bne.n	800ab08 <UART_Start_Receive_IT+0x6c>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	22ff      	movs	r2, #255	@ 0xff
 800ab02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab06:	e01b      	b.n	800ab40 <UART_Start_Receive_IT+0xa4>
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	227f      	movs	r2, #127	@ 0x7f
 800ab0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab10:	e016      	b.n	800ab40 <UART_Start_Receive_IT+0xa4>
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab1a:	d10d      	bne.n	800ab38 <UART_Start_Receive_IT+0x9c>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d104      	bne.n	800ab2e <UART_Start_Receive_IT+0x92>
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	227f      	movs	r2, #127	@ 0x7f
 800ab28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab2c:	e008      	b.n	800ab40 <UART_Start_Receive_IT+0xa4>
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	223f      	movs	r2, #63	@ 0x3f
 800ab32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab36:	e003      	b.n	800ab40 <UART_Start_Receive_IT+0xa4>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2222      	movs	r2, #34	@ 0x22
 800ab4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	3308      	adds	r3, #8
 800ab56:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab5a:	e853 3f00 	ldrex	r3, [r3]
 800ab5e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ab60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab62:	f043 0301 	orr.w	r3, r3, #1
 800ab66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	3308      	adds	r3, #8
 800ab70:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ab74:	673a      	str	r2, [r7, #112]	@ 0x70
 800ab76:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab78:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ab7a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ab7c:	e841 2300 	strex	r3, r2, [r1]
 800ab80:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ab82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1e3      	bne.n	800ab50 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab90:	d14f      	bne.n	800ac32 <UART_Start_Receive_IT+0x196>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ab98:	88fa      	ldrh	r2, [r7, #6]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d349      	bcc.n	800ac32 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aba6:	d107      	bne.n	800abb8 <UART_Start_Receive_IT+0x11c>
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d103      	bne.n	800abb8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4a47      	ldr	r2, [pc, #284]	@ (800acd0 <UART_Start_Receive_IT+0x234>)
 800abb4:	675a      	str	r2, [r3, #116]	@ 0x74
 800abb6:	e002      	b.n	800abbe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	4a46      	ldr	r2, [pc, #280]	@ (800acd4 <UART_Start_Receive_IT+0x238>)
 800abbc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d01a      	beq.n	800abfc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abce:	e853 3f00 	ldrex	r3, [r3]
 800abd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800abd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800abda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	461a      	mov	r2, r3
 800abe4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800abe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800abea:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800abee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800abf0:	e841 2300 	strex	r3, r2, [r1]
 800abf4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800abf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e4      	bne.n	800abc6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3308      	adds	r3, #8
 800ac02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac06:	e853 3f00 	ldrex	r3, [r3]
 800ac0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3308      	adds	r3, #8
 800ac1a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ac1c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ac1e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ac22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac24:	e841 2300 	strex	r3, r2, [r1]
 800ac28:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ac2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1e5      	bne.n	800abfc <UART_Start_Receive_IT+0x160>
 800ac30:	e046      	b.n	800acc0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac3a:	d107      	bne.n	800ac4c <UART_Start_Receive_IT+0x1b0>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	691b      	ldr	r3, [r3, #16]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d103      	bne.n	800ac4c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	4a24      	ldr	r2, [pc, #144]	@ (800acd8 <UART_Start_Receive_IT+0x23c>)
 800ac48:	675a      	str	r2, [r3, #116]	@ 0x74
 800ac4a:	e002      	b.n	800ac52 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	4a23      	ldr	r2, [pc, #140]	@ (800acdc <UART_Start_Receive_IT+0x240>)
 800ac50:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d019      	beq.n	800ac8e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac62:	e853 3f00 	ldrex	r3, [r3]
 800ac66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ac6e:	677b      	str	r3, [r7, #116]	@ 0x74
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	461a      	mov	r2, r3
 800ac76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac78:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac7a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ac7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac80:	e841 2300 	strex	r3, r2, [r1]
 800ac84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ac86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1e6      	bne.n	800ac5a <UART_Start_Receive_IT+0x1be>
 800ac8c:	e018      	b.n	800acc0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	e853 3f00 	ldrex	r3, [r3]
 800ac9a:	613b      	str	r3, [r7, #16]
   return(result);
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	f043 0320 	orr.w	r3, r3, #32
 800aca2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	461a      	mov	r2, r3
 800acaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800acac:	623b      	str	r3, [r7, #32]
 800acae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb0:	69f9      	ldr	r1, [r7, #28]
 800acb2:	6a3a      	ldr	r2, [r7, #32]
 800acb4:	e841 2300 	strex	r3, r2, [r1]
 800acb8:	61bb      	str	r3, [r7, #24]
   return(result);
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1e6      	bne.n	800ac8e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	378c      	adds	r7, #140	@ 0x8c
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	0800b4fd 	.word	0x0800b4fd
 800acd4:	0800b199 	.word	0x0800b199
 800acd8:	0800afe1 	.word	0x0800afe1
 800acdc:	0800ae29 	.word	0x0800ae29

0800ace0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b095      	sub	sp, #84	@ 0x54
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acf0:	e853 3f00 	ldrex	r3, [r3]
 800acf4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800acf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800acfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	461a      	mov	r2, r3
 800ad04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad06:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad08:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad0e:	e841 2300 	strex	r3, r2, [r1]
 800ad12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1e6      	bne.n	800ace8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	3308      	adds	r3, #8
 800ad20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad22:	6a3b      	ldr	r3, [r7, #32]
 800ad24:	e853 3f00 	ldrex	r3, [r3]
 800ad28:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad30:	f023 0301 	bic.w	r3, r3, #1
 800ad34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad46:	e841 2300 	strex	r3, r2, [r1]
 800ad4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1e3      	bne.n	800ad1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d118      	bne.n	800ad8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	e853 3f00 	ldrex	r3, [r3]
 800ad66:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	f023 0310 	bic.w	r3, r3, #16
 800ad6e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	461a      	mov	r2, r3
 800ad76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad78:	61bb      	str	r3, [r7, #24]
 800ad7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	6979      	ldr	r1, [r7, #20]
 800ad7e:	69ba      	ldr	r2, [r7, #24]
 800ad80:	e841 2300 	strex	r3, r2, [r1]
 800ad84:	613b      	str	r3, [r7, #16]
   return(result);
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e6      	bne.n	800ad5a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2220      	movs	r2, #32
 800ad90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ada0:	bf00      	nop
 800ada2:	3754      	adds	r7, #84	@ 0x54
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f7ff f97a 	bl	800a0bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adc8:	bf00      	nop
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b088      	sub	sp, #32
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	e853 3f00 	ldrex	r3, [r3]
 800ade4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adec:	61fb      	str	r3, [r7, #28]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	61bb      	str	r3, [r7, #24]
 800adf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfa:	6979      	ldr	r1, [r7, #20]
 800adfc:	69ba      	ldr	r2, [r7, #24]
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	613b      	str	r3, [r7, #16]
   return(result);
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e6      	bne.n	800add8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7ff f945 	bl	800a0a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae1e:	bf00      	nop
 800ae20:	3720      	adds	r7, #32
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
	...

0800ae28 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b09c      	sub	sp, #112	@ 0x70
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae36:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae40:	2b22      	cmp	r3, #34	@ 0x22
 800ae42:	f040 80be 	bne.w	800afc2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae4c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ae50:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ae54:	b2d9      	uxtb	r1, r3
 800ae56:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ae5a:	b2da      	uxtb	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae60:	400a      	ands	r2, r1
 800ae62:	b2d2      	uxtb	r2, r2
 800ae64:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae6a:	1c5a      	adds	r2, r3, #1
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f040 80a1 	bne.w	800afd2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae98:	e853 3f00 	ldrex	r3, [r3]
 800ae9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aea4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aeae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aeb0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aeb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aeb6:	e841 2300 	strex	r3, r2, [r1]
 800aeba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aebc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1e6      	bne.n	800ae90 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3308      	adds	r3, #8
 800aec8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aecc:	e853 3f00 	ldrex	r3, [r3]
 800aed0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aed4:	f023 0301 	bic.w	r3, r3, #1
 800aed8:	667b      	str	r3, [r7, #100]	@ 0x64
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	3308      	adds	r3, #8
 800aee0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aee2:	647a      	str	r2, [r7, #68]	@ 0x44
 800aee4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aee8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aeea:	e841 2300 	strex	r3, r2, [r1]
 800aeee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1e5      	bne.n	800aec2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2220      	movs	r2, #32
 800aefa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a33      	ldr	r2, [pc, #204]	@ (800afdc <UART_RxISR_8BIT+0x1b4>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d01f      	beq.n	800af54 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d018      	beq.n	800af54 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2a:	e853 3f00 	ldrex	r3, [r3]
 800af2e:	623b      	str	r3, [r7, #32]
   return(result);
 800af30:	6a3b      	ldr	r3, [r7, #32]
 800af32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800af36:	663b      	str	r3, [r7, #96]	@ 0x60
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	461a      	mov	r2, r3
 800af3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af40:	633b      	str	r3, [r7, #48]	@ 0x30
 800af42:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af48:	e841 2300 	strex	r3, r2, [r1]
 800af4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af50:	2b00      	cmp	r3, #0
 800af52:	d1e6      	bne.n	800af22 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d12e      	bne.n	800afba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	e853 3f00 	ldrex	r3, [r3]
 800af6e:	60fb      	str	r3, [r7, #12]
   return(result);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f023 0310 	bic.w	r3, r3, #16
 800af76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	461a      	mov	r2, r3
 800af7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af80:	61fb      	str	r3, [r7, #28]
 800af82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af84:	69b9      	ldr	r1, [r7, #24]
 800af86:	69fa      	ldr	r2, [r7, #28]
 800af88:	e841 2300 	strex	r3, r2, [r1]
 800af8c:	617b      	str	r3, [r7, #20]
   return(result);
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1e6      	bne.n	800af62 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	69db      	ldr	r3, [r3, #28]
 800af9a:	f003 0310 	and.w	r3, r3, #16
 800af9e:	2b10      	cmp	r3, #16
 800afa0:	d103      	bne.n	800afaa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2210      	movs	r2, #16
 800afa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800afb0:	4619      	mov	r1, r3
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7ff f88c 	bl	800a0d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800afb8:	e00b      	b.n	800afd2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7f7 fb68 	bl	8002690 <HAL_UART_RxCpltCallback>
}
 800afc0:	e007      	b.n	800afd2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	699a      	ldr	r2, [r3, #24]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f042 0208 	orr.w	r2, r2, #8
 800afd0:	619a      	str	r2, [r3, #24]
}
 800afd2:	bf00      	nop
 800afd4:	3770      	adds	r7, #112	@ 0x70
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	40008000 	.word	0x40008000

0800afe0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b09c      	sub	sp, #112	@ 0x70
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800afee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aff8:	2b22      	cmp	r3, #34	@ 0x22
 800affa:	f040 80be 	bne.w	800b17a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b004:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b00c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b00e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b012:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b016:	4013      	ands	r3, r2
 800b018:	b29a      	uxth	r2, r3
 800b01a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b01c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b022:	1c9a      	adds	r2, r3, #2
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b02e:	b29b      	uxth	r3, r3
 800b030:	3b01      	subs	r3, #1
 800b032:	b29a      	uxth	r2, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b040:	b29b      	uxth	r3, r3
 800b042:	2b00      	cmp	r3, #0
 800b044:	f040 80a1 	bne.w	800b18a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b050:	e853 3f00 	ldrex	r3, [r3]
 800b054:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b058:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b05c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	461a      	mov	r2, r3
 800b064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b066:	657b      	str	r3, [r7, #84]	@ 0x54
 800b068:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b06c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b06e:	e841 2300 	strex	r3, r2, [r1]
 800b072:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1e6      	bne.n	800b048 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3308      	adds	r3, #8
 800b080:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b084:	e853 3f00 	ldrex	r3, [r3]
 800b088:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08c:	f023 0301 	bic.w	r3, r3, #1
 800b090:	663b      	str	r3, [r7, #96]	@ 0x60
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3308      	adds	r3, #8
 800b098:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b09a:	643a      	str	r2, [r7, #64]	@ 0x40
 800b09c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0a2:	e841 2300 	strex	r3, r2, [r1]
 800b0a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1e5      	bne.n	800b07a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2220      	movs	r2, #32
 800b0b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a33      	ldr	r2, [pc, #204]	@ (800b194 <UART_RxISR_16BIT+0x1b4>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d01f      	beq.n	800b10c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d018      	beq.n	800b10c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	e853 3f00 	ldrex	r3, [r3]
 800b0e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0fa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b0fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b100:	e841 2300 	strex	r3, r2, [r1]
 800b104:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1e6      	bne.n	800b0da <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b110:	2b01      	cmp	r3, #1
 800b112:	d12e      	bne.n	800b172 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	e853 3f00 	ldrex	r3, [r3]
 800b126:	60bb      	str	r3, [r7, #8]
   return(result);
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	f023 0310 	bic.w	r3, r3, #16
 800b12e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	461a      	mov	r2, r3
 800b136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b138:	61bb      	str	r3, [r7, #24]
 800b13a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13c:	6979      	ldr	r1, [r7, #20]
 800b13e:	69ba      	ldr	r2, [r7, #24]
 800b140:	e841 2300 	strex	r3, r2, [r1]
 800b144:	613b      	str	r3, [r7, #16]
   return(result);
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1e6      	bne.n	800b11a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	69db      	ldr	r3, [r3, #28]
 800b152:	f003 0310 	and.w	r3, r3, #16
 800b156:	2b10      	cmp	r3, #16
 800b158:	d103      	bne.n	800b162 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2210      	movs	r2, #16
 800b160:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7fe ffb0 	bl	800a0d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b170:	e00b      	b.n	800b18a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f7f7 fa8c 	bl	8002690 <HAL_UART_RxCpltCallback>
}
 800b178:	e007      	b.n	800b18a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	699a      	ldr	r2, [r3, #24]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f042 0208 	orr.w	r2, r2, #8
 800b188:	619a      	str	r2, [r3, #24]
}
 800b18a:	bf00      	nop
 800b18c:	3770      	adds	r7, #112	@ 0x70
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	40008000 	.word	0x40008000

0800b198 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b0ac      	sub	sp, #176	@ 0xb0
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b1a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	69db      	ldr	r3, [r3, #28]
 800b1b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1ce:	2b22      	cmp	r3, #34	@ 0x22
 800b1d0:	f040 8183 	bne.w	800b4da <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b1da:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b1de:	e126      	b.n	800b42e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b1ea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b1ee:	b2d9      	uxtb	r1, r3
 800b1f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b1f4:	b2da      	uxtb	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1fa:	400a      	ands	r2, r1
 800b1fc:	b2d2      	uxtb	r2, r2
 800b1fe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b204:	1c5a      	adds	r2, r3, #1
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b210:	b29b      	uxth	r3, r3
 800b212:	3b01      	subs	r3, #1
 800b214:	b29a      	uxth	r2, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b22a:	f003 0307 	and.w	r3, r3, #7
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d053      	beq.n	800b2da <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b236:	f003 0301 	and.w	r3, r3, #1
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d011      	beq.n	800b262 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b23e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00b      	beq.n	800b262 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2201      	movs	r2, #1
 800b250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b258:	f043 0201 	orr.w	r2, r3, #1
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b266:	f003 0302 	and.w	r3, r3, #2
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d011      	beq.n	800b292 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b26e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b272:	f003 0301 	and.w	r3, r3, #1
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00b      	beq.n	800b292 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2202      	movs	r2, #2
 800b280:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b288:	f043 0204 	orr.w	r2, r3, #4
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b296:	f003 0304 	and.w	r3, r3, #4
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d011      	beq.n	800b2c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b29e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b2a2:	f003 0301 	and.w	r3, r3, #1
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00b      	beq.n	800b2c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2204      	movs	r2, #4
 800b2b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2b8:	f043 0202 	orr.w	r2, r3, #2
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d006      	beq.n	800b2da <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f7fe fef5 	bl	800a0bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f040 80a3 	bne.w	800b42e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2f0:	e853 3f00 	ldrex	r3, [r3]
 800b2f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b2f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	461a      	mov	r2, r3
 800b306:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b30a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b30c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b310:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b312:	e841 2300 	strex	r3, r2, [r1]
 800b316:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b318:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1e4      	bne.n	800b2e8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3308      	adds	r3, #8
 800b324:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b328:	e853 3f00 	ldrex	r3, [r3]
 800b32c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b32e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b330:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b334:	f023 0301 	bic.w	r3, r3, #1
 800b338:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3308      	adds	r3, #8
 800b342:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b346:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b348:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b34c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b34e:	e841 2300 	strex	r3, r2, [r1]
 800b352:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b354:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1e1      	bne.n	800b31e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2220      	movs	r2, #32
 800b35e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a60      	ldr	r2, [pc, #384]	@ (800b4f4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d021      	beq.n	800b3bc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b382:	2b00      	cmp	r3, #0
 800b384:	d01a      	beq.n	800b3bc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b38e:	e853 3f00 	ldrex	r3, [r3]
 800b392:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b396:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b39a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b3a8:	657b      	str	r3, [r7, #84]	@ 0x54
 800b3aa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b3ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b3b0:	e841 2300 	strex	r3, r2, [r1]
 800b3b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b3b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1e4      	bne.n	800b386 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d130      	bne.n	800b426 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d2:	e853 3f00 	ldrex	r3, [r3]
 800b3d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3da:	f023 0310 	bic.w	r3, r3, #16
 800b3de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b3ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b3f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b3f4:	e841 2300 	strex	r3, r2, [r1]
 800b3f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1e4      	bne.n	800b3ca <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	69db      	ldr	r3, [r3, #28]
 800b406:	f003 0310 	and.w	r3, r3, #16
 800b40a:	2b10      	cmp	r3, #16
 800b40c:	d103      	bne.n	800b416 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2210      	movs	r2, #16
 800b414:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b41c:	4619      	mov	r1, r3
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f7fe fe56 	bl	800a0d0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b424:	e00e      	b.n	800b444 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f7f7 f932 	bl	8002690 <HAL_UART_RxCpltCallback>
        break;
 800b42c:	e00a      	b.n	800b444 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b42e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b432:	2b00      	cmp	r3, #0
 800b434:	d006      	beq.n	800b444 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800b436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b43a:	f003 0320 	and.w	r3, r3, #32
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f47f aece 	bne.w	800b1e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b44a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b44e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b452:	2b00      	cmp	r3, #0
 800b454:	d049      	beq.n	800b4ea <UART_RxISR_8BIT_FIFOEN+0x352>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b45c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b460:	429a      	cmp	r2, r3
 800b462:	d242      	bcs.n	800b4ea <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	3308      	adds	r3, #8
 800b46a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b46c:	6a3b      	ldr	r3, [r7, #32]
 800b46e:	e853 3f00 	ldrex	r3, [r3]
 800b472:	61fb      	str	r3, [r7, #28]
   return(result);
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b47a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	3308      	adds	r3, #8
 800b484:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b488:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b48a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b48e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b490:	e841 2300 	strex	r3, r2, [r1]
 800b494:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1e3      	bne.n	800b464 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a16      	ldr	r2, [pc, #88]	@ (800b4f8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800b4a0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	e853 3f00 	ldrex	r3, [r3]
 800b4ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	f043 0320 	orr.w	r3, r3, #32
 800b4b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b4c4:	61bb      	str	r3, [r7, #24]
 800b4c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c8:	6979      	ldr	r1, [r7, #20]
 800b4ca:	69ba      	ldr	r2, [r7, #24]
 800b4cc:	e841 2300 	strex	r3, r2, [r1]
 800b4d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1e4      	bne.n	800b4a2 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b4d8:	e007      	b.n	800b4ea <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	699a      	ldr	r2, [r3, #24]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f042 0208 	orr.w	r2, r2, #8
 800b4e8:	619a      	str	r2, [r3, #24]
}
 800b4ea:	bf00      	nop
 800b4ec:	37b0      	adds	r7, #176	@ 0xb0
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	40008000 	.word	0x40008000
 800b4f8:	0800ae29 	.word	0x0800ae29

0800b4fc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b0ae      	sub	sp, #184	@ 0xb8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b50a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	69db      	ldr	r3, [r3, #28]
 800b514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b532:	2b22      	cmp	r3, #34	@ 0x22
 800b534:	f040 8187 	bne.w	800b846 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b53e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b542:	e12a      	b.n	800b79a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b54a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b552:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b556:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b55a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b55e:	4013      	ands	r3, r2
 800b560:	b29a      	uxth	r2, r3
 800b562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b566:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b56c:	1c9a      	adds	r2, r3, #2
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b578:	b29b      	uxth	r3, r3
 800b57a:	3b01      	subs	r3, #1
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	69db      	ldr	r3, [r3, #28]
 800b58a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b58e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b592:	f003 0307 	and.w	r3, r3, #7
 800b596:	2b00      	cmp	r3, #0
 800b598:	d053      	beq.n	800b642 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b59a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b59e:	f003 0301 	and.w	r3, r3, #1
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d011      	beq.n	800b5ca <UART_RxISR_16BIT_FIFOEN+0xce>
 800b5a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00b      	beq.n	800b5ca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5c0:	f043 0201 	orr.w	r2, r3, #1
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5ce:	f003 0302 	and.w	r3, r3, #2
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d011      	beq.n	800b5fa <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b5d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5da:	f003 0301 	and.w	r3, r3, #1
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00b      	beq.n	800b5fa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5f0:	f043 0204 	orr.w	r2, r3, #4
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5fe:	f003 0304 	and.w	r3, r3, #4
 800b602:	2b00      	cmp	r3, #0
 800b604:	d011      	beq.n	800b62a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b606:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b60a:	f003 0301 	and.w	r3, r3, #1
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d00b      	beq.n	800b62a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2204      	movs	r2, #4
 800b618:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b620:	f043 0202 	orr.w	r2, r3, #2
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b630:	2b00      	cmp	r3, #0
 800b632:	d006      	beq.n	800b642 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f7fe fd41 	bl	800a0bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b648:	b29b      	uxth	r3, r3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f040 80a5 	bne.w	800b79a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b658:	e853 3f00 	ldrex	r3, [r3]
 800b65c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b65e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b664:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	461a      	mov	r2, r3
 800b66e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b672:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b676:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b678:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b67a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b67e:	e841 2300 	strex	r3, r2, [r1]
 800b682:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b684:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1e2      	bne.n	800b650 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3308      	adds	r3, #8
 800b690:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b694:	e853 3f00 	ldrex	r3, [r3]
 800b698:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b69a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b69c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6a0:	f023 0301 	bic.w	r3, r3, #1
 800b6a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	3308      	adds	r3, #8
 800b6ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b6b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b6b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b6b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b6ba:	e841 2300 	strex	r3, r2, [r1]
 800b6be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b6c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1e1      	bne.n	800b68a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2220      	movs	r2, #32
 800b6ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a60      	ldr	r2, [pc, #384]	@ (800b860 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d021      	beq.n	800b728 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d01a      	beq.n	800b728 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6fa:	e853 3f00 	ldrex	r3, [r3]
 800b6fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b702:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b706:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	461a      	mov	r2, r3
 800b710:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b714:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b716:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b718:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b71a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b71c:	e841 2300 	strex	r3, r2, [r1]
 800b720:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1e4      	bne.n	800b6f2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d130      	bne.n	800b792 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b73e:	e853 3f00 	ldrex	r3, [r3]
 800b742:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b746:	f023 0310 	bic.w	r3, r3, #16
 800b74a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	461a      	mov	r2, r3
 800b754:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b758:	647b      	str	r3, [r7, #68]	@ 0x44
 800b75a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b75c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b75e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b760:	e841 2300 	strex	r3, r2, [r1]
 800b764:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1e4      	bne.n	800b736 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	69db      	ldr	r3, [r3, #28]
 800b772:	f003 0310 	and.w	r3, r3, #16
 800b776:	2b10      	cmp	r3, #16
 800b778:	d103      	bne.n	800b782 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2210      	movs	r2, #16
 800b780:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b788:	4619      	mov	r1, r3
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f7fe fca0 	bl	800a0d0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b790:	e00e      	b.n	800b7b0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7f6 ff7c 	bl	8002690 <HAL_UART_RxCpltCallback>
        break;
 800b798:	e00a      	b.n	800b7b0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b79a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d006      	beq.n	800b7b0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800b7a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b7a6:	f003 0320 	and.w	r3, r3, #32
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f47f aeca 	bne.w	800b544 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b7b6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b7ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d049      	beq.n	800b856 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b7c8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d242      	bcs.n	800b856 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	3308      	adds	r3, #8
 800b7d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7da:	e853 3f00 	ldrex	r3, [r3]
 800b7de:	623b      	str	r3, [r7, #32]
   return(result);
 800b7e0:	6a3b      	ldr	r3, [r7, #32]
 800b7e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b7e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	3308      	adds	r3, #8
 800b7f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b7f4:	633a      	str	r2, [r7, #48]	@ 0x30
 800b7f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7fc:	e841 2300 	strex	r3, r2, [r1]
 800b800:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1e3      	bne.n	800b7d0 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4a16      	ldr	r2, [pc, #88]	@ (800b864 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800b80c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	e853 3f00 	ldrex	r3, [r3]
 800b81a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f043 0320 	orr.w	r3, r3, #32
 800b822:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	461a      	mov	r2, r3
 800b82c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b830:	61fb      	str	r3, [r7, #28]
 800b832:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b834:	69b9      	ldr	r1, [r7, #24]
 800b836:	69fa      	ldr	r2, [r7, #28]
 800b838:	e841 2300 	strex	r3, r2, [r1]
 800b83c:	617b      	str	r3, [r7, #20]
   return(result);
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d1e4      	bne.n	800b80e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b844:	e007      	b.n	800b856 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	699a      	ldr	r2, [r3, #24]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f042 0208 	orr.w	r2, r2, #8
 800b854:	619a      	str	r2, [r3, #24]
}
 800b856:	bf00      	nop
 800b858:	37b8      	adds	r7, #184	@ 0xb8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	40008000 	.word	0x40008000
 800b864:	0800afe1 	.word	0x0800afe1

0800b868 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b870:	bf00      	nop
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b884:	bf00      	nop
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b898:	bf00      	nop
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d101      	bne.n	800b8ba <HAL_UARTEx_DisableFifoMode+0x16>
 800b8b6:	2302      	movs	r3, #2
 800b8b8:	e027      	b.n	800b90a <HAL_UARTEx_DisableFifoMode+0x66>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2224      	movs	r2, #36	@ 0x24
 800b8c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f022 0201 	bic.w	r2, r2, #1
 800b8e0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b8e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2220      	movs	r2, #32
 800b8fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b084      	sub	sp, #16
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b926:	2b01      	cmp	r3, #1
 800b928:	d101      	bne.n	800b92e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b92a:	2302      	movs	r3, #2
 800b92c:	e02d      	b.n	800b98a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2224      	movs	r2, #36	@ 0x24
 800b93a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f022 0201 	bic.w	r2, r2, #1
 800b954:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	683a      	ldr	r2, [r7, #0]
 800b966:	430a      	orrs	r2, r1
 800b968:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f850 	bl	800ba10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2220      	movs	r2, #32
 800b97c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b084      	sub	sp, #16
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
 800b99a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d101      	bne.n	800b9aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b9a6:	2302      	movs	r3, #2
 800b9a8:	e02d      	b.n	800ba06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2224      	movs	r2, #36	@ 0x24
 800b9b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f022 0201 	bic.w	r2, r2, #1
 800b9d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	683a      	ldr	r2, [r7, #0]
 800b9e2:	430a      	orrs	r2, r1
 800b9e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 f812 	bl	800ba10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2220      	movs	r2, #32
 800b9f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
	...

0800ba10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b085      	sub	sp, #20
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d108      	bne.n	800ba32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba30:	e031      	b.n	800ba96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba32:	2308      	movs	r3, #8
 800ba34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba36:	2308      	movs	r3, #8
 800ba38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	0e5b      	lsrs	r3, r3, #25
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	f003 0307 	and.w	r3, r3, #7
 800ba48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	0f5b      	lsrs	r3, r3, #29
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	f003 0307 	and.w	r3, r3, #7
 800ba58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba5a:	7bbb      	ldrb	r3, [r7, #14]
 800ba5c:	7b3a      	ldrb	r2, [r7, #12]
 800ba5e:	4911      	ldr	r1, [pc, #68]	@ (800baa4 <UARTEx_SetNbDataToProcess+0x94>)
 800ba60:	5c8a      	ldrb	r2, [r1, r2]
 800ba62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba66:	7b3a      	ldrb	r2, [r7, #12]
 800ba68:	490f      	ldr	r1, [pc, #60]	@ (800baa8 <UARTEx_SetNbDataToProcess+0x98>)
 800ba6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba78:	7bfb      	ldrb	r3, [r7, #15]
 800ba7a:	7b7a      	ldrb	r2, [r7, #13]
 800ba7c:	4909      	ldr	r1, [pc, #36]	@ (800baa4 <UARTEx_SetNbDataToProcess+0x94>)
 800ba7e:	5c8a      	ldrb	r2, [r1, r2]
 800ba80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba84:	7b7a      	ldrb	r2, [r7, #13]
 800ba86:	4908      	ldr	r1, [pc, #32]	@ (800baa8 <UARTEx_SetNbDataToProcess+0x98>)
 800ba88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba8e:	b29a      	uxth	r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ba96:	bf00      	nop
 800ba98:	3714      	adds	r7, #20
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	0800c24c 	.word	0x0800c24c
 800baa8:	0800c254 	.word	0x0800c254

0800baac <memset>:
 800baac:	4402      	add	r2, r0
 800baae:	4603      	mov	r3, r0
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d100      	bne.n	800bab6 <memset+0xa>
 800bab4:	4770      	bx	lr
 800bab6:	f803 1b01 	strb.w	r1, [r3], #1
 800baba:	e7f9      	b.n	800bab0 <memset+0x4>

0800babc <__errno>:
 800babc:	4b01      	ldr	r3, [pc, #4]	@ (800bac4 <__errno+0x8>)
 800babe:	6818      	ldr	r0, [r3, #0]
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	20000010 	.word	0x20000010

0800bac8 <__libc_init_array>:
 800bac8:	b570      	push	{r4, r5, r6, lr}
 800baca:	4d0d      	ldr	r5, [pc, #52]	@ (800bb00 <__libc_init_array+0x38>)
 800bacc:	4c0d      	ldr	r4, [pc, #52]	@ (800bb04 <__libc_init_array+0x3c>)
 800bace:	1b64      	subs	r4, r4, r5
 800bad0:	10a4      	asrs	r4, r4, #2
 800bad2:	2600      	movs	r6, #0
 800bad4:	42a6      	cmp	r6, r4
 800bad6:	d109      	bne.n	800baec <__libc_init_array+0x24>
 800bad8:	4d0b      	ldr	r5, [pc, #44]	@ (800bb08 <__libc_init_array+0x40>)
 800bada:	4c0c      	ldr	r4, [pc, #48]	@ (800bb0c <__libc_init_array+0x44>)
 800badc:	f000 fb92 	bl	800c204 <_init>
 800bae0:	1b64      	subs	r4, r4, r5
 800bae2:	10a4      	asrs	r4, r4, #2
 800bae4:	2600      	movs	r6, #0
 800bae6:	42a6      	cmp	r6, r4
 800bae8:	d105      	bne.n	800baf6 <__libc_init_array+0x2e>
 800baea:	bd70      	pop	{r4, r5, r6, pc}
 800baec:	f855 3b04 	ldr.w	r3, [r5], #4
 800baf0:	4798      	blx	r3
 800baf2:	3601      	adds	r6, #1
 800baf4:	e7ee      	b.n	800bad4 <__libc_init_array+0xc>
 800baf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bafa:	4798      	blx	r3
 800bafc:	3601      	adds	r6, #1
 800bafe:	e7f2      	b.n	800bae6 <__libc_init_array+0x1e>
 800bb00:	0800c268 	.word	0x0800c268
 800bb04:	0800c268 	.word	0x0800c268
 800bb08:	0800c268 	.word	0x0800c268
 800bb0c:	0800c26c 	.word	0x0800c26c

0800bb10 <acos>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	ed2d 8b02 	vpush	{d8}
 800bb16:	ec55 4b10 	vmov	r4, r5, d0
 800bb1a:	f000 f83d 	bl	800bb98 <__ieee754_acos>
 800bb1e:	4622      	mov	r2, r4
 800bb20:	462b      	mov	r3, r5
 800bb22:	4620      	mov	r0, r4
 800bb24:	4629      	mov	r1, r5
 800bb26:	eeb0 8a40 	vmov.f32	s16, s0
 800bb2a:	eef0 8a60 	vmov.f32	s17, s1
 800bb2e:	f7f4 ffc9 	bl	8000ac4 <__aeabi_dcmpun>
 800bb32:	b9a8      	cbnz	r0, 800bb60 <acos+0x50>
 800bb34:	ec45 4b10 	vmov	d0, r4, r5
 800bb38:	f000 f81e 	bl	800bb78 <fabs>
 800bb3c:	4b0c      	ldr	r3, [pc, #48]	@ (800bb70 <acos+0x60>)
 800bb3e:	ec51 0b10 	vmov	r0, r1, d0
 800bb42:	2200      	movs	r2, #0
 800bb44:	f7f4 ffb4 	bl	8000ab0 <__aeabi_dcmpgt>
 800bb48:	b150      	cbz	r0, 800bb60 <acos+0x50>
 800bb4a:	f7ff ffb7 	bl	800babc <__errno>
 800bb4e:	ecbd 8b02 	vpop	{d8}
 800bb52:	2321      	movs	r3, #33	@ 0x21
 800bb54:	6003      	str	r3, [r0, #0]
 800bb56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb5a:	4806      	ldr	r0, [pc, #24]	@ (800bb74 <acos+0x64>)
 800bb5c:	f000 b814 	b.w	800bb88 <nan>
 800bb60:	eeb0 0a48 	vmov.f32	s0, s16
 800bb64:	eef0 0a68 	vmov.f32	s1, s17
 800bb68:	ecbd 8b02 	vpop	{d8}
 800bb6c:	bd38      	pop	{r3, r4, r5, pc}
 800bb6e:	bf00      	nop
 800bb70:	3ff00000 	.word	0x3ff00000
 800bb74:	0800c25c 	.word	0x0800c25c

0800bb78 <fabs>:
 800bb78:	ec51 0b10 	vmov	r0, r1, d0
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bb82:	ec43 2b10 	vmov	d0, r2, r3
 800bb86:	4770      	bx	lr

0800bb88 <nan>:
 800bb88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bb90 <nan+0x8>
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	00000000 	.word	0x00000000
 800bb94:	7ff80000 	.word	0x7ff80000

0800bb98 <__ieee754_acos>:
 800bb98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb9c:	ec55 4b10 	vmov	r4, r5, d0
 800bba0:	49b7      	ldr	r1, [pc, #732]	@ (800be80 <__ieee754_acos+0x2e8>)
 800bba2:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bba6:	428b      	cmp	r3, r1
 800bba8:	d919      	bls.n	800bbde <__ieee754_acos+0x46>
 800bbaa:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800bbae:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800bbb2:	4323      	orrs	r3, r4
 800bbb4:	d106      	bne.n	800bbc4 <__ieee754_acos+0x2c>
 800bbb6:	2d00      	cmp	r5, #0
 800bbb8:	f340 8210 	ble.w	800bfdc <__ieee754_acos+0x444>
 800bbbc:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800be10 <__ieee754_acos+0x278>
 800bbc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc4:	4622      	mov	r2, r4
 800bbc6:	462b      	mov	r3, r5
 800bbc8:	4620      	mov	r0, r4
 800bbca:	4629      	mov	r1, r5
 800bbcc:	f7f4 fb28 	bl	8000220 <__aeabi_dsub>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	f7f4 fe06 	bl	80007e4 <__aeabi_ddiv>
 800bbd8:	ec41 0b10 	vmov	d0, r0, r1
 800bbdc:	e7f0      	b.n	800bbc0 <__ieee754_acos+0x28>
 800bbde:	49a9      	ldr	r1, [pc, #676]	@ (800be84 <__ieee754_acos+0x2ec>)
 800bbe0:	428b      	cmp	r3, r1
 800bbe2:	f200 8085 	bhi.w	800bcf0 <__ieee754_acos+0x158>
 800bbe6:	4aa8      	ldr	r2, [pc, #672]	@ (800be88 <__ieee754_acos+0x2f0>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	f240 81fa 	bls.w	800bfe2 <__ieee754_acos+0x44a>
 800bbee:	4622      	mov	r2, r4
 800bbf0:	462b      	mov	r3, r5
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	f7f4 fccb 	bl	8000590 <__aeabi_dmul>
 800bbfa:	a387      	add	r3, pc, #540	@ (adr r3, 800be18 <__ieee754_acos+0x280>)
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	4606      	mov	r6, r0
 800bc02:	460f      	mov	r7, r1
 800bc04:	f7f4 fcc4 	bl	8000590 <__aeabi_dmul>
 800bc08:	a385      	add	r3, pc, #532	@ (adr r3, 800be20 <__ieee754_acos+0x288>)
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	f7f4 fb09 	bl	8000224 <__adddf3>
 800bc12:	4632      	mov	r2, r6
 800bc14:	463b      	mov	r3, r7
 800bc16:	f7f4 fcbb 	bl	8000590 <__aeabi_dmul>
 800bc1a:	a383      	add	r3, pc, #524	@ (adr r3, 800be28 <__ieee754_acos+0x290>)
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	f7f4 fafe 	bl	8000220 <__aeabi_dsub>
 800bc24:	4632      	mov	r2, r6
 800bc26:	463b      	mov	r3, r7
 800bc28:	f7f4 fcb2 	bl	8000590 <__aeabi_dmul>
 800bc2c:	a380      	add	r3, pc, #512	@ (adr r3, 800be30 <__ieee754_acos+0x298>)
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc32:	f7f4 faf7 	bl	8000224 <__adddf3>
 800bc36:	4632      	mov	r2, r6
 800bc38:	463b      	mov	r3, r7
 800bc3a:	f7f4 fca9 	bl	8000590 <__aeabi_dmul>
 800bc3e:	a37e      	add	r3, pc, #504	@ (adr r3, 800be38 <__ieee754_acos+0x2a0>)
 800bc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc44:	f7f4 faec 	bl	8000220 <__aeabi_dsub>
 800bc48:	4632      	mov	r2, r6
 800bc4a:	463b      	mov	r3, r7
 800bc4c:	f7f4 fca0 	bl	8000590 <__aeabi_dmul>
 800bc50:	a37b      	add	r3, pc, #492	@ (adr r3, 800be40 <__ieee754_acos+0x2a8>)
 800bc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc56:	f7f4 fae5 	bl	8000224 <__adddf3>
 800bc5a:	4632      	mov	r2, r6
 800bc5c:	463b      	mov	r3, r7
 800bc5e:	f7f4 fc97 	bl	8000590 <__aeabi_dmul>
 800bc62:	a379      	add	r3, pc, #484	@ (adr r3, 800be48 <__ieee754_acos+0x2b0>)
 800bc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc68:	4680      	mov	r8, r0
 800bc6a:	4689      	mov	r9, r1
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	4639      	mov	r1, r7
 800bc70:	f7f4 fc8e 	bl	8000590 <__aeabi_dmul>
 800bc74:	a376      	add	r3, pc, #472	@ (adr r3, 800be50 <__ieee754_acos+0x2b8>)
 800bc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7a:	f7f4 fad1 	bl	8000220 <__aeabi_dsub>
 800bc7e:	4632      	mov	r2, r6
 800bc80:	463b      	mov	r3, r7
 800bc82:	f7f4 fc85 	bl	8000590 <__aeabi_dmul>
 800bc86:	a374      	add	r3, pc, #464	@ (adr r3, 800be58 <__ieee754_acos+0x2c0>)
 800bc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8c:	f7f4 faca 	bl	8000224 <__adddf3>
 800bc90:	4632      	mov	r2, r6
 800bc92:	463b      	mov	r3, r7
 800bc94:	f7f4 fc7c 	bl	8000590 <__aeabi_dmul>
 800bc98:	a371      	add	r3, pc, #452	@ (adr r3, 800be60 <__ieee754_acos+0x2c8>)
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	f7f4 fabf 	bl	8000220 <__aeabi_dsub>
 800bca2:	4632      	mov	r2, r6
 800bca4:	463b      	mov	r3, r7
 800bca6:	f7f4 fc73 	bl	8000590 <__aeabi_dmul>
 800bcaa:	4b78      	ldr	r3, [pc, #480]	@ (800be8c <__ieee754_acos+0x2f4>)
 800bcac:	2200      	movs	r2, #0
 800bcae:	f7f4 fab9 	bl	8000224 <__adddf3>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	4640      	mov	r0, r8
 800bcb8:	4649      	mov	r1, r9
 800bcba:	f7f4 fd93 	bl	80007e4 <__aeabi_ddiv>
 800bcbe:	4622      	mov	r2, r4
 800bcc0:	462b      	mov	r3, r5
 800bcc2:	f7f4 fc65 	bl	8000590 <__aeabi_dmul>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	460b      	mov	r3, r1
 800bcca:	a167      	add	r1, pc, #412	@ (adr r1, 800be68 <__ieee754_acos+0x2d0>)
 800bccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcd0:	f7f4 faa6 	bl	8000220 <__aeabi_dsub>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	4620      	mov	r0, r4
 800bcda:	4629      	mov	r1, r5
 800bcdc:	f7f4 faa0 	bl	8000220 <__aeabi_dsub>
 800bce0:	4602      	mov	r2, r0
 800bce2:	460b      	mov	r3, r1
 800bce4:	a162      	add	r1, pc, #392	@ (adr r1, 800be70 <__ieee754_acos+0x2d8>)
 800bce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcea:	f7f4 fa99 	bl	8000220 <__aeabi_dsub>
 800bcee:	e773      	b.n	800bbd8 <__ieee754_acos+0x40>
 800bcf0:	2d00      	cmp	r5, #0
 800bcf2:	f280 80cf 	bge.w	800be94 <__ieee754_acos+0x2fc>
 800bcf6:	4b65      	ldr	r3, [pc, #404]	@ (800be8c <__ieee754_acos+0x2f4>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	f7f4 fa91 	bl	8000224 <__adddf3>
 800bd02:	4b63      	ldr	r3, [pc, #396]	@ (800be90 <__ieee754_acos+0x2f8>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	f7f4 fc43 	bl	8000590 <__aeabi_dmul>
 800bd0a:	a343      	add	r3, pc, #268	@ (adr r3, 800be18 <__ieee754_acos+0x280>)
 800bd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd10:	4604      	mov	r4, r0
 800bd12:	460d      	mov	r5, r1
 800bd14:	f7f4 fc3c 	bl	8000590 <__aeabi_dmul>
 800bd18:	a341      	add	r3, pc, #260	@ (adr r3, 800be20 <__ieee754_acos+0x288>)
 800bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1e:	f7f4 fa81 	bl	8000224 <__adddf3>
 800bd22:	4622      	mov	r2, r4
 800bd24:	462b      	mov	r3, r5
 800bd26:	f7f4 fc33 	bl	8000590 <__aeabi_dmul>
 800bd2a:	a33f      	add	r3, pc, #252	@ (adr r3, 800be28 <__ieee754_acos+0x290>)
 800bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd30:	f7f4 fa76 	bl	8000220 <__aeabi_dsub>
 800bd34:	4622      	mov	r2, r4
 800bd36:	462b      	mov	r3, r5
 800bd38:	f7f4 fc2a 	bl	8000590 <__aeabi_dmul>
 800bd3c:	a33c      	add	r3, pc, #240	@ (adr r3, 800be30 <__ieee754_acos+0x298>)
 800bd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd42:	f7f4 fa6f 	bl	8000224 <__adddf3>
 800bd46:	4622      	mov	r2, r4
 800bd48:	462b      	mov	r3, r5
 800bd4a:	f7f4 fc21 	bl	8000590 <__aeabi_dmul>
 800bd4e:	a33a      	add	r3, pc, #232	@ (adr r3, 800be38 <__ieee754_acos+0x2a0>)
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	f7f4 fa64 	bl	8000220 <__aeabi_dsub>
 800bd58:	4622      	mov	r2, r4
 800bd5a:	462b      	mov	r3, r5
 800bd5c:	f7f4 fc18 	bl	8000590 <__aeabi_dmul>
 800bd60:	a337      	add	r3, pc, #220	@ (adr r3, 800be40 <__ieee754_acos+0x2a8>)
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	f7f4 fa5d 	bl	8000224 <__adddf3>
 800bd6a:	4622      	mov	r2, r4
 800bd6c:	462b      	mov	r3, r5
 800bd6e:	f7f4 fc0f 	bl	8000590 <__aeabi_dmul>
 800bd72:	a335      	add	r3, pc, #212	@ (adr r3, 800be48 <__ieee754_acos+0x2b0>)
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	4606      	mov	r6, r0
 800bd7a:	460f      	mov	r7, r1
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	4629      	mov	r1, r5
 800bd80:	f7f4 fc06 	bl	8000590 <__aeabi_dmul>
 800bd84:	a332      	add	r3, pc, #200	@ (adr r3, 800be50 <__ieee754_acos+0x2b8>)
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	f7f4 fa49 	bl	8000220 <__aeabi_dsub>
 800bd8e:	4622      	mov	r2, r4
 800bd90:	462b      	mov	r3, r5
 800bd92:	f7f4 fbfd 	bl	8000590 <__aeabi_dmul>
 800bd96:	a330      	add	r3, pc, #192	@ (adr r3, 800be58 <__ieee754_acos+0x2c0>)
 800bd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9c:	f7f4 fa42 	bl	8000224 <__adddf3>
 800bda0:	4622      	mov	r2, r4
 800bda2:	462b      	mov	r3, r5
 800bda4:	f7f4 fbf4 	bl	8000590 <__aeabi_dmul>
 800bda8:	a32d      	add	r3, pc, #180	@ (adr r3, 800be60 <__ieee754_acos+0x2c8>)
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	f7f4 fa37 	bl	8000220 <__aeabi_dsub>
 800bdb2:	4622      	mov	r2, r4
 800bdb4:	462b      	mov	r3, r5
 800bdb6:	f7f4 fbeb 	bl	8000590 <__aeabi_dmul>
 800bdba:	4b34      	ldr	r3, [pc, #208]	@ (800be8c <__ieee754_acos+0x2f4>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f7f4 fa31 	bl	8000224 <__adddf3>
 800bdc2:	ec45 4b10 	vmov	d0, r4, r5
 800bdc6:	4680      	mov	r8, r0
 800bdc8:	4689      	mov	r9, r1
 800bdca:	f000 f941 	bl	800c050 <__ieee754_sqrt>
 800bdce:	ec55 4b10 	vmov	r4, r5, d0
 800bdd2:	4642      	mov	r2, r8
 800bdd4:	464b      	mov	r3, r9
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	4639      	mov	r1, r7
 800bdda:	f7f4 fd03 	bl	80007e4 <__aeabi_ddiv>
 800bdde:	4622      	mov	r2, r4
 800bde0:	462b      	mov	r3, r5
 800bde2:	f7f4 fbd5 	bl	8000590 <__aeabi_dmul>
 800bde6:	a320      	add	r3, pc, #128	@ (adr r3, 800be68 <__ieee754_acos+0x2d0>)
 800bde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdec:	f7f4 fa18 	bl	8000220 <__aeabi_dsub>
 800bdf0:	4622      	mov	r2, r4
 800bdf2:	462b      	mov	r3, r5
 800bdf4:	f7f4 fa16 	bl	8000224 <__adddf3>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	f7f4 fa12 	bl	8000224 <__adddf3>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	a11c      	add	r1, pc, #112	@ (adr r1, 800be78 <__ieee754_acos+0x2e0>)
 800be06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be0a:	e76e      	b.n	800bcea <__ieee754_acos+0x152>
 800be0c:	f3af 8000 	nop.w
	...
 800be18:	0dfdf709 	.word	0x0dfdf709
 800be1c:	3f023de1 	.word	0x3f023de1
 800be20:	7501b288 	.word	0x7501b288
 800be24:	3f49efe0 	.word	0x3f49efe0
 800be28:	b5688f3b 	.word	0xb5688f3b
 800be2c:	3fa48228 	.word	0x3fa48228
 800be30:	0e884455 	.word	0x0e884455
 800be34:	3fc9c155 	.word	0x3fc9c155
 800be38:	03eb6f7d 	.word	0x03eb6f7d
 800be3c:	3fd4d612 	.word	0x3fd4d612
 800be40:	55555555 	.word	0x55555555
 800be44:	3fc55555 	.word	0x3fc55555
 800be48:	b12e9282 	.word	0xb12e9282
 800be4c:	3fb3b8c5 	.word	0x3fb3b8c5
 800be50:	1b8d0159 	.word	0x1b8d0159
 800be54:	3fe6066c 	.word	0x3fe6066c
 800be58:	9c598ac8 	.word	0x9c598ac8
 800be5c:	40002ae5 	.word	0x40002ae5
 800be60:	1c8a2d4b 	.word	0x1c8a2d4b
 800be64:	40033a27 	.word	0x40033a27
 800be68:	33145c07 	.word	0x33145c07
 800be6c:	3c91a626 	.word	0x3c91a626
 800be70:	54442d18 	.word	0x54442d18
 800be74:	3ff921fb 	.word	0x3ff921fb
 800be78:	54442d18 	.word	0x54442d18
 800be7c:	400921fb 	.word	0x400921fb
 800be80:	3fefffff 	.word	0x3fefffff
 800be84:	3fdfffff 	.word	0x3fdfffff
 800be88:	3c600000 	.word	0x3c600000
 800be8c:	3ff00000 	.word	0x3ff00000
 800be90:	3fe00000 	.word	0x3fe00000
 800be94:	4622      	mov	r2, r4
 800be96:	462b      	mov	r3, r5
 800be98:	496b      	ldr	r1, [pc, #428]	@ (800c048 <__ieee754_acos+0x4b0>)
 800be9a:	2000      	movs	r0, #0
 800be9c:	f7f4 f9c0 	bl	8000220 <__aeabi_dsub>
 800bea0:	4b6a      	ldr	r3, [pc, #424]	@ (800c04c <__ieee754_acos+0x4b4>)
 800bea2:	2200      	movs	r2, #0
 800bea4:	f7f4 fb74 	bl	8000590 <__aeabi_dmul>
 800bea8:	4604      	mov	r4, r0
 800beaa:	460d      	mov	r5, r1
 800beac:	ec45 4b10 	vmov	d0, r4, r5
 800beb0:	f000 f8ce 	bl	800c050 <__ieee754_sqrt>
 800beb4:	a34c      	add	r3, pc, #304	@ (adr r3, 800bfe8 <__ieee754_acos+0x450>)
 800beb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beba:	4620      	mov	r0, r4
 800bebc:	4629      	mov	r1, r5
 800bebe:	ec59 8b10 	vmov	r8, r9, d0
 800bec2:	f7f4 fb65 	bl	8000590 <__aeabi_dmul>
 800bec6:	a34a      	add	r3, pc, #296	@ (adr r3, 800bff0 <__ieee754_acos+0x458>)
 800bec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800becc:	f7f4 f9aa 	bl	8000224 <__adddf3>
 800bed0:	4622      	mov	r2, r4
 800bed2:	462b      	mov	r3, r5
 800bed4:	f7f4 fb5c 	bl	8000590 <__aeabi_dmul>
 800bed8:	a347      	add	r3, pc, #284	@ (adr r3, 800bff8 <__ieee754_acos+0x460>)
 800beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bede:	f7f4 f99f 	bl	8000220 <__aeabi_dsub>
 800bee2:	4622      	mov	r2, r4
 800bee4:	462b      	mov	r3, r5
 800bee6:	f7f4 fb53 	bl	8000590 <__aeabi_dmul>
 800beea:	a345      	add	r3, pc, #276	@ (adr r3, 800c000 <__ieee754_acos+0x468>)
 800beec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef0:	f7f4 f998 	bl	8000224 <__adddf3>
 800bef4:	4622      	mov	r2, r4
 800bef6:	462b      	mov	r3, r5
 800bef8:	f7f4 fb4a 	bl	8000590 <__aeabi_dmul>
 800befc:	a342      	add	r3, pc, #264	@ (adr r3, 800c008 <__ieee754_acos+0x470>)
 800befe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf02:	f7f4 f98d 	bl	8000220 <__aeabi_dsub>
 800bf06:	4622      	mov	r2, r4
 800bf08:	462b      	mov	r3, r5
 800bf0a:	f7f4 fb41 	bl	8000590 <__aeabi_dmul>
 800bf0e:	a340      	add	r3, pc, #256	@ (adr r3, 800c010 <__ieee754_acos+0x478>)
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	f7f4 f986 	bl	8000224 <__adddf3>
 800bf18:	4622      	mov	r2, r4
 800bf1a:	462b      	mov	r3, r5
 800bf1c:	f7f4 fb38 	bl	8000590 <__aeabi_dmul>
 800bf20:	a33d      	add	r3, pc, #244	@ (adr r3, 800c018 <__ieee754_acos+0x480>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	4682      	mov	sl, r0
 800bf28:	468b      	mov	fp, r1
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	f7f4 fb2f 	bl	8000590 <__aeabi_dmul>
 800bf32:	a33b      	add	r3, pc, #236	@ (adr r3, 800c020 <__ieee754_acos+0x488>)
 800bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf38:	f7f4 f972 	bl	8000220 <__aeabi_dsub>
 800bf3c:	4622      	mov	r2, r4
 800bf3e:	462b      	mov	r3, r5
 800bf40:	f7f4 fb26 	bl	8000590 <__aeabi_dmul>
 800bf44:	a338      	add	r3, pc, #224	@ (adr r3, 800c028 <__ieee754_acos+0x490>)
 800bf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4a:	f7f4 f96b 	bl	8000224 <__adddf3>
 800bf4e:	4622      	mov	r2, r4
 800bf50:	462b      	mov	r3, r5
 800bf52:	f7f4 fb1d 	bl	8000590 <__aeabi_dmul>
 800bf56:	a336      	add	r3, pc, #216	@ (adr r3, 800c030 <__ieee754_acos+0x498>)
 800bf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5c:	f7f4 f960 	bl	8000220 <__aeabi_dsub>
 800bf60:	4622      	mov	r2, r4
 800bf62:	462b      	mov	r3, r5
 800bf64:	f7f4 fb14 	bl	8000590 <__aeabi_dmul>
 800bf68:	4b37      	ldr	r3, [pc, #220]	@ (800c048 <__ieee754_acos+0x4b0>)
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f7f4 f95a 	bl	8000224 <__adddf3>
 800bf70:	4602      	mov	r2, r0
 800bf72:	460b      	mov	r3, r1
 800bf74:	4650      	mov	r0, sl
 800bf76:	4659      	mov	r1, fp
 800bf78:	f7f4 fc34 	bl	80007e4 <__aeabi_ddiv>
 800bf7c:	4642      	mov	r2, r8
 800bf7e:	464b      	mov	r3, r9
 800bf80:	f7f4 fb06 	bl	8000590 <__aeabi_dmul>
 800bf84:	2600      	movs	r6, #0
 800bf86:	4682      	mov	sl, r0
 800bf88:	468b      	mov	fp, r1
 800bf8a:	4632      	mov	r2, r6
 800bf8c:	464b      	mov	r3, r9
 800bf8e:	4630      	mov	r0, r6
 800bf90:	4649      	mov	r1, r9
 800bf92:	f7f4 fafd 	bl	8000590 <__aeabi_dmul>
 800bf96:	4602      	mov	r2, r0
 800bf98:	460b      	mov	r3, r1
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	f7f4 f93f 	bl	8000220 <__aeabi_dsub>
 800bfa2:	4632      	mov	r2, r6
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	460d      	mov	r5, r1
 800bfa8:	464b      	mov	r3, r9
 800bfaa:	4640      	mov	r0, r8
 800bfac:	4649      	mov	r1, r9
 800bfae:	f7f4 f939 	bl	8000224 <__adddf3>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	4629      	mov	r1, r5
 800bfba:	f7f4 fc13 	bl	80007e4 <__aeabi_ddiv>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	4650      	mov	r0, sl
 800bfc4:	4659      	mov	r1, fp
 800bfc6:	f7f4 f92d 	bl	8000224 <__adddf3>
 800bfca:	4632      	mov	r2, r6
 800bfcc:	464b      	mov	r3, r9
 800bfce:	f7f4 f929 	bl	8000224 <__adddf3>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	f7f4 f925 	bl	8000224 <__adddf3>
 800bfda:	e5fd      	b.n	800bbd8 <__ieee754_acos+0x40>
 800bfdc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800c038 <__ieee754_acos+0x4a0>
 800bfe0:	e5ee      	b.n	800bbc0 <__ieee754_acos+0x28>
 800bfe2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800c040 <__ieee754_acos+0x4a8>
 800bfe6:	e5eb      	b.n	800bbc0 <__ieee754_acos+0x28>
 800bfe8:	0dfdf709 	.word	0x0dfdf709
 800bfec:	3f023de1 	.word	0x3f023de1
 800bff0:	7501b288 	.word	0x7501b288
 800bff4:	3f49efe0 	.word	0x3f49efe0
 800bff8:	b5688f3b 	.word	0xb5688f3b
 800bffc:	3fa48228 	.word	0x3fa48228
 800c000:	0e884455 	.word	0x0e884455
 800c004:	3fc9c155 	.word	0x3fc9c155
 800c008:	03eb6f7d 	.word	0x03eb6f7d
 800c00c:	3fd4d612 	.word	0x3fd4d612
 800c010:	55555555 	.word	0x55555555
 800c014:	3fc55555 	.word	0x3fc55555
 800c018:	b12e9282 	.word	0xb12e9282
 800c01c:	3fb3b8c5 	.word	0x3fb3b8c5
 800c020:	1b8d0159 	.word	0x1b8d0159
 800c024:	3fe6066c 	.word	0x3fe6066c
 800c028:	9c598ac8 	.word	0x9c598ac8
 800c02c:	40002ae5 	.word	0x40002ae5
 800c030:	1c8a2d4b 	.word	0x1c8a2d4b
 800c034:	40033a27 	.word	0x40033a27
 800c038:	54442d18 	.word	0x54442d18
 800c03c:	400921fb 	.word	0x400921fb
 800c040:	54442d18 	.word	0x54442d18
 800c044:	3ff921fb 	.word	0x3ff921fb
 800c048:	3ff00000 	.word	0x3ff00000
 800c04c:	3fe00000 	.word	0x3fe00000

0800c050 <__ieee754_sqrt>:
 800c050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c054:	4a68      	ldr	r2, [pc, #416]	@ (800c1f8 <__ieee754_sqrt+0x1a8>)
 800c056:	ec55 4b10 	vmov	r4, r5, d0
 800c05a:	43aa      	bics	r2, r5
 800c05c:	462b      	mov	r3, r5
 800c05e:	4621      	mov	r1, r4
 800c060:	d110      	bne.n	800c084 <__ieee754_sqrt+0x34>
 800c062:	4622      	mov	r2, r4
 800c064:	4620      	mov	r0, r4
 800c066:	4629      	mov	r1, r5
 800c068:	f7f4 fa92 	bl	8000590 <__aeabi_dmul>
 800c06c:	4602      	mov	r2, r0
 800c06e:	460b      	mov	r3, r1
 800c070:	4620      	mov	r0, r4
 800c072:	4629      	mov	r1, r5
 800c074:	f7f4 f8d6 	bl	8000224 <__adddf3>
 800c078:	4604      	mov	r4, r0
 800c07a:	460d      	mov	r5, r1
 800c07c:	ec45 4b10 	vmov	d0, r4, r5
 800c080:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c084:	2d00      	cmp	r5, #0
 800c086:	dc0e      	bgt.n	800c0a6 <__ieee754_sqrt+0x56>
 800c088:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c08c:	4322      	orrs	r2, r4
 800c08e:	d0f5      	beq.n	800c07c <__ieee754_sqrt+0x2c>
 800c090:	b19d      	cbz	r5, 800c0ba <__ieee754_sqrt+0x6a>
 800c092:	4622      	mov	r2, r4
 800c094:	4620      	mov	r0, r4
 800c096:	4629      	mov	r1, r5
 800c098:	f7f4 f8c2 	bl	8000220 <__aeabi_dsub>
 800c09c:	4602      	mov	r2, r0
 800c09e:	460b      	mov	r3, r1
 800c0a0:	f7f4 fba0 	bl	80007e4 <__aeabi_ddiv>
 800c0a4:	e7e8      	b.n	800c078 <__ieee754_sqrt+0x28>
 800c0a6:	152a      	asrs	r2, r5, #20
 800c0a8:	d115      	bne.n	800c0d6 <__ieee754_sqrt+0x86>
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	e009      	b.n	800c0c2 <__ieee754_sqrt+0x72>
 800c0ae:	0acb      	lsrs	r3, r1, #11
 800c0b0:	3a15      	subs	r2, #21
 800c0b2:	0549      	lsls	r1, r1, #21
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d0fa      	beq.n	800c0ae <__ieee754_sqrt+0x5e>
 800c0b8:	e7f7      	b.n	800c0aa <__ieee754_sqrt+0x5a>
 800c0ba:	462a      	mov	r2, r5
 800c0bc:	e7fa      	b.n	800c0b4 <__ieee754_sqrt+0x64>
 800c0be:	005b      	lsls	r3, r3, #1
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	02dc      	lsls	r4, r3, #11
 800c0c4:	d5fb      	bpl.n	800c0be <__ieee754_sqrt+0x6e>
 800c0c6:	1e44      	subs	r4, r0, #1
 800c0c8:	1b12      	subs	r2, r2, r4
 800c0ca:	f1c0 0420 	rsb	r4, r0, #32
 800c0ce:	fa21 f404 	lsr.w	r4, r1, r4
 800c0d2:	4323      	orrs	r3, r4
 800c0d4:	4081      	lsls	r1, r0
 800c0d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0da:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c0de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c0e2:	07d2      	lsls	r2, r2, #31
 800c0e4:	bf5c      	itt	pl
 800c0e6:	005b      	lslpl	r3, r3, #1
 800c0e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c0ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c0f0:	bf58      	it	pl
 800c0f2:	0049      	lslpl	r1, r1, #1
 800c0f4:	2600      	movs	r6, #0
 800c0f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c0fa:	106d      	asrs	r5, r5, #1
 800c0fc:	0049      	lsls	r1, r1, #1
 800c0fe:	2016      	movs	r0, #22
 800c100:	4632      	mov	r2, r6
 800c102:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c106:	1917      	adds	r7, r2, r4
 800c108:	429f      	cmp	r7, r3
 800c10a:	bfde      	ittt	le
 800c10c:	193a      	addle	r2, r7, r4
 800c10e:	1bdb      	suble	r3, r3, r7
 800c110:	1936      	addle	r6, r6, r4
 800c112:	0fcf      	lsrs	r7, r1, #31
 800c114:	3801      	subs	r0, #1
 800c116:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c11a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c11e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c122:	d1f0      	bne.n	800c106 <__ieee754_sqrt+0xb6>
 800c124:	4604      	mov	r4, r0
 800c126:	2720      	movs	r7, #32
 800c128:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c12c:	429a      	cmp	r2, r3
 800c12e:	eb00 0e0c 	add.w	lr, r0, ip
 800c132:	db02      	blt.n	800c13a <__ieee754_sqrt+0xea>
 800c134:	d113      	bne.n	800c15e <__ieee754_sqrt+0x10e>
 800c136:	458e      	cmp	lr, r1
 800c138:	d811      	bhi.n	800c15e <__ieee754_sqrt+0x10e>
 800c13a:	f1be 0f00 	cmp.w	lr, #0
 800c13e:	eb0e 000c 	add.w	r0, lr, ip
 800c142:	da42      	bge.n	800c1ca <__ieee754_sqrt+0x17a>
 800c144:	2800      	cmp	r0, #0
 800c146:	db40      	blt.n	800c1ca <__ieee754_sqrt+0x17a>
 800c148:	f102 0801 	add.w	r8, r2, #1
 800c14c:	1a9b      	subs	r3, r3, r2
 800c14e:	458e      	cmp	lr, r1
 800c150:	bf88      	it	hi
 800c152:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c156:	eba1 010e 	sub.w	r1, r1, lr
 800c15a:	4464      	add	r4, ip
 800c15c:	4642      	mov	r2, r8
 800c15e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c162:	3f01      	subs	r7, #1
 800c164:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c168:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c16c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c170:	d1dc      	bne.n	800c12c <__ieee754_sqrt+0xdc>
 800c172:	4319      	orrs	r1, r3
 800c174:	d01b      	beq.n	800c1ae <__ieee754_sqrt+0x15e>
 800c176:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c1fc <__ieee754_sqrt+0x1ac>
 800c17a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c200 <__ieee754_sqrt+0x1b0>
 800c17e:	e9da 0100 	ldrd	r0, r1, [sl]
 800c182:	e9db 2300 	ldrd	r2, r3, [fp]
 800c186:	f7f4 f84b 	bl	8000220 <__aeabi_dsub>
 800c18a:	e9da 8900 	ldrd	r8, r9, [sl]
 800c18e:	4602      	mov	r2, r0
 800c190:	460b      	mov	r3, r1
 800c192:	4640      	mov	r0, r8
 800c194:	4649      	mov	r1, r9
 800c196:	f7f4 fc77 	bl	8000a88 <__aeabi_dcmple>
 800c19a:	b140      	cbz	r0, 800c1ae <__ieee754_sqrt+0x15e>
 800c19c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c1a0:	e9da 0100 	ldrd	r0, r1, [sl]
 800c1a4:	e9db 2300 	ldrd	r2, r3, [fp]
 800c1a8:	d111      	bne.n	800c1ce <__ieee754_sqrt+0x17e>
 800c1aa:	3601      	adds	r6, #1
 800c1ac:	463c      	mov	r4, r7
 800c1ae:	1072      	asrs	r2, r6, #1
 800c1b0:	0863      	lsrs	r3, r4, #1
 800c1b2:	07f1      	lsls	r1, r6, #31
 800c1b4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c1b8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c1bc:	bf48      	it	mi
 800c1be:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c1c2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	e756      	b.n	800c078 <__ieee754_sqrt+0x28>
 800c1ca:	4690      	mov	r8, r2
 800c1cc:	e7be      	b.n	800c14c <__ieee754_sqrt+0xfc>
 800c1ce:	f7f4 f829 	bl	8000224 <__adddf3>
 800c1d2:	e9da 8900 	ldrd	r8, r9, [sl]
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	460b      	mov	r3, r1
 800c1da:	4640      	mov	r0, r8
 800c1dc:	4649      	mov	r1, r9
 800c1de:	f7f4 fc49 	bl	8000a74 <__aeabi_dcmplt>
 800c1e2:	b120      	cbz	r0, 800c1ee <__ieee754_sqrt+0x19e>
 800c1e4:	1ca0      	adds	r0, r4, #2
 800c1e6:	bf08      	it	eq
 800c1e8:	3601      	addeq	r6, #1
 800c1ea:	3402      	adds	r4, #2
 800c1ec:	e7df      	b.n	800c1ae <__ieee754_sqrt+0x15e>
 800c1ee:	1c63      	adds	r3, r4, #1
 800c1f0:	f023 0401 	bic.w	r4, r3, #1
 800c1f4:	e7db      	b.n	800c1ae <__ieee754_sqrt+0x15e>
 800c1f6:	bf00      	nop
 800c1f8:	7ff00000 	.word	0x7ff00000
 800c1fc:	20000068 	.word	0x20000068
 800c200:	20000060 	.word	0x20000060

0800c204 <_init>:
 800c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c206:	bf00      	nop
 800c208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c20a:	bc08      	pop	{r3}
 800c20c:	469e      	mov	lr, r3
 800c20e:	4770      	bx	lr

0800c210 <_fini>:
 800c210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c212:	bf00      	nop
 800c214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c216:	bc08      	pop	{r3}
 800c218:	469e      	mov	lr, r3
 800c21a:	4770      	bx	lr
