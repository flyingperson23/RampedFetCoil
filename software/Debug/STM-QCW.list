
STM-QCW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c09c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800c274  0800c274  0000d274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2b8  0800c2b8  0000e070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2b8  0800c2b8  0000d2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2c0  0800c2c0  0000e070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2c0  0800c2c0  0000d2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c2c4  0800c2c4  0000d2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800c2c8  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c0  20000070  0800c338  0000e070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a30  0800c338  0000ea30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e320  00000000  00000000  0000e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003654  00000000  00000000  0002c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  0002fa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000141b  00000000  00000000  000313e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220f4  00000000  00000000  000327fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d8f9  00000000  00000000  000548ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5111  00000000  00000000  000721e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001572f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074a4  00000000  00000000  0015733c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0015e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c25c 	.word	0x0800c25c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800c25c 	.word	0x0800c25c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b96a 	b.w	8000f0c <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	460c      	mov	r4, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14e      	bne.n	8000cfa <__udivmoddi4+0xaa>
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	458c      	cmp	ip, r1
 8000c60:	4686      	mov	lr, r0
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	d962      	bls.n	8000d2e <__udivmoddi4+0xde>
 8000c68:	b14a      	cbz	r2, 8000c7e <__udivmoddi4+0x2e>
 8000c6a:	f1c2 0320 	rsb	r3, r2, #32
 8000c6e:	4091      	lsls	r1, r2
 8000c70:	fa20 f303 	lsr.w	r3, r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f f68c 	uxth.w	r6, ip
 8000c86:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c96:	fb04 f106 	mul.w	r1, r4, r6
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x64>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ca6:	f080 8112 	bcs.w	8000ece <__udivmoddi4+0x27e>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 810f 	bls.w	8000ece <__udivmoddi4+0x27e>
 8000cb0:	3c02      	subs	r4, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a59      	subs	r1, r3, r1
 8000cb6:	fa1f f38e 	uxth.w	r3, lr
 8000cba:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbe:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc6:	fb00 f606 	mul.w	r6, r0, r6
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	d90a      	bls.n	8000ce4 <__udivmoddi4+0x94>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd6:	f080 80fc 	bcs.w	8000ed2 <__udivmoddi4+0x282>
 8000cda:	429e      	cmp	r6, r3
 8000cdc:	f240 80f9 	bls.w	8000ed2 <__udivmoddi4+0x282>
 8000ce0:	4463      	add	r3, ip
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cea:	2100      	movs	r1, #0
 8000cec:	b11d      	cbz	r5, 8000cf6 <__udivmoddi4+0xa6>
 8000cee:	40d3      	lsrs	r3, r2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d905      	bls.n	8000d0a <__udivmoddi4+0xba>
 8000cfe:	b10d      	cbz	r5, 8000d04 <__udivmoddi4+0xb4>
 8000d00:	e9c5 0100 	strd	r0, r1, [r5]
 8000d04:	2100      	movs	r1, #0
 8000d06:	4608      	mov	r0, r1
 8000d08:	e7f5      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d0a:	fab3 f183 	clz	r1, r3
 8000d0e:	2900      	cmp	r1, #0
 8000d10:	d146      	bne.n	8000da0 <__udivmoddi4+0x150>
 8000d12:	42a3      	cmp	r3, r4
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xcc>
 8000d16:	4290      	cmp	r0, r2
 8000d18:	f0c0 80f0 	bcc.w	8000efc <__udivmoddi4+0x2ac>
 8000d1c:	1a86      	subs	r6, r0, r2
 8000d1e:	eb64 0303 	sbc.w	r3, r4, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d0e6      	beq.n	8000cf6 <__udivmoddi4+0xa6>
 8000d28:	e9c5 6300 	strd	r6, r3, [r5]
 8000d2c:	e7e3      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	f040 8090 	bne.w	8000e54 <__udivmoddi4+0x204>
 8000d34:	eba1 040c 	sub.w	r4, r1, ip
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	2101      	movs	r1, #1
 8000d42:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d4a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb07 f006 	mul.w	r0, r7, r6
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x11c>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x11a>
 8000d64:	4298      	cmp	r0, r3
 8000d66:	f200 80cd 	bhi.w	8000f04 <__udivmoddi4+0x2b4>
 8000d6a:	4626      	mov	r6, r4
 8000d6c:	1a1c      	subs	r4, r3, r0
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d76:	fb08 4410 	mls	r4, r8, r0, r4
 8000d7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7e:	fb00 f707 	mul.w	r7, r0, r7
 8000d82:	429f      	cmp	r7, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x148>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x146>
 8000d90:	429f      	cmp	r7, r3
 8000d92:	f200 80b0 	bhi.w	8000ef6 <__udivmoddi4+0x2a6>
 8000d96:	4620      	mov	r0, r4
 8000d98:	1bdb      	subs	r3, r3, r7
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0x9c>
 8000da0:	f1c1 0620 	rsb	r6, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 f706 	lsr.w	r7, r2, r6
 8000daa:	431f      	orrs	r7, r3
 8000dac:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db0:	fa04 f301 	lsl.w	r3, r4, r1
 8000db4:	ea43 030c 	orr.w	r3, r3, ip
 8000db8:	40f4      	lsrs	r4, r6
 8000dba:	fa00 f801 	lsl.w	r8, r0, r1
 8000dbe:	0c38      	lsrs	r0, r7, #16
 8000dc0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dc4:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd4:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd8:	45a1      	cmp	r9, r4
 8000dda:	fa02 f201 	lsl.w	r2, r2, r1
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x1a6>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000de6:	f080 8084 	bcs.w	8000ef2 <__udivmoddi4+0x2a2>
 8000dea:	45a1      	cmp	r9, r4
 8000dec:	f240 8081 	bls.w	8000ef2 <__udivmoddi4+0x2a2>
 8000df0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	eba4 0409 	sub.w	r4, r4, r9
 8000dfa:	fa1f f983 	uxth.w	r9, r3
 8000dfe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e02:	fb00 4413 	mls	r4, r0, r3, r4
 8000e06:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x1d2>
 8000e12:	193c      	adds	r4, r7, r4
 8000e14:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e18:	d267      	bcs.n	8000eea <__udivmoddi4+0x29a>
 8000e1a:	45a4      	cmp	ip, r4
 8000e1c:	d965      	bls.n	8000eea <__udivmoddi4+0x29a>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	443c      	add	r4, r7
 8000e22:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e26:	fba0 9302 	umull	r9, r3, r0, r2
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	429c      	cmp	r4, r3
 8000e30:	46ce      	mov	lr, r9
 8000e32:	469c      	mov	ip, r3
 8000e34:	d351      	bcc.n	8000eda <__udivmoddi4+0x28a>
 8000e36:	d04e      	beq.n	8000ed6 <__udivmoddi4+0x286>
 8000e38:	b155      	cbz	r5, 8000e50 <__udivmoddi4+0x200>
 8000e3a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e3e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e42:	fa04 f606 	lsl.w	r6, r4, r6
 8000e46:	40cb      	lsrs	r3, r1
 8000e48:	431e      	orrs	r6, r3
 8000e4a:	40cc      	lsrs	r4, r1
 8000e4c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e50:	2100      	movs	r1, #0
 8000e52:	e750      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000e54:	f1c2 0320 	rsb	r3, r2, #32
 8000e58:	fa20 f103 	lsr.w	r1, r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa24 f303 	lsr.w	r3, r4, r3
 8000e64:	4094      	lsls	r4, r2
 8000e66:	430c      	orrs	r4, r1
 8000e68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e6c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e78:	fb08 3110 	mls	r1, r8, r0, r3
 8000e7c:	0c23      	lsrs	r3, r4, #16
 8000e7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e82:	fb00 f107 	mul.w	r1, r0, r7
 8000e86:	4299      	cmp	r1, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x24c>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e92:	d22c      	bcs.n	8000eee <__udivmoddi4+0x29e>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	d92a      	bls.n	8000eee <__udivmoddi4+0x29e>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1a5b      	subs	r3, r3, r1
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ea4:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eac:	fb01 f307 	mul.w	r3, r1, r7
 8000eb0:	42a3      	cmp	r3, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x276>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ebc:	d213      	bcs.n	8000ee6 <__udivmoddi4+0x296>
 8000ebe:	42a3      	cmp	r3, r4
 8000ec0:	d911      	bls.n	8000ee6 <__udivmoddi4+0x296>
 8000ec2:	3902      	subs	r1, #2
 8000ec4:	4464      	add	r4, ip
 8000ec6:	1ae4      	subs	r4, r4, r3
 8000ec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ecc:	e739      	b.n	8000d42 <__udivmoddi4+0xf2>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	e6f0      	b.n	8000cb4 <__udivmoddi4+0x64>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e706      	b.n	8000ce4 <__udivmoddi4+0x94>
 8000ed6:	45c8      	cmp	r8, r9
 8000ed8:	d2ae      	bcs.n	8000e38 <__udivmoddi4+0x1e8>
 8000eda:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ede:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ee2:	3801      	subs	r0, #1
 8000ee4:	e7a8      	b.n	8000e38 <__udivmoddi4+0x1e8>
 8000ee6:	4631      	mov	r1, r6
 8000ee8:	e7ed      	b.n	8000ec6 <__udivmoddi4+0x276>
 8000eea:	4603      	mov	r3, r0
 8000eec:	e799      	b.n	8000e22 <__udivmoddi4+0x1d2>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e7d4      	b.n	8000e9c <__udivmoddi4+0x24c>
 8000ef2:	46d6      	mov	lr, sl
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1a6>
 8000ef6:	4463      	add	r3, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e74d      	b.n	8000d98 <__udivmoddi4+0x148>
 8000efc:	4606      	mov	r6, r0
 8000efe:	4623      	mov	r3, r4
 8000f00:	4608      	mov	r0, r1
 8000f02:	e70f      	b.n	8000d24 <__udivmoddi4+0xd4>
 8000f04:	3e02      	subs	r6, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	e730      	b.n	8000d6c <__udivmoddi4+0x11c>
 8000f0a:	bf00      	nop

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f14:	f002 f839 	bl	8002f8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f18:	f000 f824 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1c:	f000 fde4 	bl	8001ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f20:	f000 fdb0 	bl	8001a84 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f24:	f000 f868 	bl	8000ff8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f28:	f000 f904 	bl	8001134 <MX_ADC2_Init>
  MX_COMP1_Init();
 8000f2c:	f000 f96a 	bl	8001204 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000f30:	f000 f98e 	bl	8001250 <MX_COMP2_Init>
  MX_DAC1_Init();
 8000f34:	f000 f9b4 	bl	80012a0 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000f38:	f000 f9ec 	bl	8001314 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f3c:	f000 fa28 	bl	8001390 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f40:	f000 fd54 	bl	80019ec <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f44:	f000 fb06 	bl	8001554 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000f48:	f000 fc8e 	bl	8001868 <MX_TIM6_Init>
  MX_TIM4_Init();
 8000f4c:	f000 fbfe 	bl	800174c <MX_TIM4_Init>
  MX_TIM3_Init();
 8000f50:	f000 fb7a 	bl	8001648 <MX_TIM3_Init>
  MX_TIM7_Init();
 8000f54:	f000 fcbe 	bl	80018d4 <MX_TIM7_Init>
  MX_TIM8_Init();
 8000f58:	f000 fcf4 	bl	8001944 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  QCW_Init();
 8000f5c:	f000 fe2c 	bl	8001bb8 <QCW_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <main+0x50>

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	@ 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0318 	add.w	r3, r7, #24
 8000f6e:	2238      	movs	r2, #56	@ 0x38
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f00a fdc6 	bl	800bb04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f005 f936 	bl	80061f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f94:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fa2:	2355      	movs	r3, #85	@ 0x55
 8000fa4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f005 f9d2 	bl	8006360 <HAL_RCC_OscConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000fc2:	f000 fdf3 	bl	8001bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2104      	movs	r1, #4
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f005 fcd0 	bl	8006984 <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000fea:	f000 fddf 	bl	8001bac <Error_Handler>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3750      	adds	r7, #80	@ 0x50
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	@ 0x30
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f00a fd77 	bl	800bb04 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001016:	4b43      	ldr	r3, [pc, #268]	@ (8001124 <MX_ADC1_Init+0x12c>)
 8001018:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800101c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800101e:	4b41      	ldr	r3, [pc, #260]	@ (8001124 <MX_ADC1_Init+0x12c>)
 8001020:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001024:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001026:	4b3f      	ldr	r3, [pc, #252]	@ (8001124 <MX_ADC1_Init+0x12c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102c:	4b3d      	ldr	r3, [pc, #244]	@ (8001124 <MX_ADC1_Init+0x12c>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001032:	4b3c      	ldr	r3, [pc, #240]	@ (8001124 <MX_ADC1_Init+0x12c>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001038:	4b3a      	ldr	r3, [pc, #232]	@ (8001124 <MX_ADC1_Init+0x12c>)
 800103a:	2201      	movs	r2, #1
 800103c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800103e:	4b39      	ldr	r3, [pc, #228]	@ (8001124 <MX_ADC1_Init+0x12c>)
 8001040:	2208      	movs	r2, #8
 8001042:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001044:	4b37      	ldr	r3, [pc, #220]	@ (8001124 <MX_ADC1_Init+0x12c>)
 8001046:	2200      	movs	r2, #0
 8001048:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800104a:	4b36      	ldr	r3, [pc, #216]	@ (8001124 <MX_ADC1_Init+0x12c>)
 800104c:	2200      	movs	r2, #0
 800104e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001050:	4b34      	ldr	r3, [pc, #208]	@ (8001124 <MX_ADC1_Init+0x12c>)
 8001052:	2203      	movs	r2, #3
 8001054:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001056:	4b33      	ldr	r3, [pc, #204]	@ (8001124 <MX_ADC1_Init+0x12c>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO2;
 800105e:	4b31      	ldr	r3, [pc, #196]	@ (8001124 <MX_ADC1_Init+0x12c>)
 8001060:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001064:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001066:	4b2f      	ldr	r3, [pc, #188]	@ (8001124 <MX_ADC1_Init+0x12c>)
 8001068:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800106c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800106e:	4b2d      	ldr	r3, [pc, #180]	@ (8001124 <MX_ADC1_Init+0x12c>)
 8001070:	2201      	movs	r2, #1
 8001072:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001076:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <MX_ADC1_Init+0x12c>)
 8001078:	2200      	movs	r2, #0
 800107a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800107c:	4b29      	ldr	r3, [pc, #164]	@ (8001124 <MX_ADC1_Init+0x12c>)
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001084:	4827      	ldr	r0, [pc, #156]	@ (8001124 <MX_ADC1_Init+0x12c>)
 8001086:	f002 fa79 	bl	800357c <HAL_ADC_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001090:	f000 fd8c 	bl	8001bac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	4821      	ldr	r0, [pc, #132]	@ (8001124 <MX_ADC1_Init+0x12c>)
 80010a0:	f003 fd2c 	bl	8004afc <HAL_ADCEx_MultiModeConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010aa:	f000 fd7f 	bl	8001bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <MX_ADC1_Init+0x130>)
 80010b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b2:	2306      	movs	r3, #6
 80010b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80010b6:	2306      	movs	r3, #6
 80010b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ba:	237f      	movs	r3, #127	@ 0x7f
 80010bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010be:	2304      	movs	r3, #4
 80010c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4816      	ldr	r0, [pc, #88]	@ (8001124 <MX_ADC1_Init+0x12c>)
 80010cc:	f002 fec6 	bl	8003e5c <HAL_ADC_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80010d6:	f000 fd69 	bl	8001bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80010da:	4b14      	ldr	r3, [pc, #80]	@ (800112c <MX_ADC1_Init+0x134>)
 80010dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010de:	230c      	movs	r3, #12
 80010e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80010e2:	2305      	movs	r3, #5
 80010e4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	480e      	ldr	r0, [pc, #56]	@ (8001124 <MX_ADC1_Init+0x12c>)
 80010ec:	f002 feb6 	bl	8003e5c <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 80010f6:	f000 fd59 	bl	8001bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <MX_ADC1_Init+0x138>)
 80010fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010fe:	2312      	movs	r3, #18
 8001100:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001102:	2306      	movs	r3, #6
 8001104:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	@ (8001124 <MX_ADC1_Init+0x12c>)
 800110c:	f002 fea6 	bl	8003e5c <HAL_ADC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8001116:	f000 fd49 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	@ 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000008c 	.word	0x2000008c
 8001128:	04300002 	.word	0x04300002
 800112c:	c3210000 	.word	0xc3210000
 8001130:	cb840000 	.word	0xcb840000

08001134 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113a:	463b      	mov	r3, r7
 800113c:	2220      	movs	r2, #32
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f00a fcdf 	bl	800bb04 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001146:	4b2c      	ldr	r3, [pc, #176]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 8001148:	4a2c      	ldr	r2, [pc, #176]	@ (80011fc <MX_ADC2_Init+0xc8>)
 800114a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800114c:	4b2a      	ldr	r3, [pc, #168]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 800114e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001152:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001154:	4b28      	ldr	r3, [pc, #160]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115a:	4b27      	ldr	r3, [pc, #156]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001160:	4b25      	ldr	r3, [pc, #148]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001166:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800116c:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 800116e:	2204      	movs	r2, #4
 8001170:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001172:	4b21      	ldr	r3, [pc, #132]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 8001174:	2200      	movs	r2, #0
 8001176:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001178:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 800117a:	2200      	movs	r2, #0
 800117c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800117e:	4b1e      	ldr	r3, [pc, #120]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 8001180:	2201      	movs	r2, #1
 8001182:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001184:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO2;
 800118c:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 800118e:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001192:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001194:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 8001196:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800119a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800119c:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011aa:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011b2:	4811      	ldr	r0, [pc, #68]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 80011b4:	f002 f9e2 	bl	800357c <HAL_ADC_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80011be:	f000 fcf5 	bl	8001bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <MX_ADC2_Init+0xcc>)
 80011c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c6:	2306      	movs	r3, #6
 80011c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80011ca:	2307      	movs	r3, #7
 80011cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ce:	237f      	movs	r3, #127	@ 0x7f
 80011d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d2:	2304      	movs	r3, #4
 80011d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 80011e0:	f002 fe3c 	bl	8003e5c <HAL_ADC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80011ea:	f000 fcdf 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000f8 	.word	0x200000f8
 80011fc:	50000100 	.word	0x50000100
 8001200:	47520000 	.word	0x47520000

08001204 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <MX_COMP1_Init+0x44>)
 800120a:	4a10      	ldr	r2, [pc, #64]	@ (800124c <MX_COMP1_Init+0x48>)
 800120c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MX_COMP1_Init+0x44>)
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <MX_COMP1_Init+0x44>)
 8001216:	2250      	movs	r2, #80	@ 0x50
 8001218:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800121a:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <MX_COMP1_Init+0x44>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_10MV;
 8001220:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <MX_COMP1_Init+0x44>)
 8001222:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001226:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <MX_COMP1_Init+0x44>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <MX_COMP1_Init+0x44>)
 8001230:	2211      	movs	r2, #17
 8001232:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	@ (8001248 <MX_COMP1_Init+0x44>)
 8001236:	f003 fdc3 	bl	8004dc0 <HAL_COMP_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8001240:	f000 fcb4 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000224 	.word	0x20000224
 800124c:	40010200 	.word	0x40010200

08001250 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001254:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_COMP2_Init+0x48>)
 8001256:	4a11      	ldr	r2, [pc, #68]	@ (800129c <MX_COMP2_Init+0x4c>)
 8001258:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800125a:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <MX_COMP2_Init+0x48>)
 800125c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001260:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_IO2;
 8001262:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <MX_COMP2_Init+0x48>)
 8001264:	2270      	movs	r2, #112	@ 0x70
 8001266:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001268:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <MX_COMP2_Init+0x48>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_10MV;
 800126e:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <MX_COMP2_Init+0x48>)
 8001270:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001274:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <MX_COMP2_Init+0x48>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_COMP2_Init+0x48>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_COMP2_Init+0x48>)
 8001284:	f003 fd9c 	bl	8004dc0 <HAL_COMP_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_COMP2_Init+0x42>
  {
    Error_Handler();
 800128e:	f000 fc8d 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000248 	.word	0x20000248
 800129c:	40010204 	.word	0x40010204

080012a0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	@ 0x30
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2230      	movs	r2, #48	@ 0x30
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00a fc29 	bl	800bb04 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012b2:	4b16      	ldr	r3, [pc, #88]	@ (800130c <MX_DAC1_Init+0x6c>)
 80012b4:	4a16      	ldr	r2, [pc, #88]	@ (8001310 <MX_DAC1_Init+0x70>)
 80012b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012b8:	4814      	ldr	r0, [pc, #80]	@ (800130c <MX_DAC1_Init+0x6c>)
 80012ba:	f003 fff0 	bl	800529e <HAL_DAC_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012c4:	f000 fc72 	bl	8001bac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80012c8:	2302      	movs	r3, #2
 80012ca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80012e0:	2302      	movs	r3, #2
 80012e2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	@ (800130c <MX_DAC1_Init+0x6c>)
 80012f4:	f004 f8f0 	bl	80054d8 <HAL_DAC_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80012fe:	f000 fc55 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	3730      	adds	r7, #48	@ 0x30
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000026c 	.word	0x2000026c
 8001310:	50000800 	.word	0x50000800

08001314 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001318:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <MX_SPI1_Init+0x74>)
 800131a:	4a1c      	ldr	r2, [pc, #112]	@ (800138c <MX_SPI1_Init+0x78>)
 800131c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001320:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001326:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800132c:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <MX_SPI1_Init+0x74>)
 800132e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001332:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800133a:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <MX_SPI1_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001346:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <MX_SPI1_Init+0x74>)
 800134a:	2230      	movs	r2, #48	@ 0x30
 800134c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800135a:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <MX_SPI1_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001360:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001362:	2207      	movs	r2, #7
 8001364:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <MX_SPI1_Init+0x74>)
 800136e:	2208      	movs	r2, #8
 8001370:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001372:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001374:	f005 ff12 	bl	800719c <HAL_SPI_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800137e:	f000 fc15 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000280 	.word	0x20000280
 800138c:	40013000 	.word	0x40013000

08001390 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0a0      	sub	sp, #128	@ 0x80
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013d4:	463b      	mov	r3, r7
 80013d6:	2234      	movs	r2, #52	@ 0x34
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f00a fb92 	bl	800bb04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e0:	4b59      	ldr	r3, [pc, #356]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 80013e2:	4a5a      	ldr	r2, [pc, #360]	@ (800154c <MX_TIM1_Init+0x1bc>)
 80013e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013e6:	4b58      	ldr	r3, [pc, #352]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ec:	4b56      	ldr	r3, [pc, #344]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013f2:	4b55      	ldr	r3, [pc, #340]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 80013f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	4b53      	ldr	r3, [pc, #332]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001400:	4b51      	ldr	r3, [pc, #324]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001406:	4b50      	ldr	r3, [pc, #320]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800140c:	484e      	ldr	r0, [pc, #312]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 800140e:	f006 f884 	bl	800751a <HAL_TIM_Base_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001418:	f000 fbc8 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001420:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001422:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001426:	4619      	mov	r1, r3
 8001428:	4847      	ldr	r0, [pc, #284]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 800142a:	f007 f8eb 	bl	8008604 <HAL_TIM_ConfigClockSource>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001434:	f000 fbba 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001438:	4843      	ldr	r0, [pc, #268]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 800143a:	f006 f991 	bl	8007760 <HAL_TIM_PWM_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001444:	f000 fbb2 	bl	8001bac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001448:	2304      	movs	r3, #4
 800144a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800144c:	2370      	movs	r3, #112	@ 0x70
 800144e:	663b      	str	r3, [r7, #96]	@ 0x60
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8001450:	2300      	movs	r3, #0
 8001452:	667b      	str	r3, [r7, #100]	@ 0x64
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	66bb      	str	r3, [r7, #104]	@ 0x68
  sSlaveConfig.TriggerFilter = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800145c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001460:	4619      	mov	r1, r3
 8001462:	4839      	ldr	r0, [pc, #228]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 8001464:	f007 f9c8 	bl	80087f8 <HAL_TIM_SlaveConfigSynchro>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 800146e:	f000 fb9d 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800147e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001482:	4619      	mov	r1, r3
 8001484:	4830      	ldr	r0, [pc, #192]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 8001486:	f008 f84d 	bl	8009524 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001490:	f000 fb8c 	bl	8001bac <Error_Handler>
  }
  HAL_TIMEx_RemapConfig(&htim1, TIM_TIM1_ETR_COMP2);
 8001494:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001498:	482b      	ldr	r0, [pc, #172]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 800149a:	f008 f951 	bl	8009740 <HAL_TIMEx_RemapConfig>
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 800149e:	4b2c      	ldr	r3, [pc, #176]	@ (8001550 <MX_TIM1_Init+0x1c0>)
 80014a0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a6:	2300      	movs	r3, #0
 80014a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014aa:	2300      	movs	r3, #0
 80014ac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	4821      	ldr	r0, [pc, #132]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 80014c4:	f006 ff8a 	bl	80083dc <HAL_TIM_PWM_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80014ce:	f000 fb6d 	bl	8001bac <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80014d2:	2302      	movs	r3, #2
 80014d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014da:	2208      	movs	r2, #8
 80014dc:	4619      	mov	r1, r3
 80014de:	481a      	ldr	r0, [pc, #104]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 80014e0:	f006 ff7c 	bl	80083dc <HAL_TIM_PWM_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 80014ea:	f000 fb5f 	bl	8001bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001502:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001506:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001514:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001526:	463b      	mov	r3, r7
 8001528:	4619      	mov	r1, r3
 800152a:	4807      	ldr	r0, [pc, #28]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 800152c:	f008 f87c 	bl	8009628 <HAL_TIMEx_ConfigBreakDeadTime>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM1_Init+0x1aa>
  {
    Error_Handler();
 8001536:	f000 fb39 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800153a:	4803      	ldr	r0, [pc, #12]	@ (8001548 <MX_TIM1_Init+0x1b8>)
 800153c:	f001 fb3a 	bl	8002bb4 <HAL_TIM_MspPostInit>

}
 8001540:	bf00      	nop
 8001542:	3780      	adds	r7, #128	@ 0x80
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200002e4 	.word	0x200002e4
 800154c:	40012c00 	.word	0x40012c00
 8001550:	00010060 	.word	0x00010060

08001554 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	@ 0x30
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155a:	f107 0320 	add.w	r3, r7, #32
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001580:	4b30      	ldr	r3, [pc, #192]	@ (8001644 <MX_TIM2_Init+0xf0>)
 8001582:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001586:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001588:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <MX_TIM2_Init+0xf0>)
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b2d      	ldr	r3, [pc, #180]	@ (8001644 <MX_TIM2_Init+0xf0>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001594:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <MX_TIM2_Init+0xf0>)
 8001596:	f04f 32ff 	mov.w	r2, #4294967295
 800159a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159c:	4b29      	ldr	r3, [pc, #164]	@ (8001644 <MX_TIM2_Init+0xf0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	4b28      	ldr	r3, [pc, #160]	@ (8001644 <MX_TIM2_Init+0xf0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015a8:	4826      	ldr	r0, [pc, #152]	@ (8001644 <MX_TIM2_Init+0xf0>)
 80015aa:	f005 ffb6 	bl	800751a <HAL_TIM_Base_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80015b4:	f000 fafa 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	4619      	mov	r1, r3
 80015c4:	481f      	ldr	r0, [pc, #124]	@ (8001644 <MX_TIM2_Init+0xf0>)
 80015c6:	f007 f81d 	bl	8008604 <HAL_TIM_ConfigClockSource>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80015d0:	f000 faec 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80015d4:	481b      	ldr	r0, [pc, #108]	@ (8001644 <MX_TIM2_Init+0xf0>)
 80015d6:	f006 fb71 	bl	8007cbc <HAL_TIM_IC_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80015e0:	f000 fae4 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	4814      	ldr	r0, [pc, #80]	@ (8001644 <MX_TIM2_Init+0xf0>)
 80015f4:	f007 ff96 	bl	8009524 <HAL_TIMEx_MasterConfigSynchronization>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80015fe:	f000 fad5 	bl	8001bac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001606:	2301      	movs	r3, #1
 8001608:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	4619      	mov	r1, r3
 8001618:	480a      	ldr	r0, [pc, #40]	@ (8001644 <MX_TIM2_Init+0xf0>)
 800161a:	f006 fe42 	bl	80082a2 <HAL_TIM_IC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001624:	f000 fac2 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim2, TIM_TIM2_TI1_COMP2, TIM_CHANNEL_1) != HAL_OK)
 8001628:	2200      	movs	r2, #0
 800162a:	2102      	movs	r1, #2
 800162c:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MX_TIM2_Init+0xf0>)
 800162e:	f008 f8ad 	bl	800978c <HAL_TIMEx_TISelection>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001638:	f000 fab8 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	3730      	adds	r7, #48	@ 0x30
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000330 	.word	0x20000330

08001648 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08e      	sub	sp, #56	@ 0x38
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001668:	463b      	mov	r3, r7
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800167a:	4b32      	ldr	r3, [pc, #200]	@ (8001744 <MX_TIM3_Init+0xfc>)
 800167c:	4a32      	ldr	r2, [pc, #200]	@ (8001748 <MX_TIM3_Init+0x100>)
 800167e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001680:	4b30      	ldr	r3, [pc, #192]	@ (8001744 <MX_TIM3_Init+0xfc>)
 8001682:	2200      	movs	r2, #0
 8001684:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001686:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <MX_TIM3_Init+0xfc>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6800;
 800168c:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <MX_TIM3_Init+0xfc>)
 800168e:	f641 2290 	movw	r2, #6800	@ 0x1a90
 8001692:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001694:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <MX_TIM3_Init+0xfc>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b2a      	ldr	r3, [pc, #168]	@ (8001744 <MX_TIM3_Init+0xfc>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016a0:	4828      	ldr	r0, [pc, #160]	@ (8001744 <MX_TIM3_Init+0xfc>)
 80016a2:	f005 ff3a 	bl	800751a <HAL_TIM_Base_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80016ac:	f000 fa7e 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4821      	ldr	r0, [pc, #132]	@ (8001744 <MX_TIM3_Init+0xfc>)
 80016be:	f006 ffa1 	bl	8008604 <HAL_TIM_ConfigClockSource>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80016c8:	f000 fa70 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016cc:	481d      	ldr	r0, [pc, #116]	@ (8001744 <MX_TIM3_Init+0xfc>)
 80016ce:	f006 f847 	bl	8007760 <HAL_TIM_PWM_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016d8:	f000 fa68 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4816      	ldr	r0, [pc, #88]	@ (8001744 <MX_TIM3_Init+0xfc>)
 80016ec:	f007 ff1a 	bl	8009524 <HAL_TIMEx_MasterConfigSynchronization>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016f6:	f000 fa59 	bl	8001bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fa:	2360      	movs	r3, #96	@ 0x60
 80016fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <MX_TIM3_Init+0xfc>)
 8001712:	f006 fe63 	bl	80083dc <HAL_TIM_PWM_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800171c:	f000 fa46 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001720:	463b      	mov	r3, r7
 8001722:	2204      	movs	r2, #4
 8001724:	4619      	mov	r1, r3
 8001726:	4807      	ldr	r0, [pc, #28]	@ (8001744 <MX_TIM3_Init+0xfc>)
 8001728:	f006 fe58 	bl	80083dc <HAL_TIM_PWM_ConfigChannel>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001732:	f000 fa3b 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001736:	4803      	ldr	r0, [pc, #12]	@ (8001744 <MX_TIM3_Init+0xfc>)
 8001738:	f001 fa3c 	bl	8002bb4 <HAL_TIM_MspPostInit>

}
 800173c:	bf00      	nop
 800173e:	3738      	adds	r7, #56	@ 0x38
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2000037c 	.word	0x2000037c
 8001748:	40000400 	.word	0x40000400

0800174c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08e      	sub	sp, #56	@ 0x38
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001752:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176c:	463b      	mov	r3, r7
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800177e:	4b38      	ldr	r3, [pc, #224]	@ (8001860 <MX_TIM4_Init+0x114>)
 8001780:	4a38      	ldr	r2, [pc, #224]	@ (8001864 <MX_TIM4_Init+0x118>)
 8001782:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001784:	4b36      	ldr	r3, [pc, #216]	@ (8001860 <MX_TIM4_Init+0x114>)
 8001786:	2200      	movs	r2, #0
 8001788:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178a:	4b35      	ldr	r3, [pc, #212]	@ (8001860 <MX_TIM4_Init+0x114>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 6800;
 8001790:	4b33      	ldr	r3, [pc, #204]	@ (8001860 <MX_TIM4_Init+0x114>)
 8001792:	f641 2290 	movw	r2, #6800	@ 0x1a90
 8001796:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001798:	4b31      	ldr	r3, [pc, #196]	@ (8001860 <MX_TIM4_Init+0x114>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179e:	4b30      	ldr	r3, [pc, #192]	@ (8001860 <MX_TIM4_Init+0x114>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017a4:	482e      	ldr	r0, [pc, #184]	@ (8001860 <MX_TIM4_Init+0x114>)
 80017a6:	f005 feb8 	bl	800751a <HAL_TIM_Base_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80017b0:	f000 f9fc 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017be:	4619      	mov	r1, r3
 80017c0:	4827      	ldr	r0, [pc, #156]	@ (8001860 <MX_TIM4_Init+0x114>)
 80017c2:	f006 ff1f 	bl	8008604 <HAL_TIM_ConfigClockSource>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80017cc:	f000 f9ee 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017d0:	4823      	ldr	r0, [pc, #140]	@ (8001860 <MX_TIM4_Init+0x114>)
 80017d2:	f005 ffc5 	bl	8007760 <HAL_TIM_PWM_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80017dc:	f000 f9e6 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	4619      	mov	r1, r3
 80017ee:	481c      	ldr	r0, [pc, #112]	@ (8001860 <MX_TIM4_Init+0x114>)
 80017f0:	f007 fe98 	bl	8009524 <HAL_TIMEx_MasterConfigSynchronization>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80017fa:	f000 f9d7 	bl	8001bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fe:	2360      	movs	r3, #96	@ 0x60
 8001800:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180e:	463b      	mov	r3, r7
 8001810:	2200      	movs	r2, #0
 8001812:	4619      	mov	r1, r3
 8001814:	4812      	ldr	r0, [pc, #72]	@ (8001860 <MX_TIM4_Init+0x114>)
 8001816:	f006 fde1 	bl	80083dc <HAL_TIM_PWM_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001820:	f000 f9c4 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001824:	463b      	mov	r3, r7
 8001826:	2204      	movs	r2, #4
 8001828:	4619      	mov	r1, r3
 800182a:	480d      	ldr	r0, [pc, #52]	@ (8001860 <MX_TIM4_Init+0x114>)
 800182c:	f006 fdd6 	bl	80083dc <HAL_TIM_PWM_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001836:	f000 f9b9 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800183a:	463b      	mov	r3, r7
 800183c:	2208      	movs	r2, #8
 800183e:	4619      	mov	r1, r3
 8001840:	4807      	ldr	r0, [pc, #28]	@ (8001860 <MX_TIM4_Init+0x114>)
 8001842:	f006 fdcb 	bl	80083dc <HAL_TIM_PWM_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 800184c:	f000 f9ae 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001850:	4803      	ldr	r0, [pc, #12]	@ (8001860 <MX_TIM4_Init+0x114>)
 8001852:	f001 f9af 	bl	8002bb4 <HAL_TIM_MspPostInit>

}
 8001856:	bf00      	nop
 8001858:	3738      	adds	r7, #56	@ 0x38
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200003c8 	.word	0x200003c8
 8001864:	40000800 	.word	0x40000800

08001868 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001878:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <MX_TIM6_Init+0x64>)
 800187a:	4a15      	ldr	r2, [pc, #84]	@ (80018d0 <MX_TIM6_Init+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800187e:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <MX_TIM6_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <MX_TIM6_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800188a:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <MX_TIM6_Init+0x64>)
 800188c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001890:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <MX_TIM6_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001898:	480c      	ldr	r0, [pc, #48]	@ (80018cc <MX_TIM6_Init+0x64>)
 800189a:	f005 fe3e 	bl	800751a <HAL_TIM_Base_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80018a4:	f000 f982 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	@ (80018cc <MX_TIM6_Init+0x64>)
 80018b6:	f007 fe35 	bl	8009524 <HAL_TIMEx_MasterConfigSynchronization>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80018c0:	f000 f974 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000414 	.word	0x20000414
 80018d0:	40001000 	.word	0x40001000

080018d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80018e4:	4b15      	ldr	r3, [pc, #84]	@ (800193c <MX_TIM7_Init+0x68>)
 80018e6:	4a16      	ldr	r2, [pc, #88]	@ (8001940 <MX_TIM7_Init+0x6c>)
 80018e8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1700-1;
 80018ea:	4b14      	ldr	r3, [pc, #80]	@ (800193c <MX_TIM7_Init+0x68>)
 80018ec:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80018f0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f2:	4b12      	ldr	r3, [pc, #72]	@ (800193c <MX_TIM7_Init+0x68>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80018f8:	4b10      	ldr	r3, [pc, #64]	@ (800193c <MX_TIM7_Init+0x68>)
 80018fa:	f242 720f 	movw	r2, #9999	@ 0x270f
 80018fe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001900:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <MX_TIM7_Init+0x68>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001906:	480d      	ldr	r0, [pc, #52]	@ (800193c <MX_TIM7_Init+0x68>)
 8001908:	f005 fe07 	bl	800751a <HAL_TIM_Base_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001912:	f000 f94b 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4806      	ldr	r0, [pc, #24]	@ (800193c <MX_TIM7_Init+0x68>)
 8001924:	f007 fdfe 	bl	8009524 <HAL_TIMEx_MasterConfigSynchronization>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800192e:	f000 f93d 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000460 	.word	0x20000460
 8001940:	40001400 	.word	0x40001400

08001944 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001962:	4b20      	ldr	r3, [pc, #128]	@ (80019e4 <MX_TIM8_Init+0xa0>)
 8001964:	4a20      	ldr	r2, [pc, #128]	@ (80019e8 <MX_TIM8_Init+0xa4>)
 8001966:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 170-1;
 8001968:	4b1e      	ldr	r3, [pc, #120]	@ (80019e4 <MX_TIM8_Init+0xa0>)
 800196a:	22a9      	movs	r2, #169	@ 0xa9
 800196c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196e:	4b1d      	ldr	r3, [pc, #116]	@ (80019e4 <MX_TIM8_Init+0xa0>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8001974:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <MX_TIM8_Init+0xa0>)
 8001976:	2264      	movs	r2, #100	@ 0x64
 8001978:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197a:	4b1a      	ldr	r3, [pc, #104]	@ (80019e4 <MX_TIM8_Init+0xa0>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001980:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <MX_TIM8_Init+0xa0>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001986:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <MX_TIM8_Init+0xa0>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800198c:	4815      	ldr	r0, [pc, #84]	@ (80019e4 <MX_TIM8_Init+0xa0>)
 800198e:	f005 fdc4 	bl	800751a <HAL_TIM_Base_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001998:	f000 f908 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800199c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	4619      	mov	r1, r3
 80019a8:	480e      	ldr	r0, [pc, #56]	@ (80019e4 <MX_TIM8_Init+0xa0>)
 80019aa:	f006 fe2b 	bl	8008604 <HAL_TIM_ConfigClockSource>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80019b4:	f000 f8fa 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019b8:	2320      	movs	r3, #32
 80019ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80019bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80019c0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4806      	ldr	r0, [pc, #24]	@ (80019e4 <MX_TIM8_Init+0xa0>)
 80019cc:	f007 fdaa 	bl	8009524 <HAL_TIMEx_MasterConfigSynchronization>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80019d6:	f000 f8e9 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	3720      	adds	r7, #32
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200004ac 	.word	0x200004ac
 80019e8:	40013400 	.word	0x40013400

080019ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019f0:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <MX_USART1_UART_Init+0x90>)
 80019f2:	4a23      	ldr	r2, [pc, #140]	@ (8001a80 <MX_USART1_UART_Init+0x94>)
 80019f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019f6:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <MX_USART1_UART_Init+0x90>)
 80019f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	@ (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a12:	2204      	movs	r2, #4
 8001a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a22:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a28:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001a34:	4811      	ldr	r0, [pc, #68]	@ (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a36:	f007 ff7d 	bl	8009934 <HAL_HalfDuplex_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a40:	f000 f8b4 	bl	8001bac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a44:	2100      	movs	r1, #0
 8001a46:	480d      	ldr	r0, [pc, #52]	@ (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a48:	f009 ff91 	bl	800b96e <HAL_UARTEx_SetTxFifoThreshold>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a52:	f000 f8ab 	bl	8001bac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a56:	2100      	movs	r1, #0
 8001a58:	4808      	ldr	r0, [pc, #32]	@ (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a5a:	f009 ffc6 	bl	800b9ea <HAL_UARTEx_SetRxFifoThreshold>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a64:	f000 f8a2 	bl	8001bac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a68:	4804      	ldr	r0, [pc, #16]	@ (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a6a:	f009 ff47 	bl	800b8fc <HAL_UARTEx_DisableFifoMode>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a74:	f000 f89a 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200004f8 	.word	0x200004f8
 8001a80:	40013800 	.word	0x40013800

08001a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <MX_DMA_Init+0x60>)
 8001a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a8e:	4a15      	ldr	r2, [pc, #84]	@ (8001ae4 <MX_DMA_Init+0x60>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a96:	4b13      	ldr	r3, [pc, #76]	@ (8001ae4 <MX_DMA_Init+0x60>)
 8001a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aa2:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <MX_DMA_Init+0x60>)
 8001aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae4 <MX_DMA_Init+0x60>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6493      	str	r3, [r2, #72]	@ 0x48
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <MX_DMA_Init+0x60>)
 8001ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	200b      	movs	r0, #11
 8001ac0:	f003 fbb9 	bl	8005236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ac4:	200b      	movs	r0, #11
 8001ac6:	f003 fbd0 	bl	800526a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	200c      	movs	r0, #12
 8001ad0:	f003 fbb1 	bl	8005236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ad4:	200c      	movs	r0, #12
 8001ad6:	f003 fbc8 	bl	800526a <HAL_NVIC_EnableIRQ>

}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001afe:	4b29      	ldr	r3, [pc, #164]	@ (8001ba4 <MX_GPIO_Init+0xbc>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	4a28      	ldr	r2, [pc, #160]	@ (8001ba4 <MX_GPIO_Init+0xbc>)
 8001b04:	f043 0320 	orr.w	r3, r3, #32
 8001b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b0a:	4b26      	ldr	r3, [pc, #152]	@ (8001ba4 <MX_GPIO_Init+0xbc>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	4b23      	ldr	r3, [pc, #140]	@ (8001ba4 <MX_GPIO_Init+0xbc>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	4a22      	ldr	r2, [pc, #136]	@ (8001ba4 <MX_GPIO_Init+0xbc>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b22:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <MX_GPIO_Init+0xbc>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba4 <MX_GPIO_Init+0xbc>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba4 <MX_GPIO_Init+0xbc>)
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba4 <MX_GPIO_Init+0xbc>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2181      	movs	r1, #129	@ 0x81
 8001b4a:	4817      	ldr	r0, [pc, #92]	@ (8001ba8 <MX_GPIO_Init+0xc0>)
 8001b4c:	f004 fb3c 	bl	80061c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GD_DIS_GPIO_Port, GD_DIS_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b5a:	f004 fb35 	bl	80061c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|RELAY_Pin;
 8001b5e:	2381      	movs	r3, #129	@ 0x81
 8001b60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	4619      	mov	r1, r3
 8001b74:	480c      	ldr	r0, [pc, #48]	@ (8001ba8 <MX_GPIO_Init+0xc0>)
 8001b76:	f004 f9a5 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GD_DIS_Pin */
  GPIO_InitStruct.Pin = GD_DIS_Pin;
 8001b7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GD_DIS_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	4619      	mov	r1, r3
 8001b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b96:	f004 f995 	bl	8005ec4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b9a:	bf00      	nop
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	48000400 	.word	0x48000400

08001bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb0:	b672      	cpsid	i
}
 8001bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <Error_Handler+0x8>

08001bb8 <QCW_Init>:
float temp_ext = 0;
float vbus = 0;

float transfer_function[RAMP_STEPS];

void QCW_Init() {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8001bbe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bc2:	f001 fa53 	bl	800306c <HAL_Delay>

	GD_DIS_GPIO_Port->BRR = GD_DIS_Pin; // disable GD
 8001bc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bce:	629a      	str	r2, [r3, #40]	@ 0x28

	TS_CAL1 = *((uint16_t *) 0x1FFF75A8);
 8001bd0:	4b49      	ldr	r3, [pc, #292]	@ (8001cf8 <QCW_Init+0x140>)
 8001bd2:	881a      	ldrh	r2, [r3, #0]
 8001bd4:	4b49      	ldr	r3, [pc, #292]	@ (8001cfc <QCW_Init+0x144>)
 8001bd6:	801a      	strh	r2, [r3, #0]
	TS_CAL2 = *((uint16_t *) 0x1FFF75CA);
 8001bd8:	4b49      	ldr	r3, [pc, #292]	@ (8001d00 <QCW_Init+0x148>)
 8001bda:	881a      	ldrh	r2, [r3, #0]
 8001bdc:	4b49      	ldr	r3, [pc, #292]	@ (8001d04 <QCW_Init+0x14c>)
 8001bde:	801a      	strh	r2, [r3, #0]
	VREFINT = *((uint16_t *) 0x1FFF75AA);
 8001be0:	4b49      	ldr	r3, [pc, #292]	@ (8001d08 <QCW_Init+0x150>)
 8001be2:	881a      	ldrh	r2, [r3, #0]
 8001be4:	4b49      	ldr	r3, [pc, #292]	@ (8001d0c <QCW_Init+0x154>)
 8001be6:	801a      	strh	r2, [r3, #0]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001be8:	217f      	movs	r1, #127	@ 0x7f
 8001bea:	4849      	ldr	r0, [pc, #292]	@ (8001d10 <QCW_Init+0x158>)
 8001bec:	f002 fef2 	bl	80049d4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) aux_buf, 3);
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	4948      	ldr	r1, [pc, #288]	@ (8001d14 <QCW_Init+0x15c>)
 8001bf4:	4846      	ldr	r0, [pc, #280]	@ (8001d10 <QCW_Init+0x158>)
 8001bf6:	f001 fe45 	bl	8003884 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001bfa:	217f      	movs	r1, #127	@ 0x7f
 8001bfc:	4846      	ldr	r0, [pc, #280]	@ (8001d18 <QCW_Init+0x160>)
 8001bfe:	f002 fee9 	bl	80049d4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) vbus_buf, 1);
 8001c02:	2201      	movs	r2, #1
 8001c04:	4945      	ldr	r1, [pc, #276]	@ (8001d1c <QCW_Init+0x164>)
 8001c06:	4844      	ldr	r0, [pc, #272]	@ (8001d18 <QCW_Init+0x160>)
 8001c08:	f001 fe3c 	bl	8003884 <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start(&htim8);
 8001c0c:	4844      	ldr	r0, [pc, #272]	@ (8001d20 <QCW_Init+0x168>)
 8001c0e:	f005 fcdb 	bl	80075c8 <HAL_TIM_Base_Start>

    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // OCD dac
 8001c12:	2100      	movs	r1, #0
 8001c14:	4843      	ldr	r0, [pc, #268]	@ (8001d24 <QCW_Init+0x16c>)
 8001c16:	f003 fb65 	bl	80052e4 <HAL_DAC_Start>

    HAL_COMP_Start(&hcomp1);
 8001c1a:	4843      	ldr	r0, [pc, #268]	@ (8001d28 <QCW_Init+0x170>)
 8001c1c:	f003 f9ac 	bl	8004f78 <HAL_COMP_Start>
    HAL_COMP_Start(&hcomp2);
 8001c20:	4842      	ldr	r0, [pc, #264]	@ (8001d2c <QCW_Init+0x174>)
 8001c22:	f003 f9a9 	bl	8004f78 <HAL_COMP_Start>

    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // input capture
 8001c26:	2100      	movs	r1, #0
 8001c28:	4841      	ldr	r0, [pc, #260]	@ (8001d30 <QCW_Init+0x178>)
 8001c2a:	f006 f8a9 	bl	8007d80 <HAL_TIM_IC_Start_IT>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // LED1 - Vbus
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4840      	ldr	r0, [pc, #256]	@ (8001d34 <QCW_Init+0x17c>)
 8001c32:	f005 fdf7 	bl	8007824 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // LED2 - Ready
 8001c36:	2104      	movs	r1, #4
 8001c38:	483e      	ldr	r0, [pc, #248]	@ (8001d34 <QCW_Init+0x17c>)
 8001c3a:	f005 fdf3 	bl	8007824 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // LED3 - Pulse
 8001c3e:	2100      	movs	r1, #0
 8001c40:	483d      	ldr	r0, [pc, #244]	@ (8001d38 <QCW_Init+0x180>)
 8001c42:	f005 fdef 	bl	8007824 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // LED4 - OCD
 8001c46:	2104      	movs	r1, #4
 8001c48:	483b      	ldr	r0, [pc, #236]	@ (8001d38 <QCW_Init+0x180>)
 8001c4a:	f005 fdeb 	bl	8007824 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // FAN
 8001c4e:	2108      	movs	r1, #8
 8001c50:	4838      	ldr	r0, [pc, #224]	@ (8001d34 <QCW_Init+0x17c>)
 8001c52:	f005 fde7 	bl	8007824 <HAL_TIM_PWM_Start>

    HAL_TIM_Base_Start_IT(&htim7);
 8001c56:	4839      	ldr	r0, [pc, #228]	@ (8001d3c <QCW_Init+0x184>)
 8001c58:	f005 fd18 	bl	800768c <HAL_TIM_Base_Start_IT>

    HAL_HalfDuplex_EnableReceiver(&huart1);
 8001c5c:	4838      	ldr	r0, [pc, #224]	@ (8001d40 <QCW_Init+0x188>)
 8001c5e:	f008 fa6f 	bl	800a140 <HAL_HalfDuplex_EnableReceiver>
    HAL_UART_Receive_IT(&huart1, uart_buffer, UART_SIZE);
 8001c62:	220c      	movs	r2, #12
 8001c64:	4937      	ldr	r1, [pc, #220]	@ (8001d44 <QCW_Init+0x18c>)
 8001c66:	4836      	ldr	r0, [pc, #216]	@ (8001d40 <QCW_Init+0x188>)
 8001c68:	f007 febc 	bl	80099e4 <HAL_UART_Receive_IT>

    for (int i = 0; i < RAMP_STEPS; i++) {
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	e035      	b.n	8001cde <QCW_Init+0x126>
    	transfer_function[i] = 1.0f - (1.0f / M_PI) * acos(2.0f*(float) i / (float) RAMP_STEPS - 1.0f);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c80:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001d48 <QCW_Init+0x190>
 8001c84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c90:	ee17 0a90 	vmov	r0, s15
 8001c94:	f7fe fc24 	bl	80004e0 <__aeabi_f2d>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	ec43 2b10 	vmov	d0, r2, r3
 8001ca0:	f009 ff62 	bl	800bb68 <acos>
 8001ca4:	ec51 0b10 	vmov	r0, r1, d0
 8001ca8:	a311      	add	r3, pc, #68	@ (adr r3, 8001cf0 <QCW_Init+0x138>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	f7fe fc6f 	bl	8000590 <__aeabi_dmul>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	f04f 0000 	mov.w	r0, #0
 8001cba:	4924      	ldr	r1, [pc, #144]	@ (8001d4c <QCW_Init+0x194>)
 8001cbc:	f7fe fab0 	bl	8000220 <__aeabi_dsub>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe ff5a 	bl	8000b80 <__aeabi_d2f>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4920      	ldr	r1, [pc, #128]	@ (8001d50 <QCW_Init+0x198>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < RAMP_STEPS; i++) {
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2bc7      	cmp	r3, #199	@ 0xc7
 8001ce2:	ddc6      	ble.n	8001c72 <QCW_Init+0xba>
    	// voltage(percent) = 0.5 - 0.5cos(pi*phase(percent))
    	// phase(percent) = 1 - 1/pi arccos(2*voltage(percent) - 1)
    }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	6dc9c883 	.word	0x6dc9c883
 8001cf4:	3fd45f30 	.word	0x3fd45f30
 8001cf8:	1fff75a8 	.word	0x1fff75a8
 8001cfc:	200005a4 	.word	0x200005a4
 8001d00:	1fff75ca 	.word	0x1fff75ca
 8001d04:	200005a6 	.word	0x200005a6
 8001d08:	1fff75aa 	.word	0x1fff75aa
 8001d0c:	200005a8 	.word	0x200005a8
 8001d10:	2000008c 	.word	0x2000008c
 8001d14:	20000590 	.word	0x20000590
 8001d18:	200000f8 	.word	0x200000f8
 8001d1c:	2000058c 	.word	0x2000058c
 8001d20:	200004ac 	.word	0x200004ac
 8001d24:	2000026c 	.word	0x2000026c
 8001d28:	20000224 	.word	0x20000224
 8001d2c:	20000248 	.word	0x20000248
 8001d30:	20000330 	.word	0x20000330
 8001d34:	200003c8 	.word	0x200003c8
 8001d38:	2000037c 	.word	0x2000037c
 8001d3c:	20000460 	.word	0x20000460
 8001d40:	200004f8 	.word	0x200004f8
 8001d44:	20000598 	.word	0x20000598
 8001d48:	43480000 	.word	0x43480000
 8001d4c:	3ff00000 	.word	0x3ff00000
 8001d50:	200005b8 	.word	0x200005b8

08001d54 <QCW_Loop>:

float vbus_last = 0;
uint8_t rdy = 0;
void QCW_Loop() { // 10Hz
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
	if (rdy && (temp_ext < MAX_TEMP)) {
 8001d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e54 <QCW_Loop+0x100>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d014      	beq.n	8001d8c <QCW_Loop+0x38>
 8001d62:	4b3d      	ldr	r3, [pc, #244]	@ (8001e58 <QCW_Loop+0x104>)
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001e5c <QCW_Loop+0x108>
 8001d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	d50a      	bpl.n	8001d8c <QCW_Loop+0x38>
		TIM4->CCR2 = TIM4->ARR / 4; // Set ready light
 8001d76:	4b3a      	ldr	r3, [pc, #232]	@ (8001e60 <QCW_Loop+0x10c>)
 8001d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7a:	4a39      	ldr	r2, [pc, #228]	@ (8001e60 <QCW_Loop+0x10c>)
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	6393      	str	r3, [r2, #56]	@ 0x38
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2180      	movs	r1, #128	@ 0x80
 8001d84:	4837      	ldr	r0, [pc, #220]	@ (8001e64 <QCW_Loop+0x110>)
 8001d86:	f004 fa1f 	bl	80061c8 <HAL_GPIO_WritePin>
 8001d8a:	e007      	b.n	8001d9c <QCW_Loop+0x48>
	} else {
		TIM4->CCR2 = 0; // Clear ready light
 8001d8c:	4b34      	ldr	r3, [pc, #208]	@ (8001e60 <QCW_Loop+0x10c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2180      	movs	r1, #128	@ 0x80
 8001d96:	4833      	ldr	r0, [pc, #204]	@ (8001e64 <QCW_Loop+0x110>)
 8001d98:	f004 fa16 	bl	80061c8 <HAL_GPIO_WritePin>
	}

	float difference = vbus - vbus_last;
 8001d9c:	4b32      	ldr	r3, [pc, #200]	@ (8001e68 <QCW_Loop+0x114>)
 8001d9e:	ed93 7a00 	vldr	s14, [r3]
 8001da2:	4b32      	ldr	r3, [pc, #200]	@ (8001e6c <QCW_Loop+0x118>)
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dac:	edc7 7a00 	vstr	s15, [r7]
	if (difference < CHARGE_THRESHOLD && vbus > 50) rdy = 1;
 8001db0:	edd7 7a00 	vldr	s15, [r7]
 8001db4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	d50c      	bpl.n	8001ddc <QCW_Loop+0x88>
 8001dc2:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <QCW_Loop+0x114>)
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001e70 <QCW_Loop+0x11c>
 8001dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd4:	dd02      	ble.n	8001ddc <QCW_Loop+0x88>
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e54 <QCW_Loop+0x100>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
	vbus_last = vbus;
 8001ddc:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <QCW_Loop+0x114>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a22      	ldr	r2, [pc, #136]	@ (8001e6c <QCW_Loop+0x118>)
 8001de2:	6013      	str	r3, [r2, #0]

	float fan = (temp_ext - (float) FAN_START) / ((float) FAN_END - (float) FAN_START);
 8001de4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <QCW_Loop+0x104>)
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001dee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001df2:	eef2 6a0e 	vmov.f32	s13, #46	@ 0x41700000  15.0
 8001df6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dfa:	edc7 7a01 	vstr	s15, [r7, #4]
	if (fan < 0) fan = 0;
 8001dfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0a:	d502      	bpl.n	8001e12 <QCW_Loop+0xbe>
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
	if (fan > 1) fan = 1;
 8001e12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e22:	dd02      	ble.n	8001e2a <QCW_Loop+0xd6>
 8001e24:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e28:	607b      	str	r3, [r7, #4]
	TIM4->CCR3 = (int) (fan * (float) TIM4->ARR);
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e60 <QCW_Loop+0x10c>)
 8001e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e36:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e42:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <QCW_Loop+0x10c>)
 8001e44:	ee17 2a90 	vmov	r2, s15
 8001e48:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200008dc 	.word	0x200008dc
 8001e58:	200005b0 	.word	0x200005b0
 8001e5c:	42700000 	.word	0x42700000
 8001e60:	40000800 	.word	0x40000800
 8001e64:	48000400 	.word	0x48000400
 8001e68:	200005b4 	.word	0x200005b4
 8001e6c:	200008d8 	.word	0x200008d8
 8001e70:	42480000 	.word	0x42480000
 8001e74:	00000000 	.word	0x00000000

08001e78 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a69      	ldr	r2, [pc, #420]	@ (8002028 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d17e      	bne.n	8001f86 <HAL_ADC_ConvCpltCallback+0x10e>
		if (aux_buf[2] != 0) {
 8001e88:	4b68      	ldr	r3, [pc, #416]	@ (800202c <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001e8a:	889b      	ldrh	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d033      	beq.n	8001ef8 <HAL_ADC_ConvCpltCallback+0x80>
			float vref_new = 3.0f * (float) VREFINT / (float) aux_buf[2];
 8001e90:	4b67      	ldr	r3, [pc, #412]	@ (8002030 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	ee07 3a90 	vmov	s15, r3
 8001e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e9c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001ea0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001ea4:	4b61      	ldr	r3, [pc, #388]	@ (800202c <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001ea6:	889b      	ldrh	r3, [r3, #4]
 8001ea8:	ee07 3a90 	vmov	s15, r3
 8001eac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb4:	edc7 7a03 	vstr	s15, [r7, #12]
			if (vref_new < 5.0f && vref_new > 1.5f) {
 8001eb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ebc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec8:	d516      	bpl.n	8001ef8 <HAL_ADC_ConvCpltCallback+0x80>
 8001eca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ece:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eda:	dd0d      	ble.n	8001ef8 <HAL_ADC_ConvCpltCallback+0x80>
				VREF = (VREF + vref_new) / 2.0f;
 8001edc:	4b55      	ldr	r3, [pc, #340]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ee6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001eee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef2:	4b50      	ldr	r3, [pc, #320]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001ef4:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		temp_int = (100.0f)/((float) TS_CAL2 - (float) TS_CAL1) * ((float) aux_buf[1] - (float) TS_CAL1) + 30.0f;
 8001ef8:	4b4f      	ldr	r3, [pc, #316]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	ee07 3a90 	vmov	s15, r3
 8001f00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f04:	4b4d      	ldr	r3, [pc, #308]	@ (800203c <HAL_ADC_ConvCpltCallback+0x1c4>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	ee07 3a90 	vmov	s15, r3
 8001f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f14:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8002040 <HAL_ADC_ConvCpltCallback+0x1c8>
 8001f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f1c:	4b43      	ldr	r3, [pc, #268]	@ (800202c <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001f1e:	885b      	ldrh	r3, [r3, #2]
 8001f20:	ee07 3a90 	vmov	s15, r3
 8001f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f28:	4b44      	ldr	r3, [pc, #272]	@ (800203c <HAL_ADC_ConvCpltCallback+0x1c4>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f3c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001f40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f44:	4b3f      	ldr	r3, [pc, #252]	@ (8002044 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8001f46:	edc3 7a00 	vstr	s15, [r3]
		float volts_therm = (float) aux_buf[0] * VREF / 4095.0f;
 8001f4a:	4b38      	ldr	r3, [pc, #224]	@ (800202c <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f56:	4b37      	ldr	r3, [pc, #220]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f60:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8002048 <HAL_ADC_ConvCpltCallback+0x1d0>
 8001f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f68:	edc7 7a02 	vstr	s15, [r7, #8]
		temp_ext = (volts_therm - 0.5f) * 100.0f;
 8001f6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f70:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f78:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002040 <HAL_ADC_ConvCpltCallback+0x1c8>
 8001f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f80:	4b32      	ldr	r3, [pc, #200]	@ (800204c <HAL_ADC_ConvCpltCallback+0x1d4>)
 8001f82:	edc3 7a00 	vstr	s15, [r3]
	}
	if (hadc == &hadc2) {
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a31      	ldr	r2, [pc, #196]	@ (8002050 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d144      	bne.n	8002018 <HAL_ADC_ConvCpltCallback+0x1a0>
		vbus = (float) vbus_buf[0] * VREF / 4095.0f * 201.0f;
 8001f8e:	4b31      	ldr	r3, [pc, #196]	@ (8002054 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f9a:	4b26      	ldr	r3, [pc, #152]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001f9c:	edd3 7a00 	vldr	s15, [r3]
 8001fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa4:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002048 <HAL_ADC_ConvCpltCallback+0x1d0>
 8001fa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fac:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002058 <HAL_ADC_ConvCpltCallback+0x1e0>
 8001fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb4:	4b29      	ldr	r3, [pc, #164]	@ (800205c <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001fb6:	edc3 7a00 	vstr	s15, [r3]
		if (vbus < 350) {
 8001fba:	4b28      	ldr	r3, [pc, #160]	@ (800205c <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002060 <HAL_ADC_ConvCpltCallback+0x1e8>
 8001fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fcc:	d520      	bpl.n	8002010 <HAL_ADC_ConvCpltCallback+0x198>
			TIM4->CCR1 = (int) (TIM4->ARR * (vbus / 350.0)); // Set VBUS LED
 8001fce:	4b25      	ldr	r3, [pc, #148]	@ (8002064 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fa62 	bl	800049c <__aeabi_ui2d>
 8001fd8:	4604      	mov	r4, r0
 8001fda:	460d      	mov	r5, r1
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800205c <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fa7d 	bl	80004e0 <__aeabi_f2d>
 8001fe6:	a30e      	add	r3, pc, #56	@ (adr r3, 8002020 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fbfa 	bl	80007e4 <__aeabi_ddiv>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	f7fe faca 	bl	8000590 <__aeabi_dmul>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
 8002004:	f7fe fd74 	bl	8000af0 <__aeabi_d2iz>
 8002008:	4602      	mov	r2, r0
 800200a:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <HAL_ADC_ConvCpltCallback+0x1ec>)
 800200c:	635a      	str	r2, [r3, #52]	@ 0x34
		} else {
			TIM4->CCR1 = TIM4->ARR;
		}
	}

}
 800200e:	e003      	b.n	8002018 <HAL_ADC_ConvCpltCallback+0x1a0>
			TIM4->CCR1 = TIM4->ARR;
 8002010:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8002012:	4a14      	ldr	r2, [pc, #80]	@ (8002064 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8002014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002016:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bdb0      	pop	{r4, r5, r7, pc}
 8002020:	00000000 	.word	0x00000000
 8002024:	4075e000 	.word	0x4075e000
 8002028:	2000008c 	.word	0x2000008c
 800202c:	20000590 	.word	0x20000590
 8002030:	200005a8 	.word	0x200005a8
 8002034:	20000000 	.word	0x20000000
 8002038:	200005a6 	.word	0x200005a6
 800203c:	200005a4 	.word	0x200005a4
 8002040:	42c80000 	.word	0x42c80000
 8002044:	200005ac 	.word	0x200005ac
 8002048:	457ff000 	.word	0x457ff000
 800204c:	200005b0 	.word	0x200005b0
 8002050:	200000f8 	.word	0x200000f8
 8002054:	2000058c 	.word	0x2000058c
 8002058:	43490000 	.word	0x43490000
 800205c:	200005b4 	.word	0x200005b4
 8002060:	43af0000 	.word	0x43af0000
 8002064:	40000800 	.word	0x40000800

08002068 <StartPulse>:
uint16_t ramp_cnt = 0;
float end_v = 0;
int ccr3 = 0;

// length in ms
void StartPulse(float length, float end_v1, float OCD) {
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002072:	edc7 0a02 	vstr	s1, [r7, #8]
 8002076:	ed87 1a01 	vstr	s2, [r7, #4]
	if (vbus > 0) {
 800207a:	4b41      	ldr	r3, [pc, #260]	@ (8002180 <StartPulse+0x118>)
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002088:	dc00      	bgt.n	800208c <StartPulse+0x24>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);

		GD_DIS_GPIO_Port->BSRR = GD_DIS_Pin; // enable

	}
}
 800208a:	e070      	b.n	800216e <StartPulse+0x106>
		uint32_t counts = (uint32_t) (OCD / 200.0f * 2.0f); // 200:1 CT, 2R burden
 800208c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002090:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8002184 <StartPulse+0x11c>
 8002094:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002098:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800209c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020a0:	ee17 3a90 	vmov	r3, s15
 80020a4:	617b      	str	r3, [r7, #20]
	    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, counts);
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2200      	movs	r2, #0
 80020aa:	2100      	movs	r1, #0
 80020ac:	4836      	ldr	r0, [pc, #216]	@ (8002188 <StartPulse+0x120>)
 80020ae:	f003 f9db 	bl	8005468 <HAL_DAC_SetValue>
		TIM3->CCR1 = TIM3->ARR; // Start pulse led
 80020b2:	4b36      	ldr	r3, [pc, #216]	@ (800218c <StartPulse+0x124>)
 80020b4:	4a35      	ldr	r2, [pc, #212]	@ (800218c <StartPulse+0x124>)
 80020b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b8:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM3->CCR2 = 0; // Clear OCD led
 80020ba:	4b34      	ldr	r3, [pc, #208]	@ (800218c <StartPulse+0x124>)
 80020bc:	2200      	movs	r2, #0
 80020be:	639a      	str	r2, [r3, #56]	@ 0x38
		ocd = 0;
 80020c0:	4b33      	ldr	r3, [pc, #204]	@ (8002190 <StartPulse+0x128>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
		ramp_cnt = 0;
 80020c6:	4b33      	ldr	r3, [pc, #204]	@ (8002194 <StartPulse+0x12c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	801a      	strh	r2, [r3, #0]
		TIM1->ARR = (((int) (170000000.0 / START_FREQ)) >> 1) - 1;
 80020cc:	4b32      	ldr	r3, [pc, #200]	@ (8002198 <StartPulse+0x130>)
 80020ce:	22f1      	movs	r2, #241	@ 0xf1
 80020d0:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CNT = 0;
 80020d2:	4b31      	ldr	r3, [pc, #196]	@ (8002198 <StartPulse+0x130>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	625a      	str	r2, [r3, #36]	@ 0x24
		start_counter = 0;
 80020d8:	4b30      	ldr	r3, [pc, #192]	@ (800219c <StartPulse+0x134>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
		end_v = end_v1;
 80020de:	4a30      	ldr	r2, [pc, #192]	@ (80021a0 <StartPulse+0x138>)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	6013      	str	r3, [r2, #0]
		TIM1->CCR1 = TIM1->ARR - PHASE_LEAD;
 80020e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002198 <StartPulse+0x130>)
 80020e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002198 <StartPulse+0x130>)
 80020ea:	3b0a      	subs	r3, #10
 80020ec:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM1->CCR2 = PHASE_LEAD;
 80020ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002198 <StartPulse+0x130>)
 80020f0:	220a      	movs	r2, #10
 80020f2:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = MIN_PHASE;
 80020f4:	4b28      	ldr	r3, [pc, #160]	@ (8002198 <StartPulse+0x130>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = TIM1->ARR - MIN_PHASE;
 80020fa:	4b27      	ldr	r3, [pc, #156]	@ (8002198 <StartPulse+0x130>)
 80020fc:	4a26      	ldr	r2, [pc, #152]	@ (8002198 <StartPulse+0x130>)
 80020fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002100:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM6->ARR = (170000.0 * length / (float) RAMP_STEPS) - 1; // ramp adjust timer
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f7fe f9ec 	bl	80004e0 <__aeabi_f2d>
 8002108:	a31b      	add	r3, pc, #108	@ (adr r3, 8002178 <StartPulse+0x110>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	f7fe fa3f 	bl	8000590 <__aeabi_dmul>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	4b21      	ldr	r3, [pc, #132]	@ (80021a4 <StartPulse+0x13c>)
 8002120:	f7fe fb60 	bl	80007e4 <__aeabi_ddiv>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	4b1d      	ldr	r3, [pc, #116]	@ (80021a8 <StartPulse+0x140>)
 8002132:	f7fe f875 	bl	8000220 <__aeabi_dsub>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4c1c      	ldr	r4, [pc, #112]	@ (80021ac <StartPulse+0x144>)
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	f7fe fcfe 	bl	8000b40 <__aeabi_d2uiz>
 8002144:	4603      	mov	r3, r0
 8002146:	62e3      	str	r3, [r4, #44]	@ 0x2c
		TIM6->CNT = 0;
 8002148:	4b18      	ldr	r3, [pc, #96]	@ (80021ac <StartPulse+0x144>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start_IT(&htim6);
 800214e:	4818      	ldr	r0, [pc, #96]	@ (80021b0 <StartPulse+0x148>)
 8002150:	f005 fa9c 	bl	800768c <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8002154:	2100      	movs	r1, #0
 8002156:	4817      	ldr	r0, [pc, #92]	@ (80021b4 <StartPulse+0x14c>)
 8002158:	f005 fc64 	bl	8007a24 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800215c:	2108      	movs	r1, #8
 800215e:	4815      	ldr	r0, [pc, #84]	@ (80021b4 <StartPulse+0x14c>)
 8002160:	f005 fb60 	bl	8007824 <HAL_TIM_PWM_Start>
		GD_DIS_GPIO_Port->BSRR = GD_DIS_Pin; // enable
 8002164:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800216c:	619a      	str	r2, [r3, #24]
}
 800216e:	bf00      	nop
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}
 8002176:	bf00      	nop
 8002178:	00000000 	.word	0x00000000
 800217c:	4104c080 	.word	0x4104c080
 8002180:	200005b4 	.word	0x200005b4
 8002184:	43480000 	.word	0x43480000
 8002188:	2000026c 	.word	0x2000026c
 800218c:	40000400 	.word	0x40000400
 8002190:	200008de 	.word	0x200008de
 8002194:	200008e0 	.word	0x200008e0
 8002198:	40012c00 	.word	0x40012c00
 800219c:	200008dd 	.word	0x200008dd
 80021a0:	200008e4 	.word	0x200008e4
 80021a4:	40690000 	.word	0x40690000
 80021a8:	3ff00000 	.word	0x3ff00000
 80021ac:	40001000 	.word	0x40001000
 80021b0:	20000414 	.word	0x20000414
 80021b4:	200002e4 	.word	0x200002e4

080021b8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a0b      	ldr	r2, [pc, #44]	@ (80021f0 <HAL_TIM_IC_CaptureCallback+0x38>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d10d      	bne.n	80021e4 <HAL_TIM_IC_CaptureCallback+0x2c>
		if (start_counter >= START_CYCLES) {
 80021c8:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b18      	cmp	r3, #24
 80021ce:	d905      	bls.n	80021dc <HAL_TIM_IC_CaptureCallback+0x24>
		    TIM1->ARR = TIM2->CCR1 >> 1; // asymmetric has up/down counting
 80021d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d6:	4a08      	ldr	r2, [pc, #32]	@ (80021f8 <HAL_TIM_IC_CaptureCallback+0x40>)
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	    TIM2->CNT = 0;
 80021dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021e0:	2200      	movs	r2, #0
 80021e2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	20000330 	.word	0x20000330
 80021f4:	200008dd 	.word	0x200008dd
 80021f8:	40012c00 	.word	0x40012c00

080021fc <HAL_COMP_TriggerCallback>:

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	if (hcomp == &hcomp1) {
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a06      	ldr	r2, [pc, #24]	@ (8002220 <HAL_COMP_TriggerCallback+0x24>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d102      	bne.n	8002212 <HAL_COMP_TriggerCallback+0x16>
		ocd = 1;
 800220c:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <HAL_COMP_TriggerCallback+0x28>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
	}
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000224 	.word	0x20000224
 8002224:	200008de 	.word	0x200008de

08002228 <HAL_TIM_PeriodElapsedCallback>:

uint8_t hardsw_side = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a91      	ldr	r2, [pc, #580]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002234:	4293      	cmp	r3, r2
 8002236:	f040 8081 	bne.w	800233c <HAL_TIM_PeriodElapsedCallback+0x114>
		if (ocd) {
 800223a:	4b90      	ldr	r3, [pc, #576]	@ (800247c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d03b      	beq.n	80022ba <HAL_TIM_PeriodElapsedCallback+0x92>
		    __HAL_TIM_DISABLE(&htim1);
 8002242:	4b8d      	ldr	r3, [pc, #564]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	f241 1311 	movw	r3, #4369	@ 0x1111
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10f      	bne.n	8002272 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8002252:	4b89      	ldr	r3, [pc, #548]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a1a      	ldr	r2, [r3, #32]
 8002258:	f244 4344 	movw	r3, #17476	@ 0x4444
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d107      	bne.n	8002272 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8002262:	4b85      	ldr	r3, [pc, #532]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b83      	ldr	r3, [pc, #524]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]
		    __HAL_TIM_DISABLE(&htim6);
 8002272:	4b83      	ldr	r3, [pc, #524]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	f241 1311 	movw	r3, #4369	@ 0x1111
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10f      	bne.n	80022a2 <HAL_TIM_PeriodElapsedCallback+0x7a>
 8002282:	4b7f      	ldr	r3, [pc, #508]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6a1a      	ldr	r2, [r3, #32]
 8002288:	f244 4344 	movw	r3, #17476	@ 0x4444
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d107      	bne.n	80022a2 <HAL_TIM_PeriodElapsedCallback+0x7a>
 8002292:	4b7b      	ldr	r3, [pc, #492]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b79      	ldr	r3, [pc, #484]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
		    GD_DIS_GPIO_Port->BRR = GD_DIS_Pin; // disable
 80022a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80022a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28
		    TIM3->CCR1 = 0; // Clear pulse led
 80022ac:	4b75      	ldr	r3, [pc, #468]	@ (8002484 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	635a      	str	r2, [r3, #52]	@ 0x34
		    TIM3->CCR2 = TIM3->ARR; // Set OCD Led
 80022b2:	4b74      	ldr	r3, [pc, #464]	@ (8002484 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80022b4:	4a73      	ldr	r2, [pc, #460]	@ (8002484 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80022b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b8:	6393      	str	r3, [r2, #56]	@ 0x38
		}

		if (start_counter < START_CYCLES) {
 80022ba:	4b73      	ldr	r3, [pc, #460]	@ (8002488 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b18      	cmp	r3, #24
 80022c0:	d805      	bhi.n	80022ce <HAL_TIM_PeriodElapsedCallback+0xa6>
			start_counter++;
 80022c2:	4b71      	ldr	r3, [pc, #452]	@ (8002488 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002488 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80022cc:	701a      	strb	r2, [r3, #0]
		} // TODO: make a wick ??

		hardsw_side = !hardsw_side;
 80022ce:	4b6f      	ldr	r3, [pc, #444]	@ (800248c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf0c      	ite	eq
 80022d6:	2301      	moveq	r3, #1
 80022d8:	2300      	movne	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	4b6b      	ldr	r3, [pc, #428]	@ (800248c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80022e0:	701a      	strb	r2, [r3, #0]

		if (hardsw_side) {
 80022e2:	4b6a      	ldr	r3, [pc, #424]	@ (800248c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d014      	beq.n	8002314 <HAL_TIM_PeriodElapsedCallback+0xec>
			TIM1->CCR1 = TIM1->ARR - PHASE_LEAD;
 80022ea:	4b69      	ldr	r3, [pc, #420]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80022ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ee:	4a68      	ldr	r2, [pc, #416]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80022f0:	3b0a      	subs	r3, #10
 80022f2:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM1->CCR2 = PHASE_LEAD;
 80022f4:	4b66      	ldr	r3, [pc, #408]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80022f6:	220a      	movs	r2, #10
 80022f8:	639a      	str	r2, [r3, #56]	@ 0x38

			TIM1->CCR3 = ccr3;
 80022fa:	4b66      	ldr	r3, [pc, #408]	@ (8002494 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b64      	ldr	r3, [pc, #400]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002300:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM1->CCR4 = TIM1->ARR - ccr3;
 8002302:	4b63      	ldr	r3, [pc, #396]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002306:	4a63      	ldr	r2, [pc, #396]	@ (8002494 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	4611      	mov	r1, r2
 800230c:	4a60      	ldr	r2, [pc, #384]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800230e:	1a5b      	subs	r3, r3, r1
 8002310:	6413      	str	r3, [r2, #64]	@ 0x40
 8002312:	e013      	b.n	800233c <HAL_TIM_PeriodElapsedCallback+0x114>
		} else {
			TIM1->CCR1 = ccr3;
 8002314:	4b5f      	ldr	r3, [pc, #380]	@ (8002494 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b5d      	ldr	r3, [pc, #372]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800231a:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = TIM1->ARR - ccr3;
 800231c:	4b5c      	ldr	r3, [pc, #368]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002320:	4a5c      	ldr	r2, [pc, #368]	@ (8002494 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	4611      	mov	r1, r2
 8002326:	4a5a      	ldr	r2, [pc, #360]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002328:	1a5b      	subs	r3, r3, r1
 800232a:	6393      	str	r3, [r2, #56]	@ 0x38

			TIM1->CCR3 = TIM1->ARR - PHASE_LEAD;
 800232c:	4b58      	ldr	r3, [pc, #352]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	4a57      	ldr	r2, [pc, #348]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002332:	3b0a      	subs	r3, #10
 8002334:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM1->CCR4 = PHASE_LEAD;
 8002336:	4b56      	ldr	r3, [pc, #344]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002338:	220a      	movs	r2, #10
 800233a:	641a      	str	r2, [r3, #64]	@ 0x40
		}

	}
	if (htim == &htim6) {
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a50      	ldr	r2, [pc, #320]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002340:	4293      	cmp	r3, r2
 8002342:	f040 808e 	bne.w	8002462 <HAL_TIM_PeriodElapsedCallback+0x23a>
		if (ramp_cnt >= RAMP_STEPS) {
 8002346:	4b54      	ldr	r3, [pc, #336]	@ (8002498 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	2bc7      	cmp	r3, #199	@ 0xc7
 800234c:	d938      	bls.n	80023c0 <HAL_TIM_PeriodElapsedCallback+0x198>
		    __HAL_TIM_DISABLE(&htim1);
 800234e:	4b4a      	ldr	r3, [pc, #296]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6a1a      	ldr	r2, [r3, #32]
 8002354:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10f      	bne.n	800237e <HAL_TIM_PeriodElapsedCallback+0x156>
 800235e:	4b46      	ldr	r3, [pc, #280]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a1a      	ldr	r2, [r3, #32]
 8002364:	f244 4344 	movw	r3, #17476	@ 0x4444
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d107      	bne.n	800237e <HAL_TIM_PeriodElapsedCallback+0x156>
 800236e:	4b42      	ldr	r3, [pc, #264]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b40      	ldr	r3, [pc, #256]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]
		    __HAL_TIM_DISABLE(&htim6);
 800237e:	4b40      	ldr	r3, [pc, #256]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6a1a      	ldr	r2, [r3, #32]
 8002384:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10f      	bne.n	80023ae <HAL_TIM_PeriodElapsedCallback+0x186>
 800238e:	4b3c      	ldr	r3, [pc, #240]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	f244 4344 	movw	r3, #17476	@ 0x4444
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d107      	bne.n	80023ae <HAL_TIM_PeriodElapsedCallback+0x186>
 800239e:	4b38      	ldr	r3, [pc, #224]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b36      	ldr	r3, [pc, #216]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0201 	bic.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
		    GD_DIS_GPIO_Port->BRR = GD_DIS_Pin; // disable
 80023ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80023b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023b6:	629a      	str	r2, [r3, #40]	@ 0x28
		    TIM3->CCR1 = 0; // Clear pulse led
 80023b8:	4b32      	ldr	r3, [pc, #200]	@ (8002484 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80023be:	e04a      	b.n	8002456 <HAL_TIM_PeriodElapsedCallback+0x22e>
		} else if (vbus > 0) {
 80023c0:	4b36      	ldr	r3, [pc, #216]	@ (800249c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ce:	dd42      	ble.n	8002456 <HAL_TIM_PeriodElapsedCallback+0x22e>
			uint16_t tf_index = (uint16_t) ((float) ramp_cnt * end_v / vbus);
 80023d0:	4b31      	ldr	r3, [pc, #196]	@ (8002498 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023dc:	4b30      	ldr	r3, [pc, #192]	@ (80024a0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80023e6:	4b2d      	ldr	r3, [pc, #180]	@ (800249c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80023e8:	ed93 7a00 	vldr	s14, [r3]
 80023ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023f4:	ee17 3a90 	vmov	r3, s15
 80023f8:	81fb      	strh	r3, [r7, #14]
			if (tf_index >= RAMP_STEPS) tf_index = RAMP_STEPS - 1;
 80023fa:	89fb      	ldrh	r3, [r7, #14]
 80023fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80023fe:	d901      	bls.n	8002404 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8002400:	23c7      	movs	r3, #199	@ 0xc7
 8002402:	81fb      	strh	r3, [r7, #14]
			float phase_percent = transfer_function[tf_index];
 8002404:	89fb      	ldrh	r3, [r7, #14]
 8002406:	4a27      	ldr	r2, [pc, #156]	@ (80024a4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60bb      	str	r3, [r7, #8]
			ccr3 = (int) ((float) TIM1->ARR * phase_percent) - PHASE_LEAD;
 8002410:	4b1f      	ldr	r3, [pc, #124]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	ee07 3a90 	vmov	s15, r3
 8002418:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800241c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002428:	ee17 3a90 	vmov	r3, s15
 800242c:	3b0a      	subs	r3, #10
 800242e:	4a19      	ldr	r2, [pc, #100]	@ (8002494 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002430:	6013      	str	r3, [r2, #0]
			if (ccr3 < MIN_PHASE) ccr3 = MIN_PHASE;
 8002432:	4b18      	ldr	r3, [pc, #96]	@ (8002494 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	da02      	bge.n	8002440 <HAL_TIM_PeriodElapsedCallback+0x218>
 800243a:	4b16      	ldr	r3, [pc, #88]	@ (8002494 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
			if (ccr3 > TIM1->ARR) ccr3 = TIM1->ARR;
 8002440:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002444:	4a13      	ldr	r2, [pc, #76]	@ (8002494 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	4293      	cmp	r3, r2
 800244a:	d204      	bcs.n	8002456 <HAL_TIM_PeriodElapsedCallback+0x22e>
 800244c:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002450:	461a      	mov	r2, r3
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002454:	601a      	str	r2, [r3, #0]
		}
		ramp_cnt++;
 8002456:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	4b0e      	ldr	r3, [pc, #56]	@ (8002498 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002460:	801a      	strh	r2, [r3, #0]

	}
	if (htim == &htim7) {
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a10      	ldr	r2, [pc, #64]	@ (80024a8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_TIM_PeriodElapsedCallback+0x246>
		QCW_Loop();
 800246a:	f7ff fc73 	bl	8001d54 <QCW_Loop>
	}
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200002e4 	.word	0x200002e4
 800247c:	200008de 	.word	0x200008de
 8002480:	20000414 	.word	0x20000414
 8002484:	40000400 	.word	0x40000400
 8002488:	200008dd 	.word	0x200008dd
 800248c:	200008ec 	.word	0x200008ec
 8002490:	40012c00 	.word	0x40012c00
 8002494:	200008e8 	.word	0x200008e8
 8002498:	200008e0 	.word	0x200008e0
 800249c:	200005b4 	.word	0x200005b4
 80024a0:	200008e4 	.word	0x200008e4
 80024a4:	200005b8 	.word	0x200005b8
 80024a8:	20000460 	.word	0x20000460

080024ac <u32_to_float>:

float u32_to_float(uint32_t input) {
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  return *((float *) &input);
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	ee07 3a90 	vmov	s15, r3
}
 80024bc:	eeb0 0a67 	vmov.f32	s0, s15
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <GetValue>:

uint32_t GetValue(uint8_t * buffer, uint8_t position) {
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	70fb      	strb	r3, [r7, #3]
  return  (buffer[position * 4 + 0] << 0)  |
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	461a      	mov	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	4619      	mov	r1, r3
		  (buffer[position * 4 + 1] << 8)  |
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	3301      	adds	r3, #1
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	021b      	lsls	r3, r3, #8
  return  (buffer[position * 4 + 0] << 0)  |
 80024f2:	ea41 0203 	orr.w	r2, r1, r3
		  (buffer[position * 4 + 2] << 16) |
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	3302      	adds	r3, #2
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	440b      	add	r3, r1
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	041b      	lsls	r3, r3, #16
		  (buffer[position * 4 + 1] << 8)  |
 8002504:	431a      	orrs	r2, r3
		  (buffer[position * 4 + 3] << 24);
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	3303      	adds	r3, #3
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	440b      	add	r3, r1
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	061b      	lsls	r3, r3, #24
		  (buffer[position * 4 + 2] << 16) |
 8002514:	4313      	orrs	r3, r2

}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	float OT = u32_to_float(GetValue(uart_buffer, 0));
 800252c:	2100      	movs	r1, #0
 800252e:	4836      	ldr	r0, [pc, #216]	@ (8002608 <HAL_UART_RxCpltCallback+0xe4>)
 8002530:	f7ff ffcb 	bl	80024ca <GetValue>
 8002534:	4603      	mov	r3, r0
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ffb8 	bl	80024ac <u32_to_float>
 800253c:	ed87 0a05 	vstr	s0, [r7, #20]
	float Vmax = u32_to_float(GetValue(uart_buffer, 1));
 8002540:	2101      	movs	r1, #1
 8002542:	4831      	ldr	r0, [pc, #196]	@ (8002608 <HAL_UART_RxCpltCallback+0xe4>)
 8002544:	f7ff ffc1 	bl	80024ca <GetValue>
 8002548:	4603      	mov	r3, r0
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ffae 	bl	80024ac <u32_to_float>
 8002550:	ed87 0a04 	vstr	s0, [r7, #16]
	float OCD = u32_to_float(GetValue(uart_buffer, 2));
 8002554:	2102      	movs	r1, #2
 8002556:	482c      	ldr	r0, [pc, #176]	@ (8002608 <HAL_UART_RxCpltCallback+0xe4>)
 8002558:	f7ff ffb7 	bl	80024ca <GetValue>
 800255c:	4603      	mov	r3, r0
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ffa4 	bl	80024ac <u32_to_float>
 8002564:	ed87 0a03 	vstr	s0, [r7, #12]

	if (Vmax < 500 && Vmax > 0 && OT < 200 && OT > 0 && OCD < 600 && OCD > 0 && temp_ext < MAX_TEMP && rdy) {
 8002568:	edd7 7a04 	vldr	s15, [r7, #16]
 800256c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800260c <HAL_UART_RxCpltCallback+0xe8>
 8002570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002578:	d53c      	bpl.n	80025f4 <HAL_UART_RxCpltCallback+0xd0>
 800257a:	edd7 7a04 	vldr	s15, [r7, #16]
 800257e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002586:	dd35      	ble.n	80025f4 <HAL_UART_RxCpltCallback+0xd0>
 8002588:	edd7 7a05 	vldr	s15, [r7, #20]
 800258c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002610 <HAL_UART_RxCpltCallback+0xec>
 8002590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	d52c      	bpl.n	80025f4 <HAL_UART_RxCpltCallback+0xd0>
 800259a:	edd7 7a05 	vldr	s15, [r7, #20]
 800259e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a6:	dd25      	ble.n	80025f4 <HAL_UART_RxCpltCallback+0xd0>
 80025a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025ac:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002614 <HAL_UART_RxCpltCallback+0xf0>
 80025b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	d51c      	bpl.n	80025f4 <HAL_UART_RxCpltCallback+0xd0>
 80025ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80025be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c6:	dd15      	ble.n	80025f4 <HAL_UART_RxCpltCallback+0xd0>
 80025c8:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <HAL_UART_RxCpltCallback+0xf4>)
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800261c <HAL_UART_RxCpltCallback+0xf8>
 80025d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	d50b      	bpl.n	80025f4 <HAL_UART_RxCpltCallback+0xd0>
 80025dc:	4b10      	ldr	r3, [pc, #64]	@ (8002620 <HAL_UART_RxCpltCallback+0xfc>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d007      	beq.n	80025f4 <HAL_UART_RxCpltCallback+0xd0>
		StartPulse(OT, Vmax, OCD);
 80025e4:	ed97 1a03 	vldr	s2, [r7, #12]
 80025e8:	edd7 0a04 	vldr	s1, [r7, #16]
 80025ec:	ed97 0a05 	vldr	s0, [r7, #20]
 80025f0:	f7ff fd3a 	bl	8002068 <StartPulse>
	}

	HAL_UART_Receive_IT(&huart1, uart_buffer, UART_SIZE);
 80025f4:	220c      	movs	r2, #12
 80025f6:	4904      	ldr	r1, [pc, #16]	@ (8002608 <HAL_UART_RxCpltCallback+0xe4>)
 80025f8:	480a      	ldr	r0, [pc, #40]	@ (8002624 <HAL_UART_RxCpltCallback+0x100>)
 80025fa:	f007 f9f3 	bl	80099e4 <HAL_UART_Receive_IT>
}
 80025fe:	bf00      	nop
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000598 	.word	0x20000598
 800260c:	43fa0000 	.word	0x43fa0000
 8002610:	43480000 	.word	0x43480000
 8002614:	44160000 	.word	0x44160000
 8002618:	200005b0 	.word	0x200005b0
 800261c:	42700000 	.word	0x42700000
 8002620:	200008dc 	.word	0x200008dc
 8002624:	200004f8 	.word	0x200004f8

08002628 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262e:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <HAL_MspInit+0x44>)
 8002630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002632:	4a0e      	ldr	r2, [pc, #56]	@ (800266c <HAL_MspInit+0x44>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6613      	str	r3, [r2, #96]	@ 0x60
 800263a:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <HAL_MspInit+0x44>)
 800263c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_MspInit+0x44>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264a:	4a08      	ldr	r2, [pc, #32]	@ (800266c <HAL_MspInit+0x44>)
 800264c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002650:	6593      	str	r3, [r2, #88]	@ 0x58
 8002652:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_MspInit+0x44>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800265e:	f003 fe6f 	bl	8006340 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000

08002670 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b09c      	sub	sp, #112	@ 0x70
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002688:	f107 0318 	add.w	r3, r7, #24
 800268c:	2244      	movs	r2, #68	@ 0x44
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f009 fa37 	bl	800bb04 <memset>
  if(hadc->Instance==ADC1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800269e:	d171      	bne.n	8002784 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80026a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80026a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80026aa:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ac:	f107 0318 	add.w	r3, r7, #24
 80026b0:	4618      	mov	r0, r3
 80026b2:	f004 fb83 	bl	8006dbc <HAL_RCCEx_PeriphCLKConfig>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80026bc:	f7ff fa76 	bl	8001bac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80026c0:	4b6d      	ldr	r3, [pc, #436]	@ (8002878 <HAL_ADC_MspInit+0x208>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	4a6c      	ldr	r2, [pc, #432]	@ (8002878 <HAL_ADC_MspInit+0x208>)
 80026c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80026ca:	4b6b      	ldr	r3, [pc, #428]	@ (8002878 <HAL_ADC_MspInit+0x208>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d10b      	bne.n	80026ea <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80026d2:	4b6a      	ldr	r3, [pc, #424]	@ (800287c <HAL_ADC_MspInit+0x20c>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d6:	4a69      	ldr	r2, [pc, #420]	@ (800287c <HAL_ADC_MspInit+0x20c>)
 80026d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026de:	4b67      	ldr	r3, [pc, #412]	@ (800287c <HAL_ADC_MspInit+0x20c>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	4b64      	ldr	r3, [pc, #400]	@ (800287c <HAL_ADC_MspInit+0x20c>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ee:	4a63      	ldr	r2, [pc, #396]	@ (800287c <HAL_ADC_MspInit+0x20c>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026f6:	4b61      	ldr	r3, [pc, #388]	@ (800287c <HAL_ADC_MspInit+0x20c>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = THERM_Pin;
 8002702:	2301      	movs	r3, #1
 8002704:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002706:	2303      	movs	r3, #3
 8002708:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(THERM_GPIO_Port, &GPIO_InitStruct);
 800270e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002712:	4619      	mov	r1, r3
 8002714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002718:	f003 fbd4 	bl	8005ec4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800271c:	4b58      	ldr	r3, [pc, #352]	@ (8002880 <HAL_ADC_MspInit+0x210>)
 800271e:	4a59      	ldr	r2, [pc, #356]	@ (8002884 <HAL_ADC_MspInit+0x214>)
 8002720:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002722:	4b57      	ldr	r3, [pc, #348]	@ (8002880 <HAL_ADC_MspInit+0x210>)
 8002724:	2205      	movs	r2, #5
 8002726:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002728:	4b55      	ldr	r3, [pc, #340]	@ (8002880 <HAL_ADC_MspInit+0x210>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800272e:	4b54      	ldr	r3, [pc, #336]	@ (8002880 <HAL_ADC_MspInit+0x210>)
 8002730:	2200      	movs	r2, #0
 8002732:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002734:	4b52      	ldr	r3, [pc, #328]	@ (8002880 <HAL_ADC_MspInit+0x210>)
 8002736:	2280      	movs	r2, #128	@ 0x80
 8002738:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800273a:	4b51      	ldr	r3, [pc, #324]	@ (8002880 <HAL_ADC_MspInit+0x210>)
 800273c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002740:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002742:	4b4f      	ldr	r3, [pc, #316]	@ (8002880 <HAL_ADC_MspInit+0x210>)
 8002744:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002748:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800274a:	4b4d      	ldr	r3, [pc, #308]	@ (8002880 <HAL_ADC_MspInit+0x210>)
 800274c:	2220      	movs	r2, #32
 800274e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002750:	4b4b      	ldr	r3, [pc, #300]	@ (8002880 <HAL_ADC_MspInit+0x210>)
 8002752:	2200      	movs	r2, #0
 8002754:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002756:	484a      	ldr	r0, [pc, #296]	@ (8002880 <HAL_ADC_MspInit+0x210>)
 8002758:	f003 f882 	bl	8005860 <HAL_DMA_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8002762:	f7ff fa23 	bl	8001bac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a45      	ldr	r2, [pc, #276]	@ (8002880 <HAL_ADC_MspInit+0x210>)
 800276a:	655a      	str	r2, [r3, #84]	@ 0x54
 800276c:	4a44      	ldr	r2, [pc, #272]	@ (8002880 <HAL_ADC_MspInit+0x210>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	2012      	movs	r0, #18
 8002778:	f002 fd5d 	bl	8005236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800277c:	2012      	movs	r0, #18
 800277e:	f002 fd74 	bl	800526a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002782:	e075      	b.n	8002870 <HAL_ADC_MspInit+0x200>
  else if(hadc->Instance==ADC2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a3f      	ldr	r2, [pc, #252]	@ (8002888 <HAL_ADC_MspInit+0x218>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d170      	bne.n	8002870 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800278e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002792:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002794:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002798:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800279a:	f107 0318 	add.w	r3, r7, #24
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 fb0c 	bl	8006dbc <HAL_RCCEx_PeriphCLKConfig>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 80027aa:	f7ff f9ff 	bl	8001bac <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80027ae:	4b32      	ldr	r3, [pc, #200]	@ (8002878 <HAL_ADC_MspInit+0x208>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	3301      	adds	r3, #1
 80027b4:	4a30      	ldr	r2, [pc, #192]	@ (8002878 <HAL_ADC_MspInit+0x208>)
 80027b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80027b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002878 <HAL_ADC_MspInit+0x208>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10b      	bne.n	80027d8 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80027c0:	4b2e      	ldr	r3, [pc, #184]	@ (800287c <HAL_ADC_MspInit+0x20c>)
 80027c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c4:	4a2d      	ldr	r2, [pc, #180]	@ (800287c <HAL_ADC_MspInit+0x20c>)
 80027c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80027ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027cc:	4b2b      	ldr	r3, [pc, #172]	@ (800287c <HAL_ADC_MspInit+0x20c>)
 80027ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d8:	4b28      	ldr	r3, [pc, #160]	@ (800287c <HAL_ADC_MspInit+0x20c>)
 80027da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027dc:	4a27      	ldr	r2, [pc, #156]	@ (800287c <HAL_ADC_MspInit+0x20c>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027e4:	4b25      	ldr	r3, [pc, #148]	@ (800287c <HAL_ADC_MspInit+0x20c>)
 80027e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80027f0:	2310      	movs	r3, #16
 80027f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027f4:	2303      	movs	r3, #3
 80027f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80027fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002800:	4619      	mov	r1, r3
 8002802:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002806:	f003 fb5d 	bl	8005ec4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800280a:	4b20      	ldr	r3, [pc, #128]	@ (800288c <HAL_ADC_MspInit+0x21c>)
 800280c:	4a20      	ldr	r2, [pc, #128]	@ (8002890 <HAL_ADC_MspInit+0x220>)
 800280e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002810:	4b1e      	ldr	r3, [pc, #120]	@ (800288c <HAL_ADC_MspInit+0x21c>)
 8002812:	2224      	movs	r2, #36	@ 0x24
 8002814:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002816:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <HAL_ADC_MspInit+0x21c>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800281c:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <HAL_ADC_MspInit+0x21c>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002822:	4b1a      	ldr	r3, [pc, #104]	@ (800288c <HAL_ADC_MspInit+0x21c>)
 8002824:	2280      	movs	r2, #128	@ 0x80
 8002826:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002828:	4b18      	ldr	r3, [pc, #96]	@ (800288c <HAL_ADC_MspInit+0x21c>)
 800282a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800282e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002830:	4b16      	ldr	r3, [pc, #88]	@ (800288c <HAL_ADC_MspInit+0x21c>)
 8002832:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002836:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002838:	4b14      	ldr	r3, [pc, #80]	@ (800288c <HAL_ADC_MspInit+0x21c>)
 800283a:	2220      	movs	r2, #32
 800283c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800283e:	4b13      	ldr	r3, [pc, #76]	@ (800288c <HAL_ADC_MspInit+0x21c>)
 8002840:	2200      	movs	r2, #0
 8002842:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002844:	4811      	ldr	r0, [pc, #68]	@ (800288c <HAL_ADC_MspInit+0x21c>)
 8002846:	f003 f80b 	bl	8005860 <HAL_DMA_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_ADC_MspInit+0x1e4>
      Error_Handler();
 8002850:	f7ff f9ac 	bl	8001bac <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <HAL_ADC_MspInit+0x21c>)
 8002858:	655a      	str	r2, [r3, #84]	@ 0x54
 800285a:	4a0c      	ldr	r2, [pc, #48]	@ (800288c <HAL_ADC_MspInit+0x21c>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002860:	2200      	movs	r2, #0
 8002862:	2100      	movs	r1, #0
 8002864:	2012      	movs	r0, #18
 8002866:	f002 fce6 	bl	8005236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800286a:	2012      	movs	r0, #18
 800286c:	f002 fcfd 	bl	800526a <HAL_NVIC_EnableIRQ>
}
 8002870:	bf00      	nop
 8002872:	3770      	adds	r7, #112	@ 0x70
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	200008f0 	.word	0x200008f0
 800287c:	40021000 	.word	0x40021000
 8002880:	20000164 	.word	0x20000164
 8002884:	40020008 	.word	0x40020008
 8002888:	50000100 	.word	0x50000100
 800288c:	200001c4 	.word	0x200001c4
 8002890:	4002001c 	.word	0x4002001c

08002894 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	@ 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a23      	ldr	r2, [pc, #140]	@ (8002940 <HAL_COMP_MspInit+0xac>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d121      	bne.n	80028fa <HAL_COMP_MspInit+0x66>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b6:	4b23      	ldr	r3, [pc, #140]	@ (8002944 <HAL_COMP_MspInit+0xb0>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ba:	4a22      	ldr	r2, [pc, #136]	@ (8002944 <HAL_COMP_MspInit+0xb0>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028c2:	4b20      	ldr	r3, [pc, #128]	@ (8002944 <HAL_COMP_MspInit+0xb0>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80028ce:	2302      	movs	r3, #2
 80028d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028d2:	2303      	movs	r3, #3
 80028d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	4619      	mov	r1, r3
 80028e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028e4:	f003 faee 	bl	8005ec4 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 80028e8:	2200      	movs	r2, #0
 80028ea:	2100      	movs	r1, #0
 80028ec:	2040      	movs	r0, #64	@ 0x40
 80028ee:	f002 fca2 	bl	8005236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 80028f2:	2040      	movs	r0, #64	@ 0x40
 80028f4:	f002 fcb9 	bl	800526a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80028f8:	e01d      	b.n	8002936 <HAL_COMP_MspInit+0xa2>
  else if(hcomp->Instance==COMP2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a12      	ldr	r2, [pc, #72]	@ (8002948 <HAL_COMP_MspInit+0xb4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d118      	bne.n	8002936 <HAL_COMP_MspInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002904:	4b0f      	ldr	r3, [pc, #60]	@ (8002944 <HAL_COMP_MspInit+0xb0>)
 8002906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002908:	4a0e      	ldr	r2, [pc, #56]	@ (8002944 <HAL_COMP_MspInit+0xb0>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002910:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <HAL_COMP_MspInit+0xb0>)
 8002912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800291c:	230c      	movs	r3, #12
 800291e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002920:	2303      	movs	r3, #3
 8002922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	4619      	mov	r1, r3
 800292e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002932:	f003 fac7 	bl	8005ec4 <HAL_GPIO_Init>
}
 8002936:	bf00      	nop
 8002938:	3728      	adds	r7, #40	@ 0x28
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40010200 	.word	0x40010200
 8002944:	40021000 	.word	0x40021000
 8002948:	40010204 	.word	0x40010204

0800294c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0d      	ldr	r2, [pc, #52]	@ (8002990 <HAL_DAC_MspInit+0x44>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d113      	bne.n	8002986 <HAL_DAC_MspInit+0x3a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800295e:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <HAL_DAC_MspInit+0x48>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002962:	4a0c      	ldr	r2, [pc, #48]	@ (8002994 <HAL_DAC_MspInit+0x48>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800296a:	4b0a      	ldr	r3, [pc, #40]	@ (8002994 <HAL_DAC_MspInit+0x48>)
 800296c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	2100      	movs	r1, #0
 800297a:	2036      	movs	r0, #54	@ 0x36
 800297c:	f002 fc5b 	bl	8005236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002980:	2036      	movs	r0, #54	@ 0x36
 8002982:	f002 fc72 	bl	800526a <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	50000800 	.word	0x50000800
 8002994:	40021000 	.word	0x40021000

08002998 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	@ 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a24 <HAL_SPI_MspInit+0x8c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d130      	bne.n	8002a1c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002a28 <HAL_SPI_MspInit+0x90>)
 80029bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029be:	4a1a      	ldr	r2, [pc, #104]	@ (8002a28 <HAL_SPI_MspInit+0x90>)
 80029c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80029c6:	4b18      	ldr	r3, [pc, #96]	@ (8002a28 <HAL_SPI_MspInit+0x90>)
 80029c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	4b15      	ldr	r3, [pc, #84]	@ (8002a28 <HAL_SPI_MspInit+0x90>)
 80029d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d6:	4a14      	ldr	r2, [pc, #80]	@ (8002a28 <HAL_SPI_MspInit+0x90>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029de:	4b12      	ldr	r3, [pc, #72]	@ (8002a28 <HAL_SPI_MspInit+0x90>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029ea:	23e0      	movs	r3, #224	@ 0xe0
 80029ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	2300      	movs	r3, #0
 80029f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029fa:	2305      	movs	r3, #5
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	4619      	mov	r1, r3
 8002a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a08:	f003 fa5c 	bl	8005ec4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2100      	movs	r1, #0
 8002a10:	2023      	movs	r0, #35	@ 0x23
 8002a12:	f002 fc10 	bl	8005236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002a16:	2023      	movs	r0, #35	@ 0x23
 8002a18:	f002 fc27 	bl	800526a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002a1c:	bf00      	nop
 8002a1e:	3728      	adds	r7, #40	@ 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40013000 	.word	0x40013000
 8002a28:	40021000 	.word	0x40021000

08002a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08a      	sub	sp, #40	@ 0x28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a57      	ldr	r2, [pc, #348]	@ (8002b98 <HAL_TIM_Base_MspInit+0x16c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d124      	bne.n	8002a88 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a3e:	4b57      	ldr	r3, [pc, #348]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a42:	4a56      	ldr	r2, [pc, #344]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002a44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a48:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a4a:	4b54      	ldr	r3, [pc, #336]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2100      	movs	r1, #0
 8002a5a:	2019      	movs	r0, #25
 8002a5c:	f002 fbeb 	bl	8005236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a60:	2019      	movs	r0, #25
 8002a62:	f002 fc02 	bl	800526a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	201a      	movs	r0, #26
 8002a6c:	f002 fbe3 	bl	8005236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002a70:	201a      	movs	r0, #26
 8002a72:	f002 fbfa 	bl	800526a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2100      	movs	r1, #0
 8002a7a:	201b      	movs	r0, #27
 8002a7c:	f002 fbdb 	bl	8005236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002a80:	201b      	movs	r0, #27
 8002a82:	f002 fbf2 	bl	800526a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002a86:	e082      	b.n	8002b8e <HAL_TIM_Base_MspInit+0x162>
  else if(htim_base->Instance==TIM2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a90:	d114      	bne.n	8002abc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a92:	4b42      	ldr	r3, [pc, #264]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a96:	4a41      	ldr	r2, [pc, #260]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	623b      	str	r3, [r7, #32]
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2100      	movs	r1, #0
 8002aae:	201c      	movs	r0, #28
 8002ab0:	f002 fbc1 	bl	8005236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ab4:	201c      	movs	r0, #28
 8002ab6:	f002 fbd8 	bl	800526a <HAL_NVIC_EnableIRQ>
}
 8002aba:	e068      	b.n	8002b8e <HAL_TIM_Base_MspInit+0x162>
  else if(htim_base->Instance==TIM3)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a37      	ldr	r2, [pc, #220]	@ (8002ba0 <HAL_TIM_Base_MspInit+0x174>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ac6:	4b35      	ldr	r3, [pc, #212]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aca:	4a34      	ldr	r2, [pc, #208]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ad2:	4b32      	ldr	r3, [pc, #200]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	69fb      	ldr	r3, [r7, #28]
}
 8002ade:	e056      	b.n	8002b8e <HAL_TIM_Base_MspInit+0x162>
  else if(htim_base->Instance==TIM4)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a2f      	ldr	r2, [pc, #188]	@ (8002ba4 <HAL_TIM_Base_MspInit+0x178>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10c      	bne.n	8002b04 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002aea:	4b2c      	ldr	r3, [pc, #176]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aee:	4a2b      	ldr	r2, [pc, #172]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002af6:	4b29      	ldr	r3, [pc, #164]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	69bb      	ldr	r3, [r7, #24]
}
 8002b02:	e044      	b.n	8002b8e <HAL_TIM_Base_MspInit+0x162>
  else if(htim_base->Instance==TIM6)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a27      	ldr	r2, [pc, #156]	@ (8002ba8 <HAL_TIM_Base_MspInit+0x17c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d114      	bne.n	8002b38 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b0e:	4b23      	ldr	r3, [pc, #140]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b12:	4a22      	ldr	r2, [pc, #136]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002b14:	f043 0310 	orr.w	r3, r3, #16
 8002b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b1a:	4b20      	ldr	r3, [pc, #128]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2100      	movs	r1, #0
 8002b2a:	2036      	movs	r0, #54	@ 0x36
 8002b2c:	f002 fb83 	bl	8005236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b30:	2036      	movs	r0, #54	@ 0x36
 8002b32:	f002 fb9a 	bl	800526a <HAL_NVIC_EnableIRQ>
}
 8002b36:	e02a      	b.n	8002b8e <HAL_TIM_Base_MspInit+0x162>
  else if(htim_base->Instance==TIM7)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bac <HAL_TIM_Base_MspInit+0x180>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d114      	bne.n	8002b6c <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b42:	4b16      	ldr	r3, [pc, #88]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b46:	4a15      	ldr	r2, [pc, #84]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002b48:	f043 0320 	orr.w	r3, r3, #32
 8002b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b4e:	4b13      	ldr	r3, [pc, #76]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	2037      	movs	r0, #55	@ 0x37
 8002b60:	f002 fb69 	bl	8005236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002b64:	2037      	movs	r0, #55	@ 0x37
 8002b66:	f002 fb80 	bl	800526a <HAL_NVIC_EnableIRQ>
}
 8002b6a:	e010      	b.n	8002b8e <HAL_TIM_Base_MspInit+0x162>
  else if(htim_base->Instance==TIM8)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb0 <HAL_TIM_Base_MspInit+0x184>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10b      	bne.n	8002b8e <HAL_TIM_Base_MspInit+0x162>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b76:	4b09      	ldr	r3, [pc, #36]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b7a:	4a08      	ldr	r2, [pc, #32]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002b7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b80:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <HAL_TIM_Base_MspInit+0x170>)
 8002b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
}
 8002b8e:	bf00      	nop
 8002b90:	3728      	adds	r7, #40	@ 0x28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40012c00 	.word	0x40012c00
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800
 8002ba8:	40001000 	.word	0x40001000
 8002bac:	40001400 	.word	0x40001400
 8002bb0:	40013400 	.word	0x40013400

08002bb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	@ 0x30
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a43      	ldr	r2, [pc, #268]	@ (8002ce0 <HAL_TIM_MspPostInit+0x12c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d11e      	bne.n	8002c14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	4b43      	ldr	r3, [pc, #268]	@ (8002ce4 <HAL_TIM_MspPostInit+0x130>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bda:	4a42      	ldr	r2, [pc, #264]	@ (8002ce4 <HAL_TIM_MspPostInit+0x130>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002be2:	4b40      	ldr	r3, [pc, #256]	@ (8002ce4 <HAL_TIM_MspPostInit+0x130>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GD_2_Pin|GD_1_Pin;
 8002bee:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002c00:	2306      	movs	r3, #6
 8002c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c04:	f107 031c 	add.w	r3, r7, #28
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c0e:	f003 f959 	bl	8005ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002c12:	e061      	b.n	8002cd8 <HAL_TIM_MspPostInit+0x124>
  else if(htim->Instance==TIM3)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a33      	ldr	r2, [pc, #204]	@ (8002ce8 <HAL_TIM_MspPostInit+0x134>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d11c      	bne.n	8002c58 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1e:	4b31      	ldr	r3, [pc, #196]	@ (8002ce4 <HAL_TIM_MspPostInit+0x130>)
 8002c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c22:	4a30      	ldr	r2, [pc, #192]	@ (8002ce4 <HAL_TIM_MspPostInit+0x130>)
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ce4 <HAL_TIM_MspPostInit+0x130>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 8002c36:	2330      	movs	r3, #48	@ 0x30
 8002c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c42:	2300      	movs	r3, #0
 8002c44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c46:	2302      	movs	r3, #2
 8002c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4a:	f107 031c 	add.w	r3, r7, #28
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4826      	ldr	r0, [pc, #152]	@ (8002cec <HAL_TIM_MspPostInit+0x138>)
 8002c52:	f003 f937 	bl	8005ec4 <HAL_GPIO_Init>
}
 8002c56:	e03f      	b.n	8002cd8 <HAL_TIM_MspPostInit+0x124>
  else if(htim->Instance==TIM4)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a24      	ldr	r2, [pc, #144]	@ (8002cf0 <HAL_TIM_MspPostInit+0x13c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d13a      	bne.n	8002cd8 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c62:	4b20      	ldr	r3, [pc, #128]	@ (8002ce4 <HAL_TIM_MspPostInit+0x130>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c66:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce4 <HAL_TIM_MspPostInit+0x130>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce4 <HAL_TIM_MspPostInit+0x130>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce4 <HAL_TIM_MspPostInit+0x130>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7e:	4a19      	ldr	r2, [pc, #100]	@ (8002ce4 <HAL_TIM_MspPostInit+0x130>)
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c86:	4b17      	ldr	r3, [pc, #92]	@ (8002ce4 <HAL_TIM_MspPostInit+0x130>)
 8002c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8002c92:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002ca4:	230a      	movs	r3, #10
 8002ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca8:	f107 031c 	add.w	r3, r7, #28
 8002cac:	4619      	mov	r1, r3
 8002cae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cb2:	f003 f907 	bl	8005ec4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FAN_Pin;
 8002cb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(FAN_GPIO_Port, &GPIO_InitStruct);
 8002ccc:	f107 031c 	add.w	r3, r7, #28
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4806      	ldr	r0, [pc, #24]	@ (8002cec <HAL_TIM_MspPostInit+0x138>)
 8002cd4:	f003 f8f6 	bl	8005ec4 <HAL_GPIO_Init>
}
 8002cd8:	bf00      	nop
 8002cda:	3730      	adds	r7, #48	@ 0x30
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40000400 	.word	0x40000400
 8002cec:	48000400 	.word	0x48000400
 8002cf0:	40000800 	.word	0x40000800

08002cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b09a      	sub	sp, #104	@ 0x68
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d0c:	f107 0310 	add.w	r3, r7, #16
 8002d10:	2244      	movs	r2, #68	@ 0x44
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f008 fef5 	bl	800bb04 <memset>
  if(huart->Instance==USART1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a22      	ldr	r2, [pc, #136]	@ (8002da8 <HAL_UART_MspInit+0xb4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d13d      	bne.n	8002da0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d24:	2301      	movs	r3, #1
 8002d26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d2c:	f107 0310 	add.w	r3, r7, #16
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 f843 	bl	8006dbc <HAL_RCCEx_PeriphCLKConfig>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d3c:	f7fe ff36 	bl	8001bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d40:	4b1a      	ldr	r3, [pc, #104]	@ (8002dac <HAL_UART_MspInit+0xb8>)
 8002d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d44:	4a19      	ldr	r2, [pc, #100]	@ (8002dac <HAL_UART_MspInit+0xb8>)
 8002d46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d4c:	4b17      	ldr	r3, [pc, #92]	@ (8002dac <HAL_UART_MspInit+0xb8>)
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d58:	4b14      	ldr	r3, [pc, #80]	@ (8002dac <HAL_UART_MspInit+0xb8>)
 8002d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5c:	4a13      	ldr	r2, [pc, #76]	@ (8002dac <HAL_UART_MspInit+0xb8>)
 8002d5e:	f043 0302 	orr.w	r3, r3, #2
 8002d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d64:	4b11      	ldr	r3, [pc, #68]	@ (8002dac <HAL_UART_MspInit+0xb8>)
 8002d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RX_Pin;
 8002d70:	2340      	movs	r3, #64	@ 0x40
 8002d72:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d74:	2312      	movs	r3, #18
 8002d76:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d80:	2307      	movs	r3, #7
 8002d82:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8002d84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4809      	ldr	r0, [pc, #36]	@ (8002db0 <HAL_UART_MspInit+0xbc>)
 8002d8c:	f003 f89a 	bl	8005ec4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2100      	movs	r1, #0
 8002d94:	2025      	movs	r0, #37	@ 0x25
 8002d96:	f002 fa4e 	bl	8005236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d9a:	2025      	movs	r0, #37	@ 0x25
 8002d9c:	f002 fa65 	bl	800526a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002da0:	bf00      	nop
 8002da2:	3768      	adds	r7, #104	@ 0x68
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40013800 	.word	0x40013800
 8002dac:	40021000 	.word	0x40021000
 8002db0:	48000400 	.word	0x48000400

08002db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002db8:	bf00      	nop
 8002dba:	e7fd      	b.n	8002db8 <NMI_Handler+0x4>

08002dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <HardFault_Handler+0x4>

08002dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <MemManage_Handler+0x4>

08002dcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dd0:	bf00      	nop
 8002dd2:	e7fd      	b.n	8002dd0 <BusFault_Handler+0x4>

08002dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd8:	bf00      	nop
 8002dda:	e7fd      	b.n	8002dd8 <UsageFault_Handler+0x4>

08002ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e0a:	f000 f911 	bl	8003030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e18:	4802      	ldr	r0, [pc, #8]	@ (8002e24 <DMA1_Channel1_IRQHandler+0x10>)
 8002e1a:	f002 ff04 	bl	8005c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000164 	.word	0x20000164

08002e28 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002e2c:	4802      	ldr	r0, [pc, #8]	@ (8002e38 <DMA1_Channel2_IRQHandler+0x10>)
 8002e2e:	f002 fefa 	bl	8005c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200001c4 	.word	0x200001c4

08002e3c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002e40:	4803      	ldr	r0, [pc, #12]	@ (8002e50 <ADC1_2_IRQHandler+0x14>)
 8002e42:	f000 fdd3 	bl	80039ec <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002e46:	4803      	ldr	r0, [pc, #12]	@ (8002e54 <ADC1_2_IRQHandler+0x18>)
 8002e48:	f000 fdd0 	bl	80039ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	2000008c 	.word	0x2000008c
 8002e54:	200000f8 	.word	0x200000f8

08002e58 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e5c:	4802      	ldr	r0, [pc, #8]	@ (8002e68 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002e5e:	f005 f8d1 	bl	8008004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200002e4 	.word	0x200002e4

08002e6c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e70:	4802      	ldr	r0, [pc, #8]	@ (8002e7c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002e72:	f005 f8c7 	bl	8008004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200002e4 	.word	0x200002e4

08002e80 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e84:	4802      	ldr	r0, [pc, #8]	@ (8002e90 <TIM1_CC_IRQHandler+0x10>)
 8002e86:	f005 f8bd 	bl	8008004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	200002e4 	.word	0x200002e4

08002e94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e98:	4802      	ldr	r0, [pc, #8]	@ (8002ea4 <TIM2_IRQHandler+0x10>)
 8002e9a:	f005 f8b3 	bl	8008004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000330 	.word	0x20000330

08002ea8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002eac:	4802      	ldr	r0, [pc, #8]	@ (8002eb8 <SPI1_IRQHandler+0x10>)
 8002eae:	f004 fa21 	bl	80072f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000280 	.word	0x20000280

08002ebc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ec0:	4802      	ldr	r0, [pc, #8]	@ (8002ecc <USART1_IRQHandler+0x10>)
 8002ec2:	f006 fddb 	bl	8009a7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	200004f8 	.word	0x200004f8

08002ed0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ed4:	4803      	ldr	r0, [pc, #12]	@ (8002ee4 <TIM6_DAC_IRQHandler+0x14>)
 8002ed6:	f005 f895 	bl	8008004 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002eda:	4803      	ldr	r0, [pc, #12]	@ (8002ee8 <TIM6_DAC_IRQHandler+0x18>)
 8002edc:	f002 fa6e 	bl	80053bc <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ee0:	bf00      	nop
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000414 	.word	0x20000414
 8002ee8:	2000026c 	.word	0x2000026c

08002eec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ef0:	4802      	ldr	r0, [pc, #8]	@ (8002efc <TIM7_IRQHandler+0x10>)
 8002ef2:	f005 f887 	bl	8008004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000460 	.word	0x20000460

08002f00 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8002f04:	4802      	ldr	r0, [pc, #8]	@ (8002f10 <COMP1_2_3_IRQHandler+0x10>)
 8002f06:	f002 f87f 	bl	8005008 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000224 	.word	0x20000224

08002f14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f18:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <SystemInit+0x20>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1e:	4a05      	ldr	r2, [pc, #20]	@ (8002f34 <SystemInit+0x20>)
 8002f20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f38:	480d      	ldr	r0, [pc, #52]	@ (8002f70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f3c:	f7ff ffea 	bl	8002f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f40:	480c      	ldr	r0, [pc, #48]	@ (8002f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f42:	490d      	ldr	r1, [pc, #52]	@ (8002f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f44:	4a0d      	ldr	r2, [pc, #52]	@ (8002f7c <LoopForever+0xe>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002f48:	e002      	b.n	8002f50 <LoopCopyDataInit>

08002f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f4e:	3304      	adds	r3, #4

08002f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f54:	d3f9      	bcc.n	8002f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f56:	4a0a      	ldr	r2, [pc, #40]	@ (8002f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f58:	4c0a      	ldr	r4, [pc, #40]	@ (8002f84 <LoopForever+0x16>)
  movs r3, #0
 8002f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f5c:	e001      	b.n	8002f62 <LoopFillZerobss>

08002f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f60:	3204      	adds	r2, #4

08002f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f64:	d3fb      	bcc.n	8002f5e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002f66:	f008 fddb 	bl	800bb20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f6a:	f7fd ffd1 	bl	8000f10 <main>

08002f6e <LoopForever>:

LoopForever:
    b LoopForever
 8002f6e:	e7fe      	b.n	8002f6e <LoopForever>
  ldr   r0, =_estack
 8002f70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002f7c:	0800c2c8 	.word	0x0800c2c8
  ldr r2, =_sbss
 8002f80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002f84:	20000a30 	.word	0x20000a30

08002f88 <COMP4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f88:	e7fe      	b.n	8002f88 <COMP4_IRQHandler>

08002f8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f94:	2003      	movs	r0, #3
 8002f96:	f002 f943 	bl	8005220 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f9a:	200f      	movs	r0, #15
 8002f9c:	f000 f80e 	bl	8002fbc <HAL_InitTick>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	71fb      	strb	r3, [r7, #7]
 8002faa:	e001      	b.n	8002fb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fac:	f7ff fb3c 	bl	8002628 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fb0:	79fb      	ldrb	r3, [r7, #7]

}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002fc8:	4b16      	ldr	r3, [pc, #88]	@ (8003024 <HAL_InitTick+0x68>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d022      	beq.n	8003016 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002fd0:	4b15      	ldr	r3, [pc, #84]	@ (8003028 <HAL_InitTick+0x6c>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b13      	ldr	r3, [pc, #76]	@ (8003024 <HAL_InitTick+0x68>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f002 f94e 	bl	8005286 <HAL_SYSTICK_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10f      	bne.n	8003010 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b0f      	cmp	r3, #15
 8002ff4:	d809      	bhi.n	800300a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffe:	f002 f91a 	bl	8005236 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003002:	4a0a      	ldr	r2, [pc, #40]	@ (800302c <HAL_InitTick+0x70>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e007      	b.n	800301a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
 800300e:	e004      	b.n	800301a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	e001      	b.n	800301a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800301a:	7bfb      	ldrb	r3, [r7, #15]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	2000000c 	.word	0x2000000c
 8003028:	20000004 	.word	0x20000004
 800302c:	20000008 	.word	0x20000008

08003030 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003034:	4b05      	ldr	r3, [pc, #20]	@ (800304c <HAL_IncTick+0x1c>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <HAL_IncTick+0x20>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4413      	add	r3, r2
 800303e:	4a03      	ldr	r2, [pc, #12]	@ (800304c <HAL_IncTick+0x1c>)
 8003040:	6013      	str	r3, [r2, #0]
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	200008f4 	.word	0x200008f4
 8003050:	2000000c 	.word	0x2000000c

08003054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return uwTick;
 8003058:	4b03      	ldr	r3, [pc, #12]	@ (8003068 <HAL_GetTick+0x14>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	200008f4 	.word	0x200008f4

0800306c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003074:	f7ff ffee 	bl	8003054 <HAL_GetTick>
 8003078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d004      	beq.n	8003090 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003086:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <HAL_Delay+0x40>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4413      	add	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003090:	bf00      	nop
 8003092:	f7ff ffdf 	bl	8003054 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d8f7      	bhi.n	8003092 <HAL_Delay+0x26>
  {
  }
}
 80030a2:	bf00      	nop
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	2000000c 	.word	0x2000000c

080030b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	609a      	str	r2, [r3, #8]
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	609a      	str	r2, [r3, #8]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3360      	adds	r3, #96	@ 0x60
 800312a:	461a      	mov	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b08      	ldr	r3, [pc, #32]	@ (800315c <LL_ADC_SetOffset+0x44>)
 800313a:	4013      	ands	r3, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	4313      	orrs	r3, r2
 8003148:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003150:	bf00      	nop
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	03fff000 	.word	0x03fff000

08003160 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3360      	adds	r3, #96	@ 0x60
 800316e:	461a      	mov	r2, r3
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003180:	4618      	mov	r0, r3
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3360      	adds	r3, #96	@ 0x60
 800319c:	461a      	mov	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b087      	sub	sp, #28
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3360      	adds	r3, #96	@ 0x60
 80031d2:	461a      	mov	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80031ec:	bf00      	nop
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	3360      	adds	r3, #96	@ 0x60
 8003208:	461a      	mov	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	431a      	orrs	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	615a      	str	r2, [r3, #20]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800327a:	b480      	push	{r7}
 800327c:	b087      	sub	sp, #28
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	3330      	adds	r3, #48	@ 0x30
 800328a:	461a      	mov	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	4413      	add	r3, r2
 8003298:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	211f      	movs	r1, #31
 80032a6:	fa01 f303 	lsl.w	r3, r1, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	401a      	ands	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	0e9b      	lsrs	r3, r3, #26
 80032b2:	f003 011f 	and.w	r1, r3, #31
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	fa01 f303 	lsl.w	r3, r1, r3
 80032c0:	431a      	orrs	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032c6:	bf00      	nop
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032de:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3314      	adds	r3, #20
 8003308:	461a      	mov	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	0e5b      	lsrs	r3, r3, #25
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	4413      	add	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	0d1b      	lsrs	r3, r3, #20
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	2107      	movs	r1, #7
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	401a      	ands	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	0d1b      	lsrs	r3, r3, #20
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	431a      	orrs	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003368:	43db      	mvns	r3, r3
 800336a:	401a      	ands	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f003 0318 	and.w	r3, r3, #24
 8003372:	4908      	ldr	r1, [pc, #32]	@ (8003394 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003374:	40d9      	lsrs	r1, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	400b      	ands	r3, r1
 800337a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337e:	431a      	orrs	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	0007ffff 	.word	0x0007ffff

08003398 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 031f 	and.w	r3, r3, #31
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80033e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6093      	str	r3, [r2, #8]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003408:	d101      	bne.n	800340e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800342c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003430:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003454:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003458:	d101      	bne.n	800345e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800347c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003480:	f043 0201 	orr.w	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034a8:	f043 0202 	orr.w	r2, r3, #2
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <LL_ADC_IsEnabled+0x18>
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <LL_ADC_IsEnabled+0x1a>
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d101      	bne.n	80034fa <LL_ADC_IsDisableOngoing+0x18>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <LL_ADC_IsDisableOngoing+0x1a>
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003518:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800351c:	f043 0204 	orr.w	r2, r3, #4
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b04      	cmp	r3, #4
 8003542:	d101      	bne.n	8003548 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b08      	cmp	r3, #8
 8003568:	d101      	bne.n	800356e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b089      	sub	sp, #36	@ 0x24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e167      	b.n	8003866 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d109      	bne.n	80035b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff f863 	bl	8002670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff19 	bl	80033f4 <LL_ADC_IsDeepPowerDownEnabled>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d004      	beq.n	80035d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff feff 	bl	80033d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff ff34 	bl	8003444 <LL_ADC_IsInternalRegulatorEnabled>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d115      	bne.n	800360e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff ff18 	bl	800341c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035ec:	4ba0      	ldr	r3, [pc, #640]	@ (8003870 <HAL_ADC_Init+0x2f4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	099b      	lsrs	r3, r3, #6
 80035f2:	4aa0      	ldr	r2, [pc, #640]	@ (8003874 <HAL_ADC_Init+0x2f8>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	099b      	lsrs	r3, r3, #6
 80035fa:	3301      	adds	r3, #1
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003600:	e002      	b.n	8003608 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3b01      	subs	r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f9      	bne.n	8003602 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ff16 	bl	8003444 <LL_ADC_IsInternalRegulatorEnabled>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10d      	bne.n	800363a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003622:	f043 0210 	orr.w	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362e:	f043 0201 	orr.w	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ff76 	bl	8003530 <LL_ADC_REG_IsConversionOngoing>
 8003644:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 8100 	bne.w	8003854 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f040 80fc 	bne.w	8003854 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003660:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003664:	f043 0202 	orr.w	r2, r3, #2
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff23 	bl	80034bc <LL_ADC_IsEnabled>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d111      	bne.n	80036a0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800367c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003680:	f7ff ff1c 	bl	80034bc <LL_ADC_IsEnabled>
 8003684:	4604      	mov	r4, r0
 8003686:	487c      	ldr	r0, [pc, #496]	@ (8003878 <HAL_ADC_Init+0x2fc>)
 8003688:	f7ff ff18 	bl	80034bc <LL_ADC_IsEnabled>
 800368c:	4603      	mov	r3, r0
 800368e:	4323      	orrs	r3, r4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d105      	bne.n	80036a0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4619      	mov	r1, r3
 800369a:	4878      	ldr	r0, [pc, #480]	@ (800387c <HAL_ADC_Init+0x300>)
 800369c:	f7ff fd08 	bl	80030b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	7f5b      	ldrb	r3, [r3, #29]
 80036a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80036b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80036b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d106      	bne.n	80036dc <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d2:	3b01      	subs	r3, #1
 80036d4:	045b      	lsls	r3, r3, #17
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	4b60      	ldr	r3, [pc, #384]	@ (8003880 <HAL_ADC_Init+0x304>)
 8003700:	4013      	ands	r3, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6812      	ldr	r2, [r2, #0]
 8003706:	69b9      	ldr	r1, [r7, #24]
 8003708:	430b      	orrs	r3, r1
 800370a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff ff15 	bl	8003556 <LL_ADC_INJ_IsConversionOngoing>
 800372c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d16d      	bne.n	8003810 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d16a      	bne.n	8003810 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800373e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003746:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003756:	f023 0302 	bic.w	r3, r3, #2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	69b9      	ldr	r1, [r7, #24]
 8003760:	430b      	orrs	r3, r1
 8003762:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d017      	beq.n	800379c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691a      	ldr	r2, [r3, #16]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800377a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003784:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003788:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6911      	ldr	r1, [r2, #16]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	430b      	orrs	r3, r1
 8003796:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800379a:	e013      	b.n	80037c4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80037aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80037bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037c0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d118      	bne.n	8003800 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80037d8:	f023 0304 	bic.w	r3, r3, #4
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80037e4:	4311      	orrs	r1, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80037ea:	4311      	orrs	r1, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037f0:	430a      	orrs	r2, r1
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	611a      	str	r2, [r3, #16]
 80037fe:	e007      	b.n	8003810 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d10c      	bne.n	8003832 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381e:	f023 010f 	bic.w	r1, r3, #15
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	1e5a      	subs	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003830:	e007      	b.n	8003842 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 020f 	bic.w	r2, r2, #15
 8003840:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	f043 0201 	orr.w	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003852:	e007      	b.n	8003864 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003858:	f043 0210 	orr.w	r2, r3, #16
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003864:	7ffb      	ldrb	r3, [r7, #31]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	@ 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd90      	pop	{r4, r7, pc}
 800386e:	bf00      	nop
 8003870:	20000004 	.word	0x20000004
 8003874:	053e2d63 	.word	0x053e2d63
 8003878:	50000100 	.word	0x50000100
 800387c:	50000300 	.word	0x50000300
 8003880:	fff04007 	.word	0xfff04007

08003884 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003890:	4851      	ldr	r0, [pc, #324]	@ (80039d8 <HAL_ADC_Start_DMA+0x154>)
 8003892:	f7ff fd81 	bl	8003398 <LL_ADC_GetMultimode>
 8003896:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fe47 	bl	8003530 <LL_ADC_REG_IsConversionOngoing>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f040 808f 	bne.w	80039c8 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_ADC_Start_DMA+0x34>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e08a      	b.n	80039ce <HAL_ADC_Start_DMA+0x14a>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b05      	cmp	r3, #5
 80038ca:	d002      	beq.n	80038d2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b09      	cmp	r3, #9
 80038d0:	d173      	bne.n	80039ba <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 feb2 	bl	800463c <ADC_Enable>
 80038d8:	4603      	mov	r3, r0
 80038da:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d166      	bne.n	80039b0 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a38      	ldr	r2, [pc, #224]	@ (80039dc <HAL_ADC_Start_DMA+0x158>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d002      	beq.n	8003906 <HAL_ADC_Start_DMA+0x82>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	e001      	b.n	800390a <HAL_ADC_Start_DMA+0x86>
 8003906:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	6812      	ldr	r2, [r2, #0]
 800390e:	4293      	cmp	r3, r2
 8003910:	d002      	beq.n	8003918 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003928:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d006      	beq.n	800393e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003934:	f023 0206 	bic.w	r2, r3, #6
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	661a      	str	r2, [r3, #96]	@ 0x60
 800393c:	e002      	b.n	8003944 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003948:	4a25      	ldr	r2, [pc, #148]	@ (80039e0 <HAL_ADC_Start_DMA+0x15c>)
 800394a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003950:	4a24      	ldr	r2, [pc, #144]	@ (80039e4 <HAL_ADC_Start_DMA+0x160>)
 8003952:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003958:	4a23      	ldr	r2, [pc, #140]	@ (80039e8 <HAL_ADC_Start_DMA+0x164>)
 800395a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	221c      	movs	r2, #28
 8003962:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0210 	orr.w	r2, r2, #16
 800397a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3340      	adds	r3, #64	@ 0x40
 8003996:	4619      	mov	r1, r3
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f002 f808 	bl	80059b0 <HAL_DMA_Start_IT>
 80039a0:	4603      	mov	r3, r0
 80039a2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fdad 	bl	8003508 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80039ae:	e00d      	b.n	80039cc <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80039b8:	e008      	b.n	80039cc <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80039c6:	e001      	b.n	80039cc <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039c8:	2302      	movs	r3, #2
 80039ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	50000300 	.word	0x50000300
 80039dc:	50000100 	.word	0x50000100
 80039e0:	08004807 	.word	0x08004807
 80039e4:	080048df 	.word	0x080048df
 80039e8:	080048fb 	.word	0x080048fb

080039ec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	@ 0x28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80039f4:	2300      	movs	r3, #0
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a08:	4883      	ldr	r0, [pc, #524]	@ (8003c18 <HAL_ADC_IRQHandler+0x22c>)
 8003a0a:	f7ff fcc5 	bl	8003398 <LL_ADC_GetMultimode>
 8003a0e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d017      	beq.n	8003a4a <HAL_ADC_IRQHandler+0x5e>
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d105      	bne.n	8003a3c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a34:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f001 f853 	bl	8004ae8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2202      	movs	r2, #2
 8003a48:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d004      	beq.n	8003a5e <HAL_ADC_IRQHandler+0x72>
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10a      	bne.n	8003a74 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8085 	beq.w	8003b74 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d07f      	beq.n	8003b74 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d105      	bne.n	8003a8c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fbdf 	bl	8003254 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d064      	beq.n	8003b66 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a5e      	ldr	r2, [pc, #376]	@ (8003c1c <HAL_ADC_IRQHandler+0x230>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d002      	beq.n	8003aac <HAL_ADC_IRQHandler+0xc0>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	e001      	b.n	8003ab0 <HAL_ADC_IRQHandler+0xc4>
 8003aac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d008      	beq.n	8003aca <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b05      	cmp	r3, #5
 8003ac2:	d002      	beq.n	8003aca <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b09      	cmp	r3, #9
 8003ac8:	d104      	bne.n	8003ad4 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	e00d      	b.n	8003af0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a50      	ldr	r2, [pc, #320]	@ (8003c1c <HAL_ADC_IRQHandler+0x230>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d002      	beq.n	8003ae4 <HAL_ADC_IRQHandler+0xf8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	e001      	b.n	8003ae8 <HAL_ADC_IRQHandler+0xfc>
 8003ae4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ae8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d135      	bne.n	8003b66 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d12e      	bne.n	8003b66 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fd0f 	bl	8003530 <LL_ADC_REG_IsConversionOngoing>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d11a      	bne.n	8003b4e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 020c 	bic.w	r2, r2, #12
 8003b26:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d112      	bne.n	8003b66 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b44:	f043 0201 	orr.w	r2, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b4c:	e00b      	b.n	8003b66 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b52:	f043 0210 	orr.w	r2, r3, #16
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5e:	f043 0201 	orr.w	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fe f986 	bl	8001e78 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	220c      	movs	r2, #12
 8003b72:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <HAL_ADC_IRQHandler+0x19c>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10b      	bne.n	8003ba0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 809e 	beq.w	8003cd0 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 8098 	beq.w	8003cd0 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d105      	bne.n	8003bb8 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff fb88 	bl	80032d2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003bc2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff fb43 	bl	8003254 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bce:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a11      	ldr	r2, [pc, #68]	@ (8003c1c <HAL_ADC_IRQHandler+0x230>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d002      	beq.n	8003be0 <HAL_ADC_IRQHandler+0x1f4>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	e001      	b.n	8003be4 <HAL_ADC_IRQHandler+0x1f8>
 8003be0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d008      	beq.n	8003bfe <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2b06      	cmp	r3, #6
 8003bf6:	d002      	beq.n	8003bfe <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2b07      	cmp	r3, #7
 8003bfc:	d104      	bne.n	8003c08 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	623b      	str	r3, [r7, #32]
 8003c06:	e011      	b.n	8003c2c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a03      	ldr	r2, [pc, #12]	@ (8003c1c <HAL_ADC_IRQHandler+0x230>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d006      	beq.n	8003c20 <HAL_ADC_IRQHandler+0x234>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	e005      	b.n	8003c24 <HAL_ADC_IRQHandler+0x238>
 8003c18:	50000300 	.word	0x50000300
 8003c1c:	50000100 	.word	0x50000100
 8003c20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c24:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d047      	beq.n	8003cc2 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d007      	beq.n	8003c4c <HAL_ADC_IRQHandler+0x260>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d03f      	beq.n	8003cc2 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d13a      	bne.n	8003cc2 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c56:	2b40      	cmp	r3, #64	@ 0x40
 8003c58:	d133      	bne.n	8003cc2 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d12e      	bne.n	8003cc2 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fc74 	bl	8003556 <LL_ADC_INJ_IsConversionOngoing>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d11a      	bne.n	8003caa <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c82:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d112      	bne.n	8003cc2 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca0:	f043 0201 	orr.w	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ca8:	e00b      	b.n	8003cc2 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cae:	f043 0210 	orr.w	r2, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cba:	f043 0201 	orr.w	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fee8 	bl	8004a98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2260      	movs	r2, #96	@ 0x60
 8003cce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d011      	beq.n	8003cfe <HAL_ADC_IRQHandler+0x312>
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00c      	beq.n	8003cfe <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f89f 	bl	8003e34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2280      	movs	r2, #128	@ 0x80
 8003cfc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d012      	beq.n	8003d2e <HAL_ADC_IRQHandler+0x342>
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00d      	beq.n	8003d2e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fece 	bl	8004ac0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d012      	beq.n	8003d5e <HAL_ADC_IRQHandler+0x372>
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00d      	beq.n	8003d5e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d46:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fec0 	bl	8004ad4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d036      	beq.n	8003dd6 <HAL_ADC_IRQHandler+0x3ea>
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d031      	beq.n	8003dd6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d102      	bne.n	8003d80 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d7e:	e014      	b.n	8003daa <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003d86:	4825      	ldr	r0, [pc, #148]	@ (8003e1c <HAL_ADC_IRQHandler+0x430>)
 8003d88:	f7ff fb14 	bl	80033b4 <LL_ADC_GetMultiDMATransfer>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003d92:	2301      	movs	r3, #1
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d96:	e008      	b.n	8003daa <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003da6:	2301      	movs	r3, #1
 8003da8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d10e      	bne.n	8003dce <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dc0:	f043 0202 	orr.w	r2, r3, #2
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f83d 	bl	8003e48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2210      	movs	r2, #16
 8003dd4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d018      	beq.n	8003e12 <HAL_ADC_IRQHandler+0x426>
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d013      	beq.n	8003e12 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfa:	f043 0208 	orr.w	r2, r3, #8
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fe4d 	bl	8004aac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003e12:	bf00      	nop
 8003e14:	3728      	adds	r7, #40	@ 0x28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	50000300 	.word	0x50000300

08003e20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b0b6      	sub	sp, #216	@ 0xd8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x22>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e3c8      	b.n	8004610 <HAL_ADC_ConfigChannel+0x7b4>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fb50 	bl	8003530 <LL_ADC_REG_IsConversionOngoing>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f040 83ad 	bne.w	80045f2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6859      	ldr	r1, [r3, #4]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f7ff f9e8 	bl	800327a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff fb3e 	bl	8003530 <LL_ADC_REG_IsConversionOngoing>
 8003eb4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fb4a 	bl	8003556 <LL_ADC_INJ_IsConversionOngoing>
 8003ec2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ec6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f040 81d9 	bne.w	8004282 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ed0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f040 81d4 	bne.w	8004282 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ee2:	d10f      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2200      	movs	r2, #0
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f7ff fa02 	bl	80032f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff f996 	bl	800322e <LL_ADC_SetSamplingTimeCommonConfig>
 8003f02:	e00e      	b.n	8003f22 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6819      	ldr	r1, [r3, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	461a      	mov	r2, r3
 8003f12:	f7ff f9f1 	bl	80032f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff f986 	bl	800322e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	08db      	lsrs	r3, r3, #3
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d022      	beq.n	8003f8a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6818      	ldr	r0, [r3, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6919      	ldr	r1, [r3, #16]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f54:	f7ff f8e0 	bl	8003118 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	6919      	ldr	r1, [r3, #16]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	461a      	mov	r2, r3
 8003f66:	f7ff f92c 	bl	80031c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d102      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x124>
 8003f7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f7e:	e000      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x126>
 8003f80:	2300      	movs	r3, #0
 8003f82:	461a      	mov	r2, r3
 8003f84:	f7ff f938 	bl	80031f8 <LL_ADC_SetOffsetSaturation>
 8003f88:	e17b      	b.n	8004282 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff f8e5 	bl	8003160 <LL_ADC_GetOffsetChannel>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x15a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff f8da 	bl	8003160 <LL_ADC_GetOffsetChannel>
 8003fac:	4603      	mov	r3, r0
 8003fae:	0e9b      	lsrs	r3, r3, #26
 8003fb0:	f003 021f 	and.w	r2, r3, #31
 8003fb4:	e01e      	b.n	8003ff4 <HAL_ADC_ConfigChannel+0x198>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff f8cf 	bl	8003160 <LL_ADC_GetOffsetChannel>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003fcc:	fa93 f3a3 	rbit	r3, r3
 8003fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	e004      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003fe8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fec:	fab3 f383 	clz	r3, r3
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <HAL_ADC_ConfigChannel+0x1b0>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	0e9b      	lsrs	r3, r3, #26
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	e018      	b.n	800403e <HAL_ADC_ConfigChannel+0x1e2>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004018:	fa93 f3a3 	rbit	r3, r3
 800401c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004024:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004030:	2320      	movs	r3, #32
 8004032:	e004      	b.n	800403e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004034:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004038:	fab3 f383 	clz	r3, r3
 800403c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800403e:	429a      	cmp	r2, r3
 8004040:	d106      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2200      	movs	r2, #0
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff f89e 	bl	800318c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2101      	movs	r1, #1
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff f882 	bl	8003160 <LL_ADC_GetOffsetChannel>
 800405c:	4603      	mov	r3, r0
 800405e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10a      	bne.n	800407c <HAL_ADC_ConfigChannel+0x220>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2101      	movs	r1, #1
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff f877 	bl	8003160 <LL_ADC_GetOffsetChannel>
 8004072:	4603      	mov	r3, r0
 8004074:	0e9b      	lsrs	r3, r3, #26
 8004076:	f003 021f 	and.w	r2, r3, #31
 800407a:	e01e      	b.n	80040ba <HAL_ADC_ConfigChannel+0x25e>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2101      	movs	r1, #1
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff f86c 	bl	8003160 <LL_ADC_GetOffsetChannel>
 8004088:	4603      	mov	r3, r0
 800408a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004092:	fa93 f3a3 	rbit	r3, r3
 8004096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800409a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800409e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80040a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80040aa:	2320      	movs	r3, #32
 80040ac:	e004      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80040ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040b2:	fab3 f383 	clz	r3, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d105      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x276>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	0e9b      	lsrs	r3, r3, #26
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	e018      	b.n	8004104 <HAL_ADC_ConfigChannel+0x2a8>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040de:	fa93 f3a3 	rbit	r3, r3
 80040e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80040e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80040ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80040f6:	2320      	movs	r3, #32
 80040f8:	e004      	b.n	8004104 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80040fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040fe:	fab3 f383 	clz	r3, r3
 8004102:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004104:	429a      	cmp	r2, r3
 8004106:	d106      	bne.n	8004116 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2200      	movs	r2, #0
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff f83b 	bl	800318c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2102      	movs	r1, #2
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff f81f 	bl	8003160 <LL_ADC_GetOffsetChannel>
 8004122:	4603      	mov	r3, r0
 8004124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x2e6>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2102      	movs	r1, #2
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff f814 	bl	8003160 <LL_ADC_GetOffsetChannel>
 8004138:	4603      	mov	r3, r0
 800413a:	0e9b      	lsrs	r3, r3, #26
 800413c:	f003 021f 	and.w	r2, r3, #31
 8004140:	e01e      	b.n	8004180 <HAL_ADC_ConfigChannel+0x324>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2102      	movs	r1, #2
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff f809 	bl	8003160 <LL_ADC_GetOffsetChannel>
 800414e:	4603      	mov	r3, r0
 8004150:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004154:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004158:	fa93 f3a3 	rbit	r3, r3
 800415c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004160:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004164:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004168:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004170:	2320      	movs	r3, #32
 8004172:	e004      	b.n	800417e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004174:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004178:	fab3 f383 	clz	r3, r3
 800417c:	b2db      	uxtb	r3, r3
 800417e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x33c>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	0e9b      	lsrs	r3, r3, #26
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	e016      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x36a>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80041aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80041b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80041b8:	2320      	movs	r3, #32
 80041ba:	e004      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80041bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041c0:	fab3 f383 	clz	r3, r3
 80041c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d106      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2200      	movs	r2, #0
 80041d0:	2102      	movs	r1, #2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe ffda 	bl	800318c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2103      	movs	r1, #3
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe ffbe 	bl	8003160 <LL_ADC_GetOffsetChannel>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10a      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x3a8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2103      	movs	r1, #3
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe ffb3 	bl	8003160 <LL_ADC_GetOffsetChannel>
 80041fa:	4603      	mov	r3, r0
 80041fc:	0e9b      	lsrs	r3, r3, #26
 80041fe:	f003 021f 	and.w	r2, r3, #31
 8004202:	e017      	b.n	8004234 <HAL_ADC_ConfigChannel+0x3d8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2103      	movs	r1, #3
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe ffa8 	bl	8003160 <LL_ADC_GetOffsetChannel>
 8004210:	4603      	mov	r3, r0
 8004212:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004214:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004216:	fa93 f3a3 	rbit	r3, r3
 800421a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800421c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800421e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004220:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004226:	2320      	movs	r3, #32
 8004228:	e003      	b.n	8004232 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800422a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800422c:	fab3 f383 	clz	r3, r3
 8004230:	b2db      	uxtb	r3, r3
 8004232:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <HAL_ADC_ConfigChannel+0x3f0>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	0e9b      	lsrs	r3, r3, #26
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	e011      	b.n	8004270 <HAL_ADC_ConfigChannel+0x414>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800425a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800425c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800425e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004264:	2320      	movs	r3, #32
 8004266:	e003      	b.n	8004270 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004270:	429a      	cmp	r2, r3
 8004272:	d106      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2200      	movs	r2, #0
 800427a:	2103      	movs	r1, #3
 800427c:	4618      	mov	r0, r3
 800427e:	f7fe ff85 	bl	800318c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff f918 	bl	80034bc <LL_ADC_IsEnabled>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	f040 8140 	bne.w	8004514 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	6819      	ldr	r1, [r3, #0]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	461a      	mov	r2, r3
 80042a2:	f7ff f855 	bl	8003350 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	4a8f      	ldr	r2, [pc, #572]	@ (80044e8 <HAL_ADC_ConfigChannel+0x68c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	f040 8131 	bne.w	8004514 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <HAL_ADC_ConfigChannel+0x47e>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	0e9b      	lsrs	r3, r3, #26
 80042c8:	3301      	adds	r3, #1
 80042ca:	f003 031f 	and.w	r3, r3, #31
 80042ce:	2b09      	cmp	r3, #9
 80042d0:	bf94      	ite	ls
 80042d2:	2301      	movls	r3, #1
 80042d4:	2300      	movhi	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	e019      	b.n	800430e <HAL_ADC_ConfigChannel+0x4b2>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80042e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042ea:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80042ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80042f2:	2320      	movs	r3, #32
 80042f4:	e003      	b.n	80042fe <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80042f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042f8:	fab3 f383 	clz	r3, r3
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	3301      	adds	r3, #1
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	2b09      	cmp	r3, #9
 8004306:	bf94      	ite	ls
 8004308:	2301      	movls	r3, #1
 800430a:	2300      	movhi	r3, #0
 800430c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800430e:	2b00      	cmp	r3, #0
 8004310:	d079      	beq.n	8004406 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431a:	2b00      	cmp	r3, #0
 800431c:	d107      	bne.n	800432e <HAL_ADC_ConfigChannel+0x4d2>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0e9b      	lsrs	r3, r3, #26
 8004324:	3301      	adds	r3, #1
 8004326:	069b      	lsls	r3, r3, #26
 8004328:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800432c:	e015      	b.n	800435a <HAL_ADC_ConfigChannel+0x4fe>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800433c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800433e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004346:	2320      	movs	r3, #32
 8004348:	e003      	b.n	8004352 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800434a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800434c:	fab3 f383 	clz	r3, r3
 8004350:	b2db      	uxtb	r3, r3
 8004352:	3301      	adds	r3, #1
 8004354:	069b      	lsls	r3, r3, #26
 8004356:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <HAL_ADC_ConfigChannel+0x51e>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	0e9b      	lsrs	r3, r3, #26
 800436c:	3301      	adds	r3, #1
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	2101      	movs	r1, #1
 8004374:	fa01 f303 	lsl.w	r3, r1, r3
 8004378:	e017      	b.n	80043aa <HAL_ADC_ConfigChannel+0x54e>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004382:	fa93 f3a3 	rbit	r3, r3
 8004386:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800438a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800438c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004392:	2320      	movs	r3, #32
 8004394:	e003      	b.n	800439e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004396:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004398:	fab3 f383 	clz	r3, r3
 800439c:	b2db      	uxtb	r3, r3
 800439e:	3301      	adds	r3, #1
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	2101      	movs	r1, #1
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	ea42 0103 	orr.w	r1, r2, r3
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x574>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	0e9b      	lsrs	r3, r3, #26
 80043c0:	3301      	adds	r3, #1
 80043c2:	f003 021f 	and.w	r2, r3, #31
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	051b      	lsls	r3, r3, #20
 80043ce:	e018      	b.n	8004402 <HAL_ADC_ConfigChannel+0x5a6>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d8:	fa93 f3a3 	rbit	r3, r3
 80043dc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80043de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80043e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80043e8:	2320      	movs	r3, #32
 80043ea:	e003      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80043ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ee:	fab3 f383 	clz	r3, r3
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	3301      	adds	r3, #1
 80043f6:	f003 021f 	and.w	r2, r3, #31
 80043fa:	4613      	mov	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4413      	add	r3, r2
 8004400:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004402:	430b      	orrs	r3, r1
 8004404:	e081      	b.n	800450a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440e:	2b00      	cmp	r3, #0
 8004410:	d107      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x5c6>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	0e9b      	lsrs	r3, r3, #26
 8004418:	3301      	adds	r3, #1
 800441a:	069b      	lsls	r3, r3, #26
 800441c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004420:	e015      	b.n	800444e <HAL_ADC_ConfigChannel+0x5f2>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442a:	fa93 f3a3 	rbit	r3, r3
 800442e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004432:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800443a:	2320      	movs	r3, #32
 800443c:	e003      	b.n	8004446 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800443e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004440:	fab3 f383 	clz	r3, r3
 8004444:	b2db      	uxtb	r3, r3
 8004446:	3301      	adds	r3, #1
 8004448:	069b      	lsls	r3, r3, #26
 800444a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <HAL_ADC_ConfigChannel+0x612>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	0e9b      	lsrs	r3, r3, #26
 8004460:	3301      	adds	r3, #1
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	2101      	movs	r1, #1
 8004468:	fa01 f303 	lsl.w	r3, r1, r3
 800446c:	e017      	b.n	800449e <HAL_ADC_ConfigChannel+0x642>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	fa93 f3a3 	rbit	r3, r3
 800447a:	61fb      	str	r3, [r7, #28]
  return result;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004486:	2320      	movs	r3, #32
 8004488:	e003      	b.n	8004492 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	fab3 f383 	clz	r3, r3
 8004490:	b2db      	uxtb	r3, r3
 8004492:	3301      	adds	r3, #1
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	2101      	movs	r1, #1
 800449a:	fa01 f303 	lsl.w	r3, r1, r3
 800449e:	ea42 0103 	orr.w	r1, r2, r3
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10d      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x66e>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	0e9b      	lsrs	r3, r3, #26
 80044b4:	3301      	adds	r3, #1
 80044b6:	f003 021f 	and.w	r2, r3, #31
 80044ba:	4613      	mov	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4413      	add	r3, r2
 80044c0:	3b1e      	subs	r3, #30
 80044c2:	051b      	lsls	r3, r3, #20
 80044c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044c8:	e01e      	b.n	8004508 <HAL_ADC_ConfigChannel+0x6ac>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	fa93 f3a3 	rbit	r3, r3
 80044d6:	613b      	str	r3, [r7, #16]
  return result;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80044e2:	2320      	movs	r3, #32
 80044e4:	e006      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x698>
 80044e6:	bf00      	nop
 80044e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	fab3 f383 	clz	r3, r3
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	3301      	adds	r3, #1
 80044f6:	f003 021f 	and.w	r2, r3, #31
 80044fa:	4613      	mov	r3, r2
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	4413      	add	r3, r2
 8004500:	3b1e      	subs	r3, #30
 8004502:	051b      	lsls	r3, r3, #20
 8004504:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004508:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800450e:	4619      	mov	r1, r3
 8004510:	f7fe fef2 	bl	80032f8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4b3f      	ldr	r3, [pc, #252]	@ (8004618 <HAL_ADC_ConfigChannel+0x7bc>)
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d071      	beq.n	8004604 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004520:	483e      	ldr	r0, [pc, #248]	@ (800461c <HAL_ADC_ConfigChannel+0x7c0>)
 8004522:	f7fe fdeb 	bl	80030fc <LL_ADC_GetCommonPathInternalCh>
 8004526:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a3c      	ldr	r2, [pc, #240]	@ (8004620 <HAL_ADC_ConfigChannel+0x7c4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d004      	beq.n	800453e <HAL_ADC_ConfigChannel+0x6e2>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a3a      	ldr	r2, [pc, #232]	@ (8004624 <HAL_ADC_ConfigChannel+0x7c8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d127      	bne.n	800458e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800453e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d121      	bne.n	800458e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004552:	d157      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004554:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004558:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800455c:	4619      	mov	r1, r3
 800455e:	482f      	ldr	r0, [pc, #188]	@ (800461c <HAL_ADC_ConfigChannel+0x7c0>)
 8004560:	f7fe fdb9 	bl	80030d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004564:	4b30      	ldr	r3, [pc, #192]	@ (8004628 <HAL_ADC_ConfigChannel+0x7cc>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	099b      	lsrs	r3, r3, #6
 800456a:	4a30      	ldr	r2, [pc, #192]	@ (800462c <HAL_ADC_ConfigChannel+0x7d0>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	099b      	lsrs	r3, r3, #6
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	4613      	mov	r3, r2
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800457e:	e002      	b.n	8004586 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3b01      	subs	r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f9      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800458c:	e03a      	b.n	8004604 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a27      	ldr	r2, [pc, #156]	@ (8004630 <HAL_ADC_ConfigChannel+0x7d4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d113      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004598:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800459c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10d      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a22      	ldr	r2, [pc, #136]	@ (8004634 <HAL_ADC_ConfigChannel+0x7d8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d02a      	beq.n	8004604 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045b6:	4619      	mov	r1, r3
 80045b8:	4818      	ldr	r0, [pc, #96]	@ (800461c <HAL_ADC_ConfigChannel+0x7c0>)
 80045ba:	f7fe fd8c 	bl	80030d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045be:	e021      	b.n	8004604 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004638 <HAL_ADC_ConfigChannel+0x7dc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d11c      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d116      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a16      	ldr	r2, [pc, #88]	@ (8004634 <HAL_ADC_ConfigChannel+0x7d8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d011      	beq.n	8004604 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045e8:	4619      	mov	r1, r3
 80045ea:	480c      	ldr	r0, [pc, #48]	@ (800461c <HAL_ADC_ConfigChannel+0x7c0>)
 80045ec:	f7fe fd73 	bl	80030d6 <LL_ADC_SetCommonPathInternalCh>
 80045f0:	e008      	b.n	8004604 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f6:	f043 0220 	orr.w	r2, r3, #32
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800460c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004610:	4618      	mov	r0, r3
 8004612:	37d8      	adds	r7, #216	@ 0xd8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	80080000 	.word	0x80080000
 800461c:	50000300 	.word	0x50000300
 8004620:	c3210000 	.word	0xc3210000
 8004624:	90c00010 	.word	0x90c00010
 8004628:	20000004 	.word	0x20000004
 800462c:	053e2d63 	.word	0x053e2d63
 8004630:	c7520000 	.word	0xc7520000
 8004634:	50000100 	.word	0x50000100
 8004638:	cb840000 	.word	0xcb840000

0800463c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004644:	2300      	movs	r3, #0
 8004646:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe ff35 	bl	80034bc <LL_ADC_IsEnabled>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d169      	bne.n	800472c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	4b36      	ldr	r3, [pc, #216]	@ (8004738 <ADC_Enable+0xfc>)
 8004660:	4013      	ands	r3, r2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00d      	beq.n	8004682 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466a:	f043 0210 	orr.w	r2, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e055      	b.n	800472e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7fe fef0 	bl	800346c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800468c:	482b      	ldr	r0, [pc, #172]	@ (800473c <ADC_Enable+0x100>)
 800468e:	f7fe fd35 	bl	80030fc <LL_ADC_GetCommonPathInternalCh>
 8004692:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004694:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004698:	2b00      	cmp	r3, #0
 800469a:	d013      	beq.n	80046c4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800469c:	4b28      	ldr	r3, [pc, #160]	@ (8004740 <ADC_Enable+0x104>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	099b      	lsrs	r3, r3, #6
 80046a2:	4a28      	ldr	r2, [pc, #160]	@ (8004744 <ADC_Enable+0x108>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	099b      	lsrs	r3, r3, #6
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	4613      	mov	r3, r2
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80046b6:	e002      	b.n	80046be <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f9      	bne.n	80046b8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80046c4:	f7fe fcc6 	bl	8003054 <HAL_GetTick>
 80046c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046ca:	e028      	b.n	800471e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe fef3 	bl	80034bc <LL_ADC_IsEnabled>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d104      	bne.n	80046e6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fe fec3 	bl	800346c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046e6:	f7fe fcb5 	bl	8003054 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d914      	bls.n	800471e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d00d      	beq.n	800471e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004706:	f043 0210 	orr.w	r2, r3, #16
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004712:	f043 0201 	orr.w	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e007      	b.n	800472e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b01      	cmp	r3, #1
 800472a:	d1cf      	bne.n	80046cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	8000003f 	.word	0x8000003f
 800473c:	50000300 	.word	0x50000300
 8004740:	20000004 	.word	0x20000004
 8004744:	053e2d63 	.word	0x053e2d63

08004748 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe fec4 	bl	80034e2 <LL_ADC_IsDisableOngoing>
 800475a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe feab 	bl	80034bc <LL_ADC_IsEnabled>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d047      	beq.n	80047fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d144      	bne.n	80047fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 030d 	and.w	r3, r3, #13
 800477c:	2b01      	cmp	r3, #1
 800477e:	d10c      	bne.n	800479a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f7fe fe85 	bl	8003494 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2203      	movs	r2, #3
 8004790:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004792:	f7fe fc5f 	bl	8003054 <HAL_GetTick>
 8004796:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004798:	e029      	b.n	80047ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479e:	f043 0210 	orr.w	r2, r3, #16
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047aa:	f043 0201 	orr.w	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e023      	b.n	80047fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80047b6:	f7fe fc4d 	bl	8003054 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d914      	bls.n	80047ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00d      	beq.n	80047ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d6:	f043 0210 	orr.w	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e2:	f043 0201 	orr.w	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e007      	b.n	80047fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1dc      	bne.n	80047b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004812:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004818:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800481c:	2b00      	cmp	r3, #0
 800481e:	d14b      	bne.n	80048b8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004824:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d021      	beq.n	800487e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe fd08 	bl	8003254 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d032      	beq.n	80048b0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d12b      	bne.n	80048b0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004868:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d11f      	bne.n	80048b0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004874:	f043 0201 	orr.w	r2, r3, #1
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800487c:	e018      	b.n	80048b0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d111      	bne.n	80048b0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004890:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a8:	f043 0201 	orr.w	r2, r3, #1
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7fd fae1 	bl	8001e78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80048b6:	e00e      	b.n	80048d6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f7ff fabf 	bl	8003e48 <HAL_ADC_ErrorCallback>
}
 80048ca:	e004      	b.n	80048d6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4798      	blx	r3
}
 80048d6:	bf00      	nop
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f7ff fa97 	bl	8003e20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048f2:	bf00      	nop
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004906:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004918:	f043 0204 	orr.w	r2, r3, #4
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f7ff fa91 	bl	8003e48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <LL_ADC_IsEnabled>:
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <LL_ADC_IsEnabled+0x18>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <LL_ADC_IsEnabled+0x1a>
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <LL_ADC_StartCalibration>:
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004966:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004970:	4313      	orrs	r3, r2
 8004972:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	609a      	str	r2, [r3, #8]
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <LL_ADC_IsCalibrationOnGoing>:
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004996:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800499a:	d101      	bne.n	80049a0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <LL_ADC_REG_IsConversionOngoing>:
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d101      	bne.n	80049c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80049de:	2300      	movs	r3, #0
 80049e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_ADCEx_Calibration_Start+0x1c>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e04d      	b.n	8004a8c <HAL_ADCEx_Calibration_Start+0xb8>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff fea5 	bl	8004748 <ADC_Disable>
 80049fe:	4603      	mov	r3, r0
 8004a00:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d136      	bne.n	8004a76 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004a10:	f023 0302 	bic.w	r3, r3, #2
 8004a14:	f043 0202 	orr.w	r2, r3, #2
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6839      	ldr	r1, [r7, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff ff96 	bl	8004954 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a28:	e014      	b.n	8004a54 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a18      	ldr	r2, [pc, #96]	@ (8004a94 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d90d      	bls.n	8004a54 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3c:	f023 0312 	bic.w	r3, r3, #18
 8004a40:	f043 0210 	orr.w	r2, r3, #16
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e01b      	b.n	8004a8c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff ff94 	bl	8004986 <LL_ADC_IsCalibrationOnGoing>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e2      	bne.n	8004a2a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a68:	f023 0303 	bic.w	r3, r3, #3
 8004a6c:	f043 0201 	orr.w	r2, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a74:	e005      	b.n	8004a82 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7a:	f043 0210 	orr.w	r2, r3, #16
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	0004de01 	.word	0x0004de01

08004a98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004afc:	b590      	push	{r4, r7, lr}
 8004afe:	b0a1      	sub	sp, #132	@ 0x84
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b16:	2302      	movs	r3, #2
 8004b18:	e08b      	b.n	8004c32 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004b22:	2300      	movs	r3, #0
 8004b24:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004b26:	2300      	movs	r3, #0
 8004b28:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b32:	d102      	bne.n	8004b3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b34:	4b41      	ldr	r3, [pc, #260]	@ (8004c3c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	e001      	b.n	8004b3e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b48:	f043 0220 	orr.w	r2, r3, #32
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e06a      	b.n	8004c32 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff ff25 	bl	80049ae <LL_ADC_REG_IsConversionOngoing>
 8004b64:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff ff1f 	bl	80049ae <LL_ADC_REG_IsConversionOngoing>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d14c      	bne.n	8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004b76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d149      	bne.n	8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004b7c:	4b30      	ldr	r3, [pc, #192]	@ (8004c40 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004b7e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d028      	beq.n	8004bda <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004b88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	6859      	ldr	r1, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b9a:	035b      	lsls	r3, r3, #13
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ba2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ba4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ba8:	f7ff fec1 	bl	800492e <LL_ADC_IsEnabled>
 8004bac:	4604      	mov	r4, r0
 8004bae:	4823      	ldr	r0, [pc, #140]	@ (8004c3c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004bb0:	f7ff febd 	bl	800492e <LL_ADC_IsEnabled>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4323      	orrs	r3, r4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d133      	bne.n	8004c24 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004bbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004bc4:	f023 030f 	bic.w	r3, r3, #15
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	6811      	ldr	r1, [r2, #0]
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	6892      	ldr	r2, [r2, #8]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bd6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004bd8:	e024      	b.n	8004c24 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004bda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004be2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004be4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004be6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004bea:	f7ff fea0 	bl	800492e <LL_ADC_IsEnabled>
 8004bee:	4604      	mov	r4, r0
 8004bf0:	4812      	ldr	r0, [pc, #72]	@ (8004c3c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004bf2:	f7ff fe9c 	bl	800492e <LL_ADC_IsEnabled>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4323      	orrs	r3, r4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d112      	bne.n	8004c24 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004bfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c06:	f023 030f 	bic.w	r3, r3, #15
 8004c0a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004c0c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c0e:	e009      	b.n	8004c24 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c14:	f043 0220 	orr.w	r2, r3, #32
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004c22:	e000      	b.n	8004c26 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c2e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3784      	adds	r7, #132	@ 0x84
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd90      	pop	{r4, r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	50000100 	.word	0x50000100
 8004c40:	50000300 	.word	0x50000300

08004c44 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004c4c:	4b05      	ldr	r3, [pc, #20]	@ (8004c64 <LL_EXTI_EnableIT_0_31+0x20>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4904      	ldr	r1, [pc, #16]	@ (8004c64 <LL_EXTI_EnableIT_0_31+0x20>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	600b      	str	r3, [r1, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	40010400 	.word	0x40010400

08004c68 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004c70:	4b06      	ldr	r3, [pc, #24]	@ (8004c8c <LL_EXTI_DisableIT_0_31+0x24>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	43db      	mvns	r3, r3
 8004c78:	4904      	ldr	r1, [pc, #16]	@ (8004c8c <LL_EXTI_DisableIT_0_31+0x24>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40010400 	.word	0x40010400

08004c90 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004c98:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	4904      	ldr	r1, [pc, #16]	@ (8004cb0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	604b      	str	r3, [r1, #4]

}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	40010400 	.word	0x40010400

08004cb4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004cbc:	4b06      	ldr	r3, [pc, #24]	@ (8004cd8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	4904      	ldr	r1, [pc, #16]	@ (8004cd8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	604b      	str	r3, [r1, #4]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40010400 	.word	0x40010400

08004cdc <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004ce4:	4b05      	ldr	r3, [pc, #20]	@ (8004cfc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	4904      	ldr	r1, [pc, #16]	@ (8004cfc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	608b      	str	r3, [r1, #8]

}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	40010400 	.word	0x40010400

08004d00 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004d08:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	4904      	ldr	r1, [pc, #16]	@ (8004d24 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]

}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40010400 	.word	0x40010400

08004d28 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004d30:	4b05      	ldr	r3, [pc, #20]	@ (8004d48 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	4904      	ldr	r1, [pc, #16]	@ (8004d48 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60cb      	str	r3, [r1, #12]
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40010400 	.word	0x40010400

08004d4c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004d54:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	4904      	ldr	r1, [pc, #16]	@ (8004d70 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	60cb      	str	r3, [r1, #12]
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40010400 	.word	0x40010400

08004d74 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004d7c:	4b07      	ldr	r3, [pc, #28]	@ (8004d9c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004d7e:	695a      	ldr	r2, [r3, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4013      	ands	r3, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d101      	bne.n	8004d8e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	40010400 	.word	0x40010400

08004da0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004da8:	4a04      	ldr	r2, [pc, #16]	@ (8004dbc <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6153      	str	r3, [r2, #20]
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40010400 	.word	0x40010400

08004dc0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	77fb      	strb	r3, [r7, #31]
 8004dda:	e0bc      	b.n	8004f56 <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004de6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dea:	d102      	bne.n	8004df2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e0b1      	b.n	8004f56 <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	7f5b      	ldrb	r3, [r3, #29]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d108      	bne.n	8004e0e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7fd fd43 	bl	8002894 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e18:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4b48      	ldr	r3, [pc, #288]	@ (8004f60 <HAL_COMP_Init+0x1a0>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6812      	ldr	r2, [r2, #0]
 8004e46:	6979      	ldr	r1, [r7, #20]
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d016      	beq.n	8004e88 <HAL_COMP_Init+0xc8>
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d113      	bne.n	8004e88 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e60:	4b40      	ldr	r3, [pc, #256]	@ (8004f64 <HAL_COMP_Init+0x1a4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	099b      	lsrs	r3, r3, #6
 8004e66:	4a40      	ldr	r2, [pc, #256]	@ (8004f68 <HAL_COMP_Init+0x1a8>)
 8004e68:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6c:	099b      	lsrs	r3, r3, #6
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004e7a:	e002      	b.n	8004e82 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f9      	bne.n	8004e7c <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a37      	ldr	r2, [pc, #220]	@ (8004f6c <HAL_COMP_Init+0x1ac>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d012      	beq.n	8004eb8 <HAL_COMP_Init+0xf8>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a36      	ldr	r2, [pc, #216]	@ (8004f70 <HAL_COMP_Init+0x1b0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_COMP_Init+0xf2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a34      	ldr	r2, [pc, #208]	@ (8004f74 <HAL_COMP_Init+0x1b4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d102      	bne.n	8004eac <HAL_COMP_Init+0xec>
 8004ea6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004eaa:	e007      	b.n	8004ebc <HAL_COMP_Init+0xfc>
 8004eac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004eb0:	e004      	b.n	8004ebc <HAL_COMP_Init+0xfc>
 8004eb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004eb6:	e001      	b.n	8004ebc <HAL_COMP_Init+0xfc>
 8004eb8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004ebc:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d037      	beq.n	8004f3a <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f003 0310 	and.w	r3, r3, #16
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8004ed6:	6938      	ldr	r0, [r7, #16]
 8004ed8:	f7ff ff00 	bl	8004cdc <LL_EXTI_EnableRisingTrig_0_31>
 8004edc:	e002      	b.n	8004ee4 <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8004ede:	6938      	ldr	r0, [r7, #16]
 8004ee0:	f7ff ff0e 	bl	8004d00 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004ef0:	6938      	ldr	r0, [r7, #16]
 8004ef2:	f7ff ff19 	bl	8004d28 <LL_EXTI_EnableFallingTrig_0_31>
 8004ef6:	e002      	b.n	8004efe <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8004ef8:	6938      	ldr	r0, [r7, #16]
 8004efa:	f7ff ff27 	bl	8004d4c <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 8004efe:	6938      	ldr	r0, [r7, #16]
 8004f00:	f7ff ff4e 	bl	8004da0 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 8004f10:	6938      	ldr	r0, [r7, #16]
 8004f12:	f7ff febd 	bl	8004c90 <LL_EXTI_EnableEvent_0_31>
 8004f16:	e002      	b.n	8004f1e <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004f18:	6938      	ldr	r0, [r7, #16]
 8004f1a:	f7ff fecb 	bl	8004cb4 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 8004f2a:	6938      	ldr	r0, [r7, #16]
 8004f2c:	f7ff fe8a 	bl	8004c44 <LL_EXTI_EnableIT_0_31>
 8004f30:	e009      	b.n	8004f46 <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 8004f32:	6938      	ldr	r0, [r7, #16]
 8004f34:	f7ff fe98 	bl	8004c68 <LL_EXTI_DisableIT_0_31>
 8004f38:	e005      	b.n	8004f46 <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 8004f3a:	6938      	ldr	r0, [r7, #16]
 8004f3c:	f7ff feba 	bl	8004cb4 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8004f40:	6938      	ldr	r0, [r7, #16]
 8004f42:	f7ff fe91 	bl	8004c68 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	7f5b      	ldrb	r3, [r3, #29]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d102      	bne.n	8004f56 <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8004f56:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3720      	adds	r7, #32
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	ff007e0f 	.word	0xff007e0f
 8004f64:	20000004 	.word	0x20000004
 8004f68:	053e2d63 	.word	0x053e2d63
 8004f6c:	40010200 	.word	0x40010200
 8004f70:	40010204 	.word	0x40010204
 8004f74:	40010208 	.word	0x40010208

08004f78 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d102      	bne.n	8004f94 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	73fb      	strb	r3, [r7, #15]
 8004f92:	e02e      	b.n	8004ff2 <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fa2:	d102      	bne.n	8004faa <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
 8004fa8:	e023      	b.n	8004ff2 <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	7f5b      	ldrb	r3, [r3, #29]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d11c      	bne.n	8004fee <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 8004fca:	4b0d      	ldr	r3, [pc, #52]	@ (8005000 <HAL_COMP_Start+0x88>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a0d      	ldr	r2, [pc, #52]	@ (8005004 <HAL_COMP_Start+0x8c>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	0cda      	lsrs	r2, r3, #19
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004fde:	e002      	b.n	8004fe6 <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f9      	bne.n	8004fe0 <HAL_COMP_Start+0x68>
 8004fec:	e001      	b.n	8004ff2 <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	20000004 	.word	0x20000004
 8005004:	431bde83 	.word	0x431bde83

08005008 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a17      	ldr	r2, [pc, #92]	@ (8005074 <HAL_COMP_IRQHandler+0x6c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d012      	beq.n	8005040 <HAL_COMP_IRQHandler+0x38>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a16      	ldr	r2, [pc, #88]	@ (8005078 <HAL_COMP_IRQHandler+0x70>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00a      	beq.n	800503a <HAL_COMP_IRQHandler+0x32>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a14      	ldr	r2, [pc, #80]	@ (800507c <HAL_COMP_IRQHandler+0x74>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d102      	bne.n	8005034 <HAL_COMP_IRQHandler+0x2c>
 800502e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005032:	e007      	b.n	8005044 <HAL_COMP_IRQHandler+0x3c>
 8005034:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005038:	e004      	b.n	8005044 <HAL_COMP_IRQHandler+0x3c>
 800503a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800503e:	e001      	b.n	8005044 <HAL_COMP_IRQHandler+0x3c>
 8005040:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005044:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800504a:	68b8      	ldr	r0, [r7, #8]
 800504c:	f7ff fe92 	bl	8004d74 <LL_EXTI_IsActiveFlag_0_31>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 8005056:	2301      	movs	r3, #1
 8005058:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 8005060:	68b8      	ldr	r0, [r7, #8]
 8005062:	f7ff fe9d 	bl	8004da0 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fd f8c8 	bl	80021fc <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40010200 	.word	0x40010200
 8005078:	40010204 	.word	0x40010204
 800507c:	40010208 	.word	0x40010208

08005080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005090:	4b0c      	ldr	r3, [pc, #48]	@ (80050c4 <__NVIC_SetPriorityGrouping+0x44>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800509c:	4013      	ands	r3, r2
 800509e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050b2:	4a04      	ldr	r2, [pc, #16]	@ (80050c4 <__NVIC_SetPriorityGrouping+0x44>)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	60d3      	str	r3, [r2, #12]
}
 80050b8:	bf00      	nop
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	e000ed00 	.word	0xe000ed00

080050c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050cc:	4b04      	ldr	r3, [pc, #16]	@ (80050e0 <__NVIC_GetPriorityGrouping+0x18>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	0a1b      	lsrs	r3, r3, #8
 80050d2:	f003 0307 	and.w	r3, r3, #7
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	e000ed00 	.word	0xe000ed00

080050e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4603      	mov	r3, r0
 80050ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	db0b      	blt.n	800510e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	f003 021f 	and.w	r2, r3, #31
 80050fc:	4907      	ldr	r1, [pc, #28]	@ (800511c <__NVIC_EnableIRQ+0x38>)
 80050fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	2001      	movs	r0, #1
 8005106:	fa00 f202 	lsl.w	r2, r0, r2
 800510a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	e000e100 	.word	0xe000e100

08005120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	6039      	str	r1, [r7, #0]
 800512a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800512c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005130:	2b00      	cmp	r3, #0
 8005132:	db0a      	blt.n	800514a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	b2da      	uxtb	r2, r3
 8005138:	490c      	ldr	r1, [pc, #48]	@ (800516c <__NVIC_SetPriority+0x4c>)
 800513a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513e:	0112      	lsls	r2, r2, #4
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	440b      	add	r3, r1
 8005144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005148:	e00a      	b.n	8005160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	4908      	ldr	r1, [pc, #32]	@ (8005170 <__NVIC_SetPriority+0x50>)
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	3b04      	subs	r3, #4
 8005158:	0112      	lsls	r2, r2, #4
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	440b      	add	r3, r1
 800515e:	761a      	strb	r2, [r3, #24]
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	e000e100 	.word	0xe000e100
 8005170:	e000ed00 	.word	0xe000ed00

08005174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005174:	b480      	push	{r7}
 8005176:	b089      	sub	sp, #36	@ 0x24
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f1c3 0307 	rsb	r3, r3, #7
 800518e:	2b04      	cmp	r3, #4
 8005190:	bf28      	it	cs
 8005192:	2304      	movcs	r3, #4
 8005194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	3304      	adds	r3, #4
 800519a:	2b06      	cmp	r3, #6
 800519c:	d902      	bls.n	80051a4 <NVIC_EncodePriority+0x30>
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	3b03      	subs	r3, #3
 80051a2:	e000      	b.n	80051a6 <NVIC_EncodePriority+0x32>
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051a8:	f04f 32ff 	mov.w	r2, #4294967295
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	43da      	mvns	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	401a      	ands	r2, r3
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051bc:	f04f 31ff 	mov.w	r1, #4294967295
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	fa01 f303 	lsl.w	r3, r1, r3
 80051c6:	43d9      	mvns	r1, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051cc:	4313      	orrs	r3, r2
         );
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3724      	adds	r7, #36	@ 0x24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
	...

080051dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051ec:	d301      	bcc.n	80051f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051ee:	2301      	movs	r3, #1
 80051f0:	e00f      	b.n	8005212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051f2:	4a0a      	ldr	r2, [pc, #40]	@ (800521c <SysTick_Config+0x40>)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051fa:	210f      	movs	r1, #15
 80051fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005200:	f7ff ff8e 	bl	8005120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005204:	4b05      	ldr	r3, [pc, #20]	@ (800521c <SysTick_Config+0x40>)
 8005206:	2200      	movs	r2, #0
 8005208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800520a:	4b04      	ldr	r3, [pc, #16]	@ (800521c <SysTick_Config+0x40>)
 800520c:	2207      	movs	r2, #7
 800520e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	e000e010 	.word	0xe000e010

08005220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff ff29 	bl	8005080 <__NVIC_SetPriorityGrouping>
}
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b086      	sub	sp, #24
 800523a:	af00      	add	r7, sp, #0
 800523c:	4603      	mov	r3, r0
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	607a      	str	r2, [r7, #4]
 8005242:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005244:	f7ff ff40 	bl	80050c8 <__NVIC_GetPriorityGrouping>
 8005248:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	6978      	ldr	r0, [r7, #20]
 8005250:	f7ff ff90 	bl	8005174 <NVIC_EncodePriority>
 8005254:	4602      	mov	r2, r0
 8005256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800525a:	4611      	mov	r1, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff ff5f 	bl	8005120 <__NVIC_SetPriority>
}
 8005262:	bf00      	nop
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	4603      	mov	r3, r0
 8005272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff ff33 	bl	80050e4 <__NVIC_EnableIRQ>
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff ffa4 	bl	80051dc <SysTick_Config>
 8005294:	4603      	mov	r3, r0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e014      	b.n	80052da <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	791b      	ldrb	r3, [r3, #4]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d105      	bne.n	80052c6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7fd fb43 	bl	800294c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e056      	b.n	80053a6 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	795b      	ldrb	r3, [r3, #5]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_DAC_Start+0x20>
 8005300:	2302      	movs	r3, #2
 8005302:	e050      	b.n	80053a6 <HAL_DAC_Start+0xc2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6819      	ldr	r1, [r3, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2201      	movs	r2, #1
 800531e:	409a      	lsls	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005328:	4b22      	ldr	r3, [pc, #136]	@ (80053b4 <HAL_DAC_Start+0xd0>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	099b      	lsrs	r3, r3, #6
 800532e:	4a22      	ldr	r2, [pc, #136]	@ (80053b8 <HAL_DAC_Start+0xd4>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	099b      	lsrs	r3, r3, #6
 8005336:	3301      	adds	r3, #1
 8005338:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800533a:	e002      	b.n	8005342 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3b01      	subs	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f9      	bne.n	800533c <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10f      	bne.n	800536e <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005358:	2b02      	cmp	r3, #2
 800535a:	d11d      	bne.n	8005398 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	605a      	str	r2, [r3, #4]
 800536c:	e014      	b.n	8005398 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	f003 0310 	and.w	r3, r3, #16
 800537e:	2102      	movs	r1, #2
 8005380:	fa01 f303 	lsl.w	r3, r1, r3
 8005384:	429a      	cmp	r2, r3
 8005386:	d107      	bne.n	8005398 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0202 	orr.w	r2, r2, #2
 8005396:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20000004 	.word	0x20000004
 80053b8:	053e2d63 	.word	0x053e2d63

080053bc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d2:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01d      	beq.n	800541a <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d018      	beq.n	800541a <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2204      	movs	r2, #4
 80053ec:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f043 0201 	orr.w	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005402:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005412:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f854 	bl	80054c2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01d      	beq.n	8005460 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d018      	beq.n	8005460 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2204      	movs	r2, #4
 8005432:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f043 0202 	orr.w	r2, r3, #2
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005448:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005458:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f9f6 	bl	800584c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005460:	bf00      	nop
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005476:	2300      	movs	r3, #0
 8005478:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e018      	b.n	80054b6 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d105      	bne.n	80054a2 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4413      	add	r3, r2
 800549c:	3308      	adds	r3, #8
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e004      	b.n	80054ac <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4413      	add	r3, r2
 80054a8:	3314      	adds	r3, #20
 80054aa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	461a      	mov	r2, r3
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08a      	sub	sp, #40	@ 0x28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_DAC_ConfigChannel+0x1c>
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e1a1      	b.n	800583c <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	795b      	ldrb	r3, [r3, #5]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_DAC_ConfigChannel+0x32>
 8005506:	2302      	movs	r3, #2
 8005508:	e198      	b.n	800583c <HAL_DAC_ConfigChannel+0x364>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2202      	movs	r2, #2
 8005514:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b04      	cmp	r3, #4
 800551c:	d17a      	bne.n	8005614 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800551e:	f7fd fd99 	bl	8003054 <HAL_GetTick>
 8005522:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d13d      	bne.n	80055a6 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800552a:	e018      	b.n	800555e <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800552c:	f7fd fd92 	bl	8003054 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b01      	cmp	r3, #1
 8005538:	d911      	bls.n	800555e <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00a      	beq.n	800555e <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f043 0208 	orr.w	r2, r3, #8
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2203      	movs	r2, #3
 8005558:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e16e      	b.n	800583c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005564:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1df      	bne.n	800552c <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005574:	641a      	str	r2, [r3, #64]	@ 0x40
 8005576:	e020      	b.n	80055ba <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005578:	f7fd fd6c 	bl	8003054 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b01      	cmp	r3, #1
 8005584:	d90f      	bls.n	80055a6 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800558c:	2b00      	cmp	r3, #0
 800558e:	da0a      	bge.n	80055a6 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	f043 0208 	orr.w	r2, r3, #8
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2203      	movs	r2, #3
 80055a0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e14a      	b.n	800583c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	dbe3      	blt.n	8005578 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80055ca:	fa01 f303 	lsl.w	r3, r1, r3
 80055ce:	43db      	mvns	r3, r3
 80055d0:	ea02 0103 	and.w	r1, r2, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	409a      	lsls	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	21ff      	movs	r1, #255	@ 0xff
 80055f6:	fa01 f303 	lsl.w	r3, r1, r3
 80055fa:	43db      	mvns	r3, r3
 80055fc:	ea02 0103 	and.w	r1, r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	409a      	lsls	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d11d      	bne.n	8005658 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	221f      	movs	r2, #31
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	43db      	mvns	r3, r3
 8005632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005634:	4013      	ands	r3, r2
 8005636:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564c:	4313      	orrs	r3, r2
 800564e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005656:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f003 0310 	and.w	r3, r3, #16
 8005666:	2207      	movs	r2, #7
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005670:	4013      	ands	r3, r2
 8005672:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d102      	bne.n	8005682 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 800567c:	2300      	movs	r3, #0
 800567e:	623b      	str	r3, [r7, #32]
 8005680:	e00f      	b.n	80056a2 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d102      	bne.n	8005690 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800568a:	2301      	movs	r3, #1
 800568c:	623b      	str	r3, [r7, #32]
 800568e:	e008      	b.n	80056a2 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d102      	bne.n	800569e <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005698:	2301      	movs	r3, #1
 800569a:	623b      	str	r3, [r7, #32]
 800569c:	e001      	b.n	80056a2 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800569e:	2300      	movs	r3, #0
 80056a0:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	6a3a      	ldr	r2, [r7, #32]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	43db      	mvns	r3, r3
 80056c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c4:	4013      	ands	r3, r2
 80056c6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	791b      	ldrb	r3, [r3, #4]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d102      	bne.n	80056d6 <HAL_DAC_ConfigChannel+0x1fe>
 80056d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056d4:	e000      	b.n	80056d8 <HAL_DAC_ConfigChannel+0x200>
 80056d6:	2300      	movs	r3, #0
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	43db      	mvns	r3, r3
 80056ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f0:	4013      	ands	r3, r2
 80056f2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	795b      	ldrb	r3, [r3, #5]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d102      	bne.n	8005702 <HAL_DAC_ConfigChannel+0x22a>
 80056fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005700:	e000      	b.n	8005704 <HAL_DAC_ConfigChannel+0x22c>
 8005702:	2300      	movs	r3, #0
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b02      	cmp	r3, #2
 8005718:	d114      	bne.n	8005744 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800571a:	f001 fad1 	bl	8006cc0 <HAL_RCC_GetHCLKFreq>
 800571e:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	4a48      	ldr	r2, [pc, #288]	@ (8005844 <HAL_DAC_ConfigChannel+0x36c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d904      	bls.n	8005732 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005730:	e00f      	b.n	8005752 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	4a44      	ldr	r2, [pc, #272]	@ (8005848 <HAL_DAC_ConfigChannel+0x370>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d90a      	bls.n	8005750 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24
 8005742:	e006      	b.n	8005752 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800574a:	4313      	orrs	r3, r2
 800574c:	627b      	str	r3, [r7, #36]	@ 0x24
 800574e:	e000      	b.n	8005752 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005750:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005760:	4313      	orrs	r3, r2
 8005762:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6819      	ldr	r1, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	43da      	mvns	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	400a      	ands	r2, r1
 8005788:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f003 0310 	and.w	r3, r3, #16
 8005798:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	43db      	mvns	r3, r3
 80057a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a4:	4013      	ands	r3, r2
 80057a6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057bc:	4313      	orrs	r3, r2
 80057be:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057c6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6819      	ldr	r1, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	22c0      	movs	r2, #192	@ 0xc0
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	43da      	mvns	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	400a      	ands	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	089b      	lsrs	r3, r3, #2
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	089b      	lsrs	r3, r3, #2
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f003 0310 	and.w	r3, r3, #16
 800580e:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005812:	fa01 f303 	lsl.w	r3, r1, r3
 8005816:	43db      	mvns	r3, r3
 8005818:	ea02 0103 	and.w	r1, r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f003 0310 	and.w	r3, r3, #16
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	409a      	lsls	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800583a:	7ffb      	ldrb	r3, [r7, #31]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3728      	adds	r7, #40	@ 0x28
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	09896800 	.word	0x09896800
 8005848:	04c4b400 	.word	0x04c4b400

0800584c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e08d      	b.n	800598e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	4b47      	ldr	r3, [pc, #284]	@ (8005998 <HAL_DMA_Init+0x138>)
 800587a:	429a      	cmp	r2, r3
 800587c:	d80f      	bhi.n	800589e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	4b45      	ldr	r3, [pc, #276]	@ (800599c <HAL_DMA_Init+0x13c>)
 8005886:	4413      	add	r3, r2
 8005888:	4a45      	ldr	r2, [pc, #276]	@ (80059a0 <HAL_DMA_Init+0x140>)
 800588a:	fba2 2303 	umull	r2, r3, r2, r3
 800588e:	091b      	lsrs	r3, r3, #4
 8005890:	009a      	lsls	r2, r3, #2
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a42      	ldr	r2, [pc, #264]	@ (80059a4 <HAL_DMA_Init+0x144>)
 800589a:	641a      	str	r2, [r3, #64]	@ 0x40
 800589c:	e00e      	b.n	80058bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	4b40      	ldr	r3, [pc, #256]	@ (80059a8 <HAL_DMA_Init+0x148>)
 80058a6:	4413      	add	r3, r2
 80058a8:	4a3d      	ldr	r2, [pc, #244]	@ (80059a0 <HAL_DMA_Init+0x140>)
 80058aa:	fba2 2303 	umull	r2, r3, r2, r3
 80058ae:	091b      	lsrs	r3, r3, #4
 80058b0:	009a      	lsls	r2, r3, #2
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a3c      	ldr	r2, [pc, #240]	@ (80059ac <HAL_DMA_Init+0x14c>)
 80058ba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80058d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80058e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fa76 	bl	8005e00 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800591c:	d102      	bne.n	8005924 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005938:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d010      	beq.n	8005964 <HAL_DMA_Init+0x104>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b04      	cmp	r3, #4
 8005948:	d80c      	bhi.n	8005964 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fa96 	bl	8005e7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005960:	605a      	str	r2, [r3, #4]
 8005962:	e008      	b.n	8005976 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	40020407 	.word	0x40020407
 800599c:	bffdfff8 	.word	0xbffdfff8
 80059a0:	cccccccd 	.word	0xcccccccd
 80059a4:	40020000 	.word	0x40020000
 80059a8:	bffdfbf8 	.word	0xbffdfbf8
 80059ac:	40020400 	.word	0x40020400

080059b0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_DMA_Start_IT+0x20>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e066      	b.n	8005a9e <HAL_DMA_Start_IT+0xee>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d155      	bne.n	8005a90 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0201 	bic.w	r2, r2, #1
 8005a00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f9bb 	bl	8005d84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d008      	beq.n	8005a28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 020e 	orr.w	r2, r2, #14
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	e00f      	b.n	8005a48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0204 	bic.w	r2, r2, #4
 8005a36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 020a 	orr.w	r2, r2, #10
 8005a46:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a64:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d007      	beq.n	8005a7e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a7c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0201 	orr.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e005      	b.n	8005a9c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005a98:	2302      	movs	r3, #2
 8005a9a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b085      	sub	sp, #20
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d005      	beq.n	8005aca <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
 8005ac8:	e037      	b.n	8005b3a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 020e 	bic.w	r2, r2, #14
 8005ad8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ae8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0201 	bic.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afe:	f003 021f 	and.w	r2, r3, #31
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b06:	2101      	movs	r1, #1
 8005b08:	fa01 f202 	lsl.w	r2, r1, r2
 8005b0c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b16:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00c      	beq.n	8005b3a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b2e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b38:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d00d      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2204      	movs	r2, #4
 8005b74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	73fb      	strb	r3, [r7, #15]
 8005b8a:	e047      	b.n	8005c1c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 020e 	bic.w	r2, r2, #14
 8005b9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0201 	bic.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc0:	f003 021f 	and.w	r2, r3, #31
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc8:	2101      	movs	r1, #1
 8005bca:	fa01 f202 	lsl.w	r2, r1, r2
 8005bce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005bd8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00c      	beq.n	8005bfc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bf0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005bfa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	4798      	blx	r3
    }
  }
  return status;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c42:	f003 031f 	and.w	r3, r3, #31
 8005c46:	2204      	movs	r2, #4
 8005c48:	409a      	lsls	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d026      	beq.n	8005ca0 <HAL_DMA_IRQHandler+0x7a>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d021      	beq.n	8005ca0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d107      	bne.n	8005c7a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0204 	bic.w	r2, r2, #4
 8005c78:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7e:	f003 021f 	and.w	r2, r3, #31
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c86:	2104      	movs	r1, #4
 8005c88:	fa01 f202 	lsl.w	r2, r1, r2
 8005c8c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d071      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005c9e:	e06c      	b.n	8005d7a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca4:	f003 031f 	and.w	r3, r3, #31
 8005ca8:	2202      	movs	r2, #2
 8005caa:	409a      	lsls	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d02e      	beq.n	8005d12 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d029      	beq.n	8005d12 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10b      	bne.n	8005ce4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 020a 	bic.w	r2, r2, #10
 8005cda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce8:	f003 021f 	and.w	r2, r3, #31
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf0:	2102      	movs	r1, #2
 8005cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8005cf6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d038      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005d10:	e033      	b.n	8005d7a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d16:	f003 031f 	and.w	r3, r3, #31
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	409a      	lsls	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4013      	ands	r3, r2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d02a      	beq.n	8005d7c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d025      	beq.n	8005d7c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 020e 	bic.w	r2, r2, #14
 8005d3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d44:	f003 021f 	and.w	r2, r3, #31
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d004      	beq.n	8005d7c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005d7a:	bf00      	nop
 8005d7c:	bf00      	nop
}
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d9a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d004      	beq.n	8005dae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005dac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db2:	f003 021f 	and.w	r2, r3, #31
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dba:	2101      	movs	r1, #1
 8005dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8005dc0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2b10      	cmp	r3, #16
 8005dd0:	d108      	bne.n	8005de4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005de2:	e007      	b.n	8005df4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	60da      	str	r2, [r3, #12]
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4b16      	ldr	r3, [pc, #88]	@ (8005e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d802      	bhi.n	8005e1a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005e14:	4b15      	ldr	r3, [pc, #84]	@ (8005e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	e001      	b.n	8005e1e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005e1a:	4b15      	ldr	r3, [pc, #84]	@ (8005e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005e1c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	3b08      	subs	r3, #8
 8005e2a:	4a12      	ldr	r2, [pc, #72]	@ (8005e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e38:	089b      	lsrs	r3, r3, #2
 8005e3a:	009a      	lsls	r2, r3, #2
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	4413      	add	r3, r2
 8005e40:	461a      	mov	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a0b      	ldr	r2, [pc, #44]	@ (8005e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005e4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f003 031f 	and.w	r3, r3, #31
 8005e52:	2201      	movs	r2, #1
 8005e54:	409a      	lsls	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40020407 	.word	0x40020407
 8005e6c:	40020800 	.word	0x40020800
 8005e70:	40020820 	.word	0x40020820
 8005e74:	cccccccd 	.word	0xcccccccd
 8005e78:	40020880 	.word	0x40020880

08005e7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	461a      	mov	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a08      	ldr	r2, [pc, #32]	@ (8005ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005e9e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	f003 031f 	and.w	r3, r3, #31
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005eb0:	bf00      	nop
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	1000823f 	.word	0x1000823f
 8005ec0:	40020940 	.word	0x40020940

08005ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ed2:	e15a      	b.n	800618a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	2101      	movs	r1, #1
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 814c 	beq.w	8006184 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f003 0303 	and.w	r3, r3, #3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d005      	beq.n	8005f04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d130      	bne.n	8005f66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	2203      	movs	r2, #3
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	43db      	mvns	r3, r3
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	43db      	mvns	r3, r3
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4013      	ands	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	091b      	lsrs	r3, r3, #4
 8005f50:	f003 0201 	and.w	r2, r3, #1
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d017      	beq.n	8005fa2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	2203      	movs	r2, #3
 8005f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f82:	43db      	mvns	r3, r3
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4013      	ands	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	fa02 f303 	lsl.w	r3, r2, r3
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d123      	bne.n	8005ff6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	08da      	lsrs	r2, r3, #3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3208      	adds	r2, #8
 8005fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	220f      	movs	r2, #15
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	691a      	ldr	r2, [r3, #16]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	08da      	lsrs	r2, r3, #3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3208      	adds	r2, #8
 8005ff0:	6939      	ldr	r1, [r7, #16]
 8005ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	2203      	movs	r2, #3
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	43db      	mvns	r3, r3
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4013      	ands	r3, r2
 800600c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f003 0203 	and.w	r2, r3, #3
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	fa02 f303 	lsl.w	r3, r2, r3
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	4313      	orrs	r3, r2
 8006022:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 80a6 	beq.w	8006184 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006038:	4b5b      	ldr	r3, [pc, #364]	@ (80061a8 <HAL_GPIO_Init+0x2e4>)
 800603a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800603c:	4a5a      	ldr	r2, [pc, #360]	@ (80061a8 <HAL_GPIO_Init+0x2e4>)
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	6613      	str	r3, [r2, #96]	@ 0x60
 8006044:	4b58      	ldr	r3, [pc, #352]	@ (80061a8 <HAL_GPIO_Init+0x2e4>)
 8006046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006050:	4a56      	ldr	r2, [pc, #344]	@ (80061ac <HAL_GPIO_Init+0x2e8>)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	089b      	lsrs	r3, r3, #2
 8006056:	3302      	adds	r3, #2
 8006058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800605c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f003 0303 	and.w	r3, r3, #3
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	220f      	movs	r2, #15
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	43db      	mvns	r3, r3
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4013      	ands	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800607a:	d01f      	beq.n	80060bc <HAL_GPIO_Init+0x1f8>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a4c      	ldr	r2, [pc, #304]	@ (80061b0 <HAL_GPIO_Init+0x2ec>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d019      	beq.n	80060b8 <HAL_GPIO_Init+0x1f4>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a4b      	ldr	r2, [pc, #300]	@ (80061b4 <HAL_GPIO_Init+0x2f0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d013      	beq.n	80060b4 <HAL_GPIO_Init+0x1f0>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a4a      	ldr	r2, [pc, #296]	@ (80061b8 <HAL_GPIO_Init+0x2f4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00d      	beq.n	80060b0 <HAL_GPIO_Init+0x1ec>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a49      	ldr	r2, [pc, #292]	@ (80061bc <HAL_GPIO_Init+0x2f8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d007      	beq.n	80060ac <HAL_GPIO_Init+0x1e8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a48      	ldr	r2, [pc, #288]	@ (80061c0 <HAL_GPIO_Init+0x2fc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d101      	bne.n	80060a8 <HAL_GPIO_Init+0x1e4>
 80060a4:	2305      	movs	r3, #5
 80060a6:	e00a      	b.n	80060be <HAL_GPIO_Init+0x1fa>
 80060a8:	2306      	movs	r3, #6
 80060aa:	e008      	b.n	80060be <HAL_GPIO_Init+0x1fa>
 80060ac:	2304      	movs	r3, #4
 80060ae:	e006      	b.n	80060be <HAL_GPIO_Init+0x1fa>
 80060b0:	2303      	movs	r3, #3
 80060b2:	e004      	b.n	80060be <HAL_GPIO_Init+0x1fa>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e002      	b.n	80060be <HAL_GPIO_Init+0x1fa>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <HAL_GPIO_Init+0x1fa>
 80060bc:	2300      	movs	r3, #0
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	f002 0203 	and.w	r2, r2, #3
 80060c4:	0092      	lsls	r2, r2, #2
 80060c6:	4093      	lsls	r3, r2
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060ce:	4937      	ldr	r1, [pc, #220]	@ (80061ac <HAL_GPIO_Init+0x2e8>)
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	089b      	lsrs	r3, r3, #2
 80060d4:	3302      	adds	r3, #2
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060dc:	4b39      	ldr	r3, [pc, #228]	@ (80061c4 <HAL_GPIO_Init+0x300>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	43db      	mvns	r3, r3
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4013      	ands	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006100:	4a30      	ldr	r2, [pc, #192]	@ (80061c4 <HAL_GPIO_Init+0x300>)
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006106:	4b2f      	ldr	r3, [pc, #188]	@ (80061c4 <HAL_GPIO_Init+0x300>)
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	43db      	mvns	r3, r3
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4013      	ands	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800612a:	4a26      	ldr	r2, [pc, #152]	@ (80061c4 <HAL_GPIO_Init+0x300>)
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006130:	4b24      	ldr	r3, [pc, #144]	@ (80061c4 <HAL_GPIO_Init+0x300>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	43db      	mvns	r3, r3
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4013      	ands	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006154:	4a1b      	ldr	r2, [pc, #108]	@ (80061c4 <HAL_GPIO_Init+0x300>)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800615a:	4b1a      	ldr	r3, [pc, #104]	@ (80061c4 <HAL_GPIO_Init+0x300>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	43db      	mvns	r3, r3
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4013      	ands	r3, r2
 8006168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4313      	orrs	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800617e:	4a11      	ldr	r2, [pc, #68]	@ (80061c4 <HAL_GPIO_Init+0x300>)
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	3301      	adds	r3, #1
 8006188:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	fa22 f303 	lsr.w	r3, r2, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	f47f ae9d 	bne.w	8005ed4 <HAL_GPIO_Init+0x10>
  }
}
 800619a:	bf00      	nop
 800619c:	bf00      	nop
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	40021000 	.word	0x40021000
 80061ac:	40010000 	.word	0x40010000
 80061b0:	48000400 	.word	0x48000400
 80061b4:	48000800 	.word	0x48000800
 80061b8:	48000c00 	.word	0x48000c00
 80061bc:	48001000 	.word	0x48001000
 80061c0:	48001400 	.word	0x48001400
 80061c4:	40010400 	.word	0x40010400

080061c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	460b      	mov	r3, r1
 80061d2:	807b      	strh	r3, [r7, #2]
 80061d4:	4613      	mov	r3, r2
 80061d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061d8:	787b      	ldrb	r3, [r7, #1]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80061de:	887a      	ldrh	r2, [r7, #2]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80061e4:	e002      	b.n	80061ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80061e6:	887a      	ldrh	r2, [r7, #2]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d141      	bne.n	800628a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006206:	4b4b      	ldr	r3, [pc, #300]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800620e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006212:	d131      	bne.n	8006278 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006214:	4b47      	ldr	r3, [pc, #284]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800621a:	4a46      	ldr	r2, [pc, #280]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800621c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006220:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006224:	4b43      	ldr	r3, [pc, #268]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800622c:	4a41      	ldr	r2, [pc, #260]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800622e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006232:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006234:	4b40      	ldr	r3, [pc, #256]	@ (8006338 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2232      	movs	r2, #50	@ 0x32
 800623a:	fb02 f303 	mul.w	r3, r2, r3
 800623e:	4a3f      	ldr	r2, [pc, #252]	@ (800633c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006240:	fba2 2303 	umull	r2, r3, r2, r3
 8006244:	0c9b      	lsrs	r3, r3, #18
 8006246:	3301      	adds	r3, #1
 8006248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800624a:	e002      	b.n	8006252 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3b01      	subs	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006252:	4b38      	ldr	r3, [pc, #224]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800625a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800625e:	d102      	bne.n	8006266 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1f2      	bne.n	800624c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006266:	4b33      	ldr	r3, [pc, #204]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800626e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006272:	d158      	bne.n	8006326 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e057      	b.n	8006328 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006278:	4b2e      	ldr	r3, [pc, #184]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800627a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800627e:	4a2d      	ldr	r2, [pc, #180]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006284:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006288:	e04d      	b.n	8006326 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006290:	d141      	bne.n	8006316 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006292:	4b28      	ldr	r3, [pc, #160]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800629a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800629e:	d131      	bne.n	8006304 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062a0:	4b24      	ldr	r3, [pc, #144]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062a6:	4a23      	ldr	r2, [pc, #140]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062b0:	4b20      	ldr	r3, [pc, #128]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80062b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006338 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2232      	movs	r2, #50	@ 0x32
 80062c6:	fb02 f303 	mul.w	r3, r2, r3
 80062ca:	4a1c      	ldr	r2, [pc, #112]	@ (800633c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80062cc:	fba2 2303 	umull	r2, r3, r2, r3
 80062d0:	0c9b      	lsrs	r3, r3, #18
 80062d2:	3301      	adds	r3, #1
 80062d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062d6:	e002      	b.n	80062de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3b01      	subs	r3, #1
 80062dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062de:	4b15      	ldr	r3, [pc, #84]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ea:	d102      	bne.n	80062f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f2      	bne.n	80062d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062f2:	4b10      	ldr	r3, [pc, #64]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062fe:	d112      	bne.n	8006326 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e011      	b.n	8006328 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006304:	4b0b      	ldr	r3, [pc, #44]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800630a:	4a0a      	ldr	r2, [pc, #40]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800630c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006310:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006314:	e007      	b.n	8006326 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006316:	4b07      	ldr	r3, [pc, #28]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800631e:	4a05      	ldr	r2, [pc, #20]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006320:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006324:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	40007000 	.word	0x40007000
 8006338:	20000004 	.word	0x20000004
 800633c:	431bde83 	.word	0x431bde83

08006340 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006344:	4b05      	ldr	r3, [pc, #20]	@ (800635c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	4a04      	ldr	r2, [pc, #16]	@ (800635c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800634a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800634e:	6093      	str	r3, [r2, #8]
}
 8006350:	bf00      	nop
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	40007000 	.word	0x40007000

08006360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b088      	sub	sp, #32
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e2fe      	b.n	8006970 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d075      	beq.n	800646a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800637e:	4b97      	ldr	r3, [pc, #604]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 030c 	and.w	r3, r3, #12
 8006386:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006388:	4b94      	ldr	r3, [pc, #592]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0303 	and.w	r3, r3, #3
 8006390:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	2b0c      	cmp	r3, #12
 8006396:	d102      	bne.n	800639e <HAL_RCC_OscConfig+0x3e>
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2b03      	cmp	r3, #3
 800639c:	d002      	beq.n	80063a4 <HAL_RCC_OscConfig+0x44>
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d10b      	bne.n	80063bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a4:	4b8d      	ldr	r3, [pc, #564]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d05b      	beq.n	8006468 <HAL_RCC_OscConfig+0x108>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d157      	bne.n	8006468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e2d9      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063c4:	d106      	bne.n	80063d4 <HAL_RCC_OscConfig+0x74>
 80063c6:	4b85      	ldr	r3, [pc, #532]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a84      	ldr	r2, [pc, #528]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80063cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	e01d      	b.n	8006410 <HAL_RCC_OscConfig+0xb0>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063dc:	d10c      	bne.n	80063f8 <HAL_RCC_OscConfig+0x98>
 80063de:	4b7f      	ldr	r3, [pc, #508]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a7e      	ldr	r2, [pc, #504]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80063e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	4b7c      	ldr	r3, [pc, #496]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a7b      	ldr	r2, [pc, #492]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80063f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	e00b      	b.n	8006410 <HAL_RCC_OscConfig+0xb0>
 80063f8:	4b78      	ldr	r3, [pc, #480]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a77      	ldr	r2, [pc, #476]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80063fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	4b75      	ldr	r3, [pc, #468]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a74      	ldr	r2, [pc, #464]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 800640a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800640e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d013      	beq.n	8006440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006418:	f7fc fe1c 	bl	8003054 <HAL_GetTick>
 800641c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800641e:	e008      	b.n	8006432 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006420:	f7fc fe18 	bl	8003054 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b64      	cmp	r3, #100	@ 0x64
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e29e      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006432:	4b6a      	ldr	r3, [pc, #424]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0f0      	beq.n	8006420 <HAL_RCC_OscConfig+0xc0>
 800643e:	e014      	b.n	800646a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006440:	f7fc fe08 	bl	8003054 <HAL_GetTick>
 8006444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006448:	f7fc fe04 	bl	8003054 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b64      	cmp	r3, #100	@ 0x64
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e28a      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800645a:	4b60      	ldr	r3, [pc, #384]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1f0      	bne.n	8006448 <HAL_RCC_OscConfig+0xe8>
 8006466:	e000      	b.n	800646a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d075      	beq.n	8006562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006476:	4b59      	ldr	r3, [pc, #356]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 030c 	and.w	r3, r3, #12
 800647e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006480:	4b56      	ldr	r3, [pc, #344]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0303 	and.w	r3, r3, #3
 8006488:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b0c      	cmp	r3, #12
 800648e:	d102      	bne.n	8006496 <HAL_RCC_OscConfig+0x136>
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d002      	beq.n	800649c <HAL_RCC_OscConfig+0x13c>
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	2b04      	cmp	r3, #4
 800649a:	d11f      	bne.n	80064dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800649c:	4b4f      	ldr	r3, [pc, #316]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d005      	beq.n	80064b4 <HAL_RCC_OscConfig+0x154>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e25d      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064b4:	4b49      	ldr	r3, [pc, #292]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	061b      	lsls	r3, r3, #24
 80064c2:	4946      	ldr	r1, [pc, #280]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80064c8:	4b45      	ldr	r3, [pc, #276]	@ (80065e0 <HAL_RCC_OscConfig+0x280>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fc fd75 	bl	8002fbc <HAL_InitTick>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d043      	beq.n	8006560 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e249      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d023      	beq.n	800652c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064e4:	4b3d      	ldr	r3, [pc, #244]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a3c      	ldr	r2, [pc, #240]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80064ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f0:	f7fc fdb0 	bl	8003054 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064f8:	f7fc fdac 	bl	8003054 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e232      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800650a:	4b34      	ldr	r3, [pc, #208]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f0      	beq.n	80064f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006516:	4b31      	ldr	r3, [pc, #196]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	061b      	lsls	r3, r3, #24
 8006524:	492d      	ldr	r1, [pc, #180]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 8006526:	4313      	orrs	r3, r2
 8006528:	604b      	str	r3, [r1, #4]
 800652a:	e01a      	b.n	8006562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800652c:	4b2b      	ldr	r3, [pc, #172]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a2a      	ldr	r2, [pc, #168]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 8006532:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006538:	f7fc fd8c 	bl	8003054 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006540:	f7fc fd88 	bl	8003054 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e20e      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006552:	4b22      	ldr	r3, [pc, #136]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1f0      	bne.n	8006540 <HAL_RCC_OscConfig+0x1e0>
 800655e:	e000      	b.n	8006562 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006560:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	2b00      	cmp	r3, #0
 800656c:	d041      	beq.n	80065f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d01c      	beq.n	80065b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006576:	4b19      	ldr	r3, [pc, #100]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 8006578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800657c:	4a17      	ldr	r2, [pc, #92]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 800657e:	f043 0301 	orr.w	r3, r3, #1
 8006582:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006586:	f7fc fd65 	bl	8003054 <HAL_GetTick>
 800658a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800658c:	e008      	b.n	80065a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800658e:	f7fc fd61 	bl	8003054 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d901      	bls.n	80065a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e1e7      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065a0:	4b0e      	ldr	r3, [pc, #56]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80065a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0ef      	beq.n	800658e <HAL_RCC_OscConfig+0x22e>
 80065ae:	e020      	b.n	80065f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065b0:	4b0a      	ldr	r3, [pc, #40]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80065b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065b6:	4a09      	ldr	r2, [pc, #36]	@ (80065dc <HAL_RCC_OscConfig+0x27c>)
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065c0:	f7fc fd48 	bl	8003054 <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065c6:	e00d      	b.n	80065e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065c8:	f7fc fd44 	bl	8003054 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d906      	bls.n	80065e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e1ca      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
 80065da:	bf00      	nop
 80065dc:	40021000 	.word	0x40021000
 80065e0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065e4:	4b8c      	ldr	r3, [pc, #560]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 80065e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1ea      	bne.n	80065c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80a6 	beq.w	800674c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006600:	2300      	movs	r3, #0
 8006602:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006604:	4b84      	ldr	r3, [pc, #528]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 8006606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_RCC_OscConfig+0x2b4>
 8006610:	2301      	movs	r3, #1
 8006612:	e000      	b.n	8006616 <HAL_RCC_OscConfig+0x2b6>
 8006614:	2300      	movs	r3, #0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00d      	beq.n	8006636 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800661a:	4b7f      	ldr	r3, [pc, #508]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 800661c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800661e:	4a7e      	ldr	r2, [pc, #504]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 8006620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006624:	6593      	str	r3, [r2, #88]	@ 0x58
 8006626:	4b7c      	ldr	r3, [pc, #496]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 8006628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800662a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006632:	2301      	movs	r3, #1
 8006634:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006636:	4b79      	ldr	r3, [pc, #484]	@ (800681c <HAL_RCC_OscConfig+0x4bc>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800663e:	2b00      	cmp	r3, #0
 8006640:	d118      	bne.n	8006674 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006642:	4b76      	ldr	r3, [pc, #472]	@ (800681c <HAL_RCC_OscConfig+0x4bc>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a75      	ldr	r2, [pc, #468]	@ (800681c <HAL_RCC_OscConfig+0x4bc>)
 8006648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800664c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800664e:	f7fc fd01 	bl	8003054 <HAL_GetTick>
 8006652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006654:	e008      	b.n	8006668 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006656:	f7fc fcfd 	bl	8003054 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e183      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006668:	4b6c      	ldr	r3, [pc, #432]	@ (800681c <HAL_RCC_OscConfig+0x4bc>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0f0      	beq.n	8006656 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d108      	bne.n	800668e <HAL_RCC_OscConfig+0x32e>
 800667c:	4b66      	ldr	r3, [pc, #408]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 800667e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006682:	4a65      	ldr	r2, [pc, #404]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800668c:	e024      	b.n	80066d8 <HAL_RCC_OscConfig+0x378>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b05      	cmp	r3, #5
 8006694:	d110      	bne.n	80066b8 <HAL_RCC_OscConfig+0x358>
 8006696:	4b60      	ldr	r3, [pc, #384]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 8006698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800669c:	4a5e      	ldr	r2, [pc, #376]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 800669e:	f043 0304 	orr.w	r3, r3, #4
 80066a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066a6:	4b5c      	ldr	r3, [pc, #368]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 80066a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ac:	4a5a      	ldr	r2, [pc, #360]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 80066ae:	f043 0301 	orr.w	r3, r3, #1
 80066b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066b6:	e00f      	b.n	80066d8 <HAL_RCC_OscConfig+0x378>
 80066b8:	4b57      	ldr	r3, [pc, #348]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 80066ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066be:	4a56      	ldr	r2, [pc, #344]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 80066c0:	f023 0301 	bic.w	r3, r3, #1
 80066c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066c8:	4b53      	ldr	r3, [pc, #332]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 80066ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ce:	4a52      	ldr	r2, [pc, #328]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 80066d0:	f023 0304 	bic.w	r3, r3, #4
 80066d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d016      	beq.n	800670e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e0:	f7fc fcb8 	bl	8003054 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066e6:	e00a      	b.n	80066fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e8:	f7fc fcb4 	bl	8003054 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e138      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066fe:	4b46      	ldr	r3, [pc, #280]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 8006700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0ed      	beq.n	80066e8 <HAL_RCC_OscConfig+0x388>
 800670c:	e015      	b.n	800673a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670e:	f7fc fca1 	bl	8003054 <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006714:	e00a      	b.n	800672c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006716:	f7fc fc9d 	bl	8003054 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006724:	4293      	cmp	r3, r2
 8006726:	d901      	bls.n	800672c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e121      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800672c:	4b3a      	ldr	r3, [pc, #232]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1ed      	bne.n	8006716 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800673a:	7ffb      	ldrb	r3, [r7, #31]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d105      	bne.n	800674c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006740:	4b35      	ldr	r3, [pc, #212]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 8006742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006744:	4a34      	ldr	r2, [pc, #208]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 8006746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800674a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b00      	cmp	r3, #0
 8006756:	d03c      	beq.n	80067d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01c      	beq.n	800679a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006760:	4b2d      	ldr	r3, [pc, #180]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 8006762:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006766:	4a2c      	ldr	r2, [pc, #176]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 8006768:	f043 0301 	orr.w	r3, r3, #1
 800676c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006770:	f7fc fc70 	bl	8003054 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006778:	f7fc fc6c 	bl	8003054 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e0f2      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800678a:	4b23      	ldr	r3, [pc, #140]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 800678c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0ef      	beq.n	8006778 <HAL_RCC_OscConfig+0x418>
 8006798:	e01b      	b.n	80067d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800679a:	4b1f      	ldr	r3, [pc, #124]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 800679c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 80067a2:	f023 0301 	bic.w	r3, r3, #1
 80067a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067aa:	f7fc fc53 	bl	8003054 <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067b2:	f7fc fc4f 	bl	8003054 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e0d5      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067c4:	4b14      	ldr	r3, [pc, #80]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 80067c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1ef      	bne.n	80067b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 80c9 	beq.w	800696e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f003 030c 	and.w	r3, r3, #12
 80067e4:	2b0c      	cmp	r3, #12
 80067e6:	f000 8083 	beq.w	80068f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d15e      	bne.n	80068b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f2:	4b09      	ldr	r3, [pc, #36]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a08      	ldr	r2, [pc, #32]	@ (8006818 <HAL_RCC_OscConfig+0x4b8>)
 80067f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fe:	f7fc fc29 	bl	8003054 <HAL_GetTick>
 8006802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006804:	e00c      	b.n	8006820 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006806:	f7fc fc25 	bl	8003054 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d905      	bls.n	8006820 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e0ab      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
 8006818:	40021000 	.word	0x40021000
 800681c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006820:	4b55      	ldr	r3, [pc, #340]	@ (8006978 <HAL_RCC_OscConfig+0x618>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1ec      	bne.n	8006806 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800682c:	4b52      	ldr	r3, [pc, #328]	@ (8006978 <HAL_RCC_OscConfig+0x618>)
 800682e:	68da      	ldr	r2, [r3, #12]
 8006830:	4b52      	ldr	r3, [pc, #328]	@ (800697c <HAL_RCC_OscConfig+0x61c>)
 8006832:	4013      	ands	r3, r2
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6a11      	ldr	r1, [r2, #32]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800683c:	3a01      	subs	r2, #1
 800683e:	0112      	lsls	r2, r2, #4
 8006840:	4311      	orrs	r1, r2
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006846:	0212      	lsls	r2, r2, #8
 8006848:	4311      	orrs	r1, r2
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800684e:	0852      	lsrs	r2, r2, #1
 8006850:	3a01      	subs	r2, #1
 8006852:	0552      	lsls	r2, r2, #21
 8006854:	4311      	orrs	r1, r2
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800685a:	0852      	lsrs	r2, r2, #1
 800685c:	3a01      	subs	r2, #1
 800685e:	0652      	lsls	r2, r2, #25
 8006860:	4311      	orrs	r1, r2
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006866:	06d2      	lsls	r2, r2, #27
 8006868:	430a      	orrs	r2, r1
 800686a:	4943      	ldr	r1, [pc, #268]	@ (8006978 <HAL_RCC_OscConfig+0x618>)
 800686c:	4313      	orrs	r3, r2
 800686e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006870:	4b41      	ldr	r3, [pc, #260]	@ (8006978 <HAL_RCC_OscConfig+0x618>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a40      	ldr	r2, [pc, #256]	@ (8006978 <HAL_RCC_OscConfig+0x618>)
 8006876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800687a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800687c:	4b3e      	ldr	r3, [pc, #248]	@ (8006978 <HAL_RCC_OscConfig+0x618>)
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	4a3d      	ldr	r2, [pc, #244]	@ (8006978 <HAL_RCC_OscConfig+0x618>)
 8006882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006886:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fc fbe4 	bl	8003054 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006890:	f7fc fbe0 	bl	8003054 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e066      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068a2:	4b35      	ldr	r3, [pc, #212]	@ (8006978 <HAL_RCC_OscConfig+0x618>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0f0      	beq.n	8006890 <HAL_RCC_OscConfig+0x530>
 80068ae:	e05e      	b.n	800696e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068b0:	4b31      	ldr	r3, [pc, #196]	@ (8006978 <HAL_RCC_OscConfig+0x618>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a30      	ldr	r2, [pc, #192]	@ (8006978 <HAL_RCC_OscConfig+0x618>)
 80068b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068bc:	f7fc fbca 	bl	8003054 <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c4:	f7fc fbc6 	bl	8003054 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e04c      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068d6:	4b28      	ldr	r3, [pc, #160]	@ (8006978 <HAL_RCC_OscConfig+0x618>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f0      	bne.n	80068c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80068e2:	4b25      	ldr	r3, [pc, #148]	@ (8006978 <HAL_RCC_OscConfig+0x618>)
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	4924      	ldr	r1, [pc, #144]	@ (8006978 <HAL_RCC_OscConfig+0x618>)
 80068e8:	4b25      	ldr	r3, [pc, #148]	@ (8006980 <HAL_RCC_OscConfig+0x620>)
 80068ea:	4013      	ands	r3, r2
 80068ec:	60cb      	str	r3, [r1, #12]
 80068ee:	e03e      	b.n	800696e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d101      	bne.n	80068fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e039      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80068fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006978 <HAL_RCC_OscConfig+0x618>)
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f003 0203 	and.w	r2, r3, #3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	429a      	cmp	r2, r3
 800690e:	d12c      	bne.n	800696a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691a:	3b01      	subs	r3, #1
 800691c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800691e:	429a      	cmp	r2, r3
 8006920:	d123      	bne.n	800696a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800692e:	429a      	cmp	r2, r3
 8006930:	d11b      	bne.n	800696a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800693e:	429a      	cmp	r2, r3
 8006940:	d113      	bne.n	800696a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800694c:	085b      	lsrs	r3, r3, #1
 800694e:	3b01      	subs	r3, #1
 8006950:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006952:	429a      	cmp	r2, r3
 8006954:	d109      	bne.n	800696a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006960:	085b      	lsrs	r3, r3, #1
 8006962:	3b01      	subs	r3, #1
 8006964:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006966:	429a      	cmp	r2, r3
 8006968:	d001      	beq.n	800696e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3720      	adds	r7, #32
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	40021000 	.word	0x40021000
 800697c:	019f800c 	.word	0x019f800c
 8006980:	feeefffc 	.word	0xfeeefffc

08006984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800698e:	2300      	movs	r3, #0
 8006990:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e11e      	b.n	8006bda <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800699c:	4b91      	ldr	r3, [pc, #580]	@ (8006be4 <HAL_RCC_ClockConfig+0x260>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d910      	bls.n	80069cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069aa:	4b8e      	ldr	r3, [pc, #568]	@ (8006be4 <HAL_RCC_ClockConfig+0x260>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f023 020f 	bic.w	r2, r3, #15
 80069b2:	498c      	ldr	r1, [pc, #560]	@ (8006be4 <HAL_RCC_ClockConfig+0x260>)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ba:	4b8a      	ldr	r3, [pc, #552]	@ (8006be4 <HAL_RCC_ClockConfig+0x260>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d001      	beq.n	80069cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e106      	b.n	8006bda <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d073      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d129      	bne.n	8006a34 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069e0:	4b81      	ldr	r3, [pc, #516]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e0f4      	b.n	8006bda <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80069f0:	f000 f99e 	bl	8006d30 <RCC_GetSysClockFreqFromPLLSource>
 80069f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	4a7c      	ldr	r2, [pc, #496]	@ (8006bec <HAL_RCC_ClockConfig+0x268>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d93f      	bls.n	8006a7e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80069fe:	4b7a      	ldr	r3, [pc, #488]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d009      	beq.n	8006a1e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d033      	beq.n	8006a7e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d12f      	bne.n	8006a7e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a1e:	4b72      	ldr	r3, [pc, #456]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a26:	4a70      	ldr	r2, [pc, #448]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006a2e:	2380      	movs	r3, #128	@ 0x80
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	e024      	b.n	8006a7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d107      	bne.n	8006a4c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a3c:	4b6a      	ldr	r3, [pc, #424]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d109      	bne.n	8006a5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e0c6      	b.n	8006bda <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a4c:	4b66      	ldr	r3, [pc, #408]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0be      	b.n	8006bda <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006a5c:	f000 f8ce 	bl	8006bfc <HAL_RCC_GetSysClockFreq>
 8006a60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	4a61      	ldr	r2, [pc, #388]	@ (8006bec <HAL_RCC_ClockConfig+0x268>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d909      	bls.n	8006a7e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a6a:	4b5f      	ldr	r3, [pc, #380]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a72:	4a5d      	ldr	r2, [pc, #372]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006a7a:	2380      	movs	r3, #128	@ 0x80
 8006a7c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f023 0203 	bic.w	r2, r3, #3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	4957      	ldr	r1, [pc, #348]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a90:	f7fc fae0 	bl	8003054 <HAL_GetTick>
 8006a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a96:	e00a      	b.n	8006aae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a98:	f7fc fadc 	bl	8003054 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e095      	b.n	8006bda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aae:	4b4e      	ldr	r3, [pc, #312]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 020c 	and.w	r2, r3, #12
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d1eb      	bne.n	8006a98 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d023      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ad8:	4b43      	ldr	r3, [pc, #268]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	4a42      	ldr	r2, [pc, #264]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006ade:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006ae2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d007      	beq.n	8006b00 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006af0:	4b3d      	ldr	r3, [pc, #244]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006af8:	4a3b      	ldr	r2, [pc, #236]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006afa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006afe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b00:	4b39      	ldr	r3, [pc, #228]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	4936      	ldr	r1, [pc, #216]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	608b      	str	r3, [r1, #8]
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	2b80      	cmp	r3, #128	@ 0x80
 8006b18:	d105      	bne.n	8006b26 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006b1a:	4b33      	ldr	r3, [pc, #204]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	4a32      	ldr	r2, [pc, #200]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006b20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b24:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b26:	4b2f      	ldr	r3, [pc, #188]	@ (8006be4 <HAL_RCC_ClockConfig+0x260>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 030f 	and.w	r3, r3, #15
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d21d      	bcs.n	8006b70 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b34:	4b2b      	ldr	r3, [pc, #172]	@ (8006be4 <HAL_RCC_ClockConfig+0x260>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f023 020f 	bic.w	r2, r3, #15
 8006b3c:	4929      	ldr	r1, [pc, #164]	@ (8006be4 <HAL_RCC_ClockConfig+0x260>)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b44:	f7fc fa86 	bl	8003054 <HAL_GetTick>
 8006b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b4a:	e00a      	b.n	8006b62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b4c:	f7fc fa82 	bl	8003054 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e03b      	b.n	8006bda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b62:	4b20      	ldr	r3, [pc, #128]	@ (8006be4 <HAL_RCC_ClockConfig+0x260>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 030f 	and.w	r3, r3, #15
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d1ed      	bne.n	8006b4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d008      	beq.n	8006b8e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	4917      	ldr	r1, [pc, #92]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0308 	and.w	r3, r3, #8
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d009      	beq.n	8006bae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b9a:	4b13      	ldr	r3, [pc, #76]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	490f      	ldr	r1, [pc, #60]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bae:	f000 f825 	bl	8006bfc <HAL_RCC_GetSysClockFreq>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006be8 <HAL_RCC_ClockConfig+0x264>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	091b      	lsrs	r3, r3, #4
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	490c      	ldr	r1, [pc, #48]	@ (8006bf0 <HAL_RCC_ClockConfig+0x26c>)
 8006bc0:	5ccb      	ldrb	r3, [r1, r3]
 8006bc2:	f003 031f 	and.w	r3, r3, #31
 8006bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bca:	4a0a      	ldr	r2, [pc, #40]	@ (8006bf4 <HAL_RCC_ClockConfig+0x270>)
 8006bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006bce:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf8 <HAL_RCC_ClockConfig+0x274>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fc f9f2 	bl	8002fbc <HAL_InitTick>
 8006bd8:	4603      	mov	r3, r0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	40022000 	.word	0x40022000
 8006be8:	40021000 	.word	0x40021000
 8006bec:	04c4b400 	.word	0x04c4b400
 8006bf0:	0800c274 	.word	0x0800c274
 8006bf4:	20000004 	.word	0x20000004
 8006bf8:	20000008 	.word	0x20000008

08006bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006c02:	4b2c      	ldr	r3, [pc, #176]	@ (8006cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f003 030c 	and.w	r3, r3, #12
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d102      	bne.n	8006c14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8006cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c10:	613b      	str	r3, [r7, #16]
 8006c12:	e047      	b.n	8006ca4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006c14:	4b27      	ldr	r3, [pc, #156]	@ (8006cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 030c 	and.w	r3, r3, #12
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d102      	bne.n	8006c26 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c20:	4b26      	ldr	r3, [pc, #152]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	e03e      	b.n	8006ca4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006c26:	4b23      	ldr	r3, [pc, #140]	@ (8006cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 030c 	and.w	r3, r3, #12
 8006c2e:	2b0c      	cmp	r3, #12
 8006c30:	d136      	bne.n	8006ca0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c32:	4b20      	ldr	r3, [pc, #128]	@ (8006cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8006cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	091b      	lsrs	r3, r3, #4
 8006c42:	f003 030f 	and.w	r3, r3, #15
 8006c46:	3301      	adds	r3, #1
 8006c48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d10c      	bne.n	8006c6a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c50:	4a1a      	ldr	r2, [pc, #104]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c58:	4a16      	ldr	r2, [pc, #88]	@ (8006cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c5a:	68d2      	ldr	r2, [r2, #12]
 8006c5c:	0a12      	lsrs	r2, r2, #8
 8006c5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c62:	fb02 f303 	mul.w	r3, r2, r3
 8006c66:	617b      	str	r3, [r7, #20]
      break;
 8006c68:	e00c      	b.n	8006c84 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c6a:	4a13      	ldr	r2, [pc, #76]	@ (8006cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c72:	4a10      	ldr	r2, [pc, #64]	@ (8006cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c74:	68d2      	ldr	r2, [r2, #12]
 8006c76:	0a12      	lsrs	r2, r2, #8
 8006c78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c7c:	fb02 f303 	mul.w	r3, r2, r3
 8006c80:	617b      	str	r3, [r7, #20]
      break;
 8006c82:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c84:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	0e5b      	lsrs	r3, r3, #25
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	3301      	adds	r3, #1
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9c:	613b      	str	r3, [r7, #16]
 8006c9e:	e001      	b.n	8006ca4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006ca4:	693b      	ldr	r3, [r7, #16]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	40021000 	.word	0x40021000
 8006cb8:	00f42400 	.word	0x00f42400
 8006cbc:	007a1200 	.word	0x007a1200

08006cc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cc4:	4b03      	ldr	r3, [pc, #12]	@ (8006cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	20000004 	.word	0x20000004

08006cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006cdc:	f7ff fff0 	bl	8006cc0 <HAL_RCC_GetHCLKFreq>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	4b06      	ldr	r3, [pc, #24]	@ (8006cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	0a1b      	lsrs	r3, r3, #8
 8006ce8:	f003 0307 	and.w	r3, r3, #7
 8006cec:	4904      	ldr	r1, [pc, #16]	@ (8006d00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cee:	5ccb      	ldrb	r3, [r1, r3]
 8006cf0:	f003 031f 	and.w	r3, r3, #31
 8006cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	40021000 	.word	0x40021000
 8006d00:	0800c284 	.word	0x0800c284

08006d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d08:	f7ff ffda 	bl	8006cc0 <HAL_RCC_GetHCLKFreq>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	4b06      	ldr	r3, [pc, #24]	@ (8006d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	0adb      	lsrs	r3, r3, #11
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	4904      	ldr	r1, [pc, #16]	@ (8006d2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d1a:	5ccb      	ldrb	r3, [r1, r3]
 8006d1c:	f003 031f 	and.w	r3, r3, #31
 8006d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	40021000 	.word	0x40021000
 8006d2c:	0800c284 	.word	0x0800c284

08006d30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d36:	4b1e      	ldr	r3, [pc, #120]	@ (8006db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d40:	4b1b      	ldr	r3, [pc, #108]	@ (8006db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	091b      	lsrs	r3, r3, #4
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	d10c      	bne.n	8006d6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d54:	4a17      	ldr	r2, [pc, #92]	@ (8006db4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5c:	4a14      	ldr	r2, [pc, #80]	@ (8006db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d5e:	68d2      	ldr	r2, [r2, #12]
 8006d60:	0a12      	lsrs	r2, r2, #8
 8006d62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d66:	fb02 f303 	mul.w	r3, r2, r3
 8006d6a:	617b      	str	r3, [r7, #20]
    break;
 8006d6c:	e00c      	b.n	8006d88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d6e:	4a12      	ldr	r2, [pc, #72]	@ (8006db8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d76:	4a0e      	ldr	r2, [pc, #56]	@ (8006db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d78:	68d2      	ldr	r2, [r2, #12]
 8006d7a:	0a12      	lsrs	r2, r2, #8
 8006d7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d80:	fb02 f303 	mul.w	r3, r2, r3
 8006d84:	617b      	str	r3, [r7, #20]
    break;
 8006d86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d88:	4b09      	ldr	r3, [pc, #36]	@ (8006db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	0e5b      	lsrs	r3, r3, #25
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	3301      	adds	r3, #1
 8006d94:	005b      	lsls	r3, r3, #1
 8006d96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006da2:	687b      	ldr	r3, [r7, #4]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	40021000 	.word	0x40021000
 8006db4:	007a1200 	.word	0x007a1200
 8006db8:	00f42400 	.word	0x00f42400

08006dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006dc8:	2300      	movs	r3, #0
 8006dca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 8098 	beq.w	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dde:	4b43      	ldr	r3, [pc, #268]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10d      	bne.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dea:	4b40      	ldr	r3, [pc, #256]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dee:	4a3f      	ldr	r2, [pc, #252]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006df6:	4b3d      	ldr	r3, [pc, #244]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dfe:	60bb      	str	r3, [r7, #8]
 8006e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e02:	2301      	movs	r3, #1
 8006e04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e06:	4b3a      	ldr	r3, [pc, #232]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a39      	ldr	r2, [pc, #228]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e12:	f7fc f91f 	bl	8003054 <HAL_GetTick>
 8006e16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e18:	e009      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e1a:	f7fc f91b 	bl	8003054 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d902      	bls.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	74fb      	strb	r3, [r7, #19]
        break;
 8006e2c:	e005      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e2e:	4b30      	ldr	r3, [pc, #192]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0ef      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006e3a:	7cfb      	ldrb	r3, [r7, #19]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d159      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e40:	4b2a      	ldr	r3, [pc, #168]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01e      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d019      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e5c:	4b23      	ldr	r3, [pc, #140]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e68:	4b20      	ldr	r3, [pc, #128]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e78:	4b1c      	ldr	r3, [pc, #112]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e88:	4a18      	ldr	r2, [pc, #96]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d016      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9a:	f7fc f8db 	bl	8003054 <HAL_GetTick>
 8006e9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ea0:	e00b      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ea2:	f7fc f8d7 	bl	8003054 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d902      	bls.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	74fb      	strb	r3, [r7, #19]
            break;
 8006eb8:	e006      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eba:	4b0c      	ldr	r3, [pc, #48]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0ec      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006ec8:	7cfb      	ldrb	r3, [r7, #19]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10b      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ece:	4b07      	ldr	r3, [pc, #28]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ed4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006edc:	4903      	ldr	r1, [pc, #12]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ee6:	7cfb      	ldrb	r3, [r7, #19]
 8006ee8:	74bb      	strb	r3, [r7, #18]
 8006eea:	e005      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006eec:	40021000 	.word	0x40021000
 8006ef0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef4:	7cfb      	ldrb	r3, [r7, #19]
 8006ef6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ef8:	7c7b      	ldrb	r3, [r7, #17]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d105      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006efe:	4ba6      	ldr	r3, [pc, #664]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f02:	4aa5      	ldr	r2, [pc, #660]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f16:	4ba0      	ldr	r3, [pc, #640]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f1c:	f023 0203 	bic.w	r2, r3, #3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	499c      	ldr	r1, [pc, #624]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00a      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f38:	4b97      	ldr	r3, [pc, #604]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3e:	f023 020c 	bic.w	r2, r3, #12
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	4994      	ldr	r1, [pc, #592]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00a      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f5a:	4b8f      	ldr	r3, [pc, #572]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	498b      	ldr	r1, [pc, #556]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0308 	and.w	r3, r3, #8
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00a      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f7c:	4b86      	ldr	r3, [pc, #536]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	4983      	ldr	r1, [pc, #524]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0320 	and.w	r3, r3, #32
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f9e:	4b7e      	ldr	r3, [pc, #504]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	497a      	ldr	r1, [pc, #488]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00a      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fc0:	4b75      	ldr	r3, [pc, #468]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	4972      	ldr	r1, [pc, #456]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00a      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fe8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	4969      	ldr	r1, [pc, #420]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00a      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007004:	4b64      	ldr	r3, [pc, #400]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800700a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	4961      	ldr	r1, [pc, #388]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007014:	4313      	orrs	r3, r2
 8007016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007026:	4b5c      	ldr	r3, [pc, #368]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800702c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007034:	4958      	ldr	r1, [pc, #352]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007036:	4313      	orrs	r3, r2
 8007038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007044:	2b00      	cmp	r3, #0
 8007046:	d015      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007048:	4b53      	ldr	r3, [pc, #332]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800704a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800704e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007056:	4950      	ldr	r1, [pc, #320]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007058:	4313      	orrs	r3, r2
 800705a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007062:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007066:	d105      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007068:	4b4b      	ldr	r3, [pc, #300]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	4a4a      	ldr	r2, [pc, #296]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800706e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007072:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800707c:	2b00      	cmp	r3, #0
 800707e:	d015      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007080:	4b45      	ldr	r3, [pc, #276]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007086:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708e:	4942      	ldr	r1, [pc, #264]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007090:	4313      	orrs	r3, r2
 8007092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800709e:	d105      	bne.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070a0:	4b3d      	ldr	r3, [pc, #244]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	4a3c      	ldr	r2, [pc, #240]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070aa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d015      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070b8:	4b37      	ldr	r3, [pc, #220]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c6:	4934      	ldr	r1, [pc, #208]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070d6:	d105      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070d8:	4b2f      	ldr	r3, [pc, #188]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	4a2e      	ldr	r2, [pc, #184]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d015      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070f0:	4b29      	ldr	r3, [pc, #164]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070fe:	4926      	ldr	r1, [pc, #152]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007100:	4313      	orrs	r3, r2
 8007102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800710a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800710e:	d105      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007110:	4b21      	ldr	r3, [pc, #132]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	4a20      	ldr	r2, [pc, #128]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800711a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d015      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007128:	4b1b      	ldr	r3, [pc, #108]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800712a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800712e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007136:	4918      	ldr	r1, [pc, #96]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007138:	4313      	orrs	r3, r2
 800713a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007142:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007146:	d105      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007148:	4b13      	ldr	r3, [pc, #76]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	4a12      	ldr	r2, [pc, #72]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800714e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007152:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d015      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007160:	4b0d      	ldr	r3, [pc, #52]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007166:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800716e:	490a      	ldr	r1, [pc, #40]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007170:	4313      	orrs	r3, r2
 8007172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800717a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800717e:	d105      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007180:	4b05      	ldr	r3, [pc, #20]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	4a04      	ldr	r2, [pc, #16]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800718a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800718c:	7cbb      	ldrb	r3, [r7, #18]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	40021000 	.word	0x40021000

0800719c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e09d      	b.n	80072ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d108      	bne.n	80071c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071be:	d009      	beq.n	80071d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	61da      	str	r2, [r3, #28]
 80071c6:	e005      	b.n	80071d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d106      	bne.n	80071f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7fb fbd2 	bl	8002998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2202      	movs	r2, #2
 80071f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800720a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007214:	d902      	bls.n	800721c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007216:	2300      	movs	r3, #0
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	e002      	b.n	8007222 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800721c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007220:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800722a:	d007      	beq.n	800723c <HAL_SPI_Init+0xa0>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007234:	d002      	beq.n	800723c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800724c:	431a      	orrs	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	431a      	orrs	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	431a      	orrs	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800726a:	431a      	orrs	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007274:	431a      	orrs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800727e:	ea42 0103 	orr.w	r1, r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007286:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	0c1b      	lsrs	r3, r3, #16
 8007298:	f003 0204 	and.w	r2, r3, #4
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a0:	f003 0310 	and.w	r3, r3, #16
 80072a4:	431a      	orrs	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072aa:	f003 0308 	and.w	r3, r3, #8
 80072ae:	431a      	orrs	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80072b8:	ea42 0103 	orr.w	r1, r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b088      	sub	sp, #32
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10e      	bne.n	8007334 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800731c:	2b00      	cmp	r3, #0
 800731e:	d009      	beq.n	8007334 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007326:	2b00      	cmp	r3, #0
 8007328:	d004      	beq.n	8007334 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
    return;
 8007332:	e0ce      	b.n	80074d2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <HAL_SPI_IRQHandler+0x5e>
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007344:	2b00      	cmp	r3, #0
 8007346:	d004      	beq.n	8007352 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	4798      	blx	r3
    return;
 8007350:	e0bf      	b.n	80074d2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	f003 0320 	and.w	r3, r3, #32
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <HAL_SPI_IRQHandler+0x7e>
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007362:	2b00      	cmp	r3, #0
 8007364:	d105      	bne.n	8007372 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 80b0 	beq.w	80074d2 <HAL_SPI_IRQHandler+0x1de>
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	f003 0320 	and.w	r3, r3, #32
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 80aa 	beq.w	80074d2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	d023      	beq.n	80073d0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b03      	cmp	r3, #3
 8007392:	d011      	beq.n	80073b8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007398:	f043 0204 	orr.w	r2, r3, #4
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	617b      	str	r3, [r7, #20]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	e00b      	b.n	80073d0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073b8:	2300      	movs	r3, #0
 80073ba:	613b      	str	r3, [r7, #16]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	613b      	str	r3, [r7, #16]
 80073cc:	693b      	ldr	r3, [r7, #16]
        return;
 80073ce:	e080      	b.n	80074d2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	f003 0320 	and.w	r3, r3, #32
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d014      	beq.n	8007404 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073de:	f043 0201 	orr.w	r2, r3, #1
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80073e6:	2300      	movs	r3, #0
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	60fb      	str	r3, [r7, #12]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007400:	601a      	str	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00c      	beq.n	8007428 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007412:	f043 0208 	orr.w	r2, r3, #8
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800741a:	2300      	movs	r3, #0
 800741c:	60bb      	str	r3, [r7, #8]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	60bb      	str	r3, [r7, #8]
 8007426:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800742c:	2b00      	cmp	r3, #0
 800742e:	d04f      	beq.n	80074d0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800743e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d104      	bne.n	800745c <HAL_SPI_IRQHandler+0x168>
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d034      	beq.n	80074c6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0203 	bic.w	r2, r2, #3
 800746a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007470:	2b00      	cmp	r3, #0
 8007472:	d011      	beq.n	8007498 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007478:	4a17      	ldr	r2, [pc, #92]	@ (80074d8 <HAL_SPI_IRQHandler+0x1e4>)
 800747a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007480:	4618      	mov	r0, r3
 8007482:	f7fe fb69 	bl	8005b58 <HAL_DMA_Abort_IT>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d005      	beq.n	8007498 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007490:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800749c:	2b00      	cmp	r3, #0
 800749e:	d016      	beq.n	80074ce <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a4:	4a0c      	ldr	r2, [pc, #48]	@ (80074d8 <HAL_SPI_IRQHandler+0x1e4>)
 80074a6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fe fb53 	bl	8005b58 <HAL_DMA_Abort_IT>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80074c4:	e003      	b.n	80074ce <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f808 	bl	80074dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80074cc:	e000      	b.n	80074d0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80074ce:	bf00      	nop
    return;
 80074d0:	bf00      	nop
  }
}
 80074d2:	3720      	adds	r7, #32
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	080074f1 	.word	0x080074f1

080074dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7ff ffe5 	bl	80074dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e049      	b.n	80075c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	d106      	bne.n	8007546 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7fb fa73 	bl	8002a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2202      	movs	r2, #2
 800754a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	3304      	adds	r3, #4
 8007556:	4619      	mov	r1, r3
 8007558:	4610      	mov	r0, r2
 800755a:	f001 f9ad 	bl	80088b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d001      	beq.n	80075e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e042      	b.n	8007666 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a21      	ldr	r2, [pc, #132]	@ (8007674 <HAL_TIM_Base_Start+0xac>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d018      	beq.n	8007624 <HAL_TIM_Base_Start+0x5c>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075fa:	d013      	beq.n	8007624 <HAL_TIM_Base_Start+0x5c>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a1d      	ldr	r2, [pc, #116]	@ (8007678 <HAL_TIM_Base_Start+0xb0>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d00e      	beq.n	8007624 <HAL_TIM_Base_Start+0x5c>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a1c      	ldr	r2, [pc, #112]	@ (800767c <HAL_TIM_Base_Start+0xb4>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d009      	beq.n	8007624 <HAL_TIM_Base_Start+0x5c>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a1a      	ldr	r2, [pc, #104]	@ (8007680 <HAL_TIM_Base_Start+0xb8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d004      	beq.n	8007624 <HAL_TIM_Base_Start+0x5c>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a19      	ldr	r2, [pc, #100]	@ (8007684 <HAL_TIM_Base_Start+0xbc>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d115      	bne.n	8007650 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689a      	ldr	r2, [r3, #8]
 800762a:	4b17      	ldr	r3, [pc, #92]	@ (8007688 <HAL_TIM_Base_Start+0xc0>)
 800762c:	4013      	ands	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b06      	cmp	r3, #6
 8007634:	d015      	beq.n	8007662 <HAL_TIM_Base_Start+0x9a>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800763c:	d011      	beq.n	8007662 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f042 0201 	orr.w	r2, r2, #1
 800764c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800764e:	e008      	b.n	8007662 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f042 0201 	orr.w	r2, r2, #1
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	e000      	b.n	8007664 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007662:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	40012c00 	.word	0x40012c00
 8007678:	40000400 	.word	0x40000400
 800767c:	40000800 	.word	0x40000800
 8007680:	40013400 	.word	0x40013400
 8007684:	40014000 	.word	0x40014000
 8007688:	00010007 	.word	0x00010007

0800768c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b01      	cmp	r3, #1
 800769e:	d001      	beq.n	80076a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e04a      	b.n	800773a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68da      	ldr	r2, [r3, #12]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0201 	orr.w	r2, r2, #1
 80076ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a21      	ldr	r2, [pc, #132]	@ (8007748 <HAL_TIM_Base_Start_IT+0xbc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d018      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0x6c>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ce:	d013      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0x6c>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1d      	ldr	r2, [pc, #116]	@ (800774c <HAL_TIM_Base_Start_IT+0xc0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00e      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0x6c>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a1c      	ldr	r2, [pc, #112]	@ (8007750 <HAL_TIM_Base_Start_IT+0xc4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d009      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0x6c>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a1a      	ldr	r2, [pc, #104]	@ (8007754 <HAL_TIM_Base_Start_IT+0xc8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d004      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0x6c>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a19      	ldr	r2, [pc, #100]	@ (8007758 <HAL_TIM_Base_Start_IT+0xcc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d115      	bne.n	8007724 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	4b17      	ldr	r3, [pc, #92]	@ (800775c <HAL_TIM_Base_Start_IT+0xd0>)
 8007700:	4013      	ands	r3, r2
 8007702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b06      	cmp	r3, #6
 8007708:	d015      	beq.n	8007736 <HAL_TIM_Base_Start_IT+0xaa>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007710:	d011      	beq.n	8007736 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f042 0201 	orr.w	r2, r2, #1
 8007720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007722:	e008      	b.n	8007736 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0201 	orr.w	r2, r2, #1
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	e000      	b.n	8007738 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007736:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	40012c00 	.word	0x40012c00
 800774c:	40000400 	.word	0x40000400
 8007750:	40000800 	.word	0x40000800
 8007754:	40013400 	.word	0x40013400
 8007758:	40014000 	.word	0x40014000
 800775c:	00010007 	.word	0x00010007

08007760 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e049      	b.n	8007806 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d106      	bne.n	800778c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f841 	bl	800780e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3304      	adds	r3, #4
 800779c:	4619      	mov	r1, r3
 800779e:	4610      	mov	r0, r2
 80077a0:	f001 f88a 	bl	80088b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
	...

08007824 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d109      	bne.n	8007848 <HAL_TIM_PWM_Start+0x24>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b01      	cmp	r3, #1
 800783e:	bf14      	ite	ne
 8007840:	2301      	movne	r3, #1
 8007842:	2300      	moveq	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	e03c      	b.n	80078c2 <HAL_TIM_PWM_Start+0x9e>
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b04      	cmp	r3, #4
 800784c:	d109      	bne.n	8007862 <HAL_TIM_PWM_Start+0x3e>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b01      	cmp	r3, #1
 8007858:	bf14      	ite	ne
 800785a:	2301      	movne	r3, #1
 800785c:	2300      	moveq	r3, #0
 800785e:	b2db      	uxtb	r3, r3
 8007860:	e02f      	b.n	80078c2 <HAL_TIM_PWM_Start+0x9e>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b08      	cmp	r3, #8
 8007866:	d109      	bne.n	800787c <HAL_TIM_PWM_Start+0x58>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b01      	cmp	r3, #1
 8007872:	bf14      	ite	ne
 8007874:	2301      	movne	r3, #1
 8007876:	2300      	moveq	r3, #0
 8007878:	b2db      	uxtb	r3, r3
 800787a:	e022      	b.n	80078c2 <HAL_TIM_PWM_Start+0x9e>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b0c      	cmp	r3, #12
 8007880:	d109      	bne.n	8007896 <HAL_TIM_PWM_Start+0x72>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b01      	cmp	r3, #1
 800788c:	bf14      	ite	ne
 800788e:	2301      	movne	r3, #1
 8007890:	2300      	moveq	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	e015      	b.n	80078c2 <HAL_TIM_PWM_Start+0x9e>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b10      	cmp	r3, #16
 800789a:	d109      	bne.n	80078b0 <HAL_TIM_PWM_Start+0x8c>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	bf14      	ite	ne
 80078a8:	2301      	movne	r3, #1
 80078aa:	2300      	moveq	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	e008      	b.n	80078c2 <HAL_TIM_PWM_Start+0x9e>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	bf14      	ite	ne
 80078bc:	2301      	movne	r3, #1
 80078be:	2300      	moveq	r3, #0
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e097      	b.n	80079fa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d104      	bne.n	80078da <HAL_TIM_PWM_Start+0xb6>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078d8:	e023      	b.n	8007922 <HAL_TIM_PWM_Start+0xfe>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b04      	cmp	r3, #4
 80078de:	d104      	bne.n	80078ea <HAL_TIM_PWM_Start+0xc6>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078e8:	e01b      	b.n	8007922 <HAL_TIM_PWM_Start+0xfe>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d104      	bne.n	80078fa <HAL_TIM_PWM_Start+0xd6>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078f8:	e013      	b.n	8007922 <HAL_TIM_PWM_Start+0xfe>
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b0c      	cmp	r3, #12
 80078fe:	d104      	bne.n	800790a <HAL_TIM_PWM_Start+0xe6>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007908:	e00b      	b.n	8007922 <HAL_TIM_PWM_Start+0xfe>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b10      	cmp	r3, #16
 800790e:	d104      	bne.n	800791a <HAL_TIM_PWM_Start+0xf6>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007918:	e003      	b.n	8007922 <HAL_TIM_PWM_Start+0xfe>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2202      	movs	r2, #2
 800791e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2201      	movs	r2, #1
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	4618      	mov	r0, r3
 800792c:	f001 fdd4 	bl	80094d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a33      	ldr	r2, [pc, #204]	@ (8007a04 <HAL_TIM_PWM_Start+0x1e0>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d013      	beq.n	8007962 <HAL_TIM_PWM_Start+0x13e>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a32      	ldr	r2, [pc, #200]	@ (8007a08 <HAL_TIM_PWM_Start+0x1e4>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d00e      	beq.n	8007962 <HAL_TIM_PWM_Start+0x13e>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a30      	ldr	r2, [pc, #192]	@ (8007a0c <HAL_TIM_PWM_Start+0x1e8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d009      	beq.n	8007962 <HAL_TIM_PWM_Start+0x13e>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a2f      	ldr	r2, [pc, #188]	@ (8007a10 <HAL_TIM_PWM_Start+0x1ec>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d004      	beq.n	8007962 <HAL_TIM_PWM_Start+0x13e>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a2d      	ldr	r2, [pc, #180]	@ (8007a14 <HAL_TIM_PWM_Start+0x1f0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d101      	bne.n	8007966 <HAL_TIM_PWM_Start+0x142>
 8007962:	2301      	movs	r3, #1
 8007964:	e000      	b.n	8007968 <HAL_TIM_PWM_Start+0x144>
 8007966:	2300      	movs	r3, #0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d007      	beq.n	800797c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800797a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a20      	ldr	r2, [pc, #128]	@ (8007a04 <HAL_TIM_PWM_Start+0x1e0>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d018      	beq.n	80079b8 <HAL_TIM_PWM_Start+0x194>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800798e:	d013      	beq.n	80079b8 <HAL_TIM_PWM_Start+0x194>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a20      	ldr	r2, [pc, #128]	@ (8007a18 <HAL_TIM_PWM_Start+0x1f4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00e      	beq.n	80079b8 <HAL_TIM_PWM_Start+0x194>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a1f      	ldr	r2, [pc, #124]	@ (8007a1c <HAL_TIM_PWM_Start+0x1f8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d009      	beq.n	80079b8 <HAL_TIM_PWM_Start+0x194>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a17      	ldr	r2, [pc, #92]	@ (8007a08 <HAL_TIM_PWM_Start+0x1e4>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d004      	beq.n	80079b8 <HAL_TIM_PWM_Start+0x194>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a16      	ldr	r2, [pc, #88]	@ (8007a0c <HAL_TIM_PWM_Start+0x1e8>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d115      	bne.n	80079e4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	4b18      	ldr	r3, [pc, #96]	@ (8007a20 <HAL_TIM_PWM_Start+0x1fc>)
 80079c0:	4013      	ands	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b06      	cmp	r3, #6
 80079c8:	d015      	beq.n	80079f6 <HAL_TIM_PWM_Start+0x1d2>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079d0:	d011      	beq.n	80079f6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f042 0201 	orr.w	r2, r2, #1
 80079e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e2:	e008      	b.n	80079f6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f042 0201 	orr.w	r2, r2, #1
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	e000      	b.n	80079f8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	40012c00 	.word	0x40012c00
 8007a08:	40013400 	.word	0x40013400
 8007a0c:	40014000 	.word	0x40014000
 8007a10:	40014400 	.word	0x40014400
 8007a14:	40014800 	.word	0x40014800
 8007a18:	40000400 	.word	0x40000400
 8007a1c:	40000800 	.word	0x40000800
 8007a20:	00010007 	.word	0x00010007

08007a24 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d109      	bne.n	8007a4c <HAL_TIM_PWM_Start_IT+0x28>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	bf14      	ite	ne
 8007a44:	2301      	movne	r3, #1
 8007a46:	2300      	moveq	r3, #0
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	e03c      	b.n	8007ac6 <HAL_TIM_PWM_Start_IT+0xa2>
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d109      	bne.n	8007a66 <HAL_TIM_PWM_Start_IT+0x42>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	bf14      	ite	ne
 8007a5e:	2301      	movne	r3, #1
 8007a60:	2300      	moveq	r3, #0
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	e02f      	b.n	8007ac6 <HAL_TIM_PWM_Start_IT+0xa2>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b08      	cmp	r3, #8
 8007a6a:	d109      	bne.n	8007a80 <HAL_TIM_PWM_Start_IT+0x5c>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	bf14      	ite	ne
 8007a78:	2301      	movne	r3, #1
 8007a7a:	2300      	moveq	r3, #0
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	e022      	b.n	8007ac6 <HAL_TIM_PWM_Start_IT+0xa2>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b0c      	cmp	r3, #12
 8007a84:	d109      	bne.n	8007a9a <HAL_TIM_PWM_Start_IT+0x76>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	bf14      	ite	ne
 8007a92:	2301      	movne	r3, #1
 8007a94:	2300      	moveq	r3, #0
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	e015      	b.n	8007ac6 <HAL_TIM_PWM_Start_IT+0xa2>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b10      	cmp	r3, #16
 8007a9e:	d109      	bne.n	8007ab4 <HAL_TIM_PWM_Start_IT+0x90>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	bf14      	ite	ne
 8007aac:	2301      	movne	r3, #1
 8007aae:	2300      	moveq	r3, #0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	e008      	b.n	8007ac6 <HAL_TIM_PWM_Start_IT+0xa2>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	bf14      	ite	ne
 8007ac0:	2301      	movne	r3, #1
 8007ac2:	2300      	moveq	r3, #0
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e0e2      	b.n	8007c94 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d104      	bne.n	8007ade <HAL_TIM_PWM_Start_IT+0xba>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007adc:	e023      	b.n	8007b26 <HAL_TIM_PWM_Start_IT+0x102>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b04      	cmp	r3, #4
 8007ae2:	d104      	bne.n	8007aee <HAL_TIM_PWM_Start_IT+0xca>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007aec:	e01b      	b.n	8007b26 <HAL_TIM_PWM_Start_IT+0x102>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d104      	bne.n	8007afe <HAL_TIM_PWM_Start_IT+0xda>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007afc:	e013      	b.n	8007b26 <HAL_TIM_PWM_Start_IT+0x102>
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b0c      	cmp	r3, #12
 8007b02:	d104      	bne.n	8007b0e <HAL_TIM_PWM_Start_IT+0xea>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b0c:	e00b      	b.n	8007b26 <HAL_TIM_PWM_Start_IT+0x102>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b10      	cmp	r3, #16
 8007b12:	d104      	bne.n	8007b1e <HAL_TIM_PWM_Start_IT+0xfa>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b1c:	e003      	b.n	8007b26 <HAL_TIM_PWM_Start_IT+0x102>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2202      	movs	r2, #2
 8007b22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b0c      	cmp	r3, #12
 8007b2a:	d841      	bhi.n	8007bb0 <HAL_TIM_PWM_Start_IT+0x18c>
 8007b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b34 <HAL_TIM_PWM_Start_IT+0x110>)
 8007b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b32:	bf00      	nop
 8007b34:	08007b69 	.word	0x08007b69
 8007b38:	08007bb1 	.word	0x08007bb1
 8007b3c:	08007bb1 	.word	0x08007bb1
 8007b40:	08007bb1 	.word	0x08007bb1
 8007b44:	08007b7b 	.word	0x08007b7b
 8007b48:	08007bb1 	.word	0x08007bb1
 8007b4c:	08007bb1 	.word	0x08007bb1
 8007b50:	08007bb1 	.word	0x08007bb1
 8007b54:	08007b8d 	.word	0x08007b8d
 8007b58:	08007bb1 	.word	0x08007bb1
 8007b5c:	08007bb1 	.word	0x08007bb1
 8007b60:	08007bb1 	.word	0x08007bb1
 8007b64:	08007b9f 	.word	0x08007b9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0202 	orr.w	r2, r2, #2
 8007b76:	60da      	str	r2, [r3, #12]
      break;
 8007b78:	e01d      	b.n	8007bb6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68da      	ldr	r2, [r3, #12]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f042 0204 	orr.w	r2, r2, #4
 8007b88:	60da      	str	r2, [r3, #12]
      break;
 8007b8a:	e014      	b.n	8007bb6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f042 0208 	orr.w	r2, r2, #8
 8007b9a:	60da      	str	r2, [r3, #12]
      break;
 8007b9c:	e00b      	b.n	8007bb6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68da      	ldr	r2, [r3, #12]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f042 0210 	orr.w	r2, r2, #16
 8007bac:	60da      	str	r2, [r3, #12]
      break;
 8007bae:	e002      	b.n	8007bb6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007bb4:	bf00      	nop
  }

  if (status == HAL_OK)
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d16a      	bne.n	8007c92 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f001 fc87 	bl	80094d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a33      	ldr	r2, [pc, #204]	@ (8007c9c <HAL_TIM_PWM_Start_IT+0x278>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d013      	beq.n	8007bfc <HAL_TIM_PWM_Start_IT+0x1d8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a31      	ldr	r2, [pc, #196]	@ (8007ca0 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d00e      	beq.n	8007bfc <HAL_TIM_PWM_Start_IT+0x1d8>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a30      	ldr	r2, [pc, #192]	@ (8007ca4 <HAL_TIM_PWM_Start_IT+0x280>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d009      	beq.n	8007bfc <HAL_TIM_PWM_Start_IT+0x1d8>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a2e      	ldr	r2, [pc, #184]	@ (8007ca8 <HAL_TIM_PWM_Start_IT+0x284>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d004      	beq.n	8007bfc <HAL_TIM_PWM_Start_IT+0x1d8>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a2d      	ldr	r2, [pc, #180]	@ (8007cac <HAL_TIM_PWM_Start_IT+0x288>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d101      	bne.n	8007c00 <HAL_TIM_PWM_Start_IT+0x1dc>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e000      	b.n	8007c02 <HAL_TIM_PWM_Start_IT+0x1de>
 8007c00:	2300      	movs	r3, #0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d007      	beq.n	8007c16 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a20      	ldr	r2, [pc, #128]	@ (8007c9c <HAL_TIM_PWM_Start_IT+0x278>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d018      	beq.n	8007c52 <HAL_TIM_PWM_Start_IT+0x22e>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c28:	d013      	beq.n	8007c52 <HAL_TIM_PWM_Start_IT+0x22e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a20      	ldr	r2, [pc, #128]	@ (8007cb0 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d00e      	beq.n	8007c52 <HAL_TIM_PWM_Start_IT+0x22e>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a1e      	ldr	r2, [pc, #120]	@ (8007cb4 <HAL_TIM_PWM_Start_IT+0x290>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d009      	beq.n	8007c52 <HAL_TIM_PWM_Start_IT+0x22e>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a17      	ldr	r2, [pc, #92]	@ (8007ca0 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d004      	beq.n	8007c52 <HAL_TIM_PWM_Start_IT+0x22e>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a15      	ldr	r2, [pc, #84]	@ (8007ca4 <HAL_TIM_PWM_Start_IT+0x280>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d115      	bne.n	8007c7e <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	4b17      	ldr	r3, [pc, #92]	@ (8007cb8 <HAL_TIM_PWM_Start_IT+0x294>)
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2b06      	cmp	r3, #6
 8007c62:	d015      	beq.n	8007c90 <HAL_TIM_PWM_Start_IT+0x26c>
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c6a:	d011      	beq.n	8007c90 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0201 	orr.w	r2, r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c7c:	e008      	b.n	8007c90 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f042 0201 	orr.w	r2, r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e000      	b.n	8007c92 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c90:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	40012c00 	.word	0x40012c00
 8007ca0:	40013400 	.word	0x40013400
 8007ca4:	40014000 	.word	0x40014000
 8007ca8:	40014400 	.word	0x40014400
 8007cac:	40014800 	.word	0x40014800
 8007cb0:	40000400 	.word	0x40000400
 8007cb4:	40000800 	.word	0x40000800
 8007cb8:	00010007 	.word	0x00010007

08007cbc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e049      	b.n	8007d62 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d106      	bne.n	8007ce8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f841 	bl	8007d6a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f000 fddc 	bl	80088b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
	...

08007d80 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d104      	bne.n	8007d9e <HAL_TIM_IC_Start_IT+0x1e>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	e023      	b.n	8007de6 <HAL_TIM_IC_Start_IT+0x66>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d104      	bne.n	8007dae <HAL_TIM_IC_Start_IT+0x2e>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	e01b      	b.n	8007de6 <HAL_TIM_IC_Start_IT+0x66>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b08      	cmp	r3, #8
 8007db2:	d104      	bne.n	8007dbe <HAL_TIM_IC_Start_IT+0x3e>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	e013      	b.n	8007de6 <HAL_TIM_IC_Start_IT+0x66>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b0c      	cmp	r3, #12
 8007dc2:	d104      	bne.n	8007dce <HAL_TIM_IC_Start_IT+0x4e>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	e00b      	b.n	8007de6 <HAL_TIM_IC_Start_IT+0x66>
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b10      	cmp	r3, #16
 8007dd2:	d104      	bne.n	8007dde <HAL_TIM_IC_Start_IT+0x5e>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	e003      	b.n	8007de6 <HAL_TIM_IC_Start_IT+0x66>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d104      	bne.n	8007df8 <HAL_TIM_IC_Start_IT+0x78>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	e013      	b.n	8007e20 <HAL_TIM_IC_Start_IT+0xa0>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d104      	bne.n	8007e08 <HAL_TIM_IC_Start_IT+0x88>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	e00b      	b.n	8007e20 <HAL_TIM_IC_Start_IT+0xa0>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b08      	cmp	r3, #8
 8007e0c:	d104      	bne.n	8007e18 <HAL_TIM_IC_Start_IT+0x98>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	e003      	b.n	8007e20 <HAL_TIM_IC_Start_IT+0xa0>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d102      	bne.n	8007e2e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e28:	7b7b      	ldrb	r3, [r7, #13]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d001      	beq.n	8007e32 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e0d8      	b.n	8007fe4 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d104      	bne.n	8007e42 <HAL_TIM_IC_Start_IT+0xc2>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e40:	e023      	b.n	8007e8a <HAL_TIM_IC_Start_IT+0x10a>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b04      	cmp	r3, #4
 8007e46:	d104      	bne.n	8007e52 <HAL_TIM_IC_Start_IT+0xd2>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e50:	e01b      	b.n	8007e8a <HAL_TIM_IC_Start_IT+0x10a>
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	d104      	bne.n	8007e62 <HAL_TIM_IC_Start_IT+0xe2>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e60:	e013      	b.n	8007e8a <HAL_TIM_IC_Start_IT+0x10a>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b0c      	cmp	r3, #12
 8007e66:	d104      	bne.n	8007e72 <HAL_TIM_IC_Start_IT+0xf2>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e70:	e00b      	b.n	8007e8a <HAL_TIM_IC_Start_IT+0x10a>
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b10      	cmp	r3, #16
 8007e76:	d104      	bne.n	8007e82 <HAL_TIM_IC_Start_IT+0x102>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e80:	e003      	b.n	8007e8a <HAL_TIM_IC_Start_IT+0x10a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2202      	movs	r2, #2
 8007e86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d104      	bne.n	8007e9a <HAL_TIM_IC_Start_IT+0x11a>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e98:	e013      	b.n	8007ec2 <HAL_TIM_IC_Start_IT+0x142>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d104      	bne.n	8007eaa <HAL_TIM_IC_Start_IT+0x12a>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ea8:	e00b      	b.n	8007ec2 <HAL_TIM_IC_Start_IT+0x142>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d104      	bne.n	8007eba <HAL_TIM_IC_Start_IT+0x13a>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007eb8:	e003      	b.n	8007ec2 <HAL_TIM_IC_Start_IT+0x142>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2b0c      	cmp	r3, #12
 8007ec6:	d841      	bhi.n	8007f4c <HAL_TIM_IC_Start_IT+0x1cc>
 8007ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ed0 <HAL_TIM_IC_Start_IT+0x150>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007f05 	.word	0x08007f05
 8007ed4:	08007f4d 	.word	0x08007f4d
 8007ed8:	08007f4d 	.word	0x08007f4d
 8007edc:	08007f4d 	.word	0x08007f4d
 8007ee0:	08007f17 	.word	0x08007f17
 8007ee4:	08007f4d 	.word	0x08007f4d
 8007ee8:	08007f4d 	.word	0x08007f4d
 8007eec:	08007f4d 	.word	0x08007f4d
 8007ef0:	08007f29 	.word	0x08007f29
 8007ef4:	08007f4d 	.word	0x08007f4d
 8007ef8:	08007f4d 	.word	0x08007f4d
 8007efc:	08007f4d 	.word	0x08007f4d
 8007f00:	08007f3b 	.word	0x08007f3b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f042 0202 	orr.w	r2, r2, #2
 8007f12:	60da      	str	r2, [r3, #12]
      break;
 8007f14:	e01d      	b.n	8007f52 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f042 0204 	orr.w	r2, r2, #4
 8007f24:	60da      	str	r2, [r3, #12]
      break;
 8007f26:	e014      	b.n	8007f52 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0208 	orr.w	r2, r2, #8
 8007f36:	60da      	str	r2, [r3, #12]
      break;
 8007f38:	e00b      	b.n	8007f52 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68da      	ldr	r2, [r3, #12]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 0210 	orr.w	r2, r2, #16
 8007f48:	60da      	str	r2, [r3, #12]
      break;
 8007f4a:	e002      	b.n	8007f52 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f50:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d144      	bne.n	8007fe2 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f001 fab9 	bl	80094d8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a20      	ldr	r2, [pc, #128]	@ (8007fec <HAL_TIM_IC_Start_IT+0x26c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d018      	beq.n	8007fa2 <HAL_TIM_IC_Start_IT+0x222>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f78:	d013      	beq.n	8007fa2 <HAL_TIM_IC_Start_IT+0x222>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ff0 <HAL_TIM_IC_Start_IT+0x270>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d00e      	beq.n	8007fa2 <HAL_TIM_IC_Start_IT+0x222>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a1a      	ldr	r2, [pc, #104]	@ (8007ff4 <HAL_TIM_IC_Start_IT+0x274>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d009      	beq.n	8007fa2 <HAL_TIM_IC_Start_IT+0x222>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a19      	ldr	r2, [pc, #100]	@ (8007ff8 <HAL_TIM_IC_Start_IT+0x278>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d004      	beq.n	8007fa2 <HAL_TIM_IC_Start_IT+0x222>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a17      	ldr	r2, [pc, #92]	@ (8007ffc <HAL_TIM_IC_Start_IT+0x27c>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d115      	bne.n	8007fce <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	4b15      	ldr	r3, [pc, #84]	@ (8008000 <HAL_TIM_IC_Start_IT+0x280>)
 8007faa:	4013      	ands	r3, r2
 8007fac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b06      	cmp	r3, #6
 8007fb2:	d015      	beq.n	8007fe0 <HAL_TIM_IC_Start_IT+0x260>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fba:	d011      	beq.n	8007fe0 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0201 	orr.w	r2, r2, #1
 8007fca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fcc:	e008      	b.n	8007fe0 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f042 0201 	orr.w	r2, r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e000      	b.n	8007fe2 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fe0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	40012c00 	.word	0x40012c00
 8007ff0:	40000400 	.word	0x40000400
 8007ff4:	40000800 	.word	0x40000800
 8007ff8:	40013400 	.word	0x40013400
 8007ffc:	40014000 	.word	0x40014000
 8008000:	00010007 	.word	0x00010007

08008004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d020      	beq.n	8008068 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01b      	beq.n	8008068 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f06f 0202 	mvn.w	r2, #2
 8008038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	f003 0303 	and.w	r3, r3, #3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7fa f8b2 	bl	80021b8 <HAL_TIM_IC_CaptureCallback>
 8008054:	e005      	b.n	8008062 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fc10 	bl	800887c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fc17 	bl	8008890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f003 0304 	and.w	r3, r3, #4
 800806e:	2b00      	cmp	r3, #0
 8008070:	d020      	beq.n	80080b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f003 0304 	and.w	r3, r3, #4
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01b      	beq.n	80080b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f06f 0204 	mvn.w	r2, #4
 8008084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2202      	movs	r2, #2
 800808a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7fa f88c 	bl	80021b8 <HAL_TIM_IC_CaptureCallback>
 80080a0:	e005      	b.n	80080ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fbea 	bl	800887c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fbf1 	bl	8008890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f003 0308 	and.w	r3, r3, #8
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d020      	beq.n	8008100 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f003 0308 	and.w	r3, r3, #8
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d01b      	beq.n	8008100 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f06f 0208 	mvn.w	r2, #8
 80080d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2204      	movs	r2, #4
 80080d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	f003 0303 	and.w	r3, r3, #3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fa f866 	bl	80021b8 <HAL_TIM_IC_CaptureCallback>
 80080ec:	e005      	b.n	80080fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fbc4 	bl	800887c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fbcb 	bl	8008890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f003 0310 	and.w	r3, r3, #16
 8008106:	2b00      	cmp	r3, #0
 8008108:	d020      	beq.n	800814c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f003 0310 	and.w	r3, r3, #16
 8008110:	2b00      	cmp	r3, #0
 8008112:	d01b      	beq.n	800814c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0210 	mvn.w	r2, #16
 800811c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2208      	movs	r2, #8
 8008122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7fa f840 	bl	80021b8 <HAL_TIM_IC_CaptureCallback>
 8008138:	e005      	b.n	8008146 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fb9e 	bl	800887c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fba5 	bl	8008890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00c      	beq.n	8008170 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d007      	beq.n	8008170 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0201 	mvn.w	r2, #1
 8008168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7fa f85c 	bl	8002228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00c      	beq.n	800819e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800818a:	2b00      	cmp	r3, #0
 800818c:	d007      	beq.n	800819e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 fb8f 	bl	80098bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00c      	beq.n	80081c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d007      	beq.n	80081c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80081ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f001 fb87 	bl	80098d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00c      	beq.n	80081e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d007      	beq.n	80081e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80081de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fb5f 	bl	80088a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f003 0320 	and.w	r3, r3, #32
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00c      	beq.n	800820a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d007      	beq.n	800820a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f06f 0220 	mvn.w	r2, #32
 8008202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f001 fb4f 	bl	80098a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00c      	beq.n	800822e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d007      	beq.n	800822e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 fb5b 	bl	80098e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00c      	beq.n	8008252 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d007      	beq.n	8008252 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800824a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 fb53 	bl	80098f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00c      	beq.n	8008276 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d007      	beq.n	8008276 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800826e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 fb4b 	bl	800990c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00c      	beq.n	800829a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d007      	beq.n	800829a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 fb43 	bl	8009920 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800829a:	bf00      	nop
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b086      	sub	sp, #24
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	60f8      	str	r0, [r7, #12]
 80082aa:	60b9      	str	r1, [r7, #8]
 80082ac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d101      	bne.n	80082c0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80082bc:	2302      	movs	r3, #2
 80082be:	e088      	b.n	80083d2 <HAL_TIM_IC_ConfigChannel+0x130>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d11b      	bne.n	8008306 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80082de:	f000 ff41 	bl	8009164 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	699a      	ldr	r2, [r3, #24]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 020c 	bic.w	r2, r2, #12
 80082f0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6999      	ldr	r1, [r3, #24]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	430a      	orrs	r2, r1
 8008302:	619a      	str	r2, [r3, #24]
 8008304:	e060      	b.n	80083c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b04      	cmp	r3, #4
 800830a:	d11c      	bne.n	8008346 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800831c:	f000 ffb9 	bl	8009292 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	699a      	ldr	r2, [r3, #24]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800832e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6999      	ldr	r1, [r3, #24]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	021a      	lsls	r2, r3, #8
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	619a      	str	r2, [r3, #24]
 8008344:	e040      	b.n	80083c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b08      	cmp	r3, #8
 800834a:	d11b      	bne.n	8008384 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800835c:	f001 f806 	bl	800936c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	69da      	ldr	r2, [r3, #28]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 020c 	bic.w	r2, r2, #12
 800836e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	69d9      	ldr	r1, [r3, #28]
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	689a      	ldr	r2, [r3, #8]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	61da      	str	r2, [r3, #28]
 8008382:	e021      	b.n	80083c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b0c      	cmp	r3, #12
 8008388:	d11c      	bne.n	80083c4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800839a:	f001 f823 	bl	80093e4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	69da      	ldr	r2, [r3, #28]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80083ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	69d9      	ldr	r1, [r3, #28]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	021a      	lsls	r2, r3, #8
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	61da      	str	r2, [r3, #28]
 80083c2:	e001      	b.n	80083c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3718      	adds	r7, #24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
	...

080083dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d101      	bne.n	80083fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083f6:	2302      	movs	r3, #2
 80083f8:	e0ff      	b.n	80085fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b14      	cmp	r3, #20
 8008406:	f200 80f0 	bhi.w	80085ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800840a:	a201      	add	r2, pc, #4	@ (adr r2, 8008410 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	08008465 	.word	0x08008465
 8008414:	080085eb 	.word	0x080085eb
 8008418:	080085eb 	.word	0x080085eb
 800841c:	080085eb 	.word	0x080085eb
 8008420:	080084a5 	.word	0x080084a5
 8008424:	080085eb 	.word	0x080085eb
 8008428:	080085eb 	.word	0x080085eb
 800842c:	080085eb 	.word	0x080085eb
 8008430:	080084e7 	.word	0x080084e7
 8008434:	080085eb 	.word	0x080085eb
 8008438:	080085eb 	.word	0x080085eb
 800843c:	080085eb 	.word	0x080085eb
 8008440:	08008527 	.word	0x08008527
 8008444:	080085eb 	.word	0x080085eb
 8008448:	080085eb 	.word	0x080085eb
 800844c:	080085eb 	.word	0x080085eb
 8008450:	08008569 	.word	0x08008569
 8008454:	080085eb 	.word	0x080085eb
 8008458:	080085eb 	.word	0x080085eb
 800845c:	080085eb 	.word	0x080085eb
 8008460:	080085a9 	.word	0x080085a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68b9      	ldr	r1, [r7, #8]
 800846a:	4618      	mov	r0, r3
 800846c:	f000 fac0 	bl	80089f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	699a      	ldr	r2, [r3, #24]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f042 0208 	orr.w	r2, r2, #8
 800847e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	699a      	ldr	r2, [r3, #24]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0204 	bic.w	r2, r2, #4
 800848e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6999      	ldr	r1, [r3, #24]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	691a      	ldr	r2, [r3, #16]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	430a      	orrs	r2, r1
 80084a0:	619a      	str	r2, [r3, #24]
      break;
 80084a2:	e0a5      	b.n	80085f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68b9      	ldr	r1, [r7, #8]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fb30 	bl	8008b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	699a      	ldr	r2, [r3, #24]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699a      	ldr	r2, [r3, #24]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6999      	ldr	r1, [r3, #24]
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	021a      	lsls	r2, r3, #8
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	430a      	orrs	r2, r1
 80084e2:	619a      	str	r2, [r3, #24]
      break;
 80084e4:	e084      	b.n	80085f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68b9      	ldr	r1, [r7, #8]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 fb99 	bl	8008c24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	69da      	ldr	r2, [r3, #28]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f042 0208 	orr.w	r2, r2, #8
 8008500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69da      	ldr	r2, [r3, #28]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 0204 	bic.w	r2, r2, #4
 8008510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	69d9      	ldr	r1, [r3, #28]
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	691a      	ldr	r2, [r3, #16]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	61da      	str	r2, [r3, #28]
      break;
 8008524:	e064      	b.n	80085f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68b9      	ldr	r1, [r7, #8]
 800852c:	4618      	mov	r0, r3
 800852e:	f000 fc01 	bl	8008d34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	69da      	ldr	r2, [r3, #28]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69da      	ldr	r2, [r3, #28]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	69d9      	ldr	r1, [r3, #28]
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	021a      	lsls	r2, r3, #8
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	61da      	str	r2, [r3, #28]
      break;
 8008566:	e043      	b.n	80085f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fc6a 	bl	8008e48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f042 0208 	orr.w	r2, r2, #8
 8008582:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0204 	bic.w	r2, r2, #4
 8008592:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	691a      	ldr	r2, [r3, #16]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	430a      	orrs	r2, r1
 80085a4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80085a6:	e023      	b.n	80085f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fcae 	bl	8008f10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	021a      	lsls	r2, r3, #8
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	430a      	orrs	r2, r1
 80085e6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80085e8:	e002      	b.n	80085f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	75fb      	strb	r3, [r7, #23]
      break;
 80085ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3718      	adds	r7, #24
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop

08008604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008618:	2b01      	cmp	r3, #1
 800861a:	d101      	bne.n	8008620 <HAL_TIM_ConfigClockSource+0x1c>
 800861c:	2302      	movs	r3, #2
 800861e:	e0de      	b.n	80087de <HAL_TIM_ConfigClockSource+0x1da>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800863e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800864a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a63      	ldr	r2, [pc, #396]	@ (80087e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800865a:	4293      	cmp	r3, r2
 800865c:	f000 80a9 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008660:	4a61      	ldr	r2, [pc, #388]	@ (80087e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008662:	4293      	cmp	r3, r2
 8008664:	f200 80ae 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008668:	4a60      	ldr	r2, [pc, #384]	@ (80087ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800866a:	4293      	cmp	r3, r2
 800866c:	f000 80a1 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008670:	4a5e      	ldr	r2, [pc, #376]	@ (80087ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8008672:	4293      	cmp	r3, r2
 8008674:	f200 80a6 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008678:	4a5d      	ldr	r2, [pc, #372]	@ (80087f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800867a:	4293      	cmp	r3, r2
 800867c:	f000 8099 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008680:	4a5b      	ldr	r2, [pc, #364]	@ (80087f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008682:	4293      	cmp	r3, r2
 8008684:	f200 809e 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008688:	4a5a      	ldr	r2, [pc, #360]	@ (80087f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800868a:	4293      	cmp	r3, r2
 800868c:	f000 8091 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008690:	4a58      	ldr	r2, [pc, #352]	@ (80087f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008692:	4293      	cmp	r3, r2
 8008694:	f200 8096 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008698:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800869c:	f000 8089 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80086a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80086a4:	f200 808e 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80086a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086ac:	d03e      	beq.n	800872c <HAL_TIM_ConfigClockSource+0x128>
 80086ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086b2:	f200 8087 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80086b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086ba:	f000 8086 	beq.w	80087ca <HAL_TIM_ConfigClockSource+0x1c6>
 80086be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086c2:	d87f      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80086c4:	2b70      	cmp	r3, #112	@ 0x70
 80086c6:	d01a      	beq.n	80086fe <HAL_TIM_ConfigClockSource+0xfa>
 80086c8:	2b70      	cmp	r3, #112	@ 0x70
 80086ca:	d87b      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80086cc:	2b60      	cmp	r3, #96	@ 0x60
 80086ce:	d050      	beq.n	8008772 <HAL_TIM_ConfigClockSource+0x16e>
 80086d0:	2b60      	cmp	r3, #96	@ 0x60
 80086d2:	d877      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80086d4:	2b50      	cmp	r3, #80	@ 0x50
 80086d6:	d03c      	beq.n	8008752 <HAL_TIM_ConfigClockSource+0x14e>
 80086d8:	2b50      	cmp	r3, #80	@ 0x50
 80086da:	d873      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80086dc:	2b40      	cmp	r3, #64	@ 0x40
 80086de:	d058      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0x18e>
 80086e0:	2b40      	cmp	r3, #64	@ 0x40
 80086e2:	d86f      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80086e4:	2b30      	cmp	r3, #48	@ 0x30
 80086e6:	d064      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80086e8:	2b30      	cmp	r3, #48	@ 0x30
 80086ea:	d86b      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80086ec:	2b20      	cmp	r3, #32
 80086ee:	d060      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	d867      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d05c      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	d05a      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80086fc:	e062      	b.n	80087c4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800870e:	f000 fec3 	bl	8009498 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	609a      	str	r2, [r3, #8]
      break;
 800872a:	e04f      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800873c:	f000 feac 	bl	8009498 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689a      	ldr	r2, [r3, #8]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800874e:	609a      	str	r2, [r3, #8]
      break;
 8008750:	e03c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800875e:	461a      	mov	r2, r3
 8008760:	f000 fd68 	bl	8009234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2150      	movs	r1, #80	@ 0x50
 800876a:	4618      	mov	r0, r3
 800876c:	f000 fe77 	bl	800945e <TIM_ITRx_SetConfig>
      break;
 8008770:	e02c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800877e:	461a      	mov	r2, r3
 8008780:	f000 fdc4 	bl	800930c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2160      	movs	r1, #96	@ 0x60
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fe67 	bl	800945e <TIM_ITRx_SetConfig>
      break;
 8008790:	e01c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800879e:	461a      	mov	r2, r3
 80087a0:	f000 fd48 	bl	8009234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2140      	movs	r1, #64	@ 0x40
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fe57 	bl	800945e <TIM_ITRx_SetConfig>
      break;
 80087b0:	e00c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4619      	mov	r1, r3
 80087bc:	4610      	mov	r0, r2
 80087be:	f000 fe4e 	bl	800945e <TIM_ITRx_SetConfig>
      break;
 80087c2:	e003      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	73fb      	strb	r3, [r7, #15]
      break;
 80087c8:	e000      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80087ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	00100070 	.word	0x00100070
 80087ec:	00100040 	.word	0x00100040
 80087f0:	00100030 	.word	0x00100030
 80087f4:	00100020 	.word	0x00100020

080087f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008808:	2b01      	cmp	r3, #1
 800880a:	d101      	bne.n	8008810 <HAL_TIM_SlaveConfigSynchro+0x18>
 800880c:	2302      	movs	r3, #2
 800880e:	e031      	b.n	8008874 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2202      	movs	r2, #2
 800881c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fbda 	bl	8008fdc <TIM_SlaveTimer_SetConfig>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d009      	beq.n	8008842 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e018      	b.n	8008874 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68da      	ldr	r2, [r3, #12]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008850:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68da      	ldr	r2, [r3, #12]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008860:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a42      	ldr	r2, [pc, #264]	@ (80089d4 <TIM_Base_SetConfig+0x11c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00f      	beq.n	80088f0 <TIM_Base_SetConfig+0x38>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088d6:	d00b      	beq.n	80088f0 <TIM_Base_SetConfig+0x38>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a3f      	ldr	r2, [pc, #252]	@ (80089d8 <TIM_Base_SetConfig+0x120>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d007      	beq.n	80088f0 <TIM_Base_SetConfig+0x38>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a3e      	ldr	r2, [pc, #248]	@ (80089dc <TIM_Base_SetConfig+0x124>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d003      	beq.n	80088f0 <TIM_Base_SetConfig+0x38>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a3d      	ldr	r2, [pc, #244]	@ (80089e0 <TIM_Base_SetConfig+0x128>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d108      	bne.n	8008902 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a33      	ldr	r2, [pc, #204]	@ (80089d4 <TIM_Base_SetConfig+0x11c>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d01b      	beq.n	8008942 <TIM_Base_SetConfig+0x8a>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008910:	d017      	beq.n	8008942 <TIM_Base_SetConfig+0x8a>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a30      	ldr	r2, [pc, #192]	@ (80089d8 <TIM_Base_SetConfig+0x120>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d013      	beq.n	8008942 <TIM_Base_SetConfig+0x8a>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a2f      	ldr	r2, [pc, #188]	@ (80089dc <TIM_Base_SetConfig+0x124>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d00f      	beq.n	8008942 <TIM_Base_SetConfig+0x8a>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a2e      	ldr	r2, [pc, #184]	@ (80089e0 <TIM_Base_SetConfig+0x128>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d00b      	beq.n	8008942 <TIM_Base_SetConfig+0x8a>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a2d      	ldr	r2, [pc, #180]	@ (80089e4 <TIM_Base_SetConfig+0x12c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d007      	beq.n	8008942 <TIM_Base_SetConfig+0x8a>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a2c      	ldr	r2, [pc, #176]	@ (80089e8 <TIM_Base_SetConfig+0x130>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d003      	beq.n	8008942 <TIM_Base_SetConfig+0x8a>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a2b      	ldr	r2, [pc, #172]	@ (80089ec <TIM_Base_SetConfig+0x134>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d108      	bne.n	8008954 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	4313      	orrs	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	4313      	orrs	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a16      	ldr	r2, [pc, #88]	@ (80089d4 <TIM_Base_SetConfig+0x11c>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d00f      	beq.n	80089a0 <TIM_Base_SetConfig+0xe8>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a17      	ldr	r2, [pc, #92]	@ (80089e0 <TIM_Base_SetConfig+0x128>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d00b      	beq.n	80089a0 <TIM_Base_SetConfig+0xe8>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a16      	ldr	r2, [pc, #88]	@ (80089e4 <TIM_Base_SetConfig+0x12c>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d007      	beq.n	80089a0 <TIM_Base_SetConfig+0xe8>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a15      	ldr	r2, [pc, #84]	@ (80089e8 <TIM_Base_SetConfig+0x130>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d003      	beq.n	80089a0 <TIM_Base_SetConfig+0xe8>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a14      	ldr	r2, [pc, #80]	@ (80089ec <TIM_Base_SetConfig+0x134>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d103      	bne.n	80089a8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	691a      	ldr	r2, [r3, #16]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d105      	bne.n	80089c6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	f023 0201 	bic.w	r2, r3, #1
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	611a      	str	r2, [r3, #16]
  }
}
 80089c6:	bf00      	nop
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	40012c00 	.word	0x40012c00
 80089d8:	40000400 	.word	0x40000400
 80089dc:	40000800 	.word	0x40000800
 80089e0:	40013400 	.word	0x40013400
 80089e4:	40014000 	.word	0x40014000
 80089e8:	40014400 	.word	0x40014400
 80089ec:	40014800 	.word	0x40014800

080089f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	f023 0201 	bic.w	r2, r3, #1
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 0303 	bic.w	r3, r3, #3
 8008a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f023 0302 	bic.w	r3, r3, #2
 8008a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a2c      	ldr	r2, [pc, #176]	@ (8008afc <TIM_OC1_SetConfig+0x10c>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00f      	beq.n	8008a70 <TIM_OC1_SetConfig+0x80>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a2b      	ldr	r2, [pc, #172]	@ (8008b00 <TIM_OC1_SetConfig+0x110>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d00b      	beq.n	8008a70 <TIM_OC1_SetConfig+0x80>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8008b04 <TIM_OC1_SetConfig+0x114>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d007      	beq.n	8008a70 <TIM_OC1_SetConfig+0x80>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a29      	ldr	r2, [pc, #164]	@ (8008b08 <TIM_OC1_SetConfig+0x118>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d003      	beq.n	8008a70 <TIM_OC1_SetConfig+0x80>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a28      	ldr	r2, [pc, #160]	@ (8008b0c <TIM_OC1_SetConfig+0x11c>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d10c      	bne.n	8008a8a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f023 0308 	bic.w	r3, r3, #8
 8008a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f023 0304 	bic.w	r3, r3, #4
 8008a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8008afc <TIM_OC1_SetConfig+0x10c>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d00f      	beq.n	8008ab2 <TIM_OC1_SetConfig+0xc2>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a1a      	ldr	r2, [pc, #104]	@ (8008b00 <TIM_OC1_SetConfig+0x110>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d00b      	beq.n	8008ab2 <TIM_OC1_SetConfig+0xc2>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a19      	ldr	r2, [pc, #100]	@ (8008b04 <TIM_OC1_SetConfig+0x114>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d007      	beq.n	8008ab2 <TIM_OC1_SetConfig+0xc2>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a18      	ldr	r2, [pc, #96]	@ (8008b08 <TIM_OC1_SetConfig+0x118>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d003      	beq.n	8008ab2 <TIM_OC1_SetConfig+0xc2>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a17      	ldr	r2, [pc, #92]	@ (8008b0c <TIM_OC1_SetConfig+0x11c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d111      	bne.n	8008ad6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	621a      	str	r2, [r3, #32]
}
 8008af0:	bf00      	nop
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	40012c00 	.word	0x40012c00
 8008b00:	40013400 	.word	0x40013400
 8008b04:	40014000 	.word	0x40014000
 8008b08:	40014400 	.word	0x40014400
 8008b0c:	40014800 	.word	0x40014800

08008b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	f023 0210 	bic.w	r2, r3, #16
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	021b      	lsls	r3, r3, #8
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f023 0320 	bic.w	r3, r3, #32
 8008b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	011b      	lsls	r3, r3, #4
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a28      	ldr	r2, [pc, #160]	@ (8008c10 <TIM_OC2_SetConfig+0x100>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d003      	beq.n	8008b7c <TIM_OC2_SetConfig+0x6c>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a27      	ldr	r2, [pc, #156]	@ (8008c14 <TIM_OC2_SetConfig+0x104>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d10d      	bne.n	8008b98 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	011b      	lsls	r3, r3, #4
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8008c10 <TIM_OC2_SetConfig+0x100>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d00f      	beq.n	8008bc0 <TIM_OC2_SetConfig+0xb0>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8008c14 <TIM_OC2_SetConfig+0x104>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d00b      	beq.n	8008bc0 <TIM_OC2_SetConfig+0xb0>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a1b      	ldr	r2, [pc, #108]	@ (8008c18 <TIM_OC2_SetConfig+0x108>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d007      	beq.n	8008bc0 <TIM_OC2_SetConfig+0xb0>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8008c1c <TIM_OC2_SetConfig+0x10c>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d003      	beq.n	8008bc0 <TIM_OC2_SetConfig+0xb0>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a19      	ldr	r2, [pc, #100]	@ (8008c20 <TIM_OC2_SetConfig+0x110>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d113      	bne.n	8008be8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	621a      	str	r2, [r3, #32]
}
 8008c02:	bf00      	nop
 8008c04:	371c      	adds	r7, #28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	40012c00 	.word	0x40012c00
 8008c14:	40013400 	.word	0x40013400
 8008c18:	40014000 	.word	0x40014000
 8008c1c:	40014400 	.word	0x40014400
 8008c20:	40014800 	.word	0x40014800

08008c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f023 0303 	bic.w	r3, r3, #3
 8008c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	021b      	lsls	r3, r3, #8
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a27      	ldr	r2, [pc, #156]	@ (8008d20 <TIM_OC3_SetConfig+0xfc>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d003      	beq.n	8008c8e <TIM_OC3_SetConfig+0x6a>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a26      	ldr	r2, [pc, #152]	@ (8008d24 <TIM_OC3_SetConfig+0x100>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d10d      	bne.n	8008caa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a1c      	ldr	r2, [pc, #112]	@ (8008d20 <TIM_OC3_SetConfig+0xfc>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d00f      	beq.n	8008cd2 <TIM_OC3_SetConfig+0xae>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8008d24 <TIM_OC3_SetConfig+0x100>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d00b      	beq.n	8008cd2 <TIM_OC3_SetConfig+0xae>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8008d28 <TIM_OC3_SetConfig+0x104>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d007      	beq.n	8008cd2 <TIM_OC3_SetConfig+0xae>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a19      	ldr	r2, [pc, #100]	@ (8008d2c <TIM_OC3_SetConfig+0x108>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d003      	beq.n	8008cd2 <TIM_OC3_SetConfig+0xae>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a18      	ldr	r2, [pc, #96]	@ (8008d30 <TIM_OC3_SetConfig+0x10c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d113      	bne.n	8008cfa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	011b      	lsls	r3, r3, #4
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	011b      	lsls	r3, r3, #4
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	621a      	str	r2, [r3, #32]
}
 8008d14:	bf00      	nop
 8008d16:	371c      	adds	r7, #28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	40012c00 	.word	0x40012c00
 8008d24:	40013400 	.word	0x40013400
 8008d28:	40014000 	.word	0x40014000
 8008d2c:	40014400 	.word	0x40014400
 8008d30:	40014800 	.word	0x40014800

08008d34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a1b      	ldr	r3, [r3, #32]
 8008d48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	021b      	lsls	r3, r3, #8
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	031b      	lsls	r3, r3, #12
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a28      	ldr	r2, [pc, #160]	@ (8008e34 <TIM_OC4_SetConfig+0x100>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d003      	beq.n	8008da0 <TIM_OC4_SetConfig+0x6c>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a27      	ldr	r2, [pc, #156]	@ (8008e38 <TIM_OC4_SetConfig+0x104>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d10d      	bne.n	8008dbc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	031b      	lsls	r3, r3, #12
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8008e34 <TIM_OC4_SetConfig+0x100>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d00f      	beq.n	8008de4 <TIM_OC4_SetConfig+0xb0>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8008e38 <TIM_OC4_SetConfig+0x104>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d00b      	beq.n	8008de4 <TIM_OC4_SetConfig+0xb0>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a1b      	ldr	r2, [pc, #108]	@ (8008e3c <TIM_OC4_SetConfig+0x108>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d007      	beq.n	8008de4 <TIM_OC4_SetConfig+0xb0>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8008e40 <TIM_OC4_SetConfig+0x10c>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d003      	beq.n	8008de4 <TIM_OC4_SetConfig+0xb0>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a19      	ldr	r2, [pc, #100]	@ (8008e44 <TIM_OC4_SetConfig+0x110>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d113      	bne.n	8008e0c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008df2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	019b      	lsls	r3, r3, #6
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	019b      	lsls	r3, r3, #6
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	621a      	str	r2, [r3, #32]
}
 8008e26:	bf00      	nop
 8008e28:	371c      	adds	r7, #28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	40012c00 	.word	0x40012c00
 8008e38:	40013400 	.word	0x40013400
 8008e3c:	40014000 	.word	0x40014000
 8008e40:	40014400 	.word	0x40014400
 8008e44:	40014800 	.word	0x40014800

08008e48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b087      	sub	sp, #28
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a1b      	ldr	r3, [r3, #32]
 8008e5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008e8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	041b      	lsls	r3, r3, #16
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a17      	ldr	r2, [pc, #92]	@ (8008efc <TIM_OC5_SetConfig+0xb4>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d00f      	beq.n	8008ec2 <TIM_OC5_SetConfig+0x7a>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a16      	ldr	r2, [pc, #88]	@ (8008f00 <TIM_OC5_SetConfig+0xb8>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d00b      	beq.n	8008ec2 <TIM_OC5_SetConfig+0x7a>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a15      	ldr	r2, [pc, #84]	@ (8008f04 <TIM_OC5_SetConfig+0xbc>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d007      	beq.n	8008ec2 <TIM_OC5_SetConfig+0x7a>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a14      	ldr	r2, [pc, #80]	@ (8008f08 <TIM_OC5_SetConfig+0xc0>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d003      	beq.n	8008ec2 <TIM_OC5_SetConfig+0x7a>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a13      	ldr	r2, [pc, #76]	@ (8008f0c <TIM_OC5_SetConfig+0xc4>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d109      	bne.n	8008ed6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	021b      	lsls	r3, r3, #8
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	621a      	str	r2, [r3, #32]
}
 8008ef0:	bf00      	nop
 8008ef2:	371c      	adds	r7, #28
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	40012c00 	.word	0x40012c00
 8008f00:	40013400 	.word	0x40013400
 8008f04:	40014000 	.word	0x40014000
 8008f08:	40014400 	.word	0x40014400
 8008f0c:	40014800 	.word	0x40014800

08008f10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a1b      	ldr	r3, [r3, #32]
 8008f24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	021b      	lsls	r3, r3, #8
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	051b      	lsls	r3, r3, #20
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a18      	ldr	r2, [pc, #96]	@ (8008fc8 <TIM_OC6_SetConfig+0xb8>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d00f      	beq.n	8008f8c <TIM_OC6_SetConfig+0x7c>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a17      	ldr	r2, [pc, #92]	@ (8008fcc <TIM_OC6_SetConfig+0xbc>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d00b      	beq.n	8008f8c <TIM_OC6_SetConfig+0x7c>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a16      	ldr	r2, [pc, #88]	@ (8008fd0 <TIM_OC6_SetConfig+0xc0>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d007      	beq.n	8008f8c <TIM_OC6_SetConfig+0x7c>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a15      	ldr	r2, [pc, #84]	@ (8008fd4 <TIM_OC6_SetConfig+0xc4>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d003      	beq.n	8008f8c <TIM_OC6_SetConfig+0x7c>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a14      	ldr	r2, [pc, #80]	@ (8008fd8 <TIM_OC6_SetConfig+0xc8>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d109      	bne.n	8008fa0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	029b      	lsls	r3, r3, #10
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	621a      	str	r2, [r3, #32]
}
 8008fba:	bf00      	nop
 8008fbc:	371c      	adds	r7, #28
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	40012c00 	.word	0x40012c00
 8008fcc:	40013400 	.word	0x40013400
 8008fd0:	40014000 	.word	0x40014000
 8008fd4:	40014400 	.word	0x40014400
 8008fd8:	40014800 	.word	0x40014800

08008fdc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008ff8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ffc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	4313      	orrs	r3, r2
 8009006:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800900e:	f023 0307 	bic.w	r3, r3, #7
 8009012:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	4313      	orrs	r3, r2
 800901c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	4a4a      	ldr	r2, [pc, #296]	@ (8009154 <TIM_SlaveTimer_SetConfig+0x178>)
 800902c:	4293      	cmp	r3, r2
 800902e:	f000 808a 	beq.w	8009146 <TIM_SlaveTimer_SetConfig+0x16a>
 8009032:	4a48      	ldr	r2, [pc, #288]	@ (8009154 <TIM_SlaveTimer_SetConfig+0x178>)
 8009034:	4293      	cmp	r3, r2
 8009036:	f200 8083 	bhi.w	8009140 <TIM_SlaveTimer_SetConfig+0x164>
 800903a:	4a47      	ldr	r2, [pc, #284]	@ (8009158 <TIM_SlaveTimer_SetConfig+0x17c>)
 800903c:	4293      	cmp	r3, r2
 800903e:	f000 8082 	beq.w	8009146 <TIM_SlaveTimer_SetConfig+0x16a>
 8009042:	4a45      	ldr	r2, [pc, #276]	@ (8009158 <TIM_SlaveTimer_SetConfig+0x17c>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d87b      	bhi.n	8009140 <TIM_SlaveTimer_SetConfig+0x164>
 8009048:	4a44      	ldr	r2, [pc, #272]	@ (800915c <TIM_SlaveTimer_SetConfig+0x180>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d07b      	beq.n	8009146 <TIM_SlaveTimer_SetConfig+0x16a>
 800904e:	4a43      	ldr	r2, [pc, #268]	@ (800915c <TIM_SlaveTimer_SetConfig+0x180>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d875      	bhi.n	8009140 <TIM_SlaveTimer_SetConfig+0x164>
 8009054:	4a42      	ldr	r2, [pc, #264]	@ (8009160 <TIM_SlaveTimer_SetConfig+0x184>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d075      	beq.n	8009146 <TIM_SlaveTimer_SetConfig+0x16a>
 800905a:	4a41      	ldr	r2, [pc, #260]	@ (8009160 <TIM_SlaveTimer_SetConfig+0x184>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d86f      	bhi.n	8009140 <TIM_SlaveTimer_SetConfig+0x164>
 8009060:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009064:	d06f      	beq.n	8009146 <TIM_SlaveTimer_SetConfig+0x16a>
 8009066:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800906a:	d869      	bhi.n	8009140 <TIM_SlaveTimer_SetConfig+0x164>
 800906c:	2b70      	cmp	r3, #112	@ 0x70
 800906e:	d01a      	beq.n	80090a6 <TIM_SlaveTimer_SetConfig+0xca>
 8009070:	2b70      	cmp	r3, #112	@ 0x70
 8009072:	d865      	bhi.n	8009140 <TIM_SlaveTimer_SetConfig+0x164>
 8009074:	2b60      	cmp	r3, #96	@ 0x60
 8009076:	d059      	beq.n	800912c <TIM_SlaveTimer_SetConfig+0x150>
 8009078:	2b60      	cmp	r3, #96	@ 0x60
 800907a:	d861      	bhi.n	8009140 <TIM_SlaveTimer_SetConfig+0x164>
 800907c:	2b50      	cmp	r3, #80	@ 0x50
 800907e:	d04b      	beq.n	8009118 <TIM_SlaveTimer_SetConfig+0x13c>
 8009080:	2b50      	cmp	r3, #80	@ 0x50
 8009082:	d85d      	bhi.n	8009140 <TIM_SlaveTimer_SetConfig+0x164>
 8009084:	2b40      	cmp	r3, #64	@ 0x40
 8009086:	d019      	beq.n	80090bc <TIM_SlaveTimer_SetConfig+0xe0>
 8009088:	2b40      	cmp	r3, #64	@ 0x40
 800908a:	d859      	bhi.n	8009140 <TIM_SlaveTimer_SetConfig+0x164>
 800908c:	2b30      	cmp	r3, #48	@ 0x30
 800908e:	d05a      	beq.n	8009146 <TIM_SlaveTimer_SetConfig+0x16a>
 8009090:	2b30      	cmp	r3, #48	@ 0x30
 8009092:	d855      	bhi.n	8009140 <TIM_SlaveTimer_SetConfig+0x164>
 8009094:	2b20      	cmp	r3, #32
 8009096:	d056      	beq.n	8009146 <TIM_SlaveTimer_SetConfig+0x16a>
 8009098:	2b20      	cmp	r3, #32
 800909a:	d851      	bhi.n	8009140 <TIM_SlaveTimer_SetConfig+0x164>
 800909c:	2b00      	cmp	r3, #0
 800909e:	d052      	beq.n	8009146 <TIM_SlaveTimer_SetConfig+0x16a>
 80090a0:	2b10      	cmp	r3, #16
 80090a2:	d050      	beq.n	8009146 <TIM_SlaveTimer_SetConfig+0x16a>
 80090a4:	e04c      	b.n	8009140 <TIM_SlaveTimer_SetConfig+0x164>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80090b6:	f000 f9ef 	bl	8009498 <TIM_ETR_SetConfig>
      break;
 80090ba:	e045      	b.n	8009148 <TIM_SlaveTimer_SetConfig+0x16c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b05      	cmp	r3, #5
 80090c2:	d004      	beq.n	80090ce <TIM_SlaveTimer_SetConfig+0xf2>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80090c8:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80090cc:	d101      	bne.n	80090d2 <TIM_SlaveTimer_SetConfig+0xf6>
      {
        return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e03b      	b.n	800914a <TIM_SlaveTimer_SetConfig+0x16e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
 80090d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6a1a      	ldr	r2, [r3, #32]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f022 0201 	bic.w	r2, r2, #1
 80090e8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090f8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	011b      	lsls	r3, r3, #4
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	4313      	orrs	r3, r2
 8009104:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	621a      	str	r2, [r3, #32]
      break;
 8009116:	e017      	b.n	8009148 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009124:	461a      	mov	r2, r3
 8009126:	f000 f885 	bl	8009234 <TIM_TI1_ConfigInputStage>
      break;
 800912a:	e00d      	b.n	8009148 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009138:	461a      	mov	r2, r3
 800913a:	f000 f8e7 	bl	800930c <TIM_TI2_ConfigInputStage>
      break;
 800913e:	e003      	b.n	8009148 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	75fb      	strb	r3, [r7, #23]
      break;
 8009144:	e000      	b.n	8009148 <TIM_SlaveTimer_SetConfig+0x16c>
      break;
 8009146:	bf00      	nop
  }

  return status;
 8009148:	7dfb      	ldrb	r3, [r7, #23]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3718      	adds	r7, #24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	00100070 	.word	0x00100070
 8009158:	00100040 	.word	0x00100040
 800915c:	00100030 	.word	0x00100030
 8009160:	00100020 	.word	0x00100020

08009164 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009164:	b480      	push	{r7}
 8009166:	b087      	sub	sp, #28
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
 8009170:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	f023 0201 	bic.w	r2, r3, #1
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	4a24      	ldr	r2, [pc, #144]	@ (8009220 <TIM_TI1_SetConfig+0xbc>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d013      	beq.n	80091ba <TIM_TI1_SetConfig+0x56>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009198:	d00f      	beq.n	80091ba <TIM_TI1_SetConfig+0x56>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	4a21      	ldr	r2, [pc, #132]	@ (8009224 <TIM_TI1_SetConfig+0xc0>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d00b      	beq.n	80091ba <TIM_TI1_SetConfig+0x56>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	4a20      	ldr	r2, [pc, #128]	@ (8009228 <TIM_TI1_SetConfig+0xc4>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d007      	beq.n	80091ba <TIM_TI1_SetConfig+0x56>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4a1f      	ldr	r2, [pc, #124]	@ (800922c <TIM_TI1_SetConfig+0xc8>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d003      	beq.n	80091ba <TIM_TI1_SetConfig+0x56>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	4a1e      	ldr	r2, [pc, #120]	@ (8009230 <TIM_TI1_SetConfig+0xcc>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d101      	bne.n	80091be <TIM_TI1_SetConfig+0x5a>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e000      	b.n	80091c0 <TIM_TI1_SetConfig+0x5c>
 80091be:	2300      	movs	r3, #0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d008      	beq.n	80091d6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	f023 0303 	bic.w	r3, r3, #3
 80091ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	617b      	str	r3, [r7, #20]
 80091d4:	e003      	b.n	80091de <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f043 0301 	orr.w	r3, r3, #1
 80091dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	011b      	lsls	r3, r3, #4
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f023 030a 	bic.w	r3, r3, #10
 80091f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	f003 030a 	and.w	r3, r3, #10
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	4313      	orrs	r3, r2
 8009204:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	621a      	str	r2, [r3, #32]
}
 8009212:	bf00      	nop
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	40012c00 	.word	0x40012c00
 8009224:	40000400 	.word	0x40000400
 8009228:	40000800 	.word	0x40000800
 800922c:	40013400 	.word	0x40013400
 8009230:	40014000 	.word	0x40014000

08009234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009234:	b480      	push	{r7}
 8009236:	b087      	sub	sp, #28
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6a1b      	ldr	r3, [r3, #32]
 8009244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	f023 0201 	bic.w	r2, r3, #1
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800925e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	011b      	lsls	r3, r3, #4
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	4313      	orrs	r3, r2
 8009268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	f023 030a 	bic.w	r3, r3, #10
 8009270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	4313      	orrs	r3, r2
 8009278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	621a      	str	r2, [r3, #32]
}
 8009286:	bf00      	nop
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009292:	b480      	push	{r7}
 8009294:	b087      	sub	sp, #28
 8009296:	af00      	add	r7, sp, #0
 8009298:	60f8      	str	r0, [r7, #12]
 800929a:	60b9      	str	r1, [r7, #8]
 800929c:	607a      	str	r2, [r7, #4]
 800929e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6a1b      	ldr	r3, [r3, #32]
 80092a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	f023 0210 	bic.w	r2, r3, #16
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	021b      	lsls	r3, r3, #8
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	031b      	lsls	r3, r3, #12
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	4313      	orrs	r3, r2
 80092dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	011b      	lsls	r3, r3, #4
 80092ea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	621a      	str	r2, [r3, #32]
}
 8009300:	bf00      	nop
 8009302:	371c      	adds	r7, #28
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800930c:	b480      	push	{r7}
 800930e:	b087      	sub	sp, #28
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6a1b      	ldr	r3, [r3, #32]
 800931c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	f023 0210 	bic.w	r2, r3, #16
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	031b      	lsls	r3, r3, #12
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	4313      	orrs	r3, r2
 8009340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009348:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	011b      	lsls	r3, r3, #4
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	4313      	orrs	r3, r2
 8009352:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	621a      	str	r2, [r3, #32]
}
 8009360:	bf00      	nop
 8009362:	371c      	adds	r7, #28
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800936c:	b480      	push	{r7}
 800936e:	b087      	sub	sp, #28
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	f023 0303 	bic.w	r3, r3, #3
 8009398:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4313      	orrs	r3, r2
 80093a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80093a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	011b      	lsls	r3, r3, #4
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80093bc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	021b      	lsls	r3, r3, #8
 80093c2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	697a      	ldr	r2, [r7, #20]
 80093d6:	621a      	str	r2, [r3, #32]
}
 80093d8:	bf00      	nop
 80093da:	371c      	adds	r7, #28
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
 80093f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6a1b      	ldr	r3, [r3, #32]
 80093f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6a1b      	ldr	r3, [r3, #32]
 80093fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	69db      	ldr	r3, [r3, #28]
 8009408:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009410:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	021b      	lsls	r3, r3, #8
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	4313      	orrs	r3, r2
 800941a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009422:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	031b      	lsls	r3, r3, #12
 8009428:	b29b      	uxth	r3, r3
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	4313      	orrs	r3, r2
 800942e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009436:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	031b      	lsls	r3, r3, #12
 800943c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	4313      	orrs	r3, r2
 8009444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	697a      	ldr	r2, [r7, #20]
 8009450:	621a      	str	r2, [r3, #32]
}
 8009452:	bf00      	nop
 8009454:	371c      	adds	r7, #28
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800945e:	b480      	push	{r7}
 8009460:	b085      	sub	sp, #20
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4313      	orrs	r3, r2
 8009480:	f043 0307 	orr.w	r3, r3, #7
 8009484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	609a      	str	r2, [r3, #8]
}
 800948c:	bf00      	nop
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009498:	b480      	push	{r7}
 800949a:	b087      	sub	sp, #28
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	021a      	lsls	r2, r3, #8
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	431a      	orrs	r2, r3
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	4313      	orrs	r3, r2
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	609a      	str	r2, [r3, #8]
}
 80094cc:	bf00      	nop
 80094ce:	371c      	adds	r7, #28
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094d8:	b480      	push	{r7}
 80094da:	b087      	sub	sp, #28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	f003 031f 	and.w	r3, r3, #31
 80094ea:	2201      	movs	r2, #1
 80094ec:	fa02 f303 	lsl.w	r3, r2, r3
 80094f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6a1a      	ldr	r2, [r3, #32]
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	43db      	mvns	r3, r3
 80094fa:	401a      	ands	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6a1a      	ldr	r2, [r3, #32]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	f003 031f 	and.w	r3, r3, #31
 800950a:	6879      	ldr	r1, [r7, #4]
 800950c:	fa01 f303 	lsl.w	r3, r1, r3
 8009510:	431a      	orrs	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	621a      	str	r2, [r3, #32]
}
 8009516:	bf00      	nop
 8009518:	371c      	adds	r7, #28
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
	...

08009524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009534:	2b01      	cmp	r3, #1
 8009536:	d101      	bne.n	800953c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009538:	2302      	movs	r3, #2
 800953a:	e065      	b.n	8009608 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2202      	movs	r2, #2
 8009548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a2c      	ldr	r2, [pc, #176]	@ (8009614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d004      	beq.n	8009570 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a2b      	ldr	r2, [pc, #172]	@ (8009618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d108      	bne.n	8009582 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009576:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	4313      	orrs	r3, r2
 8009580:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800958c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	4313      	orrs	r3, r2
 8009596:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d018      	beq.n	80095dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095b2:	d013      	beq.n	80095dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a18      	ldr	r2, [pc, #96]	@ (800961c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d00e      	beq.n	80095dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a17      	ldr	r2, [pc, #92]	@ (8009620 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d009      	beq.n	80095dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a12      	ldr	r2, [pc, #72]	@ (8009618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d004      	beq.n	80095dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a13      	ldr	r2, [pc, #76]	@ (8009624 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d10c      	bne.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3714      	adds	r7, #20
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	40012c00 	.word	0x40012c00
 8009618:	40013400 	.word	0x40013400
 800961c:	40000400 	.word	0x40000400
 8009620:	40000800 	.word	0x40000800
 8009624:	40014000 	.word	0x40014000

08009628 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009632:	2300      	movs	r3, #0
 8009634:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800963c:	2b01      	cmp	r3, #1
 800963e:	d101      	bne.n	8009644 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009640:	2302      	movs	r3, #2
 8009642:	e073      	b.n	800972c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	4313      	orrs	r3, r2
 8009658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	4313      	orrs	r3, r2
 8009666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	4313      	orrs	r3, r2
 8009674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4313      	orrs	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	4313      	orrs	r3, r2
 8009690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	695b      	ldr	r3, [r3, #20]
 800969c:	4313      	orrs	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	041b      	lsls	r3, r3, #16
 80096ba:	4313      	orrs	r3, r2
 80096bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	69db      	ldr	r3, [r3, #28]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a19      	ldr	r2, [pc, #100]	@ (8009738 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d004      	beq.n	80096e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a18      	ldr	r2, [pc, #96]	@ (800973c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d11c      	bne.n	800971a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ea:	051b      	lsls	r3, r3, #20
 80096ec:	4313      	orrs	r3, r2
 80096ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009708:	4313      	orrs	r3, r2
 800970a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009716:	4313      	orrs	r3, r2
 8009718:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	40012c00 	.word	0x40012c00
 800973c:	40013400 	.word	0x40013400

08009740 <HAL_TIMEx_RemapConfig>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  __HAL_LOCK(htim);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_TIMEx_RemapConfig+0x18>
 8009754:	2302      	movs	r3, #2
 8009756:	e012      	b.n	800977e <HAL_TIMEx_RemapConfig+0x3e>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  MODIFY_REG(htim->Instance->AF1, TIM1_AF1_ETRSEL_Msk, Remap);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009766:	f423 3170 	bic.w	r1, r3, #245760	@ 0x3c000
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	430a      	orrs	r2, r1
 8009772:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(htim);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
	...

0800978c <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 800978c:	b480      	push	{r7}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d101      	bne.n	80097aa <HAL_TIMEx_TISelection+0x1e>
 80097a6:	2302      	movs	r3, #2
 80097a8:	e073      	b.n	8009892 <HAL_TIMEx_TISelection+0x106>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b0c      	cmp	r3, #12
 80097b6:	d864      	bhi.n	8009882 <HAL_TIMEx_TISelection+0xf6>
 80097b8:	a201      	add	r2, pc, #4	@ (adr r2, 80097c0 <HAL_TIMEx_TISelection+0x34>)
 80097ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097be:	bf00      	nop
 80097c0:	080097f5 	.word	0x080097f5
 80097c4:	08009883 	.word	0x08009883
 80097c8:	08009883 	.word	0x08009883
 80097cc:	08009883 	.word	0x08009883
 80097d0:	08009841 	.word	0x08009841
 80097d4:	08009883 	.word	0x08009883
 80097d8:	08009883 	.word	0x08009883
 80097dc:	08009883 	.word	0x08009883
 80097e0:	08009857 	.word	0x08009857
 80097e4:	08009883 	.word	0x08009883
 80097e8:	08009883 	.word	0x08009883
 80097ec:	08009883 	.word	0x08009883
 80097f0:	0800986d 	.word	0x0800986d
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097fa:	f023 010f 	bic.w	r1, r3, #15
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	430a      	orrs	r2, r1
 8009806:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a24      	ldr	r2, [pc, #144]	@ (80098a0 <HAL_TIMEx_TISelection+0x114>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d004      	beq.n	800981c <HAL_TIMEx_TISelection+0x90>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a23      	ldr	r2, [pc, #140]	@ (80098a4 <HAL_TIMEx_TISelection+0x118>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d108      	bne.n	800982e <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f042 0201 	orr.w	r2, r2, #1
 800982a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 800982c:	e02c      	b.n	8009888 <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f022 0201 	bic.w	r2, r2, #1
 800983c:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800983e:	e023      	b.n	8009888 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009846:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	430a      	orrs	r2, r1
 8009852:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8009854:	e018      	b.n	8009888 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800985c:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	430a      	orrs	r2, r1
 8009868:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800986a:	e00d      	b.n	8009888 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009872:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	430a      	orrs	r2, r1
 800987e:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8009880:	e002      	b.n	8009888 <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	75fb      	strb	r3, [r7, #23]
      break;
 8009886:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009890:	7dfb      	ldrb	r3, [r7, #23]
}
 8009892:	4618      	mov	r0, r3
 8009894:	371c      	adds	r7, #28
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	40014400 	.word	0x40014400
 80098a4:	40014800 	.word	0x40014800

080098a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d101      	bne.n	8009946 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e04a      	b.n	80099dc <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800994c:	2b00      	cmp	r3, #0
 800994e:	d106      	bne.n	800995e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7f9 f9cb 	bl	8002cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2224      	movs	r2, #36	@ 0x24
 8009962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f022 0201 	bic.w	r2, r2, #1
 8009974:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fefe 	bl	800a780 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fc2f 	bl	800a1e8 <UART_SetConfig>
 800998a:	4603      	mov	r3, r0
 800998c:	2b01      	cmp	r3, #1
 800998e:	d101      	bne.n	8009994 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	e023      	b.n	80099dc <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80099a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	689a      	ldr	r2, [r3, #8]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80099b2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	689a      	ldr	r2, [r3, #8]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f042 0208 	orr.w	r2, r2, #8
 80099c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f042 0201 	orr.w	r2, r2, #1
 80099d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 ff75 	bl	800a8c4 <UART_CheckIdleState>
 80099da:	4603      	mov	r3, r0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b08a      	sub	sp, #40	@ 0x28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	4613      	mov	r3, r2
 80099f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099f8:	2b20      	cmp	r3, #32
 80099fa:	d137      	bne.n	8009a6c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <HAL_UART_Receive_IT+0x24>
 8009a02:	88fb      	ldrh	r3, [r7, #6]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d101      	bne.n	8009a0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e030      	b.n	8009a6e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a18      	ldr	r2, [pc, #96]	@ (8009a78 <HAL_UART_Receive_IT+0x94>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d01f      	beq.n	8009a5c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d018      	beq.n	8009a5c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	e853 3f00 	ldrex	r3, [r3]
 8009a36:	613b      	str	r3, [r7, #16]
   return(result);
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	461a      	mov	r2, r3
 8009a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a48:	623b      	str	r3, [r7, #32]
 8009a4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4c:	69f9      	ldr	r1, [r7, #28]
 8009a4e:	6a3a      	ldr	r2, [r7, #32]
 8009a50:	e841 2300 	strex	r3, r2, [r1]
 8009a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1e6      	bne.n	8009a2a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009a5c:	88fb      	ldrh	r3, [r7, #6]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	68b9      	ldr	r1, [r7, #8]
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f001 f846 	bl	800aaf4 <UART_Start_Receive_IT>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	e000      	b.n	8009a6e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009a6c:	2302      	movs	r3, #2
  }
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3728      	adds	r7, #40	@ 0x28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	40008000 	.word	0x40008000

08009a7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b0ba      	sub	sp, #232	@ 0xe8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	69db      	ldr	r3, [r3, #28]
 8009a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009aa2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009aa6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009aaa:	4013      	ands	r3, r2
 8009aac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009ab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d11b      	bne.n	8009af0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009abc:	f003 0320 	and.w	r3, r3, #32
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d015      	beq.n	8009af0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ac8:	f003 0320 	and.w	r3, r3, #32
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d105      	bne.n	8009adc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d009      	beq.n	8009af0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 8300 	beq.w	800a0e6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	4798      	blx	r3
      }
      return;
 8009aee:	e2fa      	b.n	800a0e6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009af0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 8123 	beq.w	8009d40 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009afa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009afe:	4b8d      	ldr	r3, [pc, #564]	@ (8009d34 <HAL_UART_IRQHandler+0x2b8>)
 8009b00:	4013      	ands	r3, r2
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d106      	bne.n	8009b14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8009d38 <HAL_UART_IRQHandler+0x2bc>)
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 8116 	beq.w	8009d40 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b18:	f003 0301 	and.w	r3, r3, #1
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d011      	beq.n	8009b44 <HAL_UART_IRQHandler+0xc8>
 8009b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00b      	beq.n	8009b44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2201      	movs	r2, #1
 8009b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b3a:	f043 0201 	orr.w	r2, r3, #1
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b48:	f003 0302 	and.w	r3, r3, #2
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d011      	beq.n	8009b74 <HAL_UART_IRQHandler+0xf8>
 8009b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00b      	beq.n	8009b74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2202      	movs	r2, #2
 8009b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b6a:	f043 0204 	orr.w	r2, r3, #4
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b78:	f003 0304 	and.w	r3, r3, #4
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d011      	beq.n	8009ba4 <HAL_UART_IRQHandler+0x128>
 8009b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b84:	f003 0301 	and.w	r3, r3, #1
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00b      	beq.n	8009ba4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2204      	movs	r2, #4
 8009b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b9a:	f043 0202 	orr.w	r2, r3, #2
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ba8:	f003 0308 	and.w	r3, r3, #8
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d017      	beq.n	8009be0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bb4:	f003 0320 	and.w	r3, r3, #32
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d105      	bne.n	8009bc8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009bbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009bc0:	4b5c      	ldr	r3, [pc, #368]	@ (8009d34 <HAL_UART_IRQHandler+0x2b8>)
 8009bc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00b      	beq.n	8009be0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2208      	movs	r2, #8
 8009bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bd6:	f043 0208 	orr.w	r2, r3, #8
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009be4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d012      	beq.n	8009c12 <HAL_UART_IRQHandler+0x196>
 8009bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bf0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00c      	beq.n	8009c12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c08:	f043 0220 	orr.w	r2, r3, #32
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f000 8266 	beq.w	800a0ea <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c22:	f003 0320 	and.w	r3, r3, #32
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d013      	beq.n	8009c52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c2e:	f003 0320 	and.w	r3, r3, #32
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d105      	bne.n	8009c42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d007      	beq.n	8009c52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d003      	beq.n	8009c52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c66:	2b40      	cmp	r3, #64	@ 0x40
 8009c68:	d005      	beq.n	8009c76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d054      	beq.n	8009d20 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f001 f85e 	bl	800ad38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c86:	2b40      	cmp	r3, #64	@ 0x40
 8009c88:	d146      	bne.n	8009d18 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	3308      	adds	r3, #8
 8009c90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c98:	e853 3f00 	ldrex	r3, [r3]
 8009c9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ca4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009cb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009cba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009cc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009cc6:	e841 2300 	strex	r3, r2, [r1]
 8009cca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009cce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1d9      	bne.n	8009c8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d017      	beq.n	8009d10 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ce6:	4a15      	ldr	r2, [pc, #84]	@ (8009d3c <HAL_UART_IRQHandler+0x2c0>)
 8009ce8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fb ff31 	bl	8005b58 <HAL_DMA_Abort_IT>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d019      	beq.n	8009d30 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009d0a:	4610      	mov	r0, r2
 8009d0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d0e:	e00f      	b.n	8009d30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f9ff 	bl	800a114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d16:	e00b      	b.n	8009d30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f9fb 	bl	800a114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d1e:	e007      	b.n	8009d30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f9f7 	bl	800a114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009d2e:	e1dc      	b.n	800a0ea <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d30:	bf00      	nop
    return;
 8009d32:	e1da      	b.n	800a0ea <HAL_UART_IRQHandler+0x66e>
 8009d34:	10000001 	.word	0x10000001
 8009d38:	04000120 	.word	0x04000120
 8009d3c:	0800ae05 	.word	0x0800ae05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	f040 8170 	bne.w	800a02a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d4e:	f003 0310 	and.w	r3, r3, #16
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 8169 	beq.w	800a02a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d5c:	f003 0310 	and.w	r3, r3, #16
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 8162 	beq.w	800a02a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2210      	movs	r2, #16
 8009d6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d78:	2b40      	cmp	r3, #64	@ 0x40
 8009d7a:	f040 80d8 	bne.w	8009f2e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 80af 	beq.w	8009ef4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009da0:	429a      	cmp	r2, r3
 8009da2:	f080 80a7 	bcs.w	8009ef4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009dac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 0320 	and.w	r3, r3, #32
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f040 8087 	bne.w	8009ed2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009dd0:	e853 3f00 	ldrex	r3, [r3]
 8009dd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009de0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	461a      	mov	r2, r3
 8009dea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009dee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009df2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009dfe:	e841 2300 	strex	r3, r2, [r1]
 8009e02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1da      	bne.n	8009dc4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3308      	adds	r3, #8
 8009e14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e18:	e853 3f00 	ldrex	r3, [r3]
 8009e1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009e1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e20:	f023 0301 	bic.w	r3, r3, #1
 8009e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3308      	adds	r3, #8
 8009e2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009e32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009e36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009e3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e1      	bne.n	8009e0e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3308      	adds	r3, #8
 8009e50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e54:	e853 3f00 	ldrex	r3, [r3]
 8009e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3308      	adds	r3, #8
 8009e6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009e6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e76:	e841 2300 	strex	r3, r2, [r1]
 8009e7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1e3      	bne.n	8009e4a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2220      	movs	r2, #32
 8009e86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e98:	e853 3f00 	ldrex	r3, [r3]
 8009e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ea0:	f023 0310 	bic.w	r3, r3, #16
 8009ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	461a      	mov	r2, r3
 8009eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009eb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009eb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009eb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009eba:	e841 2300 	strex	r3, r2, [r1]
 8009ebe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1e4      	bne.n	8009e90 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fb fdea 	bl	8005aa6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f91b 	bl	800a128 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009ef2:	e0fc      	b.n	800a0ee <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009efa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009efe:	429a      	cmp	r2, r3
 8009f00:	f040 80f5 	bne.w	800a0ee <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0320 	and.w	r3, r3, #32
 8009f12:	2b20      	cmp	r3, #32
 8009f14:	f040 80eb 	bne.w	800a0ee <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f24:	4619      	mov	r1, r3
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f8fe 	bl	800a128 <HAL_UARTEx_RxEventCallback>
      return;
 8009f2c:	e0df      	b.n	800a0ee <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 80d1 	beq.w	800a0f2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009f50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f000 80cc 	beq.w	800a0f2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f62:	e853 3f00 	ldrex	r3, [r3]
 8009f66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	461a      	mov	r2, r3
 8009f78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f84:	e841 2300 	strex	r3, r2, [r1]
 8009f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1e4      	bne.n	8009f5a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3308      	adds	r3, #8
 8009f96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f9a:	e853 3f00 	ldrex	r3, [r3]
 8009f9e:	623b      	str	r3, [r7, #32]
   return(result);
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009fa6:	f023 0301 	bic.w	r3, r3, #1
 8009faa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3308      	adds	r3, #8
 8009fb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009fb8:	633a      	str	r2, [r7, #48]	@ 0x30
 8009fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fc0:	e841 2300 	strex	r3, r2, [r1]
 8009fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e1      	bne.n	8009f90 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2220      	movs	r2, #32
 8009fd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	e853 3f00 	ldrex	r3, [r3]
 8009fec:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f023 0310 	bic.w	r3, r3, #16
 8009ff4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a002:	61fb      	str	r3, [r7, #28]
 800a004:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a006:	69b9      	ldr	r1, [r7, #24]
 800a008:	69fa      	ldr	r2, [r7, #28]
 800a00a:	e841 2300 	strex	r3, r2, [r1]
 800a00e:	617b      	str	r3, [r7, #20]
   return(result);
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1e4      	bne.n	8009fe0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2202      	movs	r2, #2
 800a01a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a01c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a020:	4619      	mov	r1, r3
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f880 	bl	800a128 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a028:	e063      	b.n	800a0f2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a02a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a02e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00e      	beq.n	800a054 <HAL_UART_IRQHandler+0x5d8>
 800a036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a03a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d008      	beq.n	800a054 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a04a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f001 fc37 	bl	800b8c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a052:	e051      	b.n	800a0f8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d014      	beq.n	800a08a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d105      	bne.n	800a078 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a06c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a070:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d008      	beq.n	800a08a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d03a      	beq.n	800a0f6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	4798      	blx	r3
    }
    return;
 800a088:	e035      	b.n	800a0f6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a08a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a08e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a092:	2b00      	cmp	r3, #0
 800a094:	d009      	beq.n	800a0aa <HAL_UART_IRQHandler+0x62e>
 800a096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a09a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d003      	beq.n	800a0aa <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fec0 	bl	800ae28 <UART_EndTransmit_IT>
    return;
 800a0a8:	e026      	b.n	800a0f8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d009      	beq.n	800a0ca <HAL_UART_IRQHandler+0x64e>
 800a0b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d003      	beq.n	800a0ca <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f001 fc10 	bl	800b8e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0c8:	e016      	b.n	800a0f8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a0ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d010      	beq.n	800a0f8 <HAL_UART_IRQHandler+0x67c>
 800a0d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	da0c      	bge.n	800a0f8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f001 fbf8 	bl	800b8d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0e4:	e008      	b.n	800a0f8 <HAL_UART_IRQHandler+0x67c>
      return;
 800a0e6:	bf00      	nop
 800a0e8:	e006      	b.n	800a0f8 <HAL_UART_IRQHandler+0x67c>
    return;
 800a0ea:	bf00      	nop
 800a0ec:	e004      	b.n	800a0f8 <HAL_UART_IRQHandler+0x67c>
      return;
 800a0ee:	bf00      	nop
 800a0f0:	e002      	b.n	800a0f8 <HAL_UART_IRQHandler+0x67c>
      return;
 800a0f2:	bf00      	nop
 800a0f4:	e000      	b.n	800a0f8 <HAL_UART_IRQHandler+0x67c>
    return;
 800a0f6:	bf00      	nop
  }
}
 800a0f8:	37e8      	adds	r7, #232	@ 0xe8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop

0800a100 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	460b      	mov	r3, r1
 800a132:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800a140:	b480      	push	{r7}
 800a142:	b08f      	sub	sp, #60	@ 0x3c
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d101      	bne.n	800a156 <HAL_HalfDuplex_EnableReceiver+0x16>
 800a152:	2302      	movs	r3, #2
 800a154:	e042      	b.n	800a1dc <HAL_HalfDuplex_EnableReceiver+0x9c>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2224      	movs	r2, #36	@ 0x24
 800a162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16c:	6a3b      	ldr	r3, [r7, #32]
 800a16e:	e853 3f00 	ldrex	r3, [r3]
 800a172:	61fb      	str	r3, [r7, #28]
   return(result);
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	f023 030c 	bic.w	r3, r3, #12
 800a17a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a186:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a18a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a18c:	e841 2300 	strex	r3, r2, [r1]
 800a190:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1e6      	bne.n	800a166 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	e853 3f00 	ldrex	r3, [r3]
 800a1a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	f043 0304 	orr.w	r3, r3, #4
 800a1ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b6:	61bb      	str	r3, [r7, #24]
 800a1b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ba:	6979      	ldr	r1, [r7, #20]
 800a1bc:	69ba      	ldr	r2, [r7, #24]
 800a1be:	e841 2300 	strex	r3, r2, [r1]
 800a1c2:	613b      	str	r3, [r7, #16]
   return(result);
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1e6      	bne.n	800a198 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2220      	movs	r2, #32
 800a1ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	373c      	adds	r7, #60	@ 0x3c
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1ec:	b08c      	sub	sp, #48	@ 0x30
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	689a      	ldr	r2, [r3, #8]
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	431a      	orrs	r2, r3
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	695b      	ldr	r3, [r3, #20]
 800a206:	431a      	orrs	r2, r3
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	4bab      	ldr	r3, [pc, #684]	@ (800a4c4 <UART_SetConfig+0x2dc>)
 800a218:	4013      	ands	r3, r2
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	6812      	ldr	r2, [r2, #0]
 800a21e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a220:	430b      	orrs	r3, r1
 800a222:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	68da      	ldr	r2, [r3, #12]
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	430a      	orrs	r2, r1
 800a238:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	699b      	ldr	r3, [r3, #24]
 800a23e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4aa0      	ldr	r2, [pc, #640]	@ (800a4c8 <UART_SetConfig+0x2e0>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d004      	beq.n	800a254 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	6a1b      	ldr	r3, [r3, #32]
 800a24e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a250:	4313      	orrs	r3, r2
 800a252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a25e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	6812      	ldr	r2, [r2, #0]
 800a266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a268:	430b      	orrs	r3, r1
 800a26a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a272:	f023 010f 	bic.w	r1, r3, #15
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	430a      	orrs	r2, r1
 800a280:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a91      	ldr	r2, [pc, #580]	@ (800a4cc <UART_SetConfig+0x2e4>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d125      	bne.n	800a2d8 <UART_SetConfig+0xf0>
 800a28c:	4b90      	ldr	r3, [pc, #576]	@ (800a4d0 <UART_SetConfig+0x2e8>)
 800a28e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a292:	f003 0303 	and.w	r3, r3, #3
 800a296:	2b03      	cmp	r3, #3
 800a298:	d81a      	bhi.n	800a2d0 <UART_SetConfig+0xe8>
 800a29a:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a0 <UART_SetConfig+0xb8>)
 800a29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a0:	0800a2b1 	.word	0x0800a2b1
 800a2a4:	0800a2c1 	.word	0x0800a2c1
 800a2a8:	0800a2b9 	.word	0x0800a2b9
 800a2ac:	0800a2c9 	.word	0x0800a2c9
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2b6:	e0d6      	b.n	800a466 <UART_SetConfig+0x27e>
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2be:	e0d2      	b.n	800a466 <UART_SetConfig+0x27e>
 800a2c0:	2304      	movs	r3, #4
 800a2c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2c6:	e0ce      	b.n	800a466 <UART_SetConfig+0x27e>
 800a2c8:	2308      	movs	r3, #8
 800a2ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ce:	e0ca      	b.n	800a466 <UART_SetConfig+0x27e>
 800a2d0:	2310      	movs	r3, #16
 800a2d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2d6:	e0c6      	b.n	800a466 <UART_SetConfig+0x27e>
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a7d      	ldr	r2, [pc, #500]	@ (800a4d4 <UART_SetConfig+0x2ec>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d138      	bne.n	800a354 <UART_SetConfig+0x16c>
 800a2e2:	4b7b      	ldr	r3, [pc, #492]	@ (800a4d0 <UART_SetConfig+0x2e8>)
 800a2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2e8:	f003 030c 	and.w	r3, r3, #12
 800a2ec:	2b0c      	cmp	r3, #12
 800a2ee:	d82d      	bhi.n	800a34c <UART_SetConfig+0x164>
 800a2f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f8 <UART_SetConfig+0x110>)
 800a2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f6:	bf00      	nop
 800a2f8:	0800a32d 	.word	0x0800a32d
 800a2fc:	0800a34d 	.word	0x0800a34d
 800a300:	0800a34d 	.word	0x0800a34d
 800a304:	0800a34d 	.word	0x0800a34d
 800a308:	0800a33d 	.word	0x0800a33d
 800a30c:	0800a34d 	.word	0x0800a34d
 800a310:	0800a34d 	.word	0x0800a34d
 800a314:	0800a34d 	.word	0x0800a34d
 800a318:	0800a335 	.word	0x0800a335
 800a31c:	0800a34d 	.word	0x0800a34d
 800a320:	0800a34d 	.word	0x0800a34d
 800a324:	0800a34d 	.word	0x0800a34d
 800a328:	0800a345 	.word	0x0800a345
 800a32c:	2300      	movs	r3, #0
 800a32e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a332:	e098      	b.n	800a466 <UART_SetConfig+0x27e>
 800a334:	2302      	movs	r3, #2
 800a336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a33a:	e094      	b.n	800a466 <UART_SetConfig+0x27e>
 800a33c:	2304      	movs	r3, #4
 800a33e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a342:	e090      	b.n	800a466 <UART_SetConfig+0x27e>
 800a344:	2308      	movs	r3, #8
 800a346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a34a:	e08c      	b.n	800a466 <UART_SetConfig+0x27e>
 800a34c:	2310      	movs	r3, #16
 800a34e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a352:	e088      	b.n	800a466 <UART_SetConfig+0x27e>
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a5f      	ldr	r2, [pc, #380]	@ (800a4d8 <UART_SetConfig+0x2f0>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d125      	bne.n	800a3aa <UART_SetConfig+0x1c2>
 800a35e:	4b5c      	ldr	r3, [pc, #368]	@ (800a4d0 <UART_SetConfig+0x2e8>)
 800a360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a364:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a368:	2b30      	cmp	r3, #48	@ 0x30
 800a36a:	d016      	beq.n	800a39a <UART_SetConfig+0x1b2>
 800a36c:	2b30      	cmp	r3, #48	@ 0x30
 800a36e:	d818      	bhi.n	800a3a2 <UART_SetConfig+0x1ba>
 800a370:	2b20      	cmp	r3, #32
 800a372:	d00a      	beq.n	800a38a <UART_SetConfig+0x1a2>
 800a374:	2b20      	cmp	r3, #32
 800a376:	d814      	bhi.n	800a3a2 <UART_SetConfig+0x1ba>
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <UART_SetConfig+0x19a>
 800a37c:	2b10      	cmp	r3, #16
 800a37e:	d008      	beq.n	800a392 <UART_SetConfig+0x1aa>
 800a380:	e00f      	b.n	800a3a2 <UART_SetConfig+0x1ba>
 800a382:	2300      	movs	r3, #0
 800a384:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a388:	e06d      	b.n	800a466 <UART_SetConfig+0x27e>
 800a38a:	2302      	movs	r3, #2
 800a38c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a390:	e069      	b.n	800a466 <UART_SetConfig+0x27e>
 800a392:	2304      	movs	r3, #4
 800a394:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a398:	e065      	b.n	800a466 <UART_SetConfig+0x27e>
 800a39a:	2308      	movs	r3, #8
 800a39c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3a0:	e061      	b.n	800a466 <UART_SetConfig+0x27e>
 800a3a2:	2310      	movs	r3, #16
 800a3a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3a8:	e05d      	b.n	800a466 <UART_SetConfig+0x27e>
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a4b      	ldr	r2, [pc, #300]	@ (800a4dc <UART_SetConfig+0x2f4>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d125      	bne.n	800a400 <UART_SetConfig+0x218>
 800a3b4:	4b46      	ldr	r3, [pc, #280]	@ (800a4d0 <UART_SetConfig+0x2e8>)
 800a3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a3be:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3c0:	d016      	beq.n	800a3f0 <UART_SetConfig+0x208>
 800a3c2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3c4:	d818      	bhi.n	800a3f8 <UART_SetConfig+0x210>
 800a3c6:	2b80      	cmp	r3, #128	@ 0x80
 800a3c8:	d00a      	beq.n	800a3e0 <UART_SetConfig+0x1f8>
 800a3ca:	2b80      	cmp	r3, #128	@ 0x80
 800a3cc:	d814      	bhi.n	800a3f8 <UART_SetConfig+0x210>
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <UART_SetConfig+0x1f0>
 800a3d2:	2b40      	cmp	r3, #64	@ 0x40
 800a3d4:	d008      	beq.n	800a3e8 <UART_SetConfig+0x200>
 800a3d6:	e00f      	b.n	800a3f8 <UART_SetConfig+0x210>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3de:	e042      	b.n	800a466 <UART_SetConfig+0x27e>
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3e6:	e03e      	b.n	800a466 <UART_SetConfig+0x27e>
 800a3e8:	2304      	movs	r3, #4
 800a3ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3ee:	e03a      	b.n	800a466 <UART_SetConfig+0x27e>
 800a3f0:	2308      	movs	r3, #8
 800a3f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3f6:	e036      	b.n	800a466 <UART_SetConfig+0x27e>
 800a3f8:	2310      	movs	r3, #16
 800a3fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3fe:	e032      	b.n	800a466 <UART_SetConfig+0x27e>
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a30      	ldr	r2, [pc, #192]	@ (800a4c8 <UART_SetConfig+0x2e0>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d12a      	bne.n	800a460 <UART_SetConfig+0x278>
 800a40a:	4b31      	ldr	r3, [pc, #196]	@ (800a4d0 <UART_SetConfig+0x2e8>)
 800a40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a410:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a414:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a418:	d01a      	beq.n	800a450 <UART_SetConfig+0x268>
 800a41a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a41e:	d81b      	bhi.n	800a458 <UART_SetConfig+0x270>
 800a420:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a424:	d00c      	beq.n	800a440 <UART_SetConfig+0x258>
 800a426:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a42a:	d815      	bhi.n	800a458 <UART_SetConfig+0x270>
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d003      	beq.n	800a438 <UART_SetConfig+0x250>
 800a430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a434:	d008      	beq.n	800a448 <UART_SetConfig+0x260>
 800a436:	e00f      	b.n	800a458 <UART_SetConfig+0x270>
 800a438:	2300      	movs	r3, #0
 800a43a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a43e:	e012      	b.n	800a466 <UART_SetConfig+0x27e>
 800a440:	2302      	movs	r3, #2
 800a442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a446:	e00e      	b.n	800a466 <UART_SetConfig+0x27e>
 800a448:	2304      	movs	r3, #4
 800a44a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a44e:	e00a      	b.n	800a466 <UART_SetConfig+0x27e>
 800a450:	2308      	movs	r3, #8
 800a452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a456:	e006      	b.n	800a466 <UART_SetConfig+0x27e>
 800a458:	2310      	movs	r3, #16
 800a45a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a45e:	e002      	b.n	800a466 <UART_SetConfig+0x27e>
 800a460:	2310      	movs	r3, #16
 800a462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a17      	ldr	r2, [pc, #92]	@ (800a4c8 <UART_SetConfig+0x2e0>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	f040 80a8 	bne.w	800a5c2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a472:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a476:	2b08      	cmp	r3, #8
 800a478:	d834      	bhi.n	800a4e4 <UART_SetConfig+0x2fc>
 800a47a:	a201      	add	r2, pc, #4	@ (adr r2, 800a480 <UART_SetConfig+0x298>)
 800a47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a480:	0800a4a5 	.word	0x0800a4a5
 800a484:	0800a4e5 	.word	0x0800a4e5
 800a488:	0800a4ad 	.word	0x0800a4ad
 800a48c:	0800a4e5 	.word	0x0800a4e5
 800a490:	0800a4b3 	.word	0x0800a4b3
 800a494:	0800a4e5 	.word	0x0800a4e5
 800a498:	0800a4e5 	.word	0x0800a4e5
 800a49c:	0800a4e5 	.word	0x0800a4e5
 800a4a0:	0800a4bb 	.word	0x0800a4bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4a4:	f7fc fc18 	bl	8006cd8 <HAL_RCC_GetPCLK1Freq>
 800a4a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a4aa:	e021      	b.n	800a4f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e0 <UART_SetConfig+0x2f8>)
 800a4ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a4b0:	e01e      	b.n	800a4f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4b2:	f7fc fba3 	bl	8006bfc <HAL_RCC_GetSysClockFreq>
 800a4b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a4b8:	e01a      	b.n	800a4f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a4c0:	e016      	b.n	800a4f0 <UART_SetConfig+0x308>
 800a4c2:	bf00      	nop
 800a4c4:	cfff69f3 	.word	0xcfff69f3
 800a4c8:	40008000 	.word	0x40008000
 800a4cc:	40013800 	.word	0x40013800
 800a4d0:	40021000 	.word	0x40021000
 800a4d4:	40004400 	.word	0x40004400
 800a4d8:	40004800 	.word	0x40004800
 800a4dc:	40004c00 	.word	0x40004c00
 800a4e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a4ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f000 812a 	beq.w	800a74c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4fc:	4a9e      	ldr	r2, [pc, #632]	@ (800a778 <UART_SetConfig+0x590>)
 800a4fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a502:	461a      	mov	r2, r3
 800a504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a506:	fbb3 f3f2 	udiv	r3, r3, r2
 800a50a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	685a      	ldr	r2, [r3, #4]
 800a510:	4613      	mov	r3, r2
 800a512:	005b      	lsls	r3, r3, #1
 800a514:	4413      	add	r3, r2
 800a516:	69ba      	ldr	r2, [r7, #24]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d305      	bcc.n	800a528 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a522:	69ba      	ldr	r2, [r7, #24]
 800a524:	429a      	cmp	r2, r3
 800a526:	d903      	bls.n	800a530 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a52e:	e10d      	b.n	800a74c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a532:	2200      	movs	r2, #0
 800a534:	60bb      	str	r3, [r7, #8]
 800a536:	60fa      	str	r2, [r7, #12]
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a53c:	4a8e      	ldr	r2, [pc, #568]	@ (800a778 <UART_SetConfig+0x590>)
 800a53e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a542:	b29b      	uxth	r3, r3
 800a544:	2200      	movs	r2, #0
 800a546:	603b      	str	r3, [r7, #0]
 800a548:	607a      	str	r2, [r7, #4]
 800a54a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a54e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a552:	f7f6 fb65 	bl	8000c20 <__aeabi_uldivmod>
 800a556:	4602      	mov	r2, r0
 800a558:	460b      	mov	r3, r1
 800a55a:	4610      	mov	r0, r2
 800a55c:	4619      	mov	r1, r3
 800a55e:	f04f 0200 	mov.w	r2, #0
 800a562:	f04f 0300 	mov.w	r3, #0
 800a566:	020b      	lsls	r3, r1, #8
 800a568:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a56c:	0202      	lsls	r2, r0, #8
 800a56e:	6979      	ldr	r1, [r7, #20]
 800a570:	6849      	ldr	r1, [r1, #4]
 800a572:	0849      	lsrs	r1, r1, #1
 800a574:	2000      	movs	r0, #0
 800a576:	460c      	mov	r4, r1
 800a578:	4605      	mov	r5, r0
 800a57a:	eb12 0804 	adds.w	r8, r2, r4
 800a57e:	eb43 0905 	adc.w	r9, r3, r5
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	469a      	mov	sl, r3
 800a58a:	4693      	mov	fp, r2
 800a58c:	4652      	mov	r2, sl
 800a58e:	465b      	mov	r3, fp
 800a590:	4640      	mov	r0, r8
 800a592:	4649      	mov	r1, r9
 800a594:	f7f6 fb44 	bl	8000c20 <__aeabi_uldivmod>
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
 800a59c:	4613      	mov	r3, r2
 800a59e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5a6:	d308      	bcc.n	800a5ba <UART_SetConfig+0x3d2>
 800a5a8:	6a3b      	ldr	r3, [r7, #32]
 800a5aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5ae:	d204      	bcs.n	800a5ba <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6a3a      	ldr	r2, [r7, #32]
 800a5b6:	60da      	str	r2, [r3, #12]
 800a5b8:	e0c8      	b.n	800a74c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a5c0:	e0c4      	b.n	800a74c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	69db      	ldr	r3, [r3, #28]
 800a5c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5ca:	d167      	bne.n	800a69c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a5cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a5d0:	2b08      	cmp	r3, #8
 800a5d2:	d828      	bhi.n	800a626 <UART_SetConfig+0x43e>
 800a5d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a5dc <UART_SetConfig+0x3f4>)
 800a5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5da:	bf00      	nop
 800a5dc:	0800a601 	.word	0x0800a601
 800a5e0:	0800a609 	.word	0x0800a609
 800a5e4:	0800a611 	.word	0x0800a611
 800a5e8:	0800a627 	.word	0x0800a627
 800a5ec:	0800a617 	.word	0x0800a617
 800a5f0:	0800a627 	.word	0x0800a627
 800a5f4:	0800a627 	.word	0x0800a627
 800a5f8:	0800a627 	.word	0x0800a627
 800a5fc:	0800a61f 	.word	0x0800a61f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a600:	f7fc fb6a 	bl	8006cd8 <HAL_RCC_GetPCLK1Freq>
 800a604:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a606:	e014      	b.n	800a632 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a608:	f7fc fb7c 	bl	8006d04 <HAL_RCC_GetPCLK2Freq>
 800a60c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a60e:	e010      	b.n	800a632 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a610:	4b5a      	ldr	r3, [pc, #360]	@ (800a77c <UART_SetConfig+0x594>)
 800a612:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a614:	e00d      	b.n	800a632 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a616:	f7fc faf1 	bl	8006bfc <HAL_RCC_GetSysClockFreq>
 800a61a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a61c:	e009      	b.n	800a632 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a61e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a622:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a624:	e005      	b.n	800a632 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a626:	2300      	movs	r3, #0
 800a628:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 8089 	beq.w	800a74c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63e:	4a4e      	ldr	r2, [pc, #312]	@ (800a778 <UART_SetConfig+0x590>)
 800a640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a644:	461a      	mov	r2, r3
 800a646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a648:	fbb3 f3f2 	udiv	r3, r3, r2
 800a64c:	005a      	lsls	r2, r3, #1
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	085b      	lsrs	r3, r3, #1
 800a654:	441a      	add	r2, r3
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a65e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a660:	6a3b      	ldr	r3, [r7, #32]
 800a662:	2b0f      	cmp	r3, #15
 800a664:	d916      	bls.n	800a694 <UART_SetConfig+0x4ac>
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a66c:	d212      	bcs.n	800a694 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a66e:	6a3b      	ldr	r3, [r7, #32]
 800a670:	b29b      	uxth	r3, r3
 800a672:	f023 030f 	bic.w	r3, r3, #15
 800a676:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a678:	6a3b      	ldr	r3, [r7, #32]
 800a67a:	085b      	lsrs	r3, r3, #1
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	f003 0307 	and.w	r3, r3, #7
 800a682:	b29a      	uxth	r2, r3
 800a684:	8bfb      	ldrh	r3, [r7, #30]
 800a686:	4313      	orrs	r3, r2
 800a688:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	8bfa      	ldrh	r2, [r7, #30]
 800a690:	60da      	str	r2, [r3, #12]
 800a692:	e05b      	b.n	800a74c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a69a:	e057      	b.n	800a74c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a69c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a6a0:	2b08      	cmp	r3, #8
 800a6a2:	d828      	bhi.n	800a6f6 <UART_SetConfig+0x50e>
 800a6a4:	a201      	add	r2, pc, #4	@ (adr r2, 800a6ac <UART_SetConfig+0x4c4>)
 800a6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6aa:	bf00      	nop
 800a6ac:	0800a6d1 	.word	0x0800a6d1
 800a6b0:	0800a6d9 	.word	0x0800a6d9
 800a6b4:	0800a6e1 	.word	0x0800a6e1
 800a6b8:	0800a6f7 	.word	0x0800a6f7
 800a6bc:	0800a6e7 	.word	0x0800a6e7
 800a6c0:	0800a6f7 	.word	0x0800a6f7
 800a6c4:	0800a6f7 	.word	0x0800a6f7
 800a6c8:	0800a6f7 	.word	0x0800a6f7
 800a6cc:	0800a6ef 	.word	0x0800a6ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6d0:	f7fc fb02 	bl	8006cd8 <HAL_RCC_GetPCLK1Freq>
 800a6d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a6d6:	e014      	b.n	800a702 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6d8:	f7fc fb14 	bl	8006d04 <HAL_RCC_GetPCLK2Freq>
 800a6dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a6de:	e010      	b.n	800a702 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6e0:	4b26      	ldr	r3, [pc, #152]	@ (800a77c <UART_SetConfig+0x594>)
 800a6e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a6e4:	e00d      	b.n	800a702 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6e6:	f7fc fa89 	bl	8006bfc <HAL_RCC_GetSysClockFreq>
 800a6ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a6ec:	e009      	b.n	800a702 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a6f4:	e005      	b.n	800a702 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a700:	bf00      	nop
    }

    if (pclk != 0U)
 800a702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a704:	2b00      	cmp	r3, #0
 800a706:	d021      	beq.n	800a74c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a70c:	4a1a      	ldr	r2, [pc, #104]	@ (800a778 <UART_SetConfig+0x590>)
 800a70e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a712:	461a      	mov	r2, r3
 800a714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a716:	fbb3 f2f2 	udiv	r2, r3, r2
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	085b      	lsrs	r3, r3, #1
 800a720:	441a      	add	r2, r3
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	fbb2 f3f3 	udiv	r3, r2, r3
 800a72a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	2b0f      	cmp	r3, #15
 800a730:	d909      	bls.n	800a746 <UART_SetConfig+0x55e>
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a738:	d205      	bcs.n	800a746 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a73a:	6a3b      	ldr	r3, [r7, #32]
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	60da      	str	r2, [r3, #12]
 800a744:	e002      	b.n	800a74c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	2201      	movs	r2, #1
 800a750:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	2201      	movs	r2, #1
 800a758:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	2200      	movs	r2, #0
 800a760:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	2200      	movs	r2, #0
 800a766:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a768:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3730      	adds	r7, #48	@ 0x30
 800a770:	46bd      	mov	sp, r7
 800a772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a776:	bf00      	nop
 800a778:	0800c28c 	.word	0x0800c28c
 800a77c:	00f42400 	.word	0x00f42400

0800a780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a78c:	f003 0308 	and.w	r3, r3, #8
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00a      	beq.n	800a7aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	430a      	orrs	r2, r1
 800a7a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00a      	beq.n	800a7cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	430a      	orrs	r2, r1
 800a7ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00a      	beq.n	800a7ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	430a      	orrs	r2, r1
 800a7ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f2:	f003 0304 	and.w	r3, r3, #4
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00a      	beq.n	800a810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	430a      	orrs	r2, r1
 800a80e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a814:	f003 0310 	and.w	r3, r3, #16
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00a      	beq.n	800a832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	430a      	orrs	r2, r1
 800a830:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a836:	f003 0320 	and.w	r3, r3, #32
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00a      	beq.n	800a854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	430a      	orrs	r2, r1
 800a852:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d01a      	beq.n	800a896 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	430a      	orrs	r2, r1
 800a874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a87a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a87e:	d10a      	bne.n	800a896 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	430a      	orrs	r2, r1
 800a894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a89a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00a      	beq.n	800a8b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	430a      	orrs	r2, r1
 800a8b6:	605a      	str	r2, [r3, #4]
  }
}
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b098      	sub	sp, #96	@ 0x60
 800a8c8:	af02      	add	r7, sp, #8
 800a8ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a8d4:	f7f8 fbbe 	bl	8003054 <HAL_GetTick>
 800a8d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f003 0308 	and.w	r3, r3, #8
 800a8e4:	2b08      	cmp	r3, #8
 800a8e6:	d12f      	bne.n	800a948 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f88e 	bl	800aa18 <UART_WaitOnFlagUntilTimeout>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d022      	beq.n	800a948 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90a:	e853 3f00 	ldrex	r3, [r3]
 800a90e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a912:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a916:	653b      	str	r3, [r7, #80]	@ 0x50
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	461a      	mov	r2, r3
 800a91e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a920:	647b      	str	r3, [r7, #68]	@ 0x44
 800a922:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a924:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a928:	e841 2300 	strex	r3, r2, [r1]
 800a92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1e6      	bne.n	800a902 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2220      	movs	r2, #32
 800a938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	e063      	b.n	800aa10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 0304 	and.w	r3, r3, #4
 800a952:	2b04      	cmp	r3, #4
 800a954:	d149      	bne.n	800a9ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a956:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a95e:	2200      	movs	r2, #0
 800a960:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 f857 	bl	800aa18 <UART_WaitOnFlagUntilTimeout>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d03c      	beq.n	800a9ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a978:	e853 3f00 	ldrex	r3, [r3]
 800a97c:	623b      	str	r3, [r7, #32]
   return(result);
 800a97e:	6a3b      	ldr	r3, [r7, #32]
 800a980:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a984:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	461a      	mov	r2, r3
 800a98c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a98e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a990:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a996:	e841 2300 	strex	r3, r2, [r1]
 800a99a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1e6      	bne.n	800a970 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3308      	adds	r3, #8
 800a9a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	e853 3f00 	ldrex	r3, [r3]
 800a9b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f023 0301 	bic.w	r3, r3, #1
 800a9b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	3308      	adds	r3, #8
 800a9c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9c2:	61fa      	str	r2, [r7, #28]
 800a9c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c6:	69b9      	ldr	r1, [r7, #24]
 800a9c8:	69fa      	ldr	r2, [r7, #28]
 800a9ca:	e841 2300 	strex	r3, r2, [r1]
 800a9ce:	617b      	str	r3, [r7, #20]
   return(result);
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1e5      	bne.n	800a9a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2220      	movs	r2, #32
 800a9da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e012      	b.n	800aa10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2220      	movs	r2, #32
 800a9ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3758      	adds	r7, #88	@ 0x58
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	603b      	str	r3, [r7, #0]
 800aa24:	4613      	mov	r3, r2
 800aa26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa28:	e04f      	b.n	800aaca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa30:	d04b      	beq.n	800aaca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa32:	f7f8 fb0f 	bl	8003054 <HAL_GetTick>
 800aa36:	4602      	mov	r2, r0
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	1ad3      	subs	r3, r2, r3
 800aa3c:	69ba      	ldr	r2, [r7, #24]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d302      	bcc.n	800aa48 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d101      	bne.n	800aa4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e04e      	b.n	800aaea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 0304 	and.w	r3, r3, #4
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d037      	beq.n	800aaca <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	2b80      	cmp	r3, #128	@ 0x80
 800aa5e:	d034      	beq.n	800aaca <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	2b40      	cmp	r3, #64	@ 0x40
 800aa64:	d031      	beq.n	800aaca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	69db      	ldr	r3, [r3, #28]
 800aa6c:	f003 0308 	and.w	r3, r3, #8
 800aa70:	2b08      	cmp	r3, #8
 800aa72:	d110      	bne.n	800aa96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2208      	movs	r2, #8
 800aa7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f000 f95b 	bl	800ad38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2208      	movs	r2, #8
 800aa86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e029      	b.n	800aaea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	69db      	ldr	r3, [r3, #28]
 800aa9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aaa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aaa4:	d111      	bne.n	800aaca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aaae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f000 f941 	bl	800ad38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2220      	movs	r2, #32
 800aaba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aac6:	2303      	movs	r3, #3
 800aac8:	e00f      	b.n	800aaea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	69da      	ldr	r2, [r3, #28]
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	4013      	ands	r3, r2
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	bf0c      	ite	eq
 800aada:	2301      	moveq	r3, #1
 800aadc:	2300      	movne	r3, #0
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	461a      	mov	r2, r3
 800aae2:	79fb      	ldrb	r3, [r7, #7]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d0a0      	beq.n	800aa2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
	...

0800aaf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b0a3      	sub	sp, #140	@ 0x8c
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	4613      	mov	r3, r2
 800ab00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	88fa      	ldrh	r2, [r7, #6]
 800ab0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	88fa      	ldrh	r2, [r7, #6]
 800ab14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab26:	d10e      	bne.n	800ab46 <UART_Start_Receive_IT+0x52>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d105      	bne.n	800ab3c <UART_Start_Receive_IT+0x48>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ab36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab3a:	e02d      	b.n	800ab98 <UART_Start_Receive_IT+0xa4>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	22ff      	movs	r2, #255	@ 0xff
 800ab40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab44:	e028      	b.n	800ab98 <UART_Start_Receive_IT+0xa4>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10d      	bne.n	800ab6a <UART_Start_Receive_IT+0x76>
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d104      	bne.n	800ab60 <UART_Start_Receive_IT+0x6c>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	22ff      	movs	r2, #255	@ 0xff
 800ab5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab5e:	e01b      	b.n	800ab98 <UART_Start_Receive_IT+0xa4>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	227f      	movs	r2, #127	@ 0x7f
 800ab64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab68:	e016      	b.n	800ab98 <UART_Start_Receive_IT+0xa4>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab72:	d10d      	bne.n	800ab90 <UART_Start_Receive_IT+0x9c>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d104      	bne.n	800ab86 <UART_Start_Receive_IT+0x92>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	227f      	movs	r2, #127	@ 0x7f
 800ab80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab84:	e008      	b.n	800ab98 <UART_Start_Receive_IT+0xa4>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	223f      	movs	r2, #63	@ 0x3f
 800ab8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab8e:	e003      	b.n	800ab98 <UART_Start_Receive_IT+0xa4>
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2222      	movs	r2, #34	@ 0x22
 800aba4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3308      	adds	r3, #8
 800abae:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abb2:	e853 3f00 	ldrex	r3, [r3]
 800abb6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800abb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abba:	f043 0301 	orr.w	r3, r3, #1
 800abbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	3308      	adds	r3, #8
 800abc8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800abcc:	673a      	str	r2, [r7, #112]	@ 0x70
 800abce:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800abd2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800abd4:	e841 2300 	strex	r3, r2, [r1]
 800abd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800abda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1e3      	bne.n	800aba8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abe8:	d14f      	bne.n	800ac8a <UART_Start_Receive_IT+0x196>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800abf0:	88fa      	ldrh	r2, [r7, #6]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d349      	bcc.n	800ac8a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abfe:	d107      	bne.n	800ac10 <UART_Start_Receive_IT+0x11c>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	691b      	ldr	r3, [r3, #16]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d103      	bne.n	800ac10 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	4a47      	ldr	r2, [pc, #284]	@ (800ad28 <UART_Start_Receive_IT+0x234>)
 800ac0c:	675a      	str	r2, [r3, #116]	@ 0x74
 800ac0e:	e002      	b.n	800ac16 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	4a46      	ldr	r2, [pc, #280]	@ (800ad2c <UART_Start_Receive_IT+0x238>)
 800ac14:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d01a      	beq.n	800ac54 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac26:	e853 3f00 	ldrex	r3, [r3]
 800ac2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ac2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ac40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac42:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac44:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ac46:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ac48:	e841 2300 	strex	r3, r2, [r1]
 800ac4c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ac4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1e4      	bne.n	800ac1e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3308      	adds	r3, #8
 800ac5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac5e:	e853 3f00 	ldrex	r3, [r3]
 800ac62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	3308      	adds	r3, #8
 800ac72:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ac74:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ac76:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ac7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac7c:	e841 2300 	strex	r3, r2, [r1]
 800ac80:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ac82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1e5      	bne.n	800ac54 <UART_Start_Receive_IT+0x160>
 800ac88:	e046      	b.n	800ad18 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac92:	d107      	bne.n	800aca4 <UART_Start_Receive_IT+0x1b0>
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	691b      	ldr	r3, [r3, #16]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d103      	bne.n	800aca4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	4a24      	ldr	r2, [pc, #144]	@ (800ad30 <UART_Start_Receive_IT+0x23c>)
 800aca0:	675a      	str	r2, [r3, #116]	@ 0x74
 800aca2:	e002      	b.n	800acaa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	4a23      	ldr	r2, [pc, #140]	@ (800ad34 <UART_Start_Receive_IT+0x240>)
 800aca8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d019      	beq.n	800ace6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acba:	e853 3f00 	ldrex	r3, [r3]
 800acbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800acc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800acc6:	677b      	str	r3, [r7, #116]	@ 0x74
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	461a      	mov	r2, r3
 800acce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800acd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800acd2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800acd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800acd8:	e841 2300 	strex	r3, r2, [r1]
 800acdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800acde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1e6      	bne.n	800acb2 <UART_Start_Receive_IT+0x1be>
 800ace4:	e018      	b.n	800ad18 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	e853 3f00 	ldrex	r3, [r3]
 800acf2:	613b      	str	r3, [r7, #16]
   return(result);
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	f043 0320 	orr.w	r3, r3, #32
 800acfa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	461a      	mov	r2, r3
 800ad02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad04:	623b      	str	r3, [r7, #32]
 800ad06:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad08:	69f9      	ldr	r1, [r7, #28]
 800ad0a:	6a3a      	ldr	r2, [r7, #32]
 800ad0c:	e841 2300 	strex	r3, r2, [r1]
 800ad10:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d1e6      	bne.n	800ace6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	378c      	adds	r7, #140	@ 0x8c
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	0800b555 	.word	0x0800b555
 800ad2c:	0800b1f1 	.word	0x0800b1f1
 800ad30:	0800b039 	.word	0x0800b039
 800ad34:	0800ae81 	.word	0x0800ae81

0800ad38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b095      	sub	sp, #84	@ 0x54
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad48:	e853 3f00 	ldrex	r3, [r3]
 800ad4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad5e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad60:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad66:	e841 2300 	strex	r3, r2, [r1]
 800ad6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1e6      	bne.n	800ad40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	3308      	adds	r3, #8
 800ad78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7a:	6a3b      	ldr	r3, [r7, #32]
 800ad7c:	e853 3f00 	ldrex	r3, [r3]
 800ad80:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad88:	f023 0301 	bic.w	r3, r3, #1
 800ad8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3308      	adds	r3, #8
 800ad94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad9e:	e841 2300 	strex	r3, r2, [r1]
 800ada2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ada4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1e3      	bne.n	800ad72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d118      	bne.n	800ade4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	e853 3f00 	ldrex	r3, [r3]
 800adbe:	60bb      	str	r3, [r7, #8]
   return(result);
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	f023 0310 	bic.w	r3, r3, #16
 800adc6:	647b      	str	r3, [r7, #68]	@ 0x44
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	461a      	mov	r2, r3
 800adce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800add0:	61bb      	str	r3, [r7, #24]
 800add2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add4:	6979      	ldr	r1, [r7, #20]
 800add6:	69ba      	ldr	r2, [r7, #24]
 800add8:	e841 2300 	strex	r3, r2, [r1]
 800addc:	613b      	str	r3, [r7, #16]
   return(result);
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1e6      	bne.n	800adb2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2220      	movs	r2, #32
 800ade8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800adf8:	bf00      	nop
 800adfa:	3754      	adds	r7, #84	@ 0x54
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f7ff f97a 	bl	800a114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae20:	bf00      	nop
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b088      	sub	sp, #32
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	e853 3f00 	ldrex	r3, [r3]
 800ae3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae44:	61fb      	str	r3, [r7, #28]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	61bb      	str	r3, [r7, #24]
 800ae50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae52:	6979      	ldr	r1, [r7, #20]
 800ae54:	69ba      	ldr	r2, [r7, #24]
 800ae56:	e841 2300 	strex	r3, r2, [r1]
 800ae5a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d1e6      	bne.n	800ae30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2220      	movs	r2, #32
 800ae66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f7ff f945 	bl	800a100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae76:	bf00      	nop
 800ae78:	3720      	adds	r7, #32
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
	...

0800ae80 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b09c      	sub	sp, #112	@ 0x70
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae98:	2b22      	cmp	r3, #34	@ 0x22
 800ae9a:	f040 80be 	bne.w	800b01a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aea4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aea8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800aeac:	b2d9      	uxtb	r1, r3
 800aeae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800aeb2:	b2da      	uxtb	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeb8:	400a      	ands	r2, r1
 800aeba:	b2d2      	uxtb	r2, r2
 800aebc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aec2:	1c5a      	adds	r2, r3, #1
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aece:	b29b      	uxth	r3, r3
 800aed0:	3b01      	subs	r3, #1
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f040 80a1 	bne.w	800b02a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aef0:	e853 3f00 	ldrex	r3, [r3]
 800aef4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aefc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af06:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e6      	bne.n	800aee8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3308      	adds	r3, #8
 800af20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af24:	e853 3f00 	ldrex	r3, [r3]
 800af28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af2c:	f023 0301 	bic.w	r3, r3, #1
 800af30:	667b      	str	r3, [r7, #100]	@ 0x64
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	3308      	adds	r3, #8
 800af38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800af3a:	647a      	str	r2, [r7, #68]	@ 0x44
 800af3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af42:	e841 2300 	strex	r3, r2, [r1]
 800af46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1e5      	bne.n	800af1a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2220      	movs	r2, #32
 800af52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a33      	ldr	r2, [pc, #204]	@ (800b034 <UART_RxISR_8BIT+0x1b4>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d01f      	beq.n	800afac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af76:	2b00      	cmp	r3, #0
 800af78:	d018      	beq.n	800afac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af82:	e853 3f00 	ldrex	r3, [r3]
 800af86:	623b      	str	r3, [r7, #32]
   return(result);
 800af88:	6a3b      	ldr	r3, [r7, #32]
 800af8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800af8e:	663b      	str	r3, [r7, #96]	@ 0x60
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	461a      	mov	r2, r3
 800af96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af98:	633b      	str	r3, [r7, #48]	@ 0x30
 800af9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afa0:	e841 2300 	strex	r3, r2, [r1]
 800afa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1e6      	bne.n	800af7a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d12e      	bne.n	800b012 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	e853 3f00 	ldrex	r3, [r3]
 800afc6:	60fb      	str	r3, [r7, #12]
   return(result);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f023 0310 	bic.w	r3, r3, #16
 800afce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	461a      	mov	r2, r3
 800afd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afd8:	61fb      	str	r3, [r7, #28]
 800afda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afdc:	69b9      	ldr	r1, [r7, #24]
 800afde:	69fa      	ldr	r2, [r7, #28]
 800afe0:	e841 2300 	strex	r3, r2, [r1]
 800afe4:	617b      	str	r3, [r7, #20]
   return(result);
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1e6      	bne.n	800afba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	69db      	ldr	r3, [r3, #28]
 800aff2:	f003 0310 	and.w	r3, r3, #16
 800aff6:	2b10      	cmp	r3, #16
 800aff8:	d103      	bne.n	800b002 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2210      	movs	r2, #16
 800b000:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b008:	4619      	mov	r1, r3
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f7ff f88c 	bl	800a128 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b010:	e00b      	b.n	800b02a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f7f7 fa86 	bl	8002524 <HAL_UART_RxCpltCallback>
}
 800b018:	e007      	b.n	800b02a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	699a      	ldr	r2, [r3, #24]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f042 0208 	orr.w	r2, r2, #8
 800b028:	619a      	str	r2, [r3, #24]
}
 800b02a:	bf00      	nop
 800b02c:	3770      	adds	r7, #112	@ 0x70
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	40008000 	.word	0x40008000

0800b038 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b09c      	sub	sp, #112	@ 0x70
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b046:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b050:	2b22      	cmp	r3, #34	@ 0x22
 800b052:	f040 80be 	bne.w	800b1d2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b05c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b064:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b066:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b06a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b06e:	4013      	ands	r3, r2
 800b070:	b29a      	uxth	r2, r3
 800b072:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b074:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b07a:	1c9a      	adds	r2, r3, #2
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b086:	b29b      	uxth	r3, r3
 800b088:	3b01      	subs	r3, #1
 800b08a:	b29a      	uxth	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b098:	b29b      	uxth	r3, r3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f040 80a1 	bne.w	800b1e2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0a8:	e853 3f00 	ldrex	r3, [r3]
 800b0ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b0ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0b4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0be:	657b      	str	r3, [r7, #84]	@ 0x54
 800b0c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b0c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b0c6:	e841 2300 	strex	r3, r2, [r1]
 800b0ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b0cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1e6      	bne.n	800b0a0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	3308      	adds	r3, #8
 800b0d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0dc:	e853 3f00 	ldrex	r3, [r3]
 800b0e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e4:	f023 0301 	bic.w	r3, r3, #1
 800b0e8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	3308      	adds	r3, #8
 800b0f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b0f2:	643a      	str	r2, [r7, #64]	@ 0x40
 800b0f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0fa:	e841 2300 	strex	r3, r2, [r1]
 800b0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1e5      	bne.n	800b0d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2220      	movs	r2, #32
 800b10a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a33      	ldr	r2, [pc, #204]	@ (800b1ec <UART_RxISR_16BIT+0x1b4>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d01f      	beq.n	800b164 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d018      	beq.n	800b164 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	e853 3f00 	ldrex	r3, [r3]
 800b13e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b146:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	461a      	mov	r2, r3
 800b14e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b152:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b154:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b158:	e841 2300 	strex	r3, r2, [r1]
 800b15c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1e6      	bne.n	800b132 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d12e      	bne.n	800b1ca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	e853 3f00 	ldrex	r3, [r3]
 800b17e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	f023 0310 	bic.w	r3, r3, #16
 800b186:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	461a      	mov	r2, r3
 800b18e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b190:	61bb      	str	r3, [r7, #24]
 800b192:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b194:	6979      	ldr	r1, [r7, #20]
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	e841 2300 	strex	r3, r2, [r1]
 800b19c:	613b      	str	r3, [r7, #16]
   return(result);
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1e6      	bne.n	800b172 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	69db      	ldr	r3, [r3, #28]
 800b1aa:	f003 0310 	and.w	r3, r3, #16
 800b1ae:	2b10      	cmp	r3, #16
 800b1b0:	d103      	bne.n	800b1ba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2210      	movs	r2, #16
 800b1b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7fe ffb0 	bl	800a128 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1c8:	e00b      	b.n	800b1e2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f7f7 f9aa 	bl	8002524 <HAL_UART_RxCpltCallback>
}
 800b1d0:	e007      	b.n	800b1e2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	699a      	ldr	r2, [r3, #24]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f042 0208 	orr.w	r2, r2, #8
 800b1e0:	619a      	str	r2, [r3, #24]
}
 800b1e2:	bf00      	nop
 800b1e4:	3770      	adds	r7, #112	@ 0x70
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	40008000 	.word	0x40008000

0800b1f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b0ac      	sub	sp, #176	@ 0xb0
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b1fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	69db      	ldr	r3, [r3, #28]
 800b208:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b226:	2b22      	cmp	r3, #34	@ 0x22
 800b228:	f040 8183 	bne.w	800b532 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b232:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b236:	e126      	b.n	800b486 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b23e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b242:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b246:	b2d9      	uxtb	r1, r3
 800b248:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b24c:	b2da      	uxtb	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b252:	400a      	ands	r2, r1
 800b254:	b2d2      	uxtb	r2, r2
 800b256:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b25c:	1c5a      	adds	r2, r3, #1
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b268:	b29b      	uxth	r3, r3
 800b26a:	3b01      	subs	r3, #1
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	69db      	ldr	r3, [r3, #28]
 800b27a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b27e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b282:	f003 0307 	and.w	r3, r3, #7
 800b286:	2b00      	cmp	r3, #0
 800b288:	d053      	beq.n	800b332 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b28a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b28e:	f003 0301 	and.w	r3, r3, #1
 800b292:	2b00      	cmp	r3, #0
 800b294:	d011      	beq.n	800b2ba <UART_RxISR_8BIT_FIFOEN+0xca>
 800b296:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b29a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00b      	beq.n	800b2ba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2b0:	f043 0201 	orr.w	r2, r3, #1
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2be:	f003 0302 	and.w	r3, r3, #2
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d011      	beq.n	800b2ea <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b2c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b2ca:	f003 0301 	and.w	r3, r3, #1
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00b      	beq.n	800b2ea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2e0:	f043 0204 	orr.w	r2, r3, #4
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2ee:	f003 0304 	and.w	r3, r3, #4
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d011      	beq.n	800b31a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b2f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b2fa:	f003 0301 	and.w	r3, r3, #1
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00b      	beq.n	800b31a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2204      	movs	r2, #4
 800b308:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b310:	f043 0202 	orr.w	r2, r3, #2
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b320:	2b00      	cmp	r3, #0
 800b322:	d006      	beq.n	800b332 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f7fe fef5 	bl	800a114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b338:	b29b      	uxth	r3, r3
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f040 80a3 	bne.w	800b486 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b348:	e853 3f00 	ldrex	r3, [r3]
 800b34c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b34e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b354:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	461a      	mov	r2, r3
 800b35e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b362:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b364:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b366:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b368:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b36a:	e841 2300 	strex	r3, r2, [r1]
 800b36e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b370:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1e4      	bne.n	800b340 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	3308      	adds	r3, #8
 800b37c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b380:	e853 3f00 	ldrex	r3, [r3]
 800b384:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b388:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b38c:	f023 0301 	bic.w	r3, r3, #1
 800b390:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	3308      	adds	r3, #8
 800b39a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b39e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b3a0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b3a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b3a6:	e841 2300 	strex	r3, r2, [r1]
 800b3aa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b3ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1e1      	bne.n	800b376 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2220      	movs	r2, #32
 800b3b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a60      	ldr	r2, [pc, #384]	@ (800b54c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d021      	beq.n	800b414 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d01a      	beq.n	800b414 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3e6:	e853 3f00 	ldrex	r3, [r3]
 800b3ea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b3ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b3f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b400:	657b      	str	r3, [r7, #84]	@ 0x54
 800b402:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b404:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b406:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b408:	e841 2300 	strex	r3, r2, [r1]
 800b40c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b40e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1e4      	bne.n	800b3de <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d130      	bne.n	800b47e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b42a:	e853 3f00 	ldrex	r3, [r3]
 800b42e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b432:	f023 0310 	bic.w	r3, r3, #16
 800b436:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	461a      	mov	r2, r3
 800b440:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b444:	643b      	str	r3, [r7, #64]	@ 0x40
 800b446:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b448:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b44a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b44c:	e841 2300 	strex	r3, r2, [r1]
 800b450:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1e4      	bne.n	800b422 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	69db      	ldr	r3, [r3, #28]
 800b45e:	f003 0310 	and.w	r3, r3, #16
 800b462:	2b10      	cmp	r3, #16
 800b464:	d103      	bne.n	800b46e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2210      	movs	r2, #16
 800b46c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b474:	4619      	mov	r1, r3
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7fe fe56 	bl	800a128 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b47c:	e00e      	b.n	800b49c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7f7 f850 	bl	8002524 <HAL_UART_RxCpltCallback>
        break;
 800b484:	e00a      	b.n	800b49c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b486:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d006      	beq.n	800b49c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800b48e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b492:	f003 0320 	and.w	r3, r3, #32
 800b496:	2b00      	cmp	r3, #0
 800b498:	f47f aece 	bne.w	800b238 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4a2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b4a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d049      	beq.n	800b542 <UART_RxISR_8BIT_FIFOEN+0x352>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b4b4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d242      	bcs.n	800b542 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	3308      	adds	r3, #8
 800b4c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c4:	6a3b      	ldr	r3, [r7, #32]
 800b4c6:	e853 3f00 	ldrex	r3, [r3]
 800b4ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b4d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3308      	adds	r3, #8
 800b4dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b4e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4e8:	e841 2300 	strex	r3, r2, [r1]
 800b4ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1e3      	bne.n	800b4bc <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4a16      	ldr	r2, [pc, #88]	@ (800b550 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800b4f8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	e853 3f00 	ldrex	r3, [r3]
 800b506:	60bb      	str	r3, [r7, #8]
   return(result);
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	f043 0320 	orr.w	r3, r3, #32
 800b50e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	461a      	mov	r2, r3
 800b518:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b51c:	61bb      	str	r3, [r7, #24]
 800b51e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b520:	6979      	ldr	r1, [r7, #20]
 800b522:	69ba      	ldr	r2, [r7, #24]
 800b524:	e841 2300 	strex	r3, r2, [r1]
 800b528:	613b      	str	r3, [r7, #16]
   return(result);
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1e4      	bne.n	800b4fa <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b530:	e007      	b.n	800b542 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	699a      	ldr	r2, [r3, #24]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f042 0208 	orr.w	r2, r2, #8
 800b540:	619a      	str	r2, [r3, #24]
}
 800b542:	bf00      	nop
 800b544:	37b0      	adds	r7, #176	@ 0xb0
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	40008000 	.word	0x40008000
 800b550:	0800ae81 	.word	0x0800ae81

0800b554 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b0ae      	sub	sp, #184	@ 0xb8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b562:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	69db      	ldr	r3, [r3, #28]
 800b56c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b58a:	2b22      	cmp	r3, #34	@ 0x22
 800b58c:	f040 8187 	bne.w	800b89e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b596:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b59a:	e12a      	b.n	800b7f2 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5a2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b5ae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b5b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b5b6:	4013      	ands	r3, r2
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b5be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5c4:	1c9a      	adds	r2, r3, #2
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	69db      	ldr	r3, [r3, #28]
 800b5e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b5e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5ea:	f003 0307 	and.w	r3, r3, #7
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d053      	beq.n	800b69a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5f6:	f003 0301 	and.w	r3, r3, #1
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d011      	beq.n	800b622 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b5fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00b      	beq.n	800b622 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2201      	movs	r2, #1
 800b610:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b618:	f043 0201 	orr.w	r2, r3, #1
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b622:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b626:	f003 0302 	and.w	r3, r3, #2
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d011      	beq.n	800b652 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b62e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b632:	f003 0301 	and.w	r3, r3, #1
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00b      	beq.n	800b652 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2202      	movs	r2, #2
 800b640:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b648:	f043 0204 	orr.w	r2, r3, #4
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b656:	f003 0304 	and.w	r3, r3, #4
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d011      	beq.n	800b682 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b65e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b662:	f003 0301 	and.w	r3, r3, #1
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00b      	beq.n	800b682 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2204      	movs	r2, #4
 800b670:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b678:	f043 0202 	orr.w	r2, r3, #2
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d006      	beq.n	800b69a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7fe fd41 	bl	800a114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f040 80a5 	bne.w	800b7f2 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6b0:	e853 3f00 	ldrex	r3, [r3]
 800b6b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b6b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b6ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b6ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b6d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b6d6:	e841 2300 	strex	r3, r2, [r1]
 800b6da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b6dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1e2      	bne.n	800b6a8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	3308      	adds	r3, #8
 800b6e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6ec:	e853 3f00 	ldrex	r3, [r3]
 800b6f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b6f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6f8:	f023 0301 	bic.w	r3, r3, #1
 800b6fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	3308      	adds	r3, #8
 800b706:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b70a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b70c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b710:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b712:	e841 2300 	strex	r3, r2, [r1]
 800b716:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1e1      	bne.n	800b6e2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2220      	movs	r2, #32
 800b722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a60      	ldr	r2, [pc, #384]	@ (800b8b8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d021      	beq.n	800b780 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b746:	2b00      	cmp	r3, #0
 800b748:	d01a      	beq.n	800b780 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b752:	e853 3f00 	ldrex	r3, [r3]
 800b756:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b758:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b75a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b75e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	461a      	mov	r2, r3
 800b768:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b76c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b76e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b770:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b772:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b774:	e841 2300 	strex	r3, r2, [r1]
 800b778:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b77a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1e4      	bne.n	800b74a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b784:	2b01      	cmp	r3, #1
 800b786:	d130      	bne.n	800b7ea <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b796:	e853 3f00 	ldrex	r3, [r3]
 800b79a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b79c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b79e:	f023 0310 	bic.w	r3, r3, #16
 800b7a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b7b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7b8:	e841 2300 	strex	r3, r2, [r1]
 800b7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1e4      	bne.n	800b78e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	69db      	ldr	r3, [r3, #28]
 800b7ca:	f003 0310 	and.w	r3, r3, #16
 800b7ce:	2b10      	cmp	r3, #16
 800b7d0:	d103      	bne.n	800b7da <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2210      	movs	r2, #16
 800b7d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f7fe fca0 	bl	800a128 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b7e8:	e00e      	b.n	800b808 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f7f6 fe9a 	bl	8002524 <HAL_UART_RxCpltCallback>
        break;
 800b7f0:	e00a      	b.n	800b808 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b7f2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d006      	beq.n	800b808 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800b7fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b7fe:	f003 0320 	and.w	r3, r3, #32
 800b802:	2b00      	cmp	r3, #0
 800b804:	f47f aeca 	bne.w	800b59c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b80e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b812:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b816:	2b00      	cmp	r3, #0
 800b818:	d049      	beq.n	800b8ae <UART_RxISR_16BIT_FIFOEN+0x35a>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b820:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b824:	429a      	cmp	r2, r3
 800b826:	d242      	bcs.n	800b8ae <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	3308      	adds	r3, #8
 800b82e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b832:	e853 3f00 	ldrex	r3, [r3]
 800b836:	623b      	str	r3, [r7, #32]
   return(result);
 800b838:	6a3b      	ldr	r3, [r7, #32]
 800b83a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b83e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	3308      	adds	r3, #8
 800b848:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b84c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b84e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b850:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b854:	e841 2300 	strex	r3, r2, [r1]
 800b858:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1e3      	bne.n	800b828 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a16      	ldr	r2, [pc, #88]	@ (800b8bc <UART_RxISR_16BIT_FIFOEN+0x368>)
 800b864:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	e853 3f00 	ldrex	r3, [r3]
 800b872:	60fb      	str	r3, [r7, #12]
   return(result);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f043 0320 	orr.w	r3, r3, #32
 800b87a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	461a      	mov	r2, r3
 800b884:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b888:	61fb      	str	r3, [r7, #28]
 800b88a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88c:	69b9      	ldr	r1, [r7, #24]
 800b88e:	69fa      	ldr	r2, [r7, #28]
 800b890:	e841 2300 	strex	r3, r2, [r1]
 800b894:	617b      	str	r3, [r7, #20]
   return(result);
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1e4      	bne.n	800b866 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b89c:	e007      	b.n	800b8ae <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	699a      	ldr	r2, [r3, #24]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f042 0208 	orr.w	r2, r2, #8
 800b8ac:	619a      	str	r2, [r3, #24]
}
 800b8ae:	bf00      	nop
 800b8b0:	37b8      	adds	r7, #184	@ 0xb8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	40008000 	.word	0x40008000
 800b8bc:	0800b039 	.word	0x0800b039

0800b8c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b8c8:	bf00      	nop
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d101      	bne.n	800b912 <HAL_UARTEx_DisableFifoMode+0x16>
 800b90e:	2302      	movs	r3, #2
 800b910:	e027      	b.n	800b962 <HAL_UARTEx_DisableFifoMode+0x66>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2201      	movs	r2, #1
 800b916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2224      	movs	r2, #36	@ 0x24
 800b91e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f022 0201 	bic.w	r2, r2, #1
 800b938:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b940:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2220      	movs	r2, #32
 800b954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3714      	adds	r7, #20
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr

0800b96e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b084      	sub	sp, #16
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d101      	bne.n	800b986 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b982:	2302      	movs	r3, #2
 800b984:	e02d      	b.n	800b9e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2201      	movs	r2, #1
 800b98a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2224      	movs	r2, #36	@ 0x24
 800b992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f022 0201 	bic.w	r2, r2, #1
 800b9ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	683a      	ldr	r2, [r7, #0]
 800b9be:	430a      	orrs	r2, r1
 800b9c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f850 	bl	800ba68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2220      	movs	r2, #32
 800b9d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d101      	bne.n	800ba02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b9fe:	2302      	movs	r3, #2
 800ba00:	e02d      	b.n	800ba5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2224      	movs	r2, #36	@ 0x24
 800ba0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f022 0201 	bic.w	r2, r2, #1
 800ba28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	430a      	orrs	r2, r1
 800ba3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 f812 	bl	800ba68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2220      	movs	r2, #32
 800ba50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
	...

0800ba68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d108      	bne.n	800ba8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba88:	e031      	b.n	800baee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba8a:	2308      	movs	r3, #8
 800ba8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba8e:	2308      	movs	r3, #8
 800ba90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	0e5b      	lsrs	r3, r3, #25
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	f003 0307 	and.w	r3, r3, #7
 800baa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	0f5b      	lsrs	r3, r3, #29
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	f003 0307 	and.w	r3, r3, #7
 800bab0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bab2:	7bbb      	ldrb	r3, [r7, #14]
 800bab4:	7b3a      	ldrb	r2, [r7, #12]
 800bab6:	4911      	ldr	r1, [pc, #68]	@ (800bafc <UARTEx_SetNbDataToProcess+0x94>)
 800bab8:	5c8a      	ldrb	r2, [r1, r2]
 800baba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800babe:	7b3a      	ldrb	r2, [r7, #12]
 800bac0:	490f      	ldr	r1, [pc, #60]	@ (800bb00 <UARTEx_SetNbDataToProcess+0x98>)
 800bac2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bac4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bac8:	b29a      	uxth	r2, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
 800bad2:	7b7a      	ldrb	r2, [r7, #13]
 800bad4:	4909      	ldr	r1, [pc, #36]	@ (800bafc <UARTEx_SetNbDataToProcess+0x94>)
 800bad6:	5c8a      	ldrb	r2, [r1, r2]
 800bad8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800badc:	7b7a      	ldrb	r2, [r7, #13]
 800bade:	4908      	ldr	r1, [pc, #32]	@ (800bb00 <UARTEx_SetNbDataToProcess+0x98>)
 800bae0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bae2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800baee:	bf00      	nop
 800baf0:	3714      	adds	r7, #20
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	0800c2a4 	.word	0x0800c2a4
 800bb00:	0800c2ac 	.word	0x0800c2ac

0800bb04 <memset>:
 800bb04:	4402      	add	r2, r0
 800bb06:	4603      	mov	r3, r0
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d100      	bne.n	800bb0e <memset+0xa>
 800bb0c:	4770      	bx	lr
 800bb0e:	f803 1b01 	strb.w	r1, [r3], #1
 800bb12:	e7f9      	b.n	800bb08 <memset+0x4>

0800bb14 <__errno>:
 800bb14:	4b01      	ldr	r3, [pc, #4]	@ (800bb1c <__errno+0x8>)
 800bb16:	6818      	ldr	r0, [r3, #0]
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	20000010 	.word	0x20000010

0800bb20 <__libc_init_array>:
 800bb20:	b570      	push	{r4, r5, r6, lr}
 800bb22:	4d0d      	ldr	r5, [pc, #52]	@ (800bb58 <__libc_init_array+0x38>)
 800bb24:	4c0d      	ldr	r4, [pc, #52]	@ (800bb5c <__libc_init_array+0x3c>)
 800bb26:	1b64      	subs	r4, r4, r5
 800bb28:	10a4      	asrs	r4, r4, #2
 800bb2a:	2600      	movs	r6, #0
 800bb2c:	42a6      	cmp	r6, r4
 800bb2e:	d109      	bne.n	800bb44 <__libc_init_array+0x24>
 800bb30:	4d0b      	ldr	r5, [pc, #44]	@ (800bb60 <__libc_init_array+0x40>)
 800bb32:	4c0c      	ldr	r4, [pc, #48]	@ (800bb64 <__libc_init_array+0x44>)
 800bb34:	f000 fb92 	bl	800c25c <_init>
 800bb38:	1b64      	subs	r4, r4, r5
 800bb3a:	10a4      	asrs	r4, r4, #2
 800bb3c:	2600      	movs	r6, #0
 800bb3e:	42a6      	cmp	r6, r4
 800bb40:	d105      	bne.n	800bb4e <__libc_init_array+0x2e>
 800bb42:	bd70      	pop	{r4, r5, r6, pc}
 800bb44:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb48:	4798      	blx	r3
 800bb4a:	3601      	adds	r6, #1
 800bb4c:	e7ee      	b.n	800bb2c <__libc_init_array+0xc>
 800bb4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb52:	4798      	blx	r3
 800bb54:	3601      	adds	r6, #1
 800bb56:	e7f2      	b.n	800bb3e <__libc_init_array+0x1e>
 800bb58:	0800c2c0 	.word	0x0800c2c0
 800bb5c:	0800c2c0 	.word	0x0800c2c0
 800bb60:	0800c2c0 	.word	0x0800c2c0
 800bb64:	0800c2c4 	.word	0x0800c2c4

0800bb68 <acos>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	ed2d 8b02 	vpush	{d8}
 800bb6e:	ec55 4b10 	vmov	r4, r5, d0
 800bb72:	f000 f83d 	bl	800bbf0 <__ieee754_acos>
 800bb76:	4622      	mov	r2, r4
 800bb78:	462b      	mov	r3, r5
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	eeb0 8a40 	vmov.f32	s16, s0
 800bb82:	eef0 8a60 	vmov.f32	s17, s1
 800bb86:	f7f4 ff9d 	bl	8000ac4 <__aeabi_dcmpun>
 800bb8a:	b9a8      	cbnz	r0, 800bbb8 <acos+0x50>
 800bb8c:	ec45 4b10 	vmov	d0, r4, r5
 800bb90:	f000 f81e 	bl	800bbd0 <fabs>
 800bb94:	4b0c      	ldr	r3, [pc, #48]	@ (800bbc8 <acos+0x60>)
 800bb96:	ec51 0b10 	vmov	r0, r1, d0
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f7f4 ff88 	bl	8000ab0 <__aeabi_dcmpgt>
 800bba0:	b150      	cbz	r0, 800bbb8 <acos+0x50>
 800bba2:	f7ff ffb7 	bl	800bb14 <__errno>
 800bba6:	ecbd 8b02 	vpop	{d8}
 800bbaa:	2321      	movs	r3, #33	@ 0x21
 800bbac:	6003      	str	r3, [r0, #0]
 800bbae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbb2:	4806      	ldr	r0, [pc, #24]	@ (800bbcc <acos+0x64>)
 800bbb4:	f000 b814 	b.w	800bbe0 <nan>
 800bbb8:	eeb0 0a48 	vmov.f32	s0, s16
 800bbbc:	eef0 0a68 	vmov.f32	s1, s17
 800bbc0:	ecbd 8b02 	vpop	{d8}
 800bbc4:	bd38      	pop	{r3, r4, r5, pc}
 800bbc6:	bf00      	nop
 800bbc8:	3ff00000 	.word	0x3ff00000
 800bbcc:	0800c2b4 	.word	0x0800c2b4

0800bbd0 <fabs>:
 800bbd0:	ec51 0b10 	vmov	r0, r1, d0
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bbda:	ec43 2b10 	vmov	d0, r2, r3
 800bbde:	4770      	bx	lr

0800bbe0 <nan>:
 800bbe0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bbe8 <nan+0x8>
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop
 800bbe8:	00000000 	.word	0x00000000
 800bbec:	7ff80000 	.word	0x7ff80000

0800bbf0 <__ieee754_acos>:
 800bbf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	ec55 4b10 	vmov	r4, r5, d0
 800bbf8:	49b7      	ldr	r1, [pc, #732]	@ (800bed8 <__ieee754_acos+0x2e8>)
 800bbfa:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bbfe:	428b      	cmp	r3, r1
 800bc00:	d919      	bls.n	800bc36 <__ieee754_acos+0x46>
 800bc02:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800bc06:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800bc0a:	4323      	orrs	r3, r4
 800bc0c:	d106      	bne.n	800bc1c <__ieee754_acos+0x2c>
 800bc0e:	2d00      	cmp	r5, #0
 800bc10:	f340 8210 	ble.w	800c034 <__ieee754_acos+0x444>
 800bc14:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800be68 <__ieee754_acos+0x278>
 800bc18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	462b      	mov	r3, r5
 800bc20:	4620      	mov	r0, r4
 800bc22:	4629      	mov	r1, r5
 800bc24:	f7f4 fafc 	bl	8000220 <__aeabi_dsub>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	f7f4 fdda 	bl	80007e4 <__aeabi_ddiv>
 800bc30:	ec41 0b10 	vmov	d0, r0, r1
 800bc34:	e7f0      	b.n	800bc18 <__ieee754_acos+0x28>
 800bc36:	49a9      	ldr	r1, [pc, #676]	@ (800bedc <__ieee754_acos+0x2ec>)
 800bc38:	428b      	cmp	r3, r1
 800bc3a:	f200 8085 	bhi.w	800bd48 <__ieee754_acos+0x158>
 800bc3e:	4aa8      	ldr	r2, [pc, #672]	@ (800bee0 <__ieee754_acos+0x2f0>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	f240 81fa 	bls.w	800c03a <__ieee754_acos+0x44a>
 800bc46:	4622      	mov	r2, r4
 800bc48:	462b      	mov	r3, r5
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	f7f4 fc9f 	bl	8000590 <__aeabi_dmul>
 800bc52:	a387      	add	r3, pc, #540	@ (adr r3, 800be70 <__ieee754_acos+0x280>)
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	4606      	mov	r6, r0
 800bc5a:	460f      	mov	r7, r1
 800bc5c:	f7f4 fc98 	bl	8000590 <__aeabi_dmul>
 800bc60:	a385      	add	r3, pc, #532	@ (adr r3, 800be78 <__ieee754_acos+0x288>)
 800bc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc66:	f7f4 fadd 	bl	8000224 <__adddf3>
 800bc6a:	4632      	mov	r2, r6
 800bc6c:	463b      	mov	r3, r7
 800bc6e:	f7f4 fc8f 	bl	8000590 <__aeabi_dmul>
 800bc72:	a383      	add	r3, pc, #524	@ (adr r3, 800be80 <__ieee754_acos+0x290>)
 800bc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc78:	f7f4 fad2 	bl	8000220 <__aeabi_dsub>
 800bc7c:	4632      	mov	r2, r6
 800bc7e:	463b      	mov	r3, r7
 800bc80:	f7f4 fc86 	bl	8000590 <__aeabi_dmul>
 800bc84:	a380      	add	r3, pc, #512	@ (adr r3, 800be88 <__ieee754_acos+0x298>)
 800bc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8a:	f7f4 facb 	bl	8000224 <__adddf3>
 800bc8e:	4632      	mov	r2, r6
 800bc90:	463b      	mov	r3, r7
 800bc92:	f7f4 fc7d 	bl	8000590 <__aeabi_dmul>
 800bc96:	a37e      	add	r3, pc, #504	@ (adr r3, 800be90 <__ieee754_acos+0x2a0>)
 800bc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9c:	f7f4 fac0 	bl	8000220 <__aeabi_dsub>
 800bca0:	4632      	mov	r2, r6
 800bca2:	463b      	mov	r3, r7
 800bca4:	f7f4 fc74 	bl	8000590 <__aeabi_dmul>
 800bca8:	a37b      	add	r3, pc, #492	@ (adr r3, 800be98 <__ieee754_acos+0x2a8>)
 800bcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcae:	f7f4 fab9 	bl	8000224 <__adddf3>
 800bcb2:	4632      	mov	r2, r6
 800bcb4:	463b      	mov	r3, r7
 800bcb6:	f7f4 fc6b 	bl	8000590 <__aeabi_dmul>
 800bcba:	a379      	add	r3, pc, #484	@ (adr r3, 800bea0 <__ieee754_acos+0x2b0>)
 800bcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc0:	4680      	mov	r8, r0
 800bcc2:	4689      	mov	r9, r1
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	4639      	mov	r1, r7
 800bcc8:	f7f4 fc62 	bl	8000590 <__aeabi_dmul>
 800bccc:	a376      	add	r3, pc, #472	@ (adr r3, 800bea8 <__ieee754_acos+0x2b8>)
 800bcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd2:	f7f4 faa5 	bl	8000220 <__aeabi_dsub>
 800bcd6:	4632      	mov	r2, r6
 800bcd8:	463b      	mov	r3, r7
 800bcda:	f7f4 fc59 	bl	8000590 <__aeabi_dmul>
 800bcde:	a374      	add	r3, pc, #464	@ (adr r3, 800beb0 <__ieee754_acos+0x2c0>)
 800bce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce4:	f7f4 fa9e 	bl	8000224 <__adddf3>
 800bce8:	4632      	mov	r2, r6
 800bcea:	463b      	mov	r3, r7
 800bcec:	f7f4 fc50 	bl	8000590 <__aeabi_dmul>
 800bcf0:	a371      	add	r3, pc, #452	@ (adr r3, 800beb8 <__ieee754_acos+0x2c8>)
 800bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf6:	f7f4 fa93 	bl	8000220 <__aeabi_dsub>
 800bcfa:	4632      	mov	r2, r6
 800bcfc:	463b      	mov	r3, r7
 800bcfe:	f7f4 fc47 	bl	8000590 <__aeabi_dmul>
 800bd02:	4b78      	ldr	r3, [pc, #480]	@ (800bee4 <__ieee754_acos+0x2f4>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	f7f4 fa8d 	bl	8000224 <__adddf3>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	4640      	mov	r0, r8
 800bd10:	4649      	mov	r1, r9
 800bd12:	f7f4 fd67 	bl	80007e4 <__aeabi_ddiv>
 800bd16:	4622      	mov	r2, r4
 800bd18:	462b      	mov	r3, r5
 800bd1a:	f7f4 fc39 	bl	8000590 <__aeabi_dmul>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	460b      	mov	r3, r1
 800bd22:	a167      	add	r1, pc, #412	@ (adr r1, 800bec0 <__ieee754_acos+0x2d0>)
 800bd24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd28:	f7f4 fa7a 	bl	8000220 <__aeabi_dsub>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	4620      	mov	r0, r4
 800bd32:	4629      	mov	r1, r5
 800bd34:	f7f4 fa74 	bl	8000220 <__aeabi_dsub>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	a162      	add	r1, pc, #392	@ (adr r1, 800bec8 <__ieee754_acos+0x2d8>)
 800bd3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd42:	f7f4 fa6d 	bl	8000220 <__aeabi_dsub>
 800bd46:	e773      	b.n	800bc30 <__ieee754_acos+0x40>
 800bd48:	2d00      	cmp	r5, #0
 800bd4a:	f280 80cf 	bge.w	800beec <__ieee754_acos+0x2fc>
 800bd4e:	4b65      	ldr	r3, [pc, #404]	@ (800bee4 <__ieee754_acos+0x2f4>)
 800bd50:	2200      	movs	r2, #0
 800bd52:	4620      	mov	r0, r4
 800bd54:	4629      	mov	r1, r5
 800bd56:	f7f4 fa65 	bl	8000224 <__adddf3>
 800bd5a:	4b63      	ldr	r3, [pc, #396]	@ (800bee8 <__ieee754_acos+0x2f8>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f7f4 fc17 	bl	8000590 <__aeabi_dmul>
 800bd62:	a343      	add	r3, pc, #268	@ (adr r3, 800be70 <__ieee754_acos+0x280>)
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	4604      	mov	r4, r0
 800bd6a:	460d      	mov	r5, r1
 800bd6c:	f7f4 fc10 	bl	8000590 <__aeabi_dmul>
 800bd70:	a341      	add	r3, pc, #260	@ (adr r3, 800be78 <__ieee754_acos+0x288>)
 800bd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd76:	f7f4 fa55 	bl	8000224 <__adddf3>
 800bd7a:	4622      	mov	r2, r4
 800bd7c:	462b      	mov	r3, r5
 800bd7e:	f7f4 fc07 	bl	8000590 <__aeabi_dmul>
 800bd82:	a33f      	add	r3, pc, #252	@ (adr r3, 800be80 <__ieee754_acos+0x290>)
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	f7f4 fa4a 	bl	8000220 <__aeabi_dsub>
 800bd8c:	4622      	mov	r2, r4
 800bd8e:	462b      	mov	r3, r5
 800bd90:	f7f4 fbfe 	bl	8000590 <__aeabi_dmul>
 800bd94:	a33c      	add	r3, pc, #240	@ (adr r3, 800be88 <__ieee754_acos+0x298>)
 800bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9a:	f7f4 fa43 	bl	8000224 <__adddf3>
 800bd9e:	4622      	mov	r2, r4
 800bda0:	462b      	mov	r3, r5
 800bda2:	f7f4 fbf5 	bl	8000590 <__aeabi_dmul>
 800bda6:	a33a      	add	r3, pc, #232	@ (adr r3, 800be90 <__ieee754_acos+0x2a0>)
 800bda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdac:	f7f4 fa38 	bl	8000220 <__aeabi_dsub>
 800bdb0:	4622      	mov	r2, r4
 800bdb2:	462b      	mov	r3, r5
 800bdb4:	f7f4 fbec 	bl	8000590 <__aeabi_dmul>
 800bdb8:	a337      	add	r3, pc, #220	@ (adr r3, 800be98 <__ieee754_acos+0x2a8>)
 800bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbe:	f7f4 fa31 	bl	8000224 <__adddf3>
 800bdc2:	4622      	mov	r2, r4
 800bdc4:	462b      	mov	r3, r5
 800bdc6:	f7f4 fbe3 	bl	8000590 <__aeabi_dmul>
 800bdca:	a335      	add	r3, pc, #212	@ (adr r3, 800bea0 <__ieee754_acos+0x2b0>)
 800bdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd0:	4606      	mov	r6, r0
 800bdd2:	460f      	mov	r7, r1
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	f7f4 fbda 	bl	8000590 <__aeabi_dmul>
 800bddc:	a332      	add	r3, pc, #200	@ (adr r3, 800bea8 <__ieee754_acos+0x2b8>)
 800bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde2:	f7f4 fa1d 	bl	8000220 <__aeabi_dsub>
 800bde6:	4622      	mov	r2, r4
 800bde8:	462b      	mov	r3, r5
 800bdea:	f7f4 fbd1 	bl	8000590 <__aeabi_dmul>
 800bdee:	a330      	add	r3, pc, #192	@ (adr r3, 800beb0 <__ieee754_acos+0x2c0>)
 800bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf4:	f7f4 fa16 	bl	8000224 <__adddf3>
 800bdf8:	4622      	mov	r2, r4
 800bdfa:	462b      	mov	r3, r5
 800bdfc:	f7f4 fbc8 	bl	8000590 <__aeabi_dmul>
 800be00:	a32d      	add	r3, pc, #180	@ (adr r3, 800beb8 <__ieee754_acos+0x2c8>)
 800be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be06:	f7f4 fa0b 	bl	8000220 <__aeabi_dsub>
 800be0a:	4622      	mov	r2, r4
 800be0c:	462b      	mov	r3, r5
 800be0e:	f7f4 fbbf 	bl	8000590 <__aeabi_dmul>
 800be12:	4b34      	ldr	r3, [pc, #208]	@ (800bee4 <__ieee754_acos+0x2f4>)
 800be14:	2200      	movs	r2, #0
 800be16:	f7f4 fa05 	bl	8000224 <__adddf3>
 800be1a:	ec45 4b10 	vmov	d0, r4, r5
 800be1e:	4680      	mov	r8, r0
 800be20:	4689      	mov	r9, r1
 800be22:	f000 f941 	bl	800c0a8 <__ieee754_sqrt>
 800be26:	ec55 4b10 	vmov	r4, r5, d0
 800be2a:	4642      	mov	r2, r8
 800be2c:	464b      	mov	r3, r9
 800be2e:	4630      	mov	r0, r6
 800be30:	4639      	mov	r1, r7
 800be32:	f7f4 fcd7 	bl	80007e4 <__aeabi_ddiv>
 800be36:	4622      	mov	r2, r4
 800be38:	462b      	mov	r3, r5
 800be3a:	f7f4 fba9 	bl	8000590 <__aeabi_dmul>
 800be3e:	a320      	add	r3, pc, #128	@ (adr r3, 800bec0 <__ieee754_acos+0x2d0>)
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	f7f4 f9ec 	bl	8000220 <__aeabi_dsub>
 800be48:	4622      	mov	r2, r4
 800be4a:	462b      	mov	r3, r5
 800be4c:	f7f4 f9ea 	bl	8000224 <__adddf3>
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	f7f4 f9e6 	bl	8000224 <__adddf3>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	a11c      	add	r1, pc, #112	@ (adr r1, 800bed0 <__ieee754_acos+0x2e0>)
 800be5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be62:	e76e      	b.n	800bd42 <__ieee754_acos+0x152>
 800be64:	f3af 8000 	nop.w
	...
 800be70:	0dfdf709 	.word	0x0dfdf709
 800be74:	3f023de1 	.word	0x3f023de1
 800be78:	7501b288 	.word	0x7501b288
 800be7c:	3f49efe0 	.word	0x3f49efe0
 800be80:	b5688f3b 	.word	0xb5688f3b
 800be84:	3fa48228 	.word	0x3fa48228
 800be88:	0e884455 	.word	0x0e884455
 800be8c:	3fc9c155 	.word	0x3fc9c155
 800be90:	03eb6f7d 	.word	0x03eb6f7d
 800be94:	3fd4d612 	.word	0x3fd4d612
 800be98:	55555555 	.word	0x55555555
 800be9c:	3fc55555 	.word	0x3fc55555
 800bea0:	b12e9282 	.word	0xb12e9282
 800bea4:	3fb3b8c5 	.word	0x3fb3b8c5
 800bea8:	1b8d0159 	.word	0x1b8d0159
 800beac:	3fe6066c 	.word	0x3fe6066c
 800beb0:	9c598ac8 	.word	0x9c598ac8
 800beb4:	40002ae5 	.word	0x40002ae5
 800beb8:	1c8a2d4b 	.word	0x1c8a2d4b
 800bebc:	40033a27 	.word	0x40033a27
 800bec0:	33145c07 	.word	0x33145c07
 800bec4:	3c91a626 	.word	0x3c91a626
 800bec8:	54442d18 	.word	0x54442d18
 800becc:	3ff921fb 	.word	0x3ff921fb
 800bed0:	54442d18 	.word	0x54442d18
 800bed4:	400921fb 	.word	0x400921fb
 800bed8:	3fefffff 	.word	0x3fefffff
 800bedc:	3fdfffff 	.word	0x3fdfffff
 800bee0:	3c600000 	.word	0x3c600000
 800bee4:	3ff00000 	.word	0x3ff00000
 800bee8:	3fe00000 	.word	0x3fe00000
 800beec:	4622      	mov	r2, r4
 800beee:	462b      	mov	r3, r5
 800bef0:	496b      	ldr	r1, [pc, #428]	@ (800c0a0 <__ieee754_acos+0x4b0>)
 800bef2:	2000      	movs	r0, #0
 800bef4:	f7f4 f994 	bl	8000220 <__aeabi_dsub>
 800bef8:	4b6a      	ldr	r3, [pc, #424]	@ (800c0a4 <__ieee754_acos+0x4b4>)
 800befa:	2200      	movs	r2, #0
 800befc:	f7f4 fb48 	bl	8000590 <__aeabi_dmul>
 800bf00:	4604      	mov	r4, r0
 800bf02:	460d      	mov	r5, r1
 800bf04:	ec45 4b10 	vmov	d0, r4, r5
 800bf08:	f000 f8ce 	bl	800c0a8 <__ieee754_sqrt>
 800bf0c:	a34c      	add	r3, pc, #304	@ (adr r3, 800c040 <__ieee754_acos+0x450>)
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	4620      	mov	r0, r4
 800bf14:	4629      	mov	r1, r5
 800bf16:	ec59 8b10 	vmov	r8, r9, d0
 800bf1a:	f7f4 fb39 	bl	8000590 <__aeabi_dmul>
 800bf1e:	a34a      	add	r3, pc, #296	@ (adr r3, 800c048 <__ieee754_acos+0x458>)
 800bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf24:	f7f4 f97e 	bl	8000224 <__adddf3>
 800bf28:	4622      	mov	r2, r4
 800bf2a:	462b      	mov	r3, r5
 800bf2c:	f7f4 fb30 	bl	8000590 <__aeabi_dmul>
 800bf30:	a347      	add	r3, pc, #284	@ (adr r3, 800c050 <__ieee754_acos+0x460>)
 800bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf36:	f7f4 f973 	bl	8000220 <__aeabi_dsub>
 800bf3a:	4622      	mov	r2, r4
 800bf3c:	462b      	mov	r3, r5
 800bf3e:	f7f4 fb27 	bl	8000590 <__aeabi_dmul>
 800bf42:	a345      	add	r3, pc, #276	@ (adr r3, 800c058 <__ieee754_acos+0x468>)
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	f7f4 f96c 	bl	8000224 <__adddf3>
 800bf4c:	4622      	mov	r2, r4
 800bf4e:	462b      	mov	r3, r5
 800bf50:	f7f4 fb1e 	bl	8000590 <__aeabi_dmul>
 800bf54:	a342      	add	r3, pc, #264	@ (adr r3, 800c060 <__ieee754_acos+0x470>)
 800bf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5a:	f7f4 f961 	bl	8000220 <__aeabi_dsub>
 800bf5e:	4622      	mov	r2, r4
 800bf60:	462b      	mov	r3, r5
 800bf62:	f7f4 fb15 	bl	8000590 <__aeabi_dmul>
 800bf66:	a340      	add	r3, pc, #256	@ (adr r3, 800c068 <__ieee754_acos+0x478>)
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	f7f4 f95a 	bl	8000224 <__adddf3>
 800bf70:	4622      	mov	r2, r4
 800bf72:	462b      	mov	r3, r5
 800bf74:	f7f4 fb0c 	bl	8000590 <__aeabi_dmul>
 800bf78:	a33d      	add	r3, pc, #244	@ (adr r3, 800c070 <__ieee754_acos+0x480>)
 800bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7e:	4682      	mov	sl, r0
 800bf80:	468b      	mov	fp, r1
 800bf82:	4620      	mov	r0, r4
 800bf84:	4629      	mov	r1, r5
 800bf86:	f7f4 fb03 	bl	8000590 <__aeabi_dmul>
 800bf8a:	a33b      	add	r3, pc, #236	@ (adr r3, 800c078 <__ieee754_acos+0x488>)
 800bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf90:	f7f4 f946 	bl	8000220 <__aeabi_dsub>
 800bf94:	4622      	mov	r2, r4
 800bf96:	462b      	mov	r3, r5
 800bf98:	f7f4 fafa 	bl	8000590 <__aeabi_dmul>
 800bf9c:	a338      	add	r3, pc, #224	@ (adr r3, 800c080 <__ieee754_acos+0x490>)
 800bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa2:	f7f4 f93f 	bl	8000224 <__adddf3>
 800bfa6:	4622      	mov	r2, r4
 800bfa8:	462b      	mov	r3, r5
 800bfaa:	f7f4 faf1 	bl	8000590 <__aeabi_dmul>
 800bfae:	a336      	add	r3, pc, #216	@ (adr r3, 800c088 <__ieee754_acos+0x498>)
 800bfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb4:	f7f4 f934 	bl	8000220 <__aeabi_dsub>
 800bfb8:	4622      	mov	r2, r4
 800bfba:	462b      	mov	r3, r5
 800bfbc:	f7f4 fae8 	bl	8000590 <__aeabi_dmul>
 800bfc0:	4b37      	ldr	r3, [pc, #220]	@ (800c0a0 <__ieee754_acos+0x4b0>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f7f4 f92e 	bl	8000224 <__adddf3>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	4650      	mov	r0, sl
 800bfce:	4659      	mov	r1, fp
 800bfd0:	f7f4 fc08 	bl	80007e4 <__aeabi_ddiv>
 800bfd4:	4642      	mov	r2, r8
 800bfd6:	464b      	mov	r3, r9
 800bfd8:	f7f4 fada 	bl	8000590 <__aeabi_dmul>
 800bfdc:	2600      	movs	r6, #0
 800bfde:	4682      	mov	sl, r0
 800bfe0:	468b      	mov	fp, r1
 800bfe2:	4632      	mov	r2, r6
 800bfe4:	464b      	mov	r3, r9
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	4649      	mov	r1, r9
 800bfea:	f7f4 fad1 	bl	8000590 <__aeabi_dmul>
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	4620      	mov	r0, r4
 800bff4:	4629      	mov	r1, r5
 800bff6:	f7f4 f913 	bl	8000220 <__aeabi_dsub>
 800bffa:	4632      	mov	r2, r6
 800bffc:	4604      	mov	r4, r0
 800bffe:	460d      	mov	r5, r1
 800c000:	464b      	mov	r3, r9
 800c002:	4640      	mov	r0, r8
 800c004:	4649      	mov	r1, r9
 800c006:	f7f4 f90d 	bl	8000224 <__adddf3>
 800c00a:	4602      	mov	r2, r0
 800c00c:	460b      	mov	r3, r1
 800c00e:	4620      	mov	r0, r4
 800c010:	4629      	mov	r1, r5
 800c012:	f7f4 fbe7 	bl	80007e4 <__aeabi_ddiv>
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	4650      	mov	r0, sl
 800c01c:	4659      	mov	r1, fp
 800c01e:	f7f4 f901 	bl	8000224 <__adddf3>
 800c022:	4632      	mov	r2, r6
 800c024:	464b      	mov	r3, r9
 800c026:	f7f4 f8fd 	bl	8000224 <__adddf3>
 800c02a:	4602      	mov	r2, r0
 800c02c:	460b      	mov	r3, r1
 800c02e:	f7f4 f8f9 	bl	8000224 <__adddf3>
 800c032:	e5fd      	b.n	800bc30 <__ieee754_acos+0x40>
 800c034:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800c090 <__ieee754_acos+0x4a0>
 800c038:	e5ee      	b.n	800bc18 <__ieee754_acos+0x28>
 800c03a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800c098 <__ieee754_acos+0x4a8>
 800c03e:	e5eb      	b.n	800bc18 <__ieee754_acos+0x28>
 800c040:	0dfdf709 	.word	0x0dfdf709
 800c044:	3f023de1 	.word	0x3f023de1
 800c048:	7501b288 	.word	0x7501b288
 800c04c:	3f49efe0 	.word	0x3f49efe0
 800c050:	b5688f3b 	.word	0xb5688f3b
 800c054:	3fa48228 	.word	0x3fa48228
 800c058:	0e884455 	.word	0x0e884455
 800c05c:	3fc9c155 	.word	0x3fc9c155
 800c060:	03eb6f7d 	.word	0x03eb6f7d
 800c064:	3fd4d612 	.word	0x3fd4d612
 800c068:	55555555 	.word	0x55555555
 800c06c:	3fc55555 	.word	0x3fc55555
 800c070:	b12e9282 	.word	0xb12e9282
 800c074:	3fb3b8c5 	.word	0x3fb3b8c5
 800c078:	1b8d0159 	.word	0x1b8d0159
 800c07c:	3fe6066c 	.word	0x3fe6066c
 800c080:	9c598ac8 	.word	0x9c598ac8
 800c084:	40002ae5 	.word	0x40002ae5
 800c088:	1c8a2d4b 	.word	0x1c8a2d4b
 800c08c:	40033a27 	.word	0x40033a27
 800c090:	54442d18 	.word	0x54442d18
 800c094:	400921fb 	.word	0x400921fb
 800c098:	54442d18 	.word	0x54442d18
 800c09c:	3ff921fb 	.word	0x3ff921fb
 800c0a0:	3ff00000 	.word	0x3ff00000
 800c0a4:	3fe00000 	.word	0x3fe00000

0800c0a8 <__ieee754_sqrt>:
 800c0a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ac:	4a68      	ldr	r2, [pc, #416]	@ (800c250 <__ieee754_sqrt+0x1a8>)
 800c0ae:	ec55 4b10 	vmov	r4, r5, d0
 800c0b2:	43aa      	bics	r2, r5
 800c0b4:	462b      	mov	r3, r5
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	d110      	bne.n	800c0dc <__ieee754_sqrt+0x34>
 800c0ba:	4622      	mov	r2, r4
 800c0bc:	4620      	mov	r0, r4
 800c0be:	4629      	mov	r1, r5
 800c0c0:	f7f4 fa66 	bl	8000590 <__aeabi_dmul>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	f7f4 f8aa 	bl	8000224 <__adddf3>
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	460d      	mov	r5, r1
 800c0d4:	ec45 4b10 	vmov	d0, r4, r5
 800c0d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0dc:	2d00      	cmp	r5, #0
 800c0de:	dc0e      	bgt.n	800c0fe <__ieee754_sqrt+0x56>
 800c0e0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c0e4:	4322      	orrs	r2, r4
 800c0e6:	d0f5      	beq.n	800c0d4 <__ieee754_sqrt+0x2c>
 800c0e8:	b19d      	cbz	r5, 800c112 <__ieee754_sqrt+0x6a>
 800c0ea:	4622      	mov	r2, r4
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	f7f4 f896 	bl	8000220 <__aeabi_dsub>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	f7f4 fb74 	bl	80007e4 <__aeabi_ddiv>
 800c0fc:	e7e8      	b.n	800c0d0 <__ieee754_sqrt+0x28>
 800c0fe:	152a      	asrs	r2, r5, #20
 800c100:	d115      	bne.n	800c12e <__ieee754_sqrt+0x86>
 800c102:	2000      	movs	r0, #0
 800c104:	e009      	b.n	800c11a <__ieee754_sqrt+0x72>
 800c106:	0acb      	lsrs	r3, r1, #11
 800c108:	3a15      	subs	r2, #21
 800c10a:	0549      	lsls	r1, r1, #21
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d0fa      	beq.n	800c106 <__ieee754_sqrt+0x5e>
 800c110:	e7f7      	b.n	800c102 <__ieee754_sqrt+0x5a>
 800c112:	462a      	mov	r2, r5
 800c114:	e7fa      	b.n	800c10c <__ieee754_sqrt+0x64>
 800c116:	005b      	lsls	r3, r3, #1
 800c118:	3001      	adds	r0, #1
 800c11a:	02dc      	lsls	r4, r3, #11
 800c11c:	d5fb      	bpl.n	800c116 <__ieee754_sqrt+0x6e>
 800c11e:	1e44      	subs	r4, r0, #1
 800c120:	1b12      	subs	r2, r2, r4
 800c122:	f1c0 0420 	rsb	r4, r0, #32
 800c126:	fa21 f404 	lsr.w	r4, r1, r4
 800c12a:	4323      	orrs	r3, r4
 800c12c:	4081      	lsls	r1, r0
 800c12e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c132:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c13a:	07d2      	lsls	r2, r2, #31
 800c13c:	bf5c      	itt	pl
 800c13e:	005b      	lslpl	r3, r3, #1
 800c140:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c144:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c148:	bf58      	it	pl
 800c14a:	0049      	lslpl	r1, r1, #1
 800c14c:	2600      	movs	r6, #0
 800c14e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c152:	106d      	asrs	r5, r5, #1
 800c154:	0049      	lsls	r1, r1, #1
 800c156:	2016      	movs	r0, #22
 800c158:	4632      	mov	r2, r6
 800c15a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c15e:	1917      	adds	r7, r2, r4
 800c160:	429f      	cmp	r7, r3
 800c162:	bfde      	ittt	le
 800c164:	193a      	addle	r2, r7, r4
 800c166:	1bdb      	suble	r3, r3, r7
 800c168:	1936      	addle	r6, r6, r4
 800c16a:	0fcf      	lsrs	r7, r1, #31
 800c16c:	3801      	subs	r0, #1
 800c16e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c172:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c176:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c17a:	d1f0      	bne.n	800c15e <__ieee754_sqrt+0xb6>
 800c17c:	4604      	mov	r4, r0
 800c17e:	2720      	movs	r7, #32
 800c180:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c184:	429a      	cmp	r2, r3
 800c186:	eb00 0e0c 	add.w	lr, r0, ip
 800c18a:	db02      	blt.n	800c192 <__ieee754_sqrt+0xea>
 800c18c:	d113      	bne.n	800c1b6 <__ieee754_sqrt+0x10e>
 800c18e:	458e      	cmp	lr, r1
 800c190:	d811      	bhi.n	800c1b6 <__ieee754_sqrt+0x10e>
 800c192:	f1be 0f00 	cmp.w	lr, #0
 800c196:	eb0e 000c 	add.w	r0, lr, ip
 800c19a:	da42      	bge.n	800c222 <__ieee754_sqrt+0x17a>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	db40      	blt.n	800c222 <__ieee754_sqrt+0x17a>
 800c1a0:	f102 0801 	add.w	r8, r2, #1
 800c1a4:	1a9b      	subs	r3, r3, r2
 800c1a6:	458e      	cmp	lr, r1
 800c1a8:	bf88      	it	hi
 800c1aa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c1ae:	eba1 010e 	sub.w	r1, r1, lr
 800c1b2:	4464      	add	r4, ip
 800c1b4:	4642      	mov	r2, r8
 800c1b6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c1ba:	3f01      	subs	r7, #1
 800c1bc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c1c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c1c4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c1c8:	d1dc      	bne.n	800c184 <__ieee754_sqrt+0xdc>
 800c1ca:	4319      	orrs	r1, r3
 800c1cc:	d01b      	beq.n	800c206 <__ieee754_sqrt+0x15e>
 800c1ce:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c254 <__ieee754_sqrt+0x1ac>
 800c1d2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c258 <__ieee754_sqrt+0x1b0>
 800c1d6:	e9da 0100 	ldrd	r0, r1, [sl]
 800c1da:	e9db 2300 	ldrd	r2, r3, [fp]
 800c1de:	f7f4 f81f 	bl	8000220 <__aeabi_dsub>
 800c1e2:	e9da 8900 	ldrd	r8, r9, [sl]
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	4640      	mov	r0, r8
 800c1ec:	4649      	mov	r1, r9
 800c1ee:	f7f4 fc4b 	bl	8000a88 <__aeabi_dcmple>
 800c1f2:	b140      	cbz	r0, 800c206 <__ieee754_sqrt+0x15e>
 800c1f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c1f8:	e9da 0100 	ldrd	r0, r1, [sl]
 800c1fc:	e9db 2300 	ldrd	r2, r3, [fp]
 800c200:	d111      	bne.n	800c226 <__ieee754_sqrt+0x17e>
 800c202:	3601      	adds	r6, #1
 800c204:	463c      	mov	r4, r7
 800c206:	1072      	asrs	r2, r6, #1
 800c208:	0863      	lsrs	r3, r4, #1
 800c20a:	07f1      	lsls	r1, r6, #31
 800c20c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c210:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c214:	bf48      	it	mi
 800c216:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c21a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c21e:	4618      	mov	r0, r3
 800c220:	e756      	b.n	800c0d0 <__ieee754_sqrt+0x28>
 800c222:	4690      	mov	r8, r2
 800c224:	e7be      	b.n	800c1a4 <__ieee754_sqrt+0xfc>
 800c226:	f7f3 fffd 	bl	8000224 <__adddf3>
 800c22a:	e9da 8900 	ldrd	r8, r9, [sl]
 800c22e:	4602      	mov	r2, r0
 800c230:	460b      	mov	r3, r1
 800c232:	4640      	mov	r0, r8
 800c234:	4649      	mov	r1, r9
 800c236:	f7f4 fc1d 	bl	8000a74 <__aeabi_dcmplt>
 800c23a:	b120      	cbz	r0, 800c246 <__ieee754_sqrt+0x19e>
 800c23c:	1ca0      	adds	r0, r4, #2
 800c23e:	bf08      	it	eq
 800c240:	3601      	addeq	r6, #1
 800c242:	3402      	adds	r4, #2
 800c244:	e7df      	b.n	800c206 <__ieee754_sqrt+0x15e>
 800c246:	1c63      	adds	r3, r4, #1
 800c248:	f023 0401 	bic.w	r4, r3, #1
 800c24c:	e7db      	b.n	800c206 <__ieee754_sqrt+0x15e>
 800c24e:	bf00      	nop
 800c250:	7ff00000 	.word	0x7ff00000
 800c254:	20000068 	.word	0x20000068
 800c258:	20000060 	.word	0x20000060

0800c25c <_init>:
 800c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25e:	bf00      	nop
 800c260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c262:	bc08      	pop	{r3}
 800c264:	469e      	mov	lr, r3
 800c266:	4770      	bx	lr

0800c268 <_fini>:
 800c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26a:	bf00      	nop
 800c26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c26e:	bc08      	pop	{r3}
 800c270:	469e      	mov	lr, r3
 800c272:	4770      	bx	lr
