
STM-QCW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5e4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800c7bc  0800c7bc  0000d7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c800  0800c800  0000e070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c800  0800c800  0000d800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c808  0800c808  0000e070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c808  0800c808  0000d808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c80c  0800c80c  0000d80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800c810  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a0c  20000070  0800c880  0000e070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a7c  0800c880  0000ea7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eea7  00000000  00000000  0000e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003889  00000000  00000000  0002cf47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  000307d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014bb  00000000  00000000  00032270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002234b  00000000  00000000  0003372b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e4cb  00000000  00000000  00055a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e540f  00000000  00000000  00073f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077c4  00000000  00000000  00159394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00160b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c7a4 	.word	0x0800c7a4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800c7a4 	.word	0x0800c7a4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b96a 	b.w	8000f0c <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	460c      	mov	r4, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14e      	bne.n	8000cfa <__udivmoddi4+0xaa>
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	458c      	cmp	ip, r1
 8000c60:	4686      	mov	lr, r0
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	d962      	bls.n	8000d2e <__udivmoddi4+0xde>
 8000c68:	b14a      	cbz	r2, 8000c7e <__udivmoddi4+0x2e>
 8000c6a:	f1c2 0320 	rsb	r3, r2, #32
 8000c6e:	4091      	lsls	r1, r2
 8000c70:	fa20 f303 	lsr.w	r3, r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f f68c 	uxth.w	r6, ip
 8000c86:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c96:	fb04 f106 	mul.w	r1, r4, r6
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x64>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ca6:	f080 8112 	bcs.w	8000ece <__udivmoddi4+0x27e>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 810f 	bls.w	8000ece <__udivmoddi4+0x27e>
 8000cb0:	3c02      	subs	r4, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a59      	subs	r1, r3, r1
 8000cb6:	fa1f f38e 	uxth.w	r3, lr
 8000cba:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbe:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc6:	fb00 f606 	mul.w	r6, r0, r6
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	d90a      	bls.n	8000ce4 <__udivmoddi4+0x94>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd6:	f080 80fc 	bcs.w	8000ed2 <__udivmoddi4+0x282>
 8000cda:	429e      	cmp	r6, r3
 8000cdc:	f240 80f9 	bls.w	8000ed2 <__udivmoddi4+0x282>
 8000ce0:	4463      	add	r3, ip
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cea:	2100      	movs	r1, #0
 8000cec:	b11d      	cbz	r5, 8000cf6 <__udivmoddi4+0xa6>
 8000cee:	40d3      	lsrs	r3, r2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d905      	bls.n	8000d0a <__udivmoddi4+0xba>
 8000cfe:	b10d      	cbz	r5, 8000d04 <__udivmoddi4+0xb4>
 8000d00:	e9c5 0100 	strd	r0, r1, [r5]
 8000d04:	2100      	movs	r1, #0
 8000d06:	4608      	mov	r0, r1
 8000d08:	e7f5      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d0a:	fab3 f183 	clz	r1, r3
 8000d0e:	2900      	cmp	r1, #0
 8000d10:	d146      	bne.n	8000da0 <__udivmoddi4+0x150>
 8000d12:	42a3      	cmp	r3, r4
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xcc>
 8000d16:	4290      	cmp	r0, r2
 8000d18:	f0c0 80f0 	bcc.w	8000efc <__udivmoddi4+0x2ac>
 8000d1c:	1a86      	subs	r6, r0, r2
 8000d1e:	eb64 0303 	sbc.w	r3, r4, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d0e6      	beq.n	8000cf6 <__udivmoddi4+0xa6>
 8000d28:	e9c5 6300 	strd	r6, r3, [r5]
 8000d2c:	e7e3      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	f040 8090 	bne.w	8000e54 <__udivmoddi4+0x204>
 8000d34:	eba1 040c 	sub.w	r4, r1, ip
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	2101      	movs	r1, #1
 8000d42:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d4a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb07 f006 	mul.w	r0, r7, r6
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x11c>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x11a>
 8000d64:	4298      	cmp	r0, r3
 8000d66:	f200 80cd 	bhi.w	8000f04 <__udivmoddi4+0x2b4>
 8000d6a:	4626      	mov	r6, r4
 8000d6c:	1a1c      	subs	r4, r3, r0
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d76:	fb08 4410 	mls	r4, r8, r0, r4
 8000d7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7e:	fb00 f707 	mul.w	r7, r0, r7
 8000d82:	429f      	cmp	r7, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x148>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x146>
 8000d90:	429f      	cmp	r7, r3
 8000d92:	f200 80b0 	bhi.w	8000ef6 <__udivmoddi4+0x2a6>
 8000d96:	4620      	mov	r0, r4
 8000d98:	1bdb      	subs	r3, r3, r7
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0x9c>
 8000da0:	f1c1 0620 	rsb	r6, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 f706 	lsr.w	r7, r2, r6
 8000daa:	431f      	orrs	r7, r3
 8000dac:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db0:	fa04 f301 	lsl.w	r3, r4, r1
 8000db4:	ea43 030c 	orr.w	r3, r3, ip
 8000db8:	40f4      	lsrs	r4, r6
 8000dba:	fa00 f801 	lsl.w	r8, r0, r1
 8000dbe:	0c38      	lsrs	r0, r7, #16
 8000dc0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dc4:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd4:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd8:	45a1      	cmp	r9, r4
 8000dda:	fa02 f201 	lsl.w	r2, r2, r1
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x1a6>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000de6:	f080 8084 	bcs.w	8000ef2 <__udivmoddi4+0x2a2>
 8000dea:	45a1      	cmp	r9, r4
 8000dec:	f240 8081 	bls.w	8000ef2 <__udivmoddi4+0x2a2>
 8000df0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	eba4 0409 	sub.w	r4, r4, r9
 8000dfa:	fa1f f983 	uxth.w	r9, r3
 8000dfe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e02:	fb00 4413 	mls	r4, r0, r3, r4
 8000e06:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x1d2>
 8000e12:	193c      	adds	r4, r7, r4
 8000e14:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e18:	d267      	bcs.n	8000eea <__udivmoddi4+0x29a>
 8000e1a:	45a4      	cmp	ip, r4
 8000e1c:	d965      	bls.n	8000eea <__udivmoddi4+0x29a>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	443c      	add	r4, r7
 8000e22:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e26:	fba0 9302 	umull	r9, r3, r0, r2
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	429c      	cmp	r4, r3
 8000e30:	46ce      	mov	lr, r9
 8000e32:	469c      	mov	ip, r3
 8000e34:	d351      	bcc.n	8000eda <__udivmoddi4+0x28a>
 8000e36:	d04e      	beq.n	8000ed6 <__udivmoddi4+0x286>
 8000e38:	b155      	cbz	r5, 8000e50 <__udivmoddi4+0x200>
 8000e3a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e3e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e42:	fa04 f606 	lsl.w	r6, r4, r6
 8000e46:	40cb      	lsrs	r3, r1
 8000e48:	431e      	orrs	r6, r3
 8000e4a:	40cc      	lsrs	r4, r1
 8000e4c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e50:	2100      	movs	r1, #0
 8000e52:	e750      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000e54:	f1c2 0320 	rsb	r3, r2, #32
 8000e58:	fa20 f103 	lsr.w	r1, r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa24 f303 	lsr.w	r3, r4, r3
 8000e64:	4094      	lsls	r4, r2
 8000e66:	430c      	orrs	r4, r1
 8000e68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e6c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e78:	fb08 3110 	mls	r1, r8, r0, r3
 8000e7c:	0c23      	lsrs	r3, r4, #16
 8000e7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e82:	fb00 f107 	mul.w	r1, r0, r7
 8000e86:	4299      	cmp	r1, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x24c>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e92:	d22c      	bcs.n	8000eee <__udivmoddi4+0x29e>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	d92a      	bls.n	8000eee <__udivmoddi4+0x29e>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1a5b      	subs	r3, r3, r1
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ea4:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eac:	fb01 f307 	mul.w	r3, r1, r7
 8000eb0:	42a3      	cmp	r3, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x276>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ebc:	d213      	bcs.n	8000ee6 <__udivmoddi4+0x296>
 8000ebe:	42a3      	cmp	r3, r4
 8000ec0:	d911      	bls.n	8000ee6 <__udivmoddi4+0x296>
 8000ec2:	3902      	subs	r1, #2
 8000ec4:	4464      	add	r4, ip
 8000ec6:	1ae4      	subs	r4, r4, r3
 8000ec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ecc:	e739      	b.n	8000d42 <__udivmoddi4+0xf2>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	e6f0      	b.n	8000cb4 <__udivmoddi4+0x64>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e706      	b.n	8000ce4 <__udivmoddi4+0x94>
 8000ed6:	45c8      	cmp	r8, r9
 8000ed8:	d2ae      	bcs.n	8000e38 <__udivmoddi4+0x1e8>
 8000eda:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ede:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ee2:	3801      	subs	r0, #1
 8000ee4:	e7a8      	b.n	8000e38 <__udivmoddi4+0x1e8>
 8000ee6:	4631      	mov	r1, r6
 8000ee8:	e7ed      	b.n	8000ec6 <__udivmoddi4+0x276>
 8000eea:	4603      	mov	r3, r0
 8000eec:	e799      	b.n	8000e22 <__udivmoddi4+0x1d2>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e7d4      	b.n	8000e9c <__udivmoddi4+0x24c>
 8000ef2:	46d6      	mov	lr, sl
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1a6>
 8000ef6:	4463      	add	r3, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e74d      	b.n	8000d98 <__udivmoddi4+0x148>
 8000efc:	4606      	mov	r6, r0
 8000efe:	4623      	mov	r3, r4
 8000f00:	4608      	mov	r0, r1
 8000f02:	e70f      	b.n	8000d24 <__udivmoddi4+0xd4>
 8000f04:	3e02      	subs	r6, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	e730      	b.n	8000d6c <__udivmoddi4+0x11c>
 8000f0a:	bf00      	nop

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f14:	f002 f9b7 	bl	8003286 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f18:	f000 f838 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1c:	f000 feda 	bl	8001cd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f20:	f000 fea6 	bl	8001c70 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f24:	f000 f87c 	bl	8001020 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f28:	f000 f914 	bl	8001154 <MX_ADC2_Init>
  MX_COMP1_Init();
 8000f2c:	f000 f97a 	bl	8001224 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000f30:	f000 f99e 	bl	8001270 <MX_COMP2_Init>
  MX_DAC1_Init();
 8000f34:	f000 f9c4 	bl	80012c0 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000f38:	f000 f9fc 	bl	8001334 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f3c:	f000 fa38 	bl	80013b0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f40:	f000 fe4a 	bl	8001bd8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f44:	f000 fb30 	bl	80015a8 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000f48:	f000 fcb8 	bl	80018bc <MX_TIM6_Init>
  MX_TIM4_Init();
 8000f4c:	f000 fc28 	bl	80017a0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000f50:	f000 fba4 	bl	800169c <MX_TIM3_Init>
  MX_TIM7_Init();
 8000f54:	f000 fce8 	bl	8001928 <MX_TIM7_Init>
  MX_TIM8_Init();
 8000f58:	f000 fd1e 	bl	8001998 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000f5c:	f000 fdec 	bl	8001b38 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  QCW_Init();
 8000f60:	f000 ff22 	bl	8001da8 <QCW_Init>

  HAL_Delay(1000);
 8000f64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f68:	f002 f9fe 	bl	8003368 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	 HAL_Delay(100);
 8000f6c:	2064      	movs	r0, #100	@ 0x64
 8000f6e:	f002 f9fb 	bl	8003368 <HAL_Delay>
	  	 StartPulse(1.0f, 150.0f, 30.0f);
 8000f72:	eeb3 1a0e 	vmov.f32	s2, #62	@ 0x41f00000  30.0
 8000f76:	eddf 0a04 	vldr	s1, [pc, #16]	@ 8000f88 <main+0x78>
 8000f7a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000f7e:	f001 f96b 	bl	8002258 <StartPulse>
	  	 HAL_Delay(100);
 8000f82:	bf00      	nop
 8000f84:	e7f2      	b.n	8000f6c <main+0x5c>
 8000f86:	bf00      	nop
 8000f88:	43160000 	.word	0x43160000

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b094      	sub	sp, #80	@ 0x50
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0318 	add.w	r3, r7, #24
 8000f96:	2238      	movs	r2, #56	@ 0x38
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f00b f854 	bl	800c048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f005 fb10 	bl	80065d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fbc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fca:	2355      	movs	r3, #85	@ 0x55
 8000fcc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f005 fbac 	bl	800673c <HAL_RCC_OscConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000fea:	f000 fed5 	bl	8001d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fee:	230f      	movs	r3, #15
 8000ff0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2104      	movs	r1, #4
 8001006:	4618      	mov	r0, r3
 8001008:	f005 feaa 	bl	8006d60 <HAL_RCC_ClockConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001012:	f000 fec1 	bl	8001d98 <Error_Handler>
  }
}
 8001016:	bf00      	nop
 8001018:	3750      	adds	r7, #80	@ 0x50
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	@ 0x30
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2220      	movs	r2, #32
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00b f805 	bl	800c048 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800103e:	4b41      	ldr	r3, [pc, #260]	@ (8001144 <MX_ADC1_Init+0x124>)
 8001040:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001044:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001046:	4b3f      	ldr	r3, [pc, #252]	@ (8001144 <MX_ADC1_Init+0x124>)
 8001048:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800104c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104e:	4b3d      	ldr	r3, [pc, #244]	@ (8001144 <MX_ADC1_Init+0x124>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001054:	4b3b      	ldr	r3, [pc, #236]	@ (8001144 <MX_ADC1_Init+0x124>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800105a:	4b3a      	ldr	r3, [pc, #232]	@ (8001144 <MX_ADC1_Init+0x124>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001060:	4b38      	ldr	r3, [pc, #224]	@ (8001144 <MX_ADC1_Init+0x124>)
 8001062:	2201      	movs	r2, #1
 8001064:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001066:	4b37      	ldr	r3, [pc, #220]	@ (8001144 <MX_ADC1_Init+0x124>)
 8001068:	2208      	movs	r2, #8
 800106a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800106c:	4b35      	ldr	r3, [pc, #212]	@ (8001144 <MX_ADC1_Init+0x124>)
 800106e:	2200      	movs	r2, #0
 8001070:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001072:	4b34      	ldr	r3, [pc, #208]	@ (8001144 <MX_ADC1_Init+0x124>)
 8001074:	2200      	movs	r2, #0
 8001076:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001078:	4b32      	ldr	r3, [pc, #200]	@ (8001144 <MX_ADC1_Init+0x124>)
 800107a:	2203      	movs	r2, #3
 800107c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800107e:	4b31      	ldr	r3, [pc, #196]	@ (8001144 <MX_ADC1_Init+0x124>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001086:	4b2f      	ldr	r3, [pc, #188]	@ (8001144 <MX_ADC1_Init+0x124>)
 8001088:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 800108c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800108e:	4b2d      	ldr	r3, [pc, #180]	@ (8001144 <MX_ADC1_Init+0x124>)
 8001090:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001094:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001096:	4b2b      	ldr	r3, [pc, #172]	@ (8001144 <MX_ADC1_Init+0x124>)
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800109e:	4b29      	ldr	r3, [pc, #164]	@ (8001144 <MX_ADC1_Init+0x124>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010a4:	4b27      	ldr	r3, [pc, #156]	@ (8001144 <MX_ADC1_Init+0x124>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ac:	4825      	ldr	r0, [pc, #148]	@ (8001144 <MX_ADC1_Init+0x124>)
 80010ae:	f002 fbe3 	bl	8003878 <HAL_ADC_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010b8:	f000 fe6e 	bl	8001d98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	481f      	ldr	r0, [pc, #124]	@ (8001144 <MX_ADC1_Init+0x124>)
 80010c8:	f003 fe96 	bl	8004df8 <HAL_ADCEx_MultiModeConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010d2:	f000 fe61 	bl	8001d98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001148 <MX_ADC1_Init+0x128>)
 80010d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010da:	2306      	movs	r3, #6
 80010dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80010de:	2305      	movs	r3, #5
 80010e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010e2:	237f      	movs	r3, #127	@ 0x7f
 80010e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010e6:	2304      	movs	r3, #4
 80010e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	4814      	ldr	r0, [pc, #80]	@ (8001144 <MX_ADC1_Init+0x124>)
 80010f4:	f003 f830 	bl	8004158 <HAL_ADC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80010fe:	f000 fe4b 	bl	8001d98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001102:	4b12      	ldr	r3, [pc, #72]	@ (800114c <MX_ADC1_Init+0x12c>)
 8001104:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001106:	230c      	movs	r3, #12
 8001108:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	480d      	ldr	r0, [pc, #52]	@ (8001144 <MX_ADC1_Init+0x124>)
 8001110:	f003 f822 	bl	8004158 <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800111a:	f000 fe3d 	bl	8001d98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800111e:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <MX_ADC1_Init+0x130>)
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001122:	2312      	movs	r3, #18
 8001124:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	@ (8001144 <MX_ADC1_Init+0x124>)
 800112c:	f003 f814 	bl	8004158 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001136:	f000 fe2f 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	3730      	adds	r7, #48	@ 0x30
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000008c 	.word	0x2000008c
 8001148:	04300002 	.word	0x04300002
 800114c:	c3210000 	.word	0xc3210000
 8001150:	cb840000 	.word	0xcb840000

08001154 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800115a:	463b      	mov	r3, r7
 800115c:	2220      	movs	r2, #32
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f00a ff71 	bl	800c048 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001166:	4b2c      	ldr	r3, [pc, #176]	@ (8001218 <MX_ADC2_Init+0xc4>)
 8001168:	4a2c      	ldr	r2, [pc, #176]	@ (800121c <MX_ADC2_Init+0xc8>)
 800116a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800116c:	4b2a      	ldr	r3, [pc, #168]	@ (8001218 <MX_ADC2_Init+0xc4>)
 800116e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001172:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001174:	4b28      	ldr	r3, [pc, #160]	@ (8001218 <MX_ADC2_Init+0xc4>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117a:	4b27      	ldr	r3, [pc, #156]	@ (8001218 <MX_ADC2_Init+0xc4>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001180:	4b25      	ldr	r3, [pc, #148]	@ (8001218 <MX_ADC2_Init+0xc4>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001186:	4b24      	ldr	r3, [pc, #144]	@ (8001218 <MX_ADC2_Init+0xc4>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118c:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <MX_ADC2_Init+0xc4>)
 800118e:	2204      	movs	r2, #4
 8001190:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001192:	4b21      	ldr	r3, [pc, #132]	@ (8001218 <MX_ADC2_Init+0xc4>)
 8001194:	2200      	movs	r2, #0
 8001196:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001198:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <MX_ADC2_Init+0xc4>)
 800119a:	2200      	movs	r2, #0
 800119c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <MX_ADC2_Init+0xc4>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001218 <MX_ADC2_Init+0xc4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <MX_ADC2_Init+0xc4>)
 80011ae:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 80011b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011b4:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <MX_ADC2_Init+0xc4>)
 80011b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80011bc:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <MX_ADC2_Init+0xc4>)
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <MX_ADC2_Init+0xc4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011ca:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <MX_ADC2_Init+0xc4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011d2:	4811      	ldr	r0, [pc, #68]	@ (8001218 <MX_ADC2_Init+0xc4>)
 80011d4:	f002 fb50 	bl	8003878 <HAL_ADC_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80011de:	f000 fddb 	bl	8001d98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_ADC2_Init+0xcc>)
 80011e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e6:	2306      	movs	r3, #6
 80011e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80011ea:	2306      	movs	r3, #6
 80011ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ee:	237f      	movs	r3, #127	@ 0x7f
 80011f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011f2:	2304      	movs	r3, #4
 80011f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	@ (8001218 <MX_ADC2_Init+0xc4>)
 8001200:	f002 ffaa 	bl	8004158 <HAL_ADC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800120a:	f000 fdc5 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3720      	adds	r7, #32
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200000f8 	.word	0x200000f8
 800121c:	50000100 	.word	0x50000100
 8001220:	47520000 	.word	0x47520000

08001224 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001228:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <MX_COMP1_Init+0x44>)
 800122a:	4a10      	ldr	r2, [pc, #64]	@ (800126c <MX_COMP1_Init+0x48>)
 800122c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800122e:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <MX_COMP1_Init+0x44>)
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <MX_COMP1_Init+0x44>)
 8001236:	2250      	movs	r2, #80	@ 0x50
 8001238:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800123a:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <MX_COMP1_Init+0x44>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_10MV;
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <MX_COMP1_Init+0x44>)
 8001242:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001246:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001248:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <MX_COMP1_Init+0x44>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <MX_COMP1_Init+0x44>)
 8001250:	2211      	movs	r2, #17
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001254:	4804      	ldr	r0, [pc, #16]	@ (8001268 <MX_COMP1_Init+0x44>)
 8001256:	f003 ff31 	bl	80050bc <HAL_COMP_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8001260:	f000 fd9a 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000224 	.word	0x20000224
 800126c:	40010200 	.word	0x40010200

08001270 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001274:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <MX_COMP2_Init+0x48>)
 8001276:	4a11      	ldr	r2, [pc, #68]	@ (80012bc <MX_COMP2_Init+0x4c>)
 8001278:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800127a:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <MX_COMP2_Init+0x48>)
 800127c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001280:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_IO2;
 8001282:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <MX_COMP2_Init+0x48>)
 8001284:	2270      	movs	r2, #112	@ 0x70
 8001286:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001288:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <MX_COMP2_Init+0x48>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_10MV;
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <MX_COMP2_Init+0x48>)
 8001290:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001294:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <MX_COMP2_Init+0x48>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <MX_COMP2_Init+0x48>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_COMP2_Init+0x48>)
 80012a4:	f003 ff0a 	bl	80050bc <HAL_COMP_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_COMP2_Init+0x42>
  {
    Error_Handler();
 80012ae:	f000 fd73 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000248 	.word	0x20000248
 80012bc:	40010204 	.word	0x40010204

080012c0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	@ 0x30
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012c6:	463b      	mov	r3, r7
 80012c8:	2230      	movs	r2, #48	@ 0x30
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00a febb 	bl	800c048 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012d2:	4b16      	ldr	r3, [pc, #88]	@ (800132c <MX_DAC1_Init+0x6c>)
 80012d4:	4a16      	ldr	r2, [pc, #88]	@ (8001330 <MX_DAC1_Init+0x70>)
 80012d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012d8:	4814      	ldr	r0, [pc, #80]	@ (800132c <MX_DAC1_Init+0x6c>)
 80012da:	f004 f95e 	bl	800559a <HAL_DAC_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012e4:	f000 fd58 	bl	8001d98 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80012e8:	2302      	movs	r3, #2
 80012ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001300:	2302      	movs	r3, #2
 8001302:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	@ (800132c <MX_DAC1_Init+0x6c>)
 8001314:	f004 fa5e 	bl	80057d4 <HAL_DAC_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800131e:	f000 fd3b 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	3730      	adds	r7, #48	@ 0x30
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000026c 	.word	0x2000026c
 8001330:	50000800 	.word	0x50000800

08001334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <MX_SPI1_Init+0x74>)
 800133a:	4a1c      	ldr	r2, [pc, #112]	@ (80013ac <MX_SPI1_Init+0x78>)
 800133c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800133e:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <MX_SPI1_Init+0x74>)
 8001340:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001346:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <MX_SPI1_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800134c:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <MX_SPI1_Init+0x74>)
 800134e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001352:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <MX_SPI1_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800135a:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <MX_SPI1_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_SPI1_Init+0x74>)
 8001362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001366:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <MX_SPI1_Init+0x74>)
 800136a:	2230      	movs	r2, #48	@ 0x30
 800136c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <MX_SPI1_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_SPI1_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <MX_SPI1_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <MX_SPI1_Init+0x74>)
 8001382:	2207      	movs	r2, #7
 8001384:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <MX_SPI1_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <MX_SPI1_Init+0x74>)
 800138e:	2208      	movs	r2, #8
 8001390:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_SPI1_Init+0x74>)
 8001394:	f006 f8f0 	bl	8007578 <HAL_SPI_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800139e:	f000 fcfb 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000280 	.word	0x20000280
 80013ac:	40013000 	.word	0x40013000

080013b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0a0      	sub	sp, #128	@ 0x80
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013c4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
 80013f0:	615a      	str	r2, [r3, #20]
 80013f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2234      	movs	r2, #52	@ 0x34
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f00a fe24 	bl	800c048 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001400:	4b66      	ldr	r3, [pc, #408]	@ (800159c <MX_TIM1_Init+0x1ec>)
 8001402:	4a67      	ldr	r2, [pc, #412]	@ (80015a0 <MX_TIM1_Init+0x1f0>)
 8001404:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001406:	4b65      	ldr	r3, [pc, #404]	@ (800159c <MX_TIM1_Init+0x1ec>)
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800140c:	4b63      	ldr	r3, [pc, #396]	@ (800159c <MX_TIM1_Init+0x1ec>)
 800140e:	2220      	movs	r2, #32
 8001410:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001412:	4b62      	ldr	r3, [pc, #392]	@ (800159c <MX_TIM1_Init+0x1ec>)
 8001414:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001418:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141a:	4b60      	ldr	r3, [pc, #384]	@ (800159c <MX_TIM1_Init+0x1ec>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001420:	4b5e      	ldr	r3, [pc, #376]	@ (800159c <MX_TIM1_Init+0x1ec>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001426:	4b5d      	ldr	r3, [pc, #372]	@ (800159c <MX_TIM1_Init+0x1ec>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800142c:	485b      	ldr	r0, [pc, #364]	@ (800159c <MX_TIM1_Init+0x1ec>)
 800142e:	f006 fa62 	bl	80078f6 <HAL_TIM_Base_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001438:	f000 fcae 	bl	8001d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001440:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001442:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001446:	4619      	mov	r1, r3
 8001448:	4854      	ldr	r0, [pc, #336]	@ (800159c <MX_TIM1_Init+0x1ec>)
 800144a:	f007 fb87 	bl	8008b5c <HAL_TIM_ConfigClockSource>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001454:	f000 fca0 	bl	8001d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001458:	4850      	ldr	r0, [pc, #320]	@ (800159c <MX_TIM1_Init+0x1ec>)
 800145a:	f006 fb97 	bl	8007b8c <HAL_TIM_PWM_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001464:	f000 fc98 	bl	8001d98 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001468:	2304      	movs	r3, #4
 800146a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800146c:	2370      	movs	r3, #112	@ 0x70
 800146e:	663b      	str	r3, [r7, #96]	@ 0x60
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8001470:	2300      	movs	r3, #0
 8001472:	667b      	str	r3, [r7, #100]	@ 0x64
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	66bb      	str	r3, [r7, #104]	@ 0x68
  sSlaveConfig.TriggerFilter = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800147c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001480:	4619      	mov	r1, r3
 8001482:	4846      	ldr	r0, [pc, #280]	@ (800159c <MX_TIM1_Init+0x1ec>)
 8001484:	f007 fc64 	bl	8008d50 <HAL_TIM_SlaveConfigSynchro>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 800148e:	f000 fc83 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001492:	2310      	movs	r3, #16
 8001494:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC5REF;
 8001496:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800149a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014a0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80014a4:	4619      	mov	r1, r3
 80014a6:	483d      	ldr	r0, [pc, #244]	@ (800159c <MX_TIM1_Init+0x1ec>)
 80014a8:	f008 fade 	bl	8009a68 <HAL_TIMEx_MasterConfigSynchronization>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80014b2:	f000 fc71 	bl	8001d98 <Error_Handler>
  }
  HAL_TIMEx_RemapConfig(&htim1, TIM_TIM1_ETR_COMP2);
 80014b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014ba:	4838      	ldr	r0, [pc, #224]	@ (800159c <MX_TIM1_Init+0x1ec>)
 80014bc:	f008 fbe2 	bl	8009c84 <HAL_TIMEx_RemapConfig>
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 80014c0:	4b38      	ldr	r3, [pc, #224]	@ (80015a4 <MX_TIM1_Init+0x1f4>)
 80014c2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c8:	2300      	movs	r3, #0
 80014ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014cc:	2300      	movs	r3, #0
 80014ce:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014e0:	2200      	movs	r2, #0
 80014e2:	4619      	mov	r1, r3
 80014e4:	482d      	ldr	r0, [pc, #180]	@ (800159c <MX_TIM1_Init+0x1ec>)
 80014e6:	f007 fa25 	bl	8008934 <HAL_TIM_PWM_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80014f0:	f000 fc52 	bl	8001d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014f8:	2204      	movs	r2, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4827      	ldr	r0, [pc, #156]	@ (800159c <MX_TIM1_Init+0x1ec>)
 80014fe:	f007 fa19 	bl	8008934 <HAL_TIM_PWM_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001508:	f000 fc46 	bl	8001d98 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800150c:	2302      	movs	r3, #2
 800150e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001510:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001514:	2208      	movs	r2, #8
 8001516:	4619      	mov	r1, r3
 8001518:	4820      	ldr	r0, [pc, #128]	@ (800159c <MX_TIM1_Init+0x1ec>)
 800151a:	f007 fa0b 	bl	8008934 <HAL_TIM_PWM_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 8001524:	f000 fc38 	bl	8001d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001528:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800152c:	220c      	movs	r2, #12
 800152e:	4619      	mov	r1, r3
 8001530:	481a      	ldr	r0, [pc, #104]	@ (800159c <MX_TIM1_Init+0x1ec>)
 8001532:	f007 f9ff 	bl	8008934 <HAL_TIM_PWM_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 800153c:	f000 fc2c 	bl	8001d98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001554:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001558:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001566:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	4619      	mov	r1, r3
 800157c:	4807      	ldr	r0, [pc, #28]	@ (800159c <MX_TIM1_Init+0x1ec>)
 800157e:	f008 faf5 	bl	8009b6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM1_Init+0x1dc>
  {
    Error_Handler();
 8001588:	f000 fc06 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800158c:	4803      	ldr	r0, [pc, #12]	@ (800159c <MX_TIM1_Init+0x1ec>)
 800158e:	f001 fc59 	bl	8002e44 <HAL_TIM_MspPostInit>

}
 8001592:	bf00      	nop
 8001594:	3780      	adds	r7, #128	@ 0x80
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200002e4 	.word	0x200002e4
 80015a0:	40012c00 	.word	0x40012c00
 80015a4:	00010060 	.word	0x00010060

080015a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08c      	sub	sp, #48	@ 0x30
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ae:	f107 0320 	add.w	r3, r7, #32
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d4:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <MX_TIM2_Init+0xf0>)
 80015d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001698 <MX_TIM2_Init+0xf0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001698 <MX_TIM2_Init+0xf0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001698 <MX_TIM2_Init+0xf0>)
 80015ea:	f04f 32ff 	mov.w	r2, #4294967295
 80015ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f0:	4b29      	ldr	r3, [pc, #164]	@ (8001698 <MX_TIM2_Init+0xf0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f6:	4b28      	ldr	r3, [pc, #160]	@ (8001698 <MX_TIM2_Init+0xf0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015fc:	4826      	ldr	r0, [pc, #152]	@ (8001698 <MX_TIM2_Init+0xf0>)
 80015fe:	f006 f97a 	bl	80078f6 <HAL_TIM_Base_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001608:	f000 fbc6 	bl	8001d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001610:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	4619      	mov	r1, r3
 8001618:	481f      	ldr	r0, [pc, #124]	@ (8001698 <MX_TIM2_Init+0xf0>)
 800161a:	f007 fa9f 	bl	8008b5c <HAL_TIM_ConfigClockSource>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001624:	f000 fbb8 	bl	8001d98 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001628:	481b      	ldr	r0, [pc, #108]	@ (8001698 <MX_TIM2_Init+0xf0>)
 800162a:	f006 fdf3 	bl	8008214 <HAL_TIM_IC_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001634:	f000 fbb0 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4814      	ldr	r0, [pc, #80]	@ (8001698 <MX_TIM2_Init+0xf0>)
 8001648:	f008 fa0e 	bl	8009a68 <HAL_TIMEx_MasterConfigSynchronization>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001652:	f000 fba1 	bl	8001d98 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800165a:	2301      	movs	r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2200      	movs	r2, #0
 800166a:	4619      	mov	r1, r3
 800166c:	480a      	ldr	r0, [pc, #40]	@ (8001698 <MX_TIM2_Init+0xf0>)
 800166e:	f007 f8c4 	bl	80087fa <HAL_TIM_IC_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001678:	f000 fb8e 	bl	8001d98 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim2, TIM_TIM2_TI1_COMP2, TIM_CHANNEL_1) != HAL_OK)
 800167c:	2200      	movs	r2, #0
 800167e:	2102      	movs	r1, #2
 8001680:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_TIM2_Init+0xf0>)
 8001682:	f008 fb25 	bl	8009cd0 <HAL_TIMEx_TISelection>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800168c:	f000 fb84 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	3730      	adds	r7, #48	@ 0x30
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000330 	.word	0x20000330

0800169c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08e      	sub	sp, #56	@ 0x38
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016bc:	463b      	mov	r3, r7
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	615a      	str	r2, [r3, #20]
 80016cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ce:	4b32      	ldr	r3, [pc, #200]	@ (8001798 <MX_TIM3_Init+0xfc>)
 80016d0:	4a32      	ldr	r2, [pc, #200]	@ (800179c <MX_TIM3_Init+0x100>)
 80016d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016d4:	4b30      	ldr	r3, [pc, #192]	@ (8001798 <MX_TIM3_Init+0xfc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	4b2f      	ldr	r3, [pc, #188]	@ (8001798 <MX_TIM3_Init+0xfc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6800;
 80016e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001798 <MX_TIM3_Init+0xfc>)
 80016e2:	f641 2290 	movw	r2, #6800	@ 0x1a90
 80016e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <MX_TIM3_Init+0xfc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <MX_TIM3_Init+0xfc>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016f4:	4828      	ldr	r0, [pc, #160]	@ (8001798 <MX_TIM3_Init+0xfc>)
 80016f6:	f006 f8fe 	bl	80078f6 <HAL_TIM_Base_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001700:	f000 fb4a 	bl	8001d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001708:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800170a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800170e:	4619      	mov	r1, r3
 8001710:	4821      	ldr	r0, [pc, #132]	@ (8001798 <MX_TIM3_Init+0xfc>)
 8001712:	f007 fa23 	bl	8008b5c <HAL_TIM_ConfigClockSource>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800171c:	f000 fb3c 	bl	8001d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001720:	481d      	ldr	r0, [pc, #116]	@ (8001798 <MX_TIM3_Init+0xfc>)
 8001722:	f006 fa33 	bl	8007b8c <HAL_TIM_PWM_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800172c:	f000 fb34 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4619      	mov	r1, r3
 800173e:	4816      	ldr	r0, [pc, #88]	@ (8001798 <MX_TIM3_Init+0xfc>)
 8001740:	f008 f992 	bl	8009a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800174a:	f000 fb25 	bl	8001d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174e:	2360      	movs	r3, #96	@ 0x60
 8001750:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	2200      	movs	r2, #0
 8001762:	4619      	mov	r1, r3
 8001764:	480c      	ldr	r0, [pc, #48]	@ (8001798 <MX_TIM3_Init+0xfc>)
 8001766:	f007 f8e5 	bl	8008934 <HAL_TIM_PWM_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001770:	f000 fb12 	bl	8001d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001774:	463b      	mov	r3, r7
 8001776:	2204      	movs	r2, #4
 8001778:	4619      	mov	r1, r3
 800177a:	4807      	ldr	r0, [pc, #28]	@ (8001798 <MX_TIM3_Init+0xfc>)
 800177c:	f007 f8da 	bl	8008934 <HAL_TIM_PWM_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001786:	f000 fb07 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800178a:	4803      	ldr	r0, [pc, #12]	@ (8001798 <MX_TIM3_Init+0xfc>)
 800178c:	f001 fb5a 	bl	8002e44 <HAL_TIM_MspPostInit>

}
 8001790:	bf00      	nop
 8001792:	3738      	adds	r7, #56	@ 0x38
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2000037c 	.word	0x2000037c
 800179c:	40000400 	.word	0x40000400

080017a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08e      	sub	sp, #56	@ 0x38
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	615a      	str	r2, [r3, #20]
 80017d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017d2:	4b38      	ldr	r3, [pc, #224]	@ (80018b4 <MX_TIM4_Init+0x114>)
 80017d4:	4a38      	ldr	r2, [pc, #224]	@ (80018b8 <MX_TIM4_Init+0x118>)
 80017d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017d8:	4b36      	ldr	r3, [pc, #216]	@ (80018b4 <MX_TIM4_Init+0x114>)
 80017da:	2200      	movs	r2, #0
 80017dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017de:	4b35      	ldr	r3, [pc, #212]	@ (80018b4 <MX_TIM4_Init+0x114>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 6800;
 80017e4:	4b33      	ldr	r3, [pc, #204]	@ (80018b4 <MX_TIM4_Init+0x114>)
 80017e6:	f641 2290 	movw	r2, #6800	@ 0x1a90
 80017ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ec:	4b31      	ldr	r3, [pc, #196]	@ (80018b4 <MX_TIM4_Init+0x114>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f2:	4b30      	ldr	r3, [pc, #192]	@ (80018b4 <MX_TIM4_Init+0x114>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017f8:	482e      	ldr	r0, [pc, #184]	@ (80018b4 <MX_TIM4_Init+0x114>)
 80017fa:	f006 f87c 	bl	80078f6 <HAL_TIM_Base_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001804:	f000 fac8 	bl	8001d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800180e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001812:	4619      	mov	r1, r3
 8001814:	4827      	ldr	r0, [pc, #156]	@ (80018b4 <MX_TIM4_Init+0x114>)
 8001816:	f007 f9a1 	bl	8008b5c <HAL_TIM_ConfigClockSource>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001820:	f000 faba 	bl	8001d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001824:	4823      	ldr	r0, [pc, #140]	@ (80018b4 <MX_TIM4_Init+0x114>)
 8001826:	f006 f9b1 	bl	8007b8c <HAL_TIM_PWM_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001830:	f000 fab2 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	4619      	mov	r1, r3
 8001842:	481c      	ldr	r0, [pc, #112]	@ (80018b4 <MX_TIM4_Init+0x114>)
 8001844:	f008 f910 	bl	8009a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800184e:	f000 faa3 	bl	8001d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001852:	2360      	movs	r3, #96	@ 0x60
 8001854:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001862:	463b      	mov	r3, r7
 8001864:	2200      	movs	r2, #0
 8001866:	4619      	mov	r1, r3
 8001868:	4812      	ldr	r0, [pc, #72]	@ (80018b4 <MX_TIM4_Init+0x114>)
 800186a:	f007 f863 	bl	8008934 <HAL_TIM_PWM_ConfigChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001874:	f000 fa90 	bl	8001d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	2204      	movs	r2, #4
 800187c:	4619      	mov	r1, r3
 800187e:	480d      	ldr	r0, [pc, #52]	@ (80018b4 <MX_TIM4_Init+0x114>)
 8001880:	f007 f858 	bl	8008934 <HAL_TIM_PWM_ConfigChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800188a:	f000 fa85 	bl	8001d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800188e:	463b      	mov	r3, r7
 8001890:	2208      	movs	r2, #8
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	@ (80018b4 <MX_TIM4_Init+0x114>)
 8001896:	f007 f84d 	bl	8008934 <HAL_TIM_PWM_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80018a0:	f000 fa7a 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018a4:	4803      	ldr	r0, [pc, #12]	@ (80018b4 <MX_TIM4_Init+0x114>)
 80018a6:	f001 facd 	bl	8002e44 <HAL_TIM_MspPostInit>

}
 80018aa:	bf00      	nop
 80018ac:	3738      	adds	r7, #56	@ 0x38
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200003c8 	.word	0x200003c8
 80018b8:	40000800 	.word	0x40000800

080018bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018cc:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <MX_TIM6_Init+0x64>)
 80018ce:	4a15      	ldr	r2, [pc, #84]	@ (8001924 <MX_TIM6_Init+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80018d2:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <MX_TIM6_Init+0x64>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <MX_TIM6_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <MX_TIM6_Init+0x64>)
 80018e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018e4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <MX_TIM6_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <MX_TIM6_Init+0x64>)
 80018ee:	f006 f802 	bl	80078f6 <HAL_TIM_Base_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80018f8:	f000 fa4e 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018fc:	2300      	movs	r3, #0
 80018fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	@ (8001920 <MX_TIM6_Init+0x64>)
 800190a:	f008 f8ad 	bl	8009a68 <HAL_TIMEx_MasterConfigSynchronization>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001914:	f000 fa40 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000414 	.word	0x20000414
 8001924:	40001000 	.word	0x40001000

08001928 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001938:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <MX_TIM7_Init+0x68>)
 800193a:	4a16      	ldr	r2, [pc, #88]	@ (8001994 <MX_TIM7_Init+0x6c>)
 800193c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1700-1;
 800193e:	4b14      	ldr	r3, [pc, #80]	@ (8001990 <MX_TIM7_Init+0x68>)
 8001940:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001944:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <MX_TIM7_Init+0x68>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800194c:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <MX_TIM7_Init+0x68>)
 800194e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001952:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <MX_TIM7_Init+0x68>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800195a:	480d      	ldr	r0, [pc, #52]	@ (8001990 <MX_TIM7_Init+0x68>)
 800195c:	f005 ffcb 	bl	80078f6 <HAL_TIM_Base_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001966:	f000 fa17 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4806      	ldr	r0, [pc, #24]	@ (8001990 <MX_TIM7_Init+0x68>)
 8001978:	f008 f876 	bl	8009a68 <HAL_TIMEx_MasterConfigSynchronization>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001982:	f000 fa09 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000460 	.word	0x20000460
 8001994:	40001400 	.word	0x40001400

08001998 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b0a0      	sub	sp, #128	@ 0x80
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019bc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
 80019d8:	615a      	str	r2, [r3, #20]
 80019da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019dc:	463b      	mov	r3, r7
 80019de:	2234      	movs	r2, #52	@ 0x34
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f00a fb30 	bl	800c048 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019e8:	4b51      	ldr	r3, [pc, #324]	@ (8001b30 <MX_TIM8_Init+0x198>)
 80019ea:	4a52      	ldr	r2, [pc, #328]	@ (8001b34 <MX_TIM8_Init+0x19c>)
 80019ec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019ee:	4b50      	ldr	r3, [pc, #320]	@ (8001b30 <MX_TIM8_Init+0x198>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80019f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001b30 <MX_TIM8_Init+0x198>)
 80019f6:	2220      	movs	r2, #32
 80019f8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80019fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001b30 <MX_TIM8_Init+0x198>)
 80019fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a00:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a02:	4b4b      	ldr	r3, [pc, #300]	@ (8001b30 <MX_TIM8_Init+0x198>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a08:	4b49      	ldr	r3, [pc, #292]	@ (8001b30 <MX_TIM8_Init+0x198>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0e:	4b48      	ldr	r3, [pc, #288]	@ (8001b30 <MX_TIM8_Init+0x198>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a14:	4846      	ldr	r0, [pc, #280]	@ (8001b30 <MX_TIM8_Init+0x198>)
 8001a16:	f005 ff6e 	bl	80078f6 <HAL_TIM_Base_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8001a20:	f000 f9ba 	bl	8001d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a28:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a2a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001a2e:	4619      	mov	r1, r3
 8001a30:	483f      	ldr	r0, [pc, #252]	@ (8001b30 <MX_TIM8_Init+0x198>)
 8001a32:	f007 f893 	bl	8008b5c <HAL_TIM_ConfigClockSource>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001a3c:	f000 f9ac 	bl	8001d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a40:	483b      	ldr	r0, [pc, #236]	@ (8001b30 <MX_TIM8_Init+0x198>)
 8001a42:	f006 f8a3 	bl	8007b8c <HAL_TIM_PWM_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001a4c:	f000 f9a4 	bl	8001d98 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001a50:	2304      	movs	r3, #4
 8001a52:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8001a54:	2370      	movs	r3, #112	@ 0x70
 8001a56:	663b      	str	r3, [r7, #96]	@ 0x60
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	667b      	str	r3, [r7, #100]	@ 0x64
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	66bb      	str	r3, [r7, #104]	@ 0x68
  sSlaveConfig.TriggerFilter = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001a64:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4831      	ldr	r0, [pc, #196]	@ (8001b30 <MX_TIM8_Init+0x198>)
 8001a6c:	f007 f970 	bl	8008d50 <HAL_TIM_SlaveConfigSynchro>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM8_Init+0xe2>
  {
    Error_Handler();
 8001a76:	f000 f98f 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a86:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4828      	ldr	r0, [pc, #160]	@ (8001b30 <MX_TIM8_Init+0x198>)
 8001a8e:	f007 ffeb 	bl	8009a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM8_Init+0x104>
  {
    Error_Handler();
 8001a98:	f000 f97e 	bl	8001d98 <Error_Handler>
  }
  HAL_TIMEx_RemapConfig(&htim8, TIM_TIM8_ETR_COMP2);
 8001a9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aa0:	4823      	ldr	r0, [pc, #140]	@ (8001b30 <MX_TIM8_Init+0x198>)
 8001aa2:	f008 f8ef 	bl	8009c84 <HAL_TIMEx_RemapConfig>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa6:	2360      	movs	r3, #96	@ 0x60
 8001aa8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4819      	ldr	r0, [pc, #100]	@ (8001b30 <MX_TIM8_Init+0x198>)
 8001acc:	f006 ff32 	bl	8008934 <HAL_TIM_PWM_ConfigChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001ad6:	f000 f95f 	bl	8001d98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001af2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b12:	463b      	mov	r3, r7
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	@ (8001b30 <MX_TIM8_Init+0x198>)
 8001b18:	f008 f828 	bl	8009b6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM8_Init+0x18e>
  {
    Error_Handler();
 8001b22:	f000 f939 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	3780      	adds	r7, #128	@ 0x80
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200004ac 	.word	0x200004ac
 8001b34:	40013400 	.word	0x40013400

08001b38 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001b56:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd0 <MX_TIM15_Init+0x98>)
 8001b58:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd4 <MX_TIM15_Init+0x9c>)
 8001b5a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 170-1;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <MX_TIM15_Init+0x98>)
 8001b5e:	22a9      	movs	r2, #169	@ 0xa9
 8001b60:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <MX_TIM15_Init+0x98>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 8001b68:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <MX_TIM15_Init+0x98>)
 8001b6a:	2263      	movs	r2, #99	@ 0x63
 8001b6c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6e:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <MX_TIM15_Init+0x98>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001b74:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <MX_TIM15_Init+0x98>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <MX_TIM15_Init+0x98>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001b80:	4813      	ldr	r0, [pc, #76]	@ (8001bd0 <MX_TIM15_Init+0x98>)
 8001b82:	f005 feb8 	bl	80078f6 <HAL_TIM_Base_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001b8c:	f000 f904 	bl	8001d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480c      	ldr	r0, [pc, #48]	@ (8001bd0 <MX_TIM15_Init+0x98>)
 8001b9e:	f006 ffdd 	bl	8008b5c <HAL_TIM_ConfigClockSource>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001ba8:	f000 f8f6 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bac:	2320      	movs	r3, #32
 8001bae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	@ (8001bd0 <MX_TIM15_Init+0x98>)
 8001bba:	f007 ff55 	bl	8009a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001bc4:	f000 f8e8 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200004f8 	.word	0x200004f8
 8001bd4:	40014000 	.word	0x40014000

08001bd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bdc:	4b22      	ldr	r3, [pc, #136]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001bde:	4a23      	ldr	r2, [pc, #140]	@ (8001c6c <MX_USART1_UART_Init+0x94>)
 8001be0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001be2:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001be4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001be8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bea:	4b1f      	ldr	r3, [pc, #124]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001bfe:	2204      	movs	r2, #4
 8001c00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c02:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c08:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0e:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c14:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c1a:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001c20:	4811      	ldr	r0, [pc, #68]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c22:	f008 f929 	bl	8009e78 <HAL_HalfDuplex_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c2c:	f000 f8b4 	bl	8001d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c30:	2100      	movs	r1, #0
 8001c32:	480d      	ldr	r0, [pc, #52]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c34:	f00a f93d 	bl	800beb2 <HAL_UARTEx_SetTxFifoThreshold>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c3e:	f000 f8ab 	bl	8001d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c42:	2100      	movs	r1, #0
 8001c44:	4808      	ldr	r0, [pc, #32]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c46:	f00a f972 	bl	800bf2e <HAL_UARTEx_SetRxFifoThreshold>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c50:	f000 f8a2 	bl	8001d98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c54:	4804      	ldr	r0, [pc, #16]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c56:	f00a f8f3 	bl	800be40 <HAL_UARTEx_DisableFifoMode>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c60:	f000 f89a 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000544 	.word	0x20000544
 8001c6c:	40013800 	.word	0x40013800

08001c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c76:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <MX_DMA_Init+0x60>)
 8001c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c7a:	4a15      	ldr	r2, [pc, #84]	@ (8001cd0 <MX_DMA_Init+0x60>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c82:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <MX_DMA_Init+0x60>)
 8001c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c8e:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <MX_DMA_Init+0x60>)
 8001c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c92:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd0 <MX_DMA_Init+0x60>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <MX_DMA_Init+0x60>)
 8001c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	200b      	movs	r0, #11
 8001cac:	f003 fc41 	bl	8005532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001cb0:	200b      	movs	r0, #11
 8001cb2:	f003 fc58 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	200c      	movs	r0, #12
 8001cbc:	f003 fc39 	bl	8005532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001cc0:	200c      	movs	r0, #12
 8001cc2:	f003 fc50 	bl	8005566 <HAL_NVIC_EnableIRQ>

}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cea:	4b29      	ldr	r3, [pc, #164]	@ (8001d90 <MX_GPIO_Init+0xbc>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cee:	4a28      	ldr	r2, [pc, #160]	@ (8001d90 <MX_GPIO_Init+0xbc>)
 8001cf0:	f043 0320 	orr.w	r3, r3, #32
 8001cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf6:	4b26      	ldr	r3, [pc, #152]	@ (8001d90 <MX_GPIO_Init+0xbc>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	4b23      	ldr	r3, [pc, #140]	@ (8001d90 <MX_GPIO_Init+0xbc>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d06:	4a22      	ldr	r2, [pc, #136]	@ (8001d90 <MX_GPIO_Init+0xbc>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d0e:	4b20      	ldr	r3, [pc, #128]	@ (8001d90 <MX_GPIO_Init+0xbc>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <MX_GPIO_Init+0xbc>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d90 <MX_GPIO_Init+0xbc>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d26:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <MX_GPIO_Init+0xbc>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2181      	movs	r1, #129	@ 0x81
 8001d36:	4817      	ldr	r0, [pc, #92]	@ (8001d94 <MX_GPIO_Init+0xc0>)
 8001d38:	f004 fbc4 	bl	80064c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GD_DIS_GPIO_Port, GD_DIS_Pin, GPIO_PIN_RESET);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d46:	f004 fbbd 	bl	80064c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|RELAY_Pin;
 8001d4a:	2381      	movs	r3, #129	@ 0x81
 8001d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <MX_GPIO_Init+0xc0>)
 8001d62:	f004 fa2d 	bl	80061c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GD_DIS_Pin */
  GPIO_InitStruct.Pin = GD_DIS_Pin;
 8001d66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GD_DIS_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d82:	f004 fa1d 	bl	80061c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d86:	bf00      	nop
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	48000400 	.word	0x48000400

08001d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d9c:	b672      	cpsid	i
}
 8001d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <Error_Handler+0x8>
 8001da4:	0000      	movs	r0, r0
	...

08001da8 <QCW_Init>:
uint32_t fb_dr_upper;
uint32_t fb_av_upper;
uint32_t fb_dr_lower;
uint32_t fb_av_lower;

void QCW_Init() {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
	GD_DIS_GPIO_Port->BRR = GD_DIS_Pin; // disable GD
 8001dae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001db2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_Delay(1000);
 8001db8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dbc:	f001 fad4 	bl	8003368 <HAL_Delay>

	TS_CAL1 = *((uint16_t *) 0x1FFF75A8); // get calibration data from memory
 8001dc0:	4b49      	ldr	r3, [pc, #292]	@ (8001ee8 <QCW_Init+0x140>)
 8001dc2:	881a      	ldrh	r2, [r3, #0]
 8001dc4:	4b49      	ldr	r3, [pc, #292]	@ (8001eec <QCW_Init+0x144>)
 8001dc6:	801a      	strh	r2, [r3, #0]
	TS_CAL2 = *((uint16_t *) 0x1FFF75CA);
 8001dc8:	4b49      	ldr	r3, [pc, #292]	@ (8001ef0 <QCW_Init+0x148>)
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	4b49      	ldr	r3, [pc, #292]	@ (8001ef4 <QCW_Init+0x14c>)
 8001dce:	801a      	strh	r2, [r3, #0]
	VREFINT = *((uint16_t *) 0x1FFF75AA);
 8001dd0:	4b49      	ldr	r3, [pc, #292]	@ (8001ef8 <QCW_Init+0x150>)
 8001dd2:	881a      	ldrh	r2, [r3, #0]
 8001dd4:	4b49      	ldr	r3, [pc, #292]	@ (8001efc <QCW_Init+0x154>)
 8001dd6:	801a      	strh	r2, [r3, #0]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001dd8:	217f      	movs	r1, #127	@ 0x7f
 8001dda:	4849      	ldr	r0, [pc, #292]	@ (8001f00 <QCW_Init+0x158>)
 8001ddc:	f002 ff78 	bl	8004cd0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) aux_buf, 3);
 8001de0:	2203      	movs	r2, #3
 8001de2:	4948      	ldr	r1, [pc, #288]	@ (8001f04 <QCW_Init+0x15c>)
 8001de4:	4846      	ldr	r0, [pc, #280]	@ (8001f00 <QCW_Init+0x158>)
 8001de6:	f001 fecb 	bl	8003b80 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001dea:	217f      	movs	r1, #127	@ 0x7f
 8001dec:	4846      	ldr	r0, [pc, #280]	@ (8001f08 <QCW_Init+0x160>)
 8001dee:	f002 ff6f 	bl	8004cd0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) vbus_buf, 1);
 8001df2:	2201      	movs	r2, #1
 8001df4:	4945      	ldr	r1, [pc, #276]	@ (8001f0c <QCW_Init+0x164>)
 8001df6:	4844      	ldr	r0, [pc, #272]	@ (8001f08 <QCW_Init+0x160>)
 8001df8:	f001 fec2 	bl	8003b80 <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start(&htim15); // ADC trigger comparator
 8001dfc:	4844      	ldr	r0, [pc, #272]	@ (8001f10 <QCW_Init+0x168>)
 8001dfe:	f005 fdd1 	bl	80079a4 <HAL_TIM_Base_Start>

    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // OCD dac - Configured to be the - input of OCD comparator
 8001e02:	2100      	movs	r1, #0
 8001e04:	4843      	ldr	r0, [pc, #268]	@ (8001f14 <QCW_Init+0x16c>)
 8001e06:	f003 fbeb 	bl	80055e0 <HAL_DAC_Start>

    HAL_COMP_Start(&hcomp1); // OCD and ZCD comparators
 8001e0a:	4843      	ldr	r0, [pc, #268]	@ (8001f18 <QCW_Init+0x170>)
 8001e0c:	f003 fa32 	bl	8005274 <HAL_COMP_Start>
    HAL_COMP_Start(&hcomp2);
 8001e10:	4842      	ldr	r0, [pc, #264]	@ (8001f1c <QCW_Init+0x174>)
 8001e12:	f003 fa2f 	bl	8005274 <HAL_COMP_Start>

    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // input capture
 8001e16:	2100      	movs	r1, #0
 8001e18:	4841      	ldr	r0, [pc, #260]	@ (8001f20 <QCW_Init+0x178>)
 8001e1a:	f006 fa5d 	bl	80082d8 <HAL_TIM_IC_Start_IT>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // LED1 - Vbus
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4840      	ldr	r0, [pc, #256]	@ (8001f24 <QCW_Init+0x17c>)
 8001e22:	f005 ff15 	bl	8007c50 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // LED2 - Ready
 8001e26:	2104      	movs	r1, #4
 8001e28:	483e      	ldr	r0, [pc, #248]	@ (8001f24 <QCW_Init+0x17c>)
 8001e2a:	f005 ff11 	bl	8007c50 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // LED3 - Pulse
 8001e2e:	2100      	movs	r1, #0
 8001e30:	483d      	ldr	r0, [pc, #244]	@ (8001f28 <QCW_Init+0x180>)
 8001e32:	f005 ff0d 	bl	8007c50 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // LED4 - OCD
 8001e36:	2104      	movs	r1, #4
 8001e38:	483b      	ldr	r0, [pc, #236]	@ (8001f28 <QCW_Init+0x180>)
 8001e3a:	f005 ff09 	bl	8007c50 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // FAN
 8001e3e:	2108      	movs	r1, #8
 8001e40:	4838      	ldr	r0, [pc, #224]	@ (8001f24 <QCW_Init+0x17c>)
 8001e42:	f005 ff05 	bl	8007c50 <HAL_TIM_PWM_Start>

    HAL_TIM_Base_Start_IT(&htim7);
 8001e46:	4839      	ldr	r0, [pc, #228]	@ (8001f2c <QCW_Init+0x184>)
 8001e48:	f005 fe36 	bl	8007ab8 <HAL_TIM_Base_Start_IT>

    HAL_HalfDuplex_EnableReceiver(&huart1);
 8001e4c:	4838      	ldr	r0, [pc, #224]	@ (8001f30 <QCW_Init+0x188>)
 8001e4e:	f008 fc19 	bl	800a684 <HAL_HalfDuplex_EnableReceiver>
    HAL_UART_Receive_IT(&huart1, uart_buffer, UART_SIZE);
 8001e52:	220c      	movs	r2, #12
 8001e54:	4937      	ldr	r1, [pc, #220]	@ (8001f34 <QCW_Init+0x18c>)
 8001e56:	4836      	ldr	r0, [pc, #216]	@ (8001f30 <QCW_Init+0x188>)
 8001e58:	f008 f866 	bl	8009f28 <HAL_UART_Receive_IT>

    for (int i = 0; i < RAMP_STEPS; i++) {
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	e035      	b.n	8001ece <QCW_Init+0x126>
    	transfer_function[i] = 1.0f - (1.0f / M_PI) * acos(2.0f*(float) i / (float) RAMP_STEPS - 1.0f);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e70:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001f38 <QCW_Init+0x190>
 8001e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e80:	ee17 0a90 	vmov	r0, s15
 8001e84:	f7fe fb2c 	bl	80004e0 <__aeabi_f2d>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	ec43 2b10 	vmov	d0, r2, r3
 8001e90:	f00a f90c 	bl	800c0ac <acos>
 8001e94:	ec51 0b10 	vmov	r0, r1, d0
 8001e98:	a311      	add	r3, pc, #68	@ (adr r3, 8001ee0 <QCW_Init+0x138>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fb77 	bl	8000590 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	f04f 0000 	mov.w	r0, #0
 8001eaa:	4924      	ldr	r1, [pc, #144]	@ (8001f3c <QCW_Init+0x194>)
 8001eac:	f7fe f9b8 	bl	8000220 <__aeabi_dsub>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f7fe fe62 	bl	8000b80 <__aeabi_d2f>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4920      	ldr	r1, [pc, #128]	@ (8001f40 <QCW_Init+0x198>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < RAMP_STEPS; i++) {
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2bc7      	cmp	r3, #199	@ 0xc7
 8001ed2:	ddc6      	ble.n	8001e62 <QCW_Init+0xba>
    	// voltage(percent) = 0.5 - 0.5cos(pi*phase(percent))
    	// phase(percent) = 1 - 1/pi arccos(2*voltage(percent) - 1)
    	// correct for phase shift to effective voltage nonlinearity
    }
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	6dc9c883 	.word	0x6dc9c883
 8001ee4:	3fd45f30 	.word	0x3fd45f30
 8001ee8:	1fff75a8 	.word	0x1fff75a8
 8001eec:	200005f0 	.word	0x200005f0
 8001ef0:	1fff75ca 	.word	0x1fff75ca
 8001ef4:	200005f2 	.word	0x200005f2
 8001ef8:	1fff75aa 	.word	0x1fff75aa
 8001efc:	200005f4 	.word	0x200005f4
 8001f00:	2000008c 	.word	0x2000008c
 8001f04:	200005dc 	.word	0x200005dc
 8001f08:	200000f8 	.word	0x200000f8
 8001f0c:	200005d8 	.word	0x200005d8
 8001f10:	200004f8 	.word	0x200004f8
 8001f14:	2000026c 	.word	0x2000026c
 8001f18:	20000224 	.word	0x20000224
 8001f1c:	20000248 	.word	0x20000248
 8001f20:	20000330 	.word	0x20000330
 8001f24:	200003c8 	.word	0x200003c8
 8001f28:	2000037c 	.word	0x2000037c
 8001f2c:	20000460 	.word	0x20000460
 8001f30:	20000544 	.word	0x20000544
 8001f34:	200005e4 	.word	0x200005e4
 8001f38:	43480000 	.word	0x43480000
 8001f3c:	3ff00000 	.word	0x3ff00000
 8001f40:	20000604 	.word	0x20000604

08001f44 <QCW_Loop>:

float vbus_last = 0;
uint8_t rdy = 0;
void QCW_Loop() { // 10Hz
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
	if (rdy && (temp_ext < MAX_TEMP)) {
 8001f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002044 <QCW_Loop+0x100>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d014      	beq.n	8001f7c <QCW_Loop+0x38>
 8001f52:	4b3d      	ldr	r3, [pc, #244]	@ (8002048 <QCW_Loop+0x104>)
 8001f54:	edd3 7a00 	vldr	s15, [r3]
 8001f58:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800204c <QCW_Loop+0x108>
 8001f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	d50a      	bpl.n	8001f7c <QCW_Loop+0x38>
		TIM4->CCR2 = TIM4->ARR / 4; // Set ready light
 8001f66:	4b3a      	ldr	r3, [pc, #232]	@ (8002050 <QCW_Loop+0x10c>)
 8001f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6a:	4a39      	ldr	r2, [pc, #228]	@ (8002050 <QCW_Loop+0x10c>)
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	6393      	str	r3, [r2, #56]	@ 0x38
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 8001f70:	2201      	movs	r2, #1
 8001f72:	2180      	movs	r1, #128	@ 0x80
 8001f74:	4837      	ldr	r0, [pc, #220]	@ (8002054 <QCW_Loop+0x110>)
 8001f76:	f004 faa5 	bl	80064c4 <HAL_GPIO_WritePin>
 8001f7a:	e007      	b.n	8001f8c <QCW_Loop+0x48>
	} else {
		TIM4->CCR2 = 0; // Clear ready light
 8001f7c:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <QCW_Loop+0x10c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2180      	movs	r1, #128	@ 0x80
 8001f86:	4833      	ldr	r0, [pc, #204]	@ (8002054 <QCW_Loop+0x110>)
 8001f88:	f004 fa9c 	bl	80064c4 <HAL_GPIO_WritePin>
	}

	float difference = vbus - vbus_last;
 8001f8c:	4b32      	ldr	r3, [pc, #200]	@ (8002058 <QCW_Loop+0x114>)
 8001f8e:	ed93 7a00 	vldr	s14, [r3]
 8001f92:	4b32      	ldr	r3, [pc, #200]	@ (800205c <QCW_Loop+0x118>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9c:	edc7 7a00 	vstr	s15, [r7]
	if (difference < CHARGE_THRESHOLD && vbus > 50) rdy = 1;
 8001fa0:	edd7 7a00 	vldr	s15, [r7]
 8001fa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb0:	d50c      	bpl.n	8001fcc <QCW_Loop+0x88>
 8001fb2:	4b29      	ldr	r3, [pc, #164]	@ (8002058 <QCW_Loop+0x114>)
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002060 <QCW_Loop+0x11c>
 8001fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc4:	dd02      	ble.n	8001fcc <QCW_Loop+0x88>
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8002044 <QCW_Loop+0x100>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
	vbus_last = vbus; // precharge
 8001fcc:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <QCW_Loop+0x114>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a22      	ldr	r2, [pc, #136]	@ (800205c <QCW_Loop+0x118>)
 8001fd2:	6013      	str	r3, [r2, #0]

	float fan = (temp_ext - (float) FAN_START) / ((float) FAN_END - (float) FAN_START);
 8001fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8002048 <QCW_Loop+0x104>)
 8001fd6:	edd3 7a00 	vldr	s15, [r3]
 8001fda:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001fde:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001fe2:	eef2 6a0e 	vmov.f32	s13, #46	@ 0x41700000  15.0
 8001fe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fea:	edc7 7a01 	vstr	s15, [r7, #4]

	if (fan < 0) fan = 0;
 8001fee:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ff2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffa:	d502      	bpl.n	8002002 <QCW_Loop+0xbe>
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
	if (fan > 1) fan = 1;
 8002002:	edd7 7a01 	vldr	s15, [r7, #4]
 8002006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800200a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002012:	dd02      	ble.n	800201a <QCW_Loop+0xd6>
 8002014:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002018:	607b      	str	r3, [r7, #4]

	//fan = 1.0f;

	TIM4->CCR3 = (int) (fan * (float) TIM4->ARR); // fan
 800201a:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <QCW_Loop+0x10c>)
 800201c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002026:	edd7 7a01 	vldr	s15, [r7, #4]
 800202a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002032:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <QCW_Loop+0x10c>)
 8002034:	ee17 2a90 	vmov	r2, s15
 8002038:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000928 	.word	0x20000928
 8002048:	200005fc 	.word	0x200005fc
 800204c:	42700000 	.word	0x42700000
 8002050:	40000800 	.word	0x40000800
 8002054:	48000400 	.word	0x48000400
 8002058:	20000600 	.word	0x20000600
 800205c:	20000924 	.word	0x20000924
 8002060:	42480000 	.word	0x42480000
 8002064:	00000000 	.word	0x00000000

08002068 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002068:	b5b0      	push	{r4, r5, r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a69      	ldr	r2, [pc, #420]	@ (8002218 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d17e      	bne.n	8002176 <HAL_ADC_ConvCpltCallback+0x10e>
		if (aux_buf[2] != 0) {
 8002078:	4b68      	ldr	r3, [pc, #416]	@ (800221c <HAL_ADC_ConvCpltCallback+0x1b4>)
 800207a:	889b      	ldrh	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d033      	beq.n	80020e8 <HAL_ADC_ConvCpltCallback+0x80>
			float vref_new = 3.0f * (float) VREFINT / (float) aux_buf[2];
 8002080:	4b67      	ldr	r3, [pc, #412]	@ (8002220 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800208c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002090:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002094:	4b61      	ldr	r3, [pc, #388]	@ (800221c <HAL_ADC_ConvCpltCallback+0x1b4>)
 8002096:	889b      	ldrh	r3, [r3, #4]
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020a4:	edc7 7a03 	vstr	s15, [r7, #12]
			if (vref_new < 5.0f && vref_new > 1.5f) {
 80020a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ac:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80020b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b8:	d516      	bpl.n	80020e8 <HAL_ADC_ConvCpltCallback+0x80>
 80020ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80020be:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80020c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ca:	dd0d      	ble.n	80020e8 <HAL_ADC_ConvCpltCallback+0x80>
				VREF = (VREF + vref_new) / 2.0f; // stm's have an internal bandgap reference! so you can figure out exactly what vdda is!
 80020cc:	4b55      	ldr	r3, [pc, #340]	@ (8002224 <HAL_ADC_ConvCpltCallback+0x1bc>)
 80020ce:	ed93 7a00 	vldr	s14, [r3]
 80020d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80020d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020da:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80020de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e2:	4b50      	ldr	r3, [pc, #320]	@ (8002224 <HAL_ADC_ConvCpltCallback+0x1bc>)
 80020e4:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		temp_int = (100.0f)/((float) TS_CAL2 - (float) TS_CAL1) * ((float) aux_buf[1] - (float) TS_CAL1) + 30.0f;
 80020e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002228 <HAL_ADC_ConvCpltCallback+0x1c0>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020f4:	4b4d      	ldr	r3, [pc, #308]	@ (800222c <HAL_ADC_ConvCpltCallback+0x1c4>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002104:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8002230 <HAL_ADC_ConvCpltCallback+0x1c8>
 8002108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800210c:	4b43      	ldr	r3, [pc, #268]	@ (800221c <HAL_ADC_ConvCpltCallback+0x1b4>)
 800210e:	885b      	ldrh	r3, [r3, #2]
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002118:	4b44      	ldr	r3, [pc, #272]	@ (800222c <HAL_ADC_ConvCpltCallback+0x1c4>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002124:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002130:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002134:	4b3f      	ldr	r3, [pc, #252]	@ (8002234 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8002136:	edc3 7a00 	vstr	s15, [r3]
		float volts_therm = (float) aux_buf[0] * VREF / 4095.0f;
 800213a:	4b38      	ldr	r3, [pc, #224]	@ (800221c <HAL_ADC_ConvCpltCallback+0x1b4>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002146:	4b37      	ldr	r3, [pc, #220]	@ (8002224 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002150:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8002238 <HAL_ADC_ConvCpltCallback+0x1d0>
 8002154:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002158:	edc7 7a02 	vstr	s15, [r7, #8]
		temp_ext = (volts_therm - 0.5f) * 100.0f;
 800215c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002160:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002168:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002230 <HAL_ADC_ConvCpltCallback+0x1c8>
 800216c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002170:	4b32      	ldr	r3, [pc, #200]	@ (800223c <HAL_ADC_ConvCpltCallback+0x1d4>)
 8002172:	edc3 7a00 	vstr	s15, [r3]
	}
	if (hadc == &hadc2) {
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a31      	ldr	r2, [pc, #196]	@ (8002240 <HAL_ADC_ConvCpltCallback+0x1d8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d144      	bne.n	8002208 <HAL_ADC_ConvCpltCallback+0x1a0>
		vbus = (float) vbus_buf[0] * VREF / 4095.0f * 201.0f;// read bus voltage to correct for sag
 800217e:	4b31      	ldr	r3, [pc, #196]	@ (8002244 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800218a:	4b26      	ldr	r3, [pc, #152]	@ (8002224 <HAL_ADC_ConvCpltCallback+0x1bc>)
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002194:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002238 <HAL_ADC_ConvCpltCallback+0x1d0>
 8002198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800219c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002248 <HAL_ADC_ConvCpltCallback+0x1e0>
 80021a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021a4:	4b29      	ldr	r3, [pc, #164]	@ (800224c <HAL_ADC_ConvCpltCallback+0x1e4>)
 80021a6:	edc3 7a00 	vstr	s15, [r3]
		if (vbus < 350) {
 80021aa:	4b28      	ldr	r3, [pc, #160]	@ (800224c <HAL_ADC_ConvCpltCallback+0x1e4>)
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002250 <HAL_ADC_ConvCpltCallback+0x1e8>
 80021b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021bc:	d520      	bpl.n	8002200 <HAL_ADC_ConvCpltCallback+0x198>
			TIM4->CCR1 = (int) (TIM4->ARR * (vbus / 350.0)); // Set VBUS LED
 80021be:	4b25      	ldr	r3, [pc, #148]	@ (8002254 <HAL_ADC_ConvCpltCallback+0x1ec>)
 80021c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe f96a 	bl	800049c <__aeabi_ui2d>
 80021c8:	4604      	mov	r4, r0
 80021ca:	460d      	mov	r5, r1
 80021cc:	4b1f      	ldr	r3, [pc, #124]	@ (800224c <HAL_ADC_ConvCpltCallback+0x1e4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f985 	bl	80004e0 <__aeabi_f2d>
 80021d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8002210 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe fb02 	bl	80007e4 <__aeabi_ddiv>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4620      	mov	r0, r4
 80021e6:	4629      	mov	r1, r5
 80021e8:	f7fe f9d2 	bl	8000590 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	f7fe fc7c 	bl	8000af0 <__aeabi_d2iz>
 80021f8:	4602      	mov	r2, r0
 80021fa:	4b16      	ldr	r3, [pc, #88]	@ (8002254 <HAL_ADC_ConvCpltCallback+0x1ec>)
 80021fc:	635a      	str	r2, [r3, #52]	@ 0x34
		//TODO: REMOVE
		//vbus = 200;
		//rdy = 1;
	}

}
 80021fe:	e003      	b.n	8002208 <HAL_ADC_ConvCpltCallback+0x1a0>
			TIM4->CCR1 = TIM4->ARR;
 8002200:	4b14      	ldr	r3, [pc, #80]	@ (8002254 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8002202:	4a14      	ldr	r2, [pc, #80]	@ (8002254 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8002204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002206:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bdb0      	pop	{r4, r5, r7, pc}
 8002210:	00000000 	.word	0x00000000
 8002214:	4075e000 	.word	0x4075e000
 8002218:	2000008c 	.word	0x2000008c
 800221c:	200005dc 	.word	0x200005dc
 8002220:	200005f4 	.word	0x200005f4
 8002224:	20000000 	.word	0x20000000
 8002228:	200005f2 	.word	0x200005f2
 800222c:	200005f0 	.word	0x200005f0
 8002230:	42c80000 	.word	0x42c80000
 8002234:	200005f8 	.word	0x200005f8
 8002238:	457ff000 	.word	0x457ff000
 800223c:	200005fc 	.word	0x200005fc
 8002240:	200000f8 	.word	0x200000f8
 8002244:	200005d8 	.word	0x200005d8
 8002248:	43490000 	.word	0x43490000
 800224c:	20000600 	.word	0x20000600
 8002250:	43af0000 	.word	0x43af0000
 8002254:	40000800 	.word	0x40000800

08002258 <StartPulse>:
uint16_t ramp_cnt = 0;
float end_v = 0;
int ccr3 = 0;

// length in ms
void StartPulse(float length, float end_v1, float OCD) {
 8002258:	b5b0      	push	{r4, r5, r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002262:	edc7 0a02 	vstr	s1, [r7, #8]
 8002266:	ed87 1a01 	vstr	s2, [r7, #4]
	if (vbus > 0 && rdy) {
 800226a:	4b61      	ldr	r3, [pc, #388]	@ (80023f0 <StartPulse+0x198>)
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002278:	dc00      	bgt.n	800227c <StartPulse+0x24>
		HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);

		GD_DIS_GPIO_Port->BSRR = GD_DIS_Pin; // enable

	}
}
 800227a:	e0aa      	b.n	80023d2 <StartPulse+0x17a>
	if (vbus > 0 && rdy) {
 800227c:	4b5d      	ldr	r3, [pc, #372]	@ (80023f4 <StartPulse+0x19c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80a6 	beq.w	80023d2 <StartPulse+0x17a>
		uint32_t counts = (uint32_t) (4095.0 / VREF * OCD / 200.0f * 2.0f); // 200:1 CT, 2R burden
 8002286:	4b5c      	ldr	r3, [pc, #368]	@ (80023f8 <StartPulse+0x1a0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f928 	bl	80004e0 <__aeabi_f2d>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	a152      	add	r1, pc, #328	@ (adr r1, 80023e0 <StartPulse+0x188>)
 8002296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800229a:	f7fe faa3 	bl	80007e4 <__aeabi_ddiv>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4614      	mov	r4, r2
 80022a4:	461d      	mov	r5, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe f91a 	bl	80004e0 <__aeabi_f2d>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4620      	mov	r0, r4
 80022b2:	4629      	mov	r1, r5
 80022b4:	f7fe f96c 	bl	8000590 <__aeabi_dmul>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	4b4d      	ldr	r3, [pc, #308]	@ (80023fc <StartPulse+0x1a4>)
 80022c6:	f7fe fa8d 	bl	80007e4 <__aeabi_ddiv>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4610      	mov	r0, r2
 80022d0:	4619      	mov	r1, r3
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	f7fd ffa5 	bl	8000224 <__adddf3>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	f7fe fc2d 	bl	8000b40 <__aeabi_d2uiz>
 80022e6:	4603      	mov	r3, r0
 80022e8:	617b      	str	r3, [r7, #20]
	    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, counts);
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	4843      	ldr	r0, [pc, #268]	@ (8002400 <StartPulse+0x1a8>)
 80022f2:	f003 fa37 	bl	8005764 <HAL_DAC_SetValue>
		TIM3->CCR1 = TIM3->ARR; // Start pulse led
 80022f6:	4b43      	ldr	r3, [pc, #268]	@ (8002404 <StartPulse+0x1ac>)
 80022f8:	4a42      	ldr	r2, [pc, #264]	@ (8002404 <StartPulse+0x1ac>)
 80022fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fc:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM3->CCR2 = 0; // Clear OCD led
 80022fe:	4b41      	ldr	r3, [pc, #260]	@ (8002404 <StartPulse+0x1ac>)
 8002300:	2200      	movs	r2, #0
 8002302:	639a      	str	r2, [r3, #56]	@ 0x38
		ocd = 0;
 8002304:	4b40      	ldr	r3, [pc, #256]	@ (8002408 <StartPulse+0x1b0>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
		ramp_cnt = 0;
 800230a:	4b40      	ldr	r3, [pc, #256]	@ (800240c <StartPulse+0x1b4>)
 800230c:	2200      	movs	r2, #0
 800230e:	801a      	strh	r2, [r3, #0]
		TIM1->ARR = (((int) (170000000.0 / START_FREQ)) >> 1) - 1;
 8002310:	4b3f      	ldr	r3, [pc, #252]	@ (8002410 <StartPulse+0x1b8>)
 8002312:	22f1      	movs	r2, #241	@ 0xf1
 8002314:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CNT = 0;
 8002316:	4b3e      	ldr	r3, [pc, #248]	@ (8002410 <StartPulse+0x1b8>)
 8002318:	2200      	movs	r2, #0
 800231a:	625a      	str	r2, [r3, #36]	@ 0x24
		start_counter = 0;
 800231c:	4b3d      	ldr	r3, [pc, #244]	@ (8002414 <StartPulse+0x1bc>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
		end_v = end_v1;
 8002322:	4a3d      	ldr	r2, [pc, #244]	@ (8002418 <StartPulse+0x1c0>)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	6013      	str	r3, [r2, #0]
		TIM1->CCR1 = TIM1->ARR - PHASE_LEAD;
 8002328:	4b39      	ldr	r3, [pc, #228]	@ (8002410 <StartPulse+0x1b8>)
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232c:	4a38      	ldr	r2, [pc, #224]	@ (8002410 <StartPulse+0x1b8>)
 800232e:	3b0a      	subs	r3, #10
 8002330:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM1->CCR2 = PHASE_LEAD;
 8002332:	4b37      	ldr	r3, [pc, #220]	@ (8002410 <StartPulse+0x1b8>)
 8002334:	220a      	movs	r2, #10
 8002336:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = MIN_PHASE;
 8002338:	4b35      	ldr	r3, [pc, #212]	@ (8002410 <StartPulse+0x1b8>)
 800233a:	2200      	movs	r2, #0
 800233c:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = TIM1->ARR - MIN_PHASE;
 800233e:	4b34      	ldr	r3, [pc, #208]	@ (8002410 <StartPulse+0x1b8>)
 8002340:	4a33      	ldr	r2, [pc, #204]	@ (8002410 <StartPulse+0x1b8>)
 8002342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002344:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM6->ARR = (uint32_t) (170000.0 * length / (float) RAMP_STEPS) - 1; // ramp adjust timer
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f7fe f8ca 	bl	80004e0 <__aeabi_f2d>
 800234c:	a326      	add	r3, pc, #152	@ (adr r3, 80023e8 <StartPulse+0x190>)
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f7fe f91d 	bl	8000590 <__aeabi_dmul>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	4b26      	ldr	r3, [pc, #152]	@ (80023fc <StartPulse+0x1a4>)
 8002364:	f7fe fa3e 	bl	80007e4 <__aeabi_ddiv>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f7fe fbe6 	bl	8000b40 <__aeabi_d2uiz>
 8002374:	4603      	mov	r3, r0
 8002376:	4a29      	ldr	r2, [pc, #164]	@ (800241c <StartPulse+0x1c4>)
 8002378:	3b01      	subs	r3, #1
 800237a:	62d3      	str	r3, [r2, #44]	@ 0x2c
		TIM6->CNT = 0;
 800237c:	4b27      	ldr	r3, [pc, #156]	@ (800241c <StartPulse+0x1c4>)
 800237e:	2200      	movs	r2, #0
 8002380:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM8->ARR = TIM1->ARR;
 8002382:	4b23      	ldr	r3, [pc, #140]	@ (8002410 <StartPulse+0x1b8>)
 8002384:	4a26      	ldr	r2, [pc, #152]	@ (8002420 <StartPulse+0x1c8>)
 8002386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002388:	62d3      	str	r3, [r2, #44]	@ 0x2c
		TIM8->CNT = 0;
 800238a:	4b25      	ldr	r3, [pc, #148]	@ (8002420 <StartPulse+0x1c8>)
 800238c:	2200      	movs	r2, #0
 800238e:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM8->CCR1 = TIM8->ARR - PHASE_LEAD;
 8002390:	4b23      	ldr	r3, [pc, #140]	@ (8002420 <StartPulse+0x1c8>)
 8002392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002394:	4a22      	ldr	r2, [pc, #136]	@ (8002420 <StartPulse+0x1c8>)
 8002396:	3b0a      	subs	r3, #10
 8002398:	6353      	str	r3, [r2, #52]	@ 0x34
		HAL_TIM_Base_Start_IT(&htim6);
 800239a:	4822      	ldr	r0, [pc, #136]	@ (8002424 <StartPulse+0x1cc>)
 800239c:	f005 fb8c 	bl	8007ab8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80023a0:	2100      	movs	r1, #0
 80023a2:	4821      	ldr	r0, [pc, #132]	@ (8002428 <StartPulse+0x1d0>)
 80023a4:	f005 fc54 	bl	8007c50 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80023a8:	2104      	movs	r1, #4
 80023aa:	481f      	ldr	r0, [pc, #124]	@ (8002428 <StartPulse+0x1d0>)
 80023ac:	f005 fc50 	bl	8007c50 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80023b0:	2108      	movs	r1, #8
 80023b2:	481d      	ldr	r0, [pc, #116]	@ (8002428 <StartPulse+0x1d0>)
 80023b4:	f005 fc4c 	bl	8007c50 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80023b8:	210c      	movs	r1, #12
 80023ba:	481b      	ldr	r0, [pc, #108]	@ (8002428 <StartPulse+0x1d0>)
 80023bc:	f005 fc48 	bl	8007c50 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 80023c0:	2100      	movs	r1, #0
 80023c2:	481a      	ldr	r0, [pc, #104]	@ (800242c <StartPulse+0x1d4>)
 80023c4:	f005 fdda 	bl	8007f7c <HAL_TIM_PWM_Start_IT>
		GD_DIS_GPIO_Port->BSRR = GD_DIS_Pin; // enable
 80023c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80023cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023d0:	619a      	str	r2, [r3, #24]
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bdb0      	pop	{r4, r5, r7, pc}
 80023da:	bf00      	nop
 80023dc:	f3af 8000 	nop.w
 80023e0:	00000000 	.word	0x00000000
 80023e4:	40affe00 	.word	0x40affe00
 80023e8:	00000000 	.word	0x00000000
 80023ec:	4104c080 	.word	0x4104c080
 80023f0:	20000600 	.word	0x20000600
 80023f4:	20000928 	.word	0x20000928
 80023f8:	20000000 	.word	0x20000000
 80023fc:	40690000 	.word	0x40690000
 8002400:	2000026c 	.word	0x2000026c
 8002404:	40000400 	.word	0x40000400
 8002408:	2000092a 	.word	0x2000092a
 800240c:	2000092c 	.word	0x2000092c
 8002410:	40012c00 	.word	0x40012c00
 8002414:	20000929 	.word	0x20000929
 8002418:	20000930 	.word	0x20000930
 800241c:	40001000 	.word	0x40001000
 8002420:	40013400 	.word	0x40013400
 8002424:	20000414 	.word	0x20000414
 8002428:	200002e4 	.word	0x200002e4
 800242c:	200004ac 	.word	0x200004ac

08002430 <EndPulse>:

void EndPulse() {
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
    GD_DIS_GPIO_Port->BRR = GD_DIS_Pin; // disable
 8002434:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002438:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800243c:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800243e:	2100      	movs	r1, #0
 8002440:	480d      	ldr	r0, [pc, #52]	@ (8002478 <EndPulse+0x48>)
 8002442:	f005 fd05 	bl	8007e50 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002446:	2104      	movs	r1, #4
 8002448:	480b      	ldr	r0, [pc, #44]	@ (8002478 <EndPulse+0x48>)
 800244a:	f005 fd01 	bl	8007e50 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800244e:	2108      	movs	r1, #8
 8002450:	4809      	ldr	r0, [pc, #36]	@ (8002478 <EndPulse+0x48>)
 8002452:	f005 fcfd 	bl	8007e50 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8002456:	210c      	movs	r1, #12
 8002458:	4807      	ldr	r0, [pc, #28]	@ (8002478 <EndPulse+0x48>)
 800245a:	f005 fcf9 	bl	8007e50 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800245e:	2100      	movs	r1, #0
 8002460:	4806      	ldr	r0, [pc, #24]	@ (800247c <EndPulse+0x4c>)
 8002462:	f005 fcf5 	bl	8007e50 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop(&htim6);
 8002466:	4806      	ldr	r0, [pc, #24]	@ (8002480 <EndPulse+0x50>)
 8002468:	f005 fafe 	bl	8007a68 <HAL_TIM_Base_Stop>

    TIM3->CCR1 = 0; // Clear pulse led
 800246c:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <EndPulse+0x54>)
 800246e:	2200      	movs	r2, #0
 8002470:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200002e4 	.word	0x200002e4
 800247c:	200004ac 	.word	0x200004ac
 8002480:	20000414 	.word	0x20000414
 8002484:	40000400 	.word	0x40000400

08002488 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a06      	ldr	r2, [pc, #24]	@ (80024ac <HAL_TIM_IC_CaptureCallback+0x24>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d103      	bne.n	80024a0 <HAL_TIM_IC_CaptureCallback+0x18>

		    // this uses tim2 to capture the period of the zcd signal that comes from the zcd comparator
		    // unless doing phase shift modulation this is the only code you *need*, to sync the output timer's period
		    // w/ the incoming period
		}
	    TIM2->CNT = 0;
 8002498:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800249c:	2200      	movs	r2, #0
 800249e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	20000330 	.word	0x20000330

080024b0 <HAL_COMP_TriggerCallback>:

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	if (hcomp == &hcomp1) {
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a06      	ldr	r2, [pc, #24]	@ (80024d4 <HAL_COMP_TriggerCallback+0x24>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d102      	bne.n	80024c6 <HAL_COMP_TriggerCallback+0x16>
		ocd = 1; // detected OCD event
 80024c0:	4b05      	ldr	r3, [pc, #20]	@ (80024d8 <HAL_COMP_TriggerCallback+0x28>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]
	}
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000224 	.word	0x20000224
 80024d8:	2000092a 	.word	0x2000092a

080024dc <HAL_TIM_PWM_PulseFinishedCallback>:

uint8_t hardsw_side = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	if (htim == &htim8) {
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a26      	ldr	r2, [pc, #152]	@ (8002580 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d145      	bne.n	8002578 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>

		if (ocd) { // if ocd, turn off on timer reset
 80024ec:	4b25      	ldr	r3, [pc, #148]	@ (8002584 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
			EndPulse();
 80024f4:	f7ff ff9c 	bl	8002430 <EndPulse>
		    TIM3->CCR2 = TIM3->ARR; // Set OCD Led
 80024f8:	4b23      	ldr	r3, [pc, #140]	@ (8002588 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 80024fa:	4a23      	ldr	r2, [pc, #140]	@ (8002588 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 80024fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fe:	6393      	str	r3, [r2, #56]	@ 0x38
		}

		if (start_counter < START_CYCLES) {
 8002500:	4b22      	ldr	r3, [pc, #136]	@ (800258c <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b18      	cmp	r3, #24
 8002506:	d805      	bhi.n	8002514 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
			start_counter++;
 8002508:	4b20      	ldr	r3, [pc, #128]	@ (800258c <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	b2da      	uxtb	r2, r3
 8002510:	4b1e      	ldr	r3, [pc, #120]	@ (800258c <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 8002512:	701a      	strb	r2, [r3, #0]
		} // TODO: make a wick ??

		//hardsw_side = !hardsw_side; // alternate hardswitch side

		if (hardsw_side) {
 8002514:	4b1e      	ldr	r3, [pc, #120]	@ (8002590 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d014      	beq.n	8002546 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
			TIM1->CCR1 = TIM1->ARR - PHASE_LEAD;
 800251c:	4b1d      	ldr	r3, [pc, #116]	@ (8002594 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 800251e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002520:	4a1c      	ldr	r2, [pc, #112]	@ (8002594 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8002522:	3b0a      	subs	r3, #10
 8002524:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM1->CCR2 = PHASE_LEAD;
 8002526:	4b1b      	ldr	r3, [pc, #108]	@ (8002594 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8002528:	220a      	movs	r2, #10
 800252a:	639a      	str	r2, [r3, #56]	@ 0x38

			TIM1->CCR3 = ccr3;
 800252c:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b18      	ldr	r3, [pc, #96]	@ (8002594 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8002532:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM1->CCR4 = TIM1->ARR - ccr3;
 8002534:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8002536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002538:	4a17      	ldr	r2, [pc, #92]	@ (8002598 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	4611      	mov	r1, r2
 800253e:	4a15      	ldr	r2, [pc, #84]	@ (8002594 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8002540:	1a5b      	subs	r3, r3, r1
 8002542:	6413      	str	r3, [r2, #64]	@ 0x40
 8002544:	e013      	b.n	800256e <HAL_TIM_PWM_PulseFinishedCallback+0x92>

		} else {
			TIM1->CCR1 = ccr3;
 8002546:	4b14      	ldr	r3, [pc, #80]	@ (8002598 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4b12      	ldr	r3, [pc, #72]	@ (8002594 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 800254c:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = TIM1->ARR - ccr3;
 800254e:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8002550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002552:	4a11      	ldr	r2, [pc, #68]	@ (8002598 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	4611      	mov	r1, r2
 8002558:	4a0e      	ldr	r2, [pc, #56]	@ (8002594 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 800255a:	1a5b      	subs	r3, r3, r1
 800255c:	6393      	str	r3, [r2, #56]	@ 0x38

			TIM1->CCR3 = TIM1->ARR - PHASE_LEAD;
 800255e:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8002560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002562:	4a0c      	ldr	r2, [pc, #48]	@ (8002594 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8002564:	3b0a      	subs	r3, #10
 8002566:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM1->CCR4 = PHASE_LEAD;
 8002568:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 800256a:	220a      	movs	r2, #10
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40

		}
		TIM8->CCR1 = TIM8->ARR - PHASE_LEAD;
 800256e:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_TIM_PWM_PulseFinishedCallback+0xc0>)
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <HAL_TIM_PWM_PulseFinishedCallback+0xc0>)
 8002574:	3b0a      	subs	r3, #10
 8002576:	6353      	str	r3, [r2, #52]	@ 0x34
	}
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	200004ac 	.word	0x200004ac
 8002584:	2000092a 	.word	0x2000092a
 8002588:	40000400 	.word	0x40000400
 800258c:	20000929 	.word	0x20000929
 8002590:	20000938 	.word	0x20000938
 8002594:	40012c00 	.word	0x40012c00
 8002598:	20000934 	.word	0x20000934
 800259c:	40013400 	.word	0x40013400

080025a0 <HAL_TIM_PeriodElapsedCallback>:
// Asymmetric pwm: up down counting; for output channel 1 ccr1 controls compare value for up counting,
// ccr2 for down counting. for output channel 3, ccr3 for up and ccr4 for down. ccr2-ccr1 = ccr4-ccr3 = arr for 50% dtc
// but shift ccr1 relative to ccr3 for phase shift modulation, 100% power when ccr1=ccr3
// if the channel not being shifted is offset a little from the end i.e. ccr1 = arr - pl, ccr2 = pl this gives pl as phase lead
// bc the comparator is configured to reset the counter of the main timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) { // increment ramp
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a32      	ldr	r2, [pc, #200]	@ (8002674 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d157      	bne.n	8002660 <HAL_TIM_PeriodElapsedCallback+0xc0>
		ramp_cnt++;
 80025b0:	4b31      	ldr	r3, [pc, #196]	@ (8002678 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002678 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80025ba:	801a      	strh	r2, [r3, #0]

		if (ramp_cnt >= RAMP_STEPS) {
 80025bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002678 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80025c2:	d902      	bls.n	80025ca <HAL_TIM_PeriodElapsedCallback+0x2a>
			EndPulse();
 80025c4:	f7ff ff34 	bl	8002430 <EndPulse>
 80025c8:	e04a      	b.n	8002660 <HAL_TIM_PeriodElapsedCallback+0xc0>
		} else if (vbus > 0) {
 80025ca:	4b2c      	ldr	r3, [pc, #176]	@ (800267c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80025cc:	edd3 7a00 	vldr	s15, [r3]
 80025d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d8:	dd42      	ble.n	8002660 <HAL_TIM_PeriodElapsedCallback+0xc0>
			uint16_t tf_index = (uint16_t) ((float) ramp_cnt * end_v / vbus);
 80025da:	4b27      	ldr	r3, [pc, #156]	@ (8002678 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025e6:	4b26      	ldr	r3, [pc, #152]	@ (8002680 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80025e8:	edd3 7a00 	vldr	s15, [r3]
 80025ec:	ee67 6a27 	vmul.f32	s13, s14, s15
 80025f0:	4b22      	ldr	r3, [pc, #136]	@ (800267c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80025f2:	ed93 7a00 	vldr	s14, [r3]
 80025f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025fe:	ee17 3a90 	vmov	r3, s15
 8002602:	81fb      	strh	r3, [r7, #14]
			if (tf_index >= RAMP_STEPS) tf_index = RAMP_STEPS - 1;
 8002604:	89fb      	ldrh	r3, [r7, #14]
 8002606:	2bc7      	cmp	r3, #199	@ 0xc7
 8002608:	d901      	bls.n	800260e <HAL_TIM_PeriodElapsedCallback+0x6e>
 800260a:	23c7      	movs	r3, #199	@ 0xc7
 800260c:	81fb      	strh	r3, [r7, #14]
			float phase_percent = transfer_function[tf_index];
 800260e:	89fb      	ldrh	r3, [r7, #14]
 8002610:	4a1c      	ldr	r2, [pc, #112]	@ (8002684 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60bb      	str	r3, [r7, #8]
			ccr3 = (int) ((float) TIM1->ARR * phase_percent) - PHASE_LEAD;
 800261a:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800261c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261e:	ee07 3a90 	vmov	s15, r3
 8002622:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002626:	edd7 7a02 	vldr	s15, [r7, #8]
 800262a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002632:	ee17 3a90 	vmov	r3, s15
 8002636:	3b0a      	subs	r3, #10
 8002638:	4a14      	ldr	r2, [pc, #80]	@ (800268c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800263a:	6013      	str	r3, [r2, #0]
			if (ccr3 < MIN_PHASE) ccr3 = MIN_PHASE;
 800263c:	4b13      	ldr	r3, [pc, #76]	@ (800268c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	da02      	bge.n	800264a <HAL_TIM_PeriodElapsedCallback+0xaa>
 8002644:	4b11      	ldr	r3, [pc, #68]	@ (800268c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
			if (ccr3 > TIM1->ARR) ccr3 = TIM1->ARR;
 800264a:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800264c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264e:	4a0f      	ldr	r2, [pc, #60]	@ (800268c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	4293      	cmp	r3, r2
 8002654:	d204      	bcs.n	8002660 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8002656:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265a:	461a      	mov	r2, r3
 800265c:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800265e:	601a      	str	r2, [r3, #0]
		}

	}
	if (htim == &htim7) {
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a0b      	ldr	r2, [pc, #44]	@ (8002690 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d101      	bne.n	800266c <HAL_TIM_PeriodElapsedCallback+0xcc>
		QCW_Loop();
 8002668:	f7ff fc6c 	bl	8001f44 <QCW_Loop>
	}
}
 800266c:	bf00      	nop
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000414 	.word	0x20000414
 8002678:	2000092c 	.word	0x2000092c
 800267c:	20000600 	.word	0x20000600
 8002680:	20000930 	.word	0x20000930
 8002684:	20000604 	.word	0x20000604
 8002688:	40012c00 	.word	0x40012c00
 800268c:	20000934 	.word	0x20000934
 8002690:	20000460 	.word	0x20000460

08002694 <u32_to_float>:

float u32_to_float(uint32_t input) {
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  return *((float *) &input);
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	ee07 3a90 	vmov	s15, r3
}
 80026a4:	eeb0 0a67 	vmov.f32	s0, s15
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <GetValue>:

uint32_t GetValue(uint8_t * buffer, uint8_t position) {
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	70fb      	strb	r3, [r7, #3]
  return  (buffer[position * 4 + 0] << 0)  |
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	461a      	mov	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	4619      	mov	r1, r3
		  (buffer[position * 4 + 1] << 8)  |
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	3301      	adds	r3, #1
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	021b      	lsls	r3, r3, #8
  return  (buffer[position * 4 + 0] << 0)  |
 80026da:	ea41 0203 	orr.w	r2, r1, r3
		  (buffer[position * 4 + 2] << 16) |
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	440b      	add	r3, r1
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	041b      	lsls	r3, r3, #16
		  (buffer[position * 4 + 1] << 8)  |
 80026ec:	431a      	orrs	r2, r3
		  (buffer[position * 4 + 3] << 24);
 80026ee:	78fb      	ldrb	r3, [r7, #3]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	3303      	adds	r3, #3
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	440b      	add	r3, r1
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	061b      	lsls	r3, r3, #24
		  (buffer[position * 4 + 2] << 16) |
 80026fc:	4313      	orrs	r3, r2

}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	float OT = u32_to_float(GetValue(uart_buffer, 0));
 8002714:	2100      	movs	r1, #0
 8002716:	4836      	ldr	r0, [pc, #216]	@ (80027f0 <HAL_UART_RxCpltCallback+0xe4>)
 8002718:	f7ff ffcb 	bl	80026b2 <GetValue>
 800271c:	4603      	mov	r3, r0
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff ffb8 	bl	8002694 <u32_to_float>
 8002724:	ed87 0a05 	vstr	s0, [r7, #20]
	float Vmax = u32_to_float(GetValue(uart_buffer, 1));
 8002728:	2101      	movs	r1, #1
 800272a:	4831      	ldr	r0, [pc, #196]	@ (80027f0 <HAL_UART_RxCpltCallback+0xe4>)
 800272c:	f7ff ffc1 	bl	80026b2 <GetValue>
 8002730:	4603      	mov	r3, r0
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ffae 	bl	8002694 <u32_to_float>
 8002738:	ed87 0a04 	vstr	s0, [r7, #16]
	float OCD = u32_to_float(GetValue(uart_buffer, 2));
 800273c:	2102      	movs	r1, #2
 800273e:	482c      	ldr	r0, [pc, #176]	@ (80027f0 <HAL_UART_RxCpltCallback+0xe4>)
 8002740:	f7ff ffb7 	bl	80026b2 <GetValue>
 8002744:	4603      	mov	r3, r0
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ffa4 	bl	8002694 <u32_to_float>
 800274c:	ed87 0a03 	vstr	s0, [r7, #12]

	if (Vmax < 500 && Vmax > 0 && OT < 200 && OT > 0 && OCD < 600 && OCD > 0 && temp_ext < MAX_TEMP && rdy) {
 8002750:	edd7 7a04 	vldr	s15, [r7, #16]
 8002754:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80027f4 <HAL_UART_RxCpltCallback+0xe8>
 8002758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002760:	d53c      	bpl.n	80027dc <HAL_UART_RxCpltCallback+0xd0>
 8002762:	edd7 7a04 	vldr	s15, [r7, #16]
 8002766:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276e:	dd35      	ble.n	80027dc <HAL_UART_RxCpltCallback+0xd0>
 8002770:	edd7 7a05 	vldr	s15, [r7, #20]
 8002774:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80027f8 <HAL_UART_RxCpltCallback+0xec>
 8002778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	d52c      	bpl.n	80027dc <HAL_UART_RxCpltCallback+0xd0>
 8002782:	edd7 7a05 	vldr	s15, [r7, #20]
 8002786:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800278a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278e:	dd25      	ble.n	80027dc <HAL_UART_RxCpltCallback+0xd0>
 8002790:	edd7 7a03 	vldr	s15, [r7, #12]
 8002794:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80027fc <HAL_UART_RxCpltCallback+0xf0>
 8002798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800279c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a0:	d51c      	bpl.n	80027dc <HAL_UART_RxCpltCallback+0xd0>
 80027a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80027a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ae:	dd15      	ble.n	80027dc <HAL_UART_RxCpltCallback+0xd0>
 80027b0:	4b13      	ldr	r3, [pc, #76]	@ (8002800 <HAL_UART_RxCpltCallback+0xf4>)
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002804 <HAL_UART_RxCpltCallback+0xf8>
 80027ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c2:	d50b      	bpl.n	80027dc <HAL_UART_RxCpltCallback+0xd0>
 80027c4:	4b10      	ldr	r3, [pc, #64]	@ (8002808 <HAL_UART_RxCpltCallback+0xfc>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <HAL_UART_RxCpltCallback+0xd0>
		StartPulse(OT, Vmax, OCD);
 80027cc:	ed97 1a03 	vldr	s2, [r7, #12]
 80027d0:	edd7 0a04 	vldr	s1, [r7, #16]
 80027d4:	ed97 0a05 	vldr	s0, [r7, #20]
 80027d8:	f7ff fd3e 	bl	8002258 <StartPulse>
	}

	HAL_UART_Receive_IT(&huart1, uart_buffer, UART_SIZE);
 80027dc:	220c      	movs	r2, #12
 80027de:	4904      	ldr	r1, [pc, #16]	@ (80027f0 <HAL_UART_RxCpltCallback+0xe4>)
 80027e0:	480a      	ldr	r0, [pc, #40]	@ (800280c <HAL_UART_RxCpltCallback+0x100>)
 80027e2:	f007 fba1 	bl	8009f28 <HAL_UART_Receive_IT>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200005e4 	.word	0x200005e4
 80027f4:	43fa0000 	.word	0x43fa0000
 80027f8:	43480000 	.word	0x43480000
 80027fc:	44160000 	.word	0x44160000
 8002800:	200005fc 	.word	0x200005fc
 8002804:	42700000 	.word	0x42700000
 8002808:	20000928 	.word	0x20000928
 800280c:	20000544 	.word	0x20000544

08002810 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8002816:	f107 0308 	add.w	r3, r7, #8
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002820:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <HAL_MspInit+0x64>)
 8002822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002824:	4a13      	ldr	r2, [pc, #76]	@ (8002874 <HAL_MspInit+0x64>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6613      	str	r3, [r2, #96]	@ 0x60
 800282c:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <HAL_MspInit+0x64>)
 800282e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	4b0e      	ldr	r3, [pc, #56]	@ (8002874 <HAL_MspInit+0x64>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283c:	4a0d      	ldr	r2, [pc, #52]	@ (8002874 <HAL_MspInit+0x64>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002842:	6593      	str	r3, [r2, #88]	@ 0x58
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <HAL_MspInit+0x64>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8002850:	230c      	movs	r3, #12
 8002852:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002858:	f107 0308 	add.w	r3, r7, #8
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fe49 	bl	80064f4 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8002862:	f003 fea7 	bl	80065b4 <HAL_PWR_EnablePVD>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002866:	f003 ff59 	bl	800671c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000

08002878 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b09c      	sub	sp, #112	@ 0x70
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002890:	f107 0318 	add.w	r3, r7, #24
 8002894:	2244      	movs	r2, #68	@ 0x44
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f009 fbd5 	bl	800c048 <memset>
  if(hadc->Instance==ADC1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028a6:	d171      	bne.n	800298c <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80028a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80028ae:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80028b2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028b4:	f107 0318 	add.w	r3, r7, #24
 80028b8:	4618      	mov	r0, r3
 80028ba:	f004 fc6d 	bl	8007198 <HAL_RCCEx_PeriphCLKConfig>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80028c4:	f7ff fa68 	bl	8001d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80028c8:	4b6d      	ldr	r3, [pc, #436]	@ (8002a80 <HAL_ADC_MspInit+0x208>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	4a6c      	ldr	r2, [pc, #432]	@ (8002a80 <HAL_ADC_MspInit+0x208>)
 80028d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80028d2:	4b6b      	ldr	r3, [pc, #428]	@ (8002a80 <HAL_ADC_MspInit+0x208>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d10b      	bne.n	80028f2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80028da:	4b6a      	ldr	r3, [pc, #424]	@ (8002a84 <HAL_ADC_MspInit+0x20c>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028de:	4a69      	ldr	r2, [pc, #420]	@ (8002a84 <HAL_ADC_MspInit+0x20c>)
 80028e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028e6:	4b67      	ldr	r3, [pc, #412]	@ (8002a84 <HAL_ADC_MspInit+0x20c>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	4b64      	ldr	r3, [pc, #400]	@ (8002a84 <HAL_ADC_MspInit+0x20c>)
 80028f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f6:	4a63      	ldr	r2, [pc, #396]	@ (8002a84 <HAL_ADC_MspInit+0x20c>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028fe:	4b61      	ldr	r3, [pc, #388]	@ (8002a84 <HAL_ADC_MspInit+0x20c>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = THERM_Pin;
 800290a:	2301      	movs	r3, #1
 800290c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800290e:	2303      	movs	r3, #3
 8002910:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(THERM_GPIO_Port, &GPIO_InitStruct);
 8002916:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800291a:	4619      	mov	r1, r3
 800291c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002920:	f003 fc4e 	bl	80061c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002924:	4b58      	ldr	r3, [pc, #352]	@ (8002a88 <HAL_ADC_MspInit+0x210>)
 8002926:	4a59      	ldr	r2, [pc, #356]	@ (8002a8c <HAL_ADC_MspInit+0x214>)
 8002928:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800292a:	4b57      	ldr	r3, [pc, #348]	@ (8002a88 <HAL_ADC_MspInit+0x210>)
 800292c:	2205      	movs	r2, #5
 800292e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002930:	4b55      	ldr	r3, [pc, #340]	@ (8002a88 <HAL_ADC_MspInit+0x210>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002936:	4b54      	ldr	r3, [pc, #336]	@ (8002a88 <HAL_ADC_MspInit+0x210>)
 8002938:	2200      	movs	r2, #0
 800293a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800293c:	4b52      	ldr	r3, [pc, #328]	@ (8002a88 <HAL_ADC_MspInit+0x210>)
 800293e:	2280      	movs	r2, #128	@ 0x80
 8002940:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002942:	4b51      	ldr	r3, [pc, #324]	@ (8002a88 <HAL_ADC_MspInit+0x210>)
 8002944:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002948:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800294a:	4b4f      	ldr	r3, [pc, #316]	@ (8002a88 <HAL_ADC_MspInit+0x210>)
 800294c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002950:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002952:	4b4d      	ldr	r3, [pc, #308]	@ (8002a88 <HAL_ADC_MspInit+0x210>)
 8002954:	2220      	movs	r2, #32
 8002956:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002958:	4b4b      	ldr	r3, [pc, #300]	@ (8002a88 <HAL_ADC_MspInit+0x210>)
 800295a:	2200      	movs	r2, #0
 800295c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800295e:	484a      	ldr	r0, [pc, #296]	@ (8002a88 <HAL_ADC_MspInit+0x210>)
 8002960:	f003 f8fc 	bl	8005b5c <HAL_DMA_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800296a:	f7ff fa15 	bl	8001d98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a45      	ldr	r2, [pc, #276]	@ (8002a88 <HAL_ADC_MspInit+0x210>)
 8002972:	655a      	str	r2, [r3, #84]	@ 0x54
 8002974:	4a44      	ldr	r2, [pc, #272]	@ (8002a88 <HAL_ADC_MspInit+0x210>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2100      	movs	r1, #0
 800297e:	2012      	movs	r0, #18
 8002980:	f002 fdd7 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002984:	2012      	movs	r0, #18
 8002986:	f002 fdee 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800298a:	e075      	b.n	8002a78 <HAL_ADC_MspInit+0x200>
  else if(hadc->Instance==ADC2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a3f      	ldr	r2, [pc, #252]	@ (8002a90 <HAL_ADC_MspInit+0x218>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d170      	bne.n	8002a78 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800299a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800299c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80029a0:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029a2:	f107 0318 	add.w	r3, r7, #24
 80029a6:	4618      	mov	r0, r3
 80029a8:	f004 fbf6 	bl	8007198 <HAL_RCCEx_PeriphCLKConfig>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 80029b2:	f7ff f9f1 	bl	8001d98 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80029b6:	4b32      	ldr	r3, [pc, #200]	@ (8002a80 <HAL_ADC_MspInit+0x208>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3301      	adds	r3, #1
 80029bc:	4a30      	ldr	r2, [pc, #192]	@ (8002a80 <HAL_ADC_MspInit+0x208>)
 80029be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80029c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002a80 <HAL_ADC_MspInit+0x208>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d10b      	bne.n	80029e0 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80029c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002a84 <HAL_ADC_MspInit+0x20c>)
 80029ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002a84 <HAL_ADC_MspInit+0x20c>)
 80029ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a84 <HAL_ADC_MspInit+0x20c>)
 80029d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e0:	4b28      	ldr	r3, [pc, #160]	@ (8002a84 <HAL_ADC_MspInit+0x20c>)
 80029e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e4:	4a27      	ldr	r2, [pc, #156]	@ (8002a84 <HAL_ADC_MspInit+0x20c>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ec:	4b25      	ldr	r3, [pc, #148]	@ (8002a84 <HAL_ADC_MspInit+0x20c>)
 80029ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80029f8:	2310      	movs	r3, #16
 80029fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029fc:	2303      	movs	r3, #3
 80029fe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a0e:	f003 fbd7 	bl	80061c0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002a12:	4b20      	ldr	r3, [pc, #128]	@ (8002a94 <HAL_ADC_MspInit+0x21c>)
 8002a14:	4a20      	ldr	r2, [pc, #128]	@ (8002a98 <HAL_ADC_MspInit+0x220>)
 8002a16:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002a18:	4b1e      	ldr	r3, [pc, #120]	@ (8002a94 <HAL_ADC_MspInit+0x21c>)
 8002a1a:	2224      	movs	r2, #36	@ 0x24
 8002a1c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <HAL_ADC_MspInit+0x21c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a24:	4b1b      	ldr	r3, [pc, #108]	@ (8002a94 <HAL_ADC_MspInit+0x21c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a94 <HAL_ADC_MspInit+0x21c>)
 8002a2c:	2280      	movs	r2, #128	@ 0x80
 8002a2e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a30:	4b18      	ldr	r3, [pc, #96]	@ (8002a94 <HAL_ADC_MspInit+0x21c>)
 8002a32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a36:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a38:	4b16      	ldr	r3, [pc, #88]	@ (8002a94 <HAL_ADC_MspInit+0x21c>)
 8002a3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a3e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002a40:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <HAL_ADC_MspInit+0x21c>)
 8002a42:	2220      	movs	r2, #32
 8002a44:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002a46:	4b13      	ldr	r3, [pc, #76]	@ (8002a94 <HAL_ADC_MspInit+0x21c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002a4c:	4811      	ldr	r0, [pc, #68]	@ (8002a94 <HAL_ADC_MspInit+0x21c>)
 8002a4e:	f003 f885 	bl	8005b5c <HAL_DMA_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_ADC_MspInit+0x1e4>
      Error_Handler();
 8002a58:	f7ff f99e 	bl	8001d98 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a94 <HAL_ADC_MspInit+0x21c>)
 8002a60:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a62:	4a0c      	ldr	r2, [pc, #48]	@ (8002a94 <HAL_ADC_MspInit+0x21c>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	2012      	movs	r0, #18
 8002a6e:	f002 fd60 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002a72:	2012      	movs	r0, #18
 8002a74:	f002 fd77 	bl	8005566 <HAL_NVIC_EnableIRQ>
}
 8002a78:	bf00      	nop
 8002a7a:	3770      	adds	r7, #112	@ 0x70
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	2000093c 	.word	0x2000093c
 8002a84:	40021000 	.word	0x40021000
 8002a88:	20000164 	.word	0x20000164
 8002a8c:	40020008 	.word	0x40020008
 8002a90:	50000100 	.word	0x50000100
 8002a94:	200001c4 	.word	0x200001c4
 8002a98:	4002001c 	.word	0x4002001c

08002a9c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	@ 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a23      	ldr	r2, [pc, #140]	@ (8002b48 <HAL_COMP_MspInit+0xac>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d121      	bne.n	8002b02 <HAL_COMP_MspInit+0x66>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abe:	4b23      	ldr	r3, [pc, #140]	@ (8002b4c <HAL_COMP_MspInit+0xb0>)
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac2:	4a22      	ldr	r2, [pc, #136]	@ (8002b4c <HAL_COMP_MspInit+0xb0>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aca:	4b20      	ldr	r3, [pc, #128]	@ (8002b4c <HAL_COMP_MspInit+0xb0>)
 8002acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ada:	2303      	movs	r3, #3
 8002adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aec:	f003 fb68 	bl	80061c0 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8002af0:	2200      	movs	r2, #0
 8002af2:	2100      	movs	r1, #0
 8002af4:	2040      	movs	r0, #64	@ 0x40
 8002af6:	f002 fd1c 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8002afa:	2040      	movs	r0, #64	@ 0x40
 8002afc:	f002 fd33 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8002b00:	e01d      	b.n	8002b3e <HAL_COMP_MspInit+0xa2>
  else if(hcomp->Instance==COMP2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a12      	ldr	r2, [pc, #72]	@ (8002b50 <HAL_COMP_MspInit+0xb4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d118      	bne.n	8002b3e <HAL_COMP_MspInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b4c <HAL_COMP_MspInit+0xb0>)
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b10:	4a0e      	ldr	r2, [pc, #56]	@ (8002b4c <HAL_COMP_MspInit+0xb0>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b18:	4b0c      	ldr	r3, [pc, #48]	@ (8002b4c <HAL_COMP_MspInit+0xb0>)
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b24:	230c      	movs	r3, #12
 8002b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	4619      	mov	r1, r3
 8002b36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b3a:	f003 fb41 	bl	80061c0 <HAL_GPIO_Init>
}
 8002b3e:	bf00      	nop
 8002b40:	3728      	adds	r7, #40	@ 0x28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40010200 	.word	0x40010200
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40010204 	.word	0x40010204

08002b54 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0d      	ldr	r2, [pc, #52]	@ (8002b98 <HAL_DAC_MspInit+0x44>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d113      	bne.n	8002b8e <HAL_DAC_MspInit+0x3a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002b66:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <HAL_DAC_MspInit+0x48>)
 8002b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b9c <HAL_DAC_MspInit+0x48>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b72:	4b0a      	ldr	r3, [pc, #40]	@ (8002b9c <HAL_DAC_MspInit+0x48>)
 8002b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2100      	movs	r1, #0
 8002b82:	2036      	movs	r0, #54	@ 0x36
 8002b84:	f002 fcd5 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b88:	2036      	movs	r0, #54	@ 0x36
 8002b8a:	f002 fcec 	bl	8005566 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	50000800 	.word	0x50000800
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	@ 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c2c <HAL_SPI_MspInit+0x8c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d130      	bne.n	8002c24 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c30 <HAL_SPI_MspInit+0x90>)
 8002bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c30 <HAL_SPI_MspInit+0x90>)
 8002bc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bce:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <HAL_SPI_MspInit+0x90>)
 8002bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bda:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <HAL_SPI_MspInit+0x90>)
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bde:	4a14      	ldr	r2, [pc, #80]	@ (8002c30 <HAL_SPI_MspInit+0x90>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002be6:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <HAL_SPI_MspInit+0x90>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002bf2:	23e0      	movs	r3, #224	@ 0xe0
 8002bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c02:	2305      	movs	r3, #5
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c06:	f107 0314 	add.w	r3, r7, #20
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c10:	f003 fad6 	bl	80061c0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002c14:	2200      	movs	r2, #0
 8002c16:	2100      	movs	r1, #0
 8002c18:	2023      	movs	r0, #35	@ 0x23
 8002c1a:	f002 fc8a 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002c1e:	2023      	movs	r0, #35	@ 0x23
 8002c20:	f002 fca1 	bl	8005566 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002c24:	bf00      	nop
 8002c26:	3728      	adds	r7, #40	@ 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40013000 	.word	0x40013000
 8002c30:	40021000 	.word	0x40021000

08002c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	@ 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a78      	ldr	r2, [pc, #480]	@ (8002e24 <HAL_TIM_Base_MspInit+0x1f0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d12c      	bne.n	8002ca0 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c46:	4b78      	ldr	r3, [pc, #480]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4a:	4a77      	ldr	r2, [pc, #476]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002c4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c50:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c52:	4b75      	ldr	r3, [pc, #468]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2100      	movs	r1, #0
 8002c62:	2018      	movs	r0, #24
 8002c64:	f002 fc65 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002c68:	2018      	movs	r0, #24
 8002c6a:	f002 fc7c 	bl	8005566 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2100      	movs	r1, #0
 8002c72:	2019      	movs	r0, #25
 8002c74:	f002 fc5d 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c78:	2019      	movs	r0, #25
 8002c7a:	f002 fc74 	bl	8005566 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	201a      	movs	r0, #26
 8002c84:	f002 fc55 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002c88:	201a      	movs	r0, #26
 8002c8a:	f002 fc6c 	bl	8005566 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	201b      	movs	r0, #27
 8002c94:	f002 fc4d 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002c98:	201b      	movs	r0, #27
 8002c9a:	f002 fc64 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002c9e:	e0bc      	b.n	8002e1a <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca8:	d114      	bne.n	8002cd4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002caa:	4b5f      	ldr	r3, [pc, #380]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cae:	4a5e      	ldr	r2, [pc, #376]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cb6:	4b5c      	ldr	r3, [pc, #368]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	623b      	str	r3, [r7, #32]
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	201c      	movs	r0, #28
 8002cc8:	f002 fc33 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ccc:	201c      	movs	r0, #28
 8002cce:	f002 fc4a 	bl	8005566 <HAL_NVIC_EnableIRQ>
}
 8002cd2:	e0a2      	b.n	8002e1a <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM3)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a54      	ldr	r2, [pc, #336]	@ (8002e2c <HAL_TIM_Base_MspInit+0x1f8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cde:	4b52      	ldr	r3, [pc, #328]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce2:	4a51      	ldr	r2, [pc, #324]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cea:	4b4f      	ldr	r3, [pc, #316]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
}
 8002cf6:	e090      	b.n	8002e1a <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM4)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a4c      	ldr	r2, [pc, #304]	@ (8002e30 <HAL_TIM_Base_MspInit+0x1fc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d10c      	bne.n	8002d1c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d02:	4b49      	ldr	r3, [pc, #292]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d06:	4a48      	ldr	r2, [pc, #288]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d0e:	4b46      	ldr	r3, [pc, #280]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	69bb      	ldr	r3, [r7, #24]
}
 8002d1a:	e07e      	b.n	8002e1a <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM6)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a44      	ldr	r2, [pc, #272]	@ (8002e34 <HAL_TIM_Base_MspInit+0x200>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d114      	bne.n	8002d50 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d26:	4b40      	ldr	r3, [pc, #256]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2a:	4a3f      	ldr	r2, [pc, #252]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002d2c:	f043 0310 	orr.w	r3, r3, #16
 8002d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d32:	4b3d      	ldr	r3, [pc, #244]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2100      	movs	r1, #0
 8002d42:	2036      	movs	r0, #54	@ 0x36
 8002d44:	f002 fbf5 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d48:	2036      	movs	r0, #54	@ 0x36
 8002d4a:	f002 fc0c 	bl	8005566 <HAL_NVIC_EnableIRQ>
}
 8002d4e:	e064      	b.n	8002e1a <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM7)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a38      	ldr	r2, [pc, #224]	@ (8002e38 <HAL_TIM_Base_MspInit+0x204>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d114      	bne.n	8002d84 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d5a:	4b33      	ldr	r3, [pc, #204]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5e:	4a32      	ldr	r2, [pc, #200]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002d60:	f043 0320 	orr.w	r3, r3, #32
 8002d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d66:	4b30      	ldr	r3, [pc, #192]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2100      	movs	r1, #0
 8002d76:	2037      	movs	r0, #55	@ 0x37
 8002d78:	f002 fbdb 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d7c:	2037      	movs	r0, #55	@ 0x37
 8002d7e:	f002 fbf2 	bl	8005566 <HAL_NVIC_EnableIRQ>
}
 8002d82:	e04a      	b.n	8002e1a <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM8)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a2c      	ldr	r2, [pc, #176]	@ (8002e3c <HAL_TIM_Base_MspInit+0x208>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d12c      	bne.n	8002de8 <HAL_TIM_Base_MspInit+0x1b4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d8e:	4b26      	ldr	r3, [pc, #152]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d92:	4a25      	ldr	r2, [pc, #148]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002d94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d98:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d9a:	4b23      	ldr	r3, [pc, #140]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 8002da6:	2200      	movs	r2, #0
 8002da8:	2100      	movs	r1, #0
 8002daa:	202b      	movs	r0, #43	@ 0x2b
 8002dac:	f002 fbc1 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 8002db0:	202b      	movs	r0, #43	@ 0x2b
 8002db2:	f002 fbd8 	bl	8005566 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	202c      	movs	r0, #44	@ 0x2c
 8002dbc:	f002 fbb9 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8002dc0:	202c      	movs	r0, #44	@ 0x2c
 8002dc2:	f002 fbd0 	bl	8005566 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_IRQn, 0, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2100      	movs	r1, #0
 8002dca:	202d      	movs	r0, #45	@ 0x2d
 8002dcc:	f002 fbb1 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_IRQn);
 8002dd0:	202d      	movs	r0, #45	@ 0x2d
 8002dd2:	f002 fbc8 	bl	8005566 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2100      	movs	r1, #0
 8002dda:	202e      	movs	r0, #46	@ 0x2e
 8002ddc:	f002 fba9 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002de0:	202e      	movs	r0, #46	@ 0x2e
 8002de2:	f002 fbc0 	bl	8005566 <HAL_NVIC_EnableIRQ>
}
 8002de6:	e018      	b.n	8002e1a <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM15)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a14      	ldr	r2, [pc, #80]	@ (8002e40 <HAL_TIM_Base_MspInit+0x20c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d113      	bne.n	8002e1a <HAL_TIM_Base_MspInit+0x1e6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002df2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df6:	4a0c      	ldr	r2, [pc, #48]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <HAL_TIM_Base_MspInit+0x1f4>)
 8002e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	2018      	movs	r0, #24
 8002e10:	f002 fb8f 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002e14:	2018      	movs	r0, #24
 8002e16:	f002 fba6 	bl	8005566 <HAL_NVIC_EnableIRQ>
}
 8002e1a:	bf00      	nop
 8002e1c:	3728      	adds	r7, #40	@ 0x28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40012c00 	.word	0x40012c00
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40000400 	.word	0x40000400
 8002e30:	40000800 	.word	0x40000800
 8002e34:	40001000 	.word	0x40001000
 8002e38:	40001400 	.word	0x40001400
 8002e3c:	40013400 	.word	0x40013400
 8002e40:	40014000 	.word	0x40014000

08002e44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08c      	sub	sp, #48	@ 0x30
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 031c 	add.w	r3, r7, #28
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a43      	ldr	r2, [pc, #268]	@ (8002f70 <HAL_TIM_MspPostInit+0x12c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d11e      	bne.n	8002ea4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e66:	4b43      	ldr	r3, [pc, #268]	@ (8002f74 <HAL_TIM_MspPostInit+0x130>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6a:	4a42      	ldr	r2, [pc, #264]	@ (8002f74 <HAL_TIM_MspPostInit+0x130>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e72:	4b40      	ldr	r3, [pc, #256]	@ (8002f74 <HAL_TIM_MspPostInit+0x130>)
 8002e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GD_2_Pin|GD_1_Pin;
 8002e7e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e84:	2302      	movs	r3, #2
 8002e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002e90:	2306      	movs	r3, #6
 8002e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e94:	f107 031c 	add.w	r3, r7, #28
 8002e98:	4619      	mov	r1, r3
 8002e9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e9e:	f003 f98f 	bl	80061c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ea2:	e061      	b.n	8002f68 <HAL_TIM_MspPostInit+0x124>
  else if(htim->Instance==TIM3)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a33      	ldr	r2, [pc, #204]	@ (8002f78 <HAL_TIM_MspPostInit+0x134>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d11c      	bne.n	8002ee8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eae:	4b31      	ldr	r3, [pc, #196]	@ (8002f74 <HAL_TIM_MspPostInit+0x130>)
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb2:	4a30      	ldr	r2, [pc, #192]	@ (8002f74 <HAL_TIM_MspPostInit+0x130>)
 8002eb4:	f043 0302 	orr.w	r3, r3, #2
 8002eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eba:	4b2e      	ldr	r3, [pc, #184]	@ (8002f74 <HAL_TIM_MspPostInit+0x130>)
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 8002ec6:	2330      	movs	r3, #48	@ 0x30
 8002ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eda:	f107 031c 	add.w	r3, r7, #28
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4826      	ldr	r0, [pc, #152]	@ (8002f7c <HAL_TIM_MspPostInit+0x138>)
 8002ee2:	f003 f96d 	bl	80061c0 <HAL_GPIO_Init>
}
 8002ee6:	e03f      	b.n	8002f68 <HAL_TIM_MspPostInit+0x124>
  else if(htim->Instance==TIM4)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a24      	ldr	r2, [pc, #144]	@ (8002f80 <HAL_TIM_MspPostInit+0x13c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d13a      	bne.n	8002f68 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef2:	4b20      	ldr	r3, [pc, #128]	@ (8002f74 <HAL_TIM_MspPostInit+0x130>)
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f74 <HAL_TIM_MspPostInit+0x130>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002efe:	4b1d      	ldr	r3, [pc, #116]	@ (8002f74 <HAL_TIM_MspPostInit+0x130>)
 8002f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f74 <HAL_TIM_MspPostInit+0x130>)
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0e:	4a19      	ldr	r2, [pc, #100]	@ (8002f74 <HAL_TIM_MspPostInit+0x130>)
 8002f10:	f043 0302 	orr.w	r3, r3, #2
 8002f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f16:	4b17      	ldr	r3, [pc, #92]	@ (8002f74 <HAL_TIM_MspPostInit+0x130>)
 8002f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8002f22:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002f34:	230a      	movs	r3, #10
 8002f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f38:	f107 031c 	add.w	r3, r7, #28
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f42:	f003 f93d 	bl	80061c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FAN_Pin;
 8002f46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	2300      	movs	r3, #0
 8002f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(FAN_GPIO_Port, &GPIO_InitStruct);
 8002f5c:	f107 031c 	add.w	r3, r7, #28
 8002f60:	4619      	mov	r1, r3
 8002f62:	4806      	ldr	r0, [pc, #24]	@ (8002f7c <HAL_TIM_MspPostInit+0x138>)
 8002f64:	f003 f92c 	bl	80061c0 <HAL_GPIO_Init>
}
 8002f68:	bf00      	nop
 8002f6a:	3730      	adds	r7, #48	@ 0x30
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40000400 	.word	0x40000400
 8002f7c:	48000400 	.word	0x48000400
 8002f80:	40000800 	.word	0x40000800

08002f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b09a      	sub	sp, #104	@ 0x68
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f9c:	f107 0310 	add.w	r3, r7, #16
 8002fa0:	2244      	movs	r2, #68	@ 0x44
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f009 f84f 	bl	800c048 <memset>
  if(huart->Instance==USART1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a22      	ldr	r2, [pc, #136]	@ (8003038 <HAL_UART_MspInit+0xb4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d13d      	bne.n	8003030 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fbc:	f107 0310 	add.w	r3, r7, #16
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f004 f8e9 	bl	8007198 <HAL_RCCEx_PeriphCLKConfig>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002fcc:	f7fe fee4 	bl	8001d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800303c <HAL_UART_MspInit+0xb8>)
 8002fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd4:	4a19      	ldr	r2, [pc, #100]	@ (800303c <HAL_UART_MspInit+0xb8>)
 8002fd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fda:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fdc:	4b17      	ldr	r3, [pc, #92]	@ (800303c <HAL_UART_MspInit+0xb8>)
 8002fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe8:	4b14      	ldr	r3, [pc, #80]	@ (800303c <HAL_UART_MspInit+0xb8>)
 8002fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fec:	4a13      	ldr	r2, [pc, #76]	@ (800303c <HAL_UART_MspInit+0xb8>)
 8002fee:	f043 0302 	orr.w	r3, r3, #2
 8002ff2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ff4:	4b11      	ldr	r3, [pc, #68]	@ (800303c <HAL_UART_MspInit+0xb8>)
 8002ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RX_Pin;
 8003000:	2340      	movs	r3, #64	@ 0x40
 8003002:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003004:	2312      	movs	r3, #18
 8003006:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003008:	2301      	movs	r3, #1
 800300a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300c:	2300      	movs	r3, #0
 800300e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003010:	2307      	movs	r3, #7
 8003012:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8003014:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003018:	4619      	mov	r1, r3
 800301a:	4809      	ldr	r0, [pc, #36]	@ (8003040 <HAL_UART_MspInit+0xbc>)
 800301c:	f003 f8d0 	bl	80061c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003020:	2200      	movs	r2, #0
 8003022:	2100      	movs	r1, #0
 8003024:	2025      	movs	r0, #37	@ 0x25
 8003026:	f002 fa84 	bl	8005532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800302a:	2025      	movs	r0, #37	@ 0x25
 800302c:	f002 fa9b 	bl	8005566 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003030:	bf00      	nop
 8003032:	3768      	adds	r7, #104	@ 0x68
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40013800 	.word	0x40013800
 800303c:	40021000 	.word	0x40021000
 8003040:	48000400 	.word	0x48000400

08003044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003048:	bf00      	nop
 800304a:	e7fd      	b.n	8003048 <NMI_Handler+0x4>

0800304c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003050:	bf00      	nop
 8003052:	e7fd      	b.n	8003050 <HardFault_Handler+0x4>

08003054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <MemManage_Handler+0x4>

0800305c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003060:	bf00      	nop
 8003062:	e7fd      	b.n	8003060 <BusFault_Handler+0x4>

08003064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003068:	bf00      	nop
 800306a:	e7fd      	b.n	8003068 <UsageFault_Handler+0x4>

0800306c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800309a:	f000 f947 	bl	800332c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030a8:	4802      	ldr	r0, [pc, #8]	@ (80030b4 <DMA1_Channel1_IRQHandler+0x10>)
 80030aa:	f002 ff3a 	bl	8005f22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000164 	.word	0x20000164

080030b8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80030bc:	4802      	ldr	r0, [pc, #8]	@ (80030c8 <DMA1_Channel2_IRQHandler+0x10>)
 80030be:	f002 ff30 	bl	8005f22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200001c4 	.word	0x200001c4

080030cc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80030d0:	4803      	ldr	r0, [pc, #12]	@ (80030e0 <ADC1_2_IRQHandler+0x14>)
 80030d2:	f000 fe09 	bl	8003ce8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80030d6:	4803      	ldr	r0, [pc, #12]	@ (80030e4 <ADC1_2_IRQHandler+0x18>)
 80030d8:	f000 fe06 	bl	8003ce8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	2000008c 	.word	0x2000008c
 80030e4:	200000f8 	.word	0x200000f8

080030e8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030ec:	4803      	ldr	r0, [pc, #12]	@ (80030fc <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80030ee:	f005 fa35 	bl	800855c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80030f2:	4803      	ldr	r0, [pc, #12]	@ (8003100 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80030f4:	f005 fa32 	bl	800855c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	200002e4 	.word	0x200002e4
 8003100:	200004f8 	.word	0x200004f8

08003104 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003108:	4802      	ldr	r0, [pc, #8]	@ (8003114 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800310a:	f005 fa27 	bl	800855c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	200002e4 	.word	0x200002e4

08003118 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800311c:	4802      	ldr	r0, [pc, #8]	@ (8003128 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800311e:	f005 fa1d 	bl	800855c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	200002e4 	.word	0x200002e4

0800312c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003130:	4802      	ldr	r0, [pc, #8]	@ (800313c <TIM1_CC_IRQHandler+0x10>)
 8003132:	f005 fa13 	bl	800855c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	200002e4 	.word	0x200002e4

08003140 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003144:	4802      	ldr	r0, [pc, #8]	@ (8003150 <TIM2_IRQHandler+0x10>)
 8003146:	f005 fa09 	bl	800855c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000330 	.word	0x20000330

08003154 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003158:	4802      	ldr	r0, [pc, #8]	@ (8003164 <SPI1_IRQHandler+0x10>)
 800315a:	f004 fab9 	bl	80076d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000280 	.word	0x20000280

08003168 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800316c:	4802      	ldr	r0, [pc, #8]	@ (8003178 <USART1_IRQHandler+0x10>)
 800316e:	f006 ff27 	bl	8009fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20000544 	.word	0x20000544

0800317c <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003180:	4802      	ldr	r0, [pc, #8]	@ (800318c <TIM8_BRK_IRQHandler+0x10>)
 8003182:	f005 f9eb 	bl	800855c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200004ac 	.word	0x200004ac

08003190 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003194:	4802      	ldr	r0, [pc, #8]	@ (80031a0 <TIM8_UP_IRQHandler+0x10>)
 8003196:	f005 f9e1 	bl	800855c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	200004ac 	.word	0x200004ac

080031a4 <TIM8_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts.
  */
void TIM8_TRG_COM_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80031a8:	4802      	ldr	r0, [pc, #8]	@ (80031b4 <TIM8_TRG_COM_IRQHandler+0x10>)
 80031aa:	f005 f9d7 	bl	800855c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	200004ac 	.word	0x200004ac

080031b8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80031bc:	4802      	ldr	r0, [pc, #8]	@ (80031c8 <TIM8_CC_IRQHandler+0x10>)
 80031be:	f005 f9cd 	bl	800855c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	200004ac 	.word	0x200004ac

080031cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031d0:	4803      	ldr	r0, [pc, #12]	@ (80031e0 <TIM6_DAC_IRQHandler+0x14>)
 80031d2:	f005 f9c3 	bl	800855c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80031d6:	4803      	ldr	r0, [pc, #12]	@ (80031e4 <TIM6_DAC_IRQHandler+0x18>)
 80031d8:	f002 fa6e 	bl	80056b8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000414 	.word	0x20000414
 80031e4:	2000026c 	.word	0x2000026c

080031e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80031ec:	4802      	ldr	r0, [pc, #8]	@ (80031f8 <TIM7_IRQHandler+0x10>)
 80031ee:	f005 f9b5 	bl	800855c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000460 	.word	0x20000460

080031fc <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8003200:	4802      	ldr	r0, [pc, #8]	@ (800320c <COMP1_2_3_IRQHandler+0x10>)
 8003202:	f002 f87f 	bl	8005304 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000224 	.word	0x20000224

08003210 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003214:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <SystemInit+0x20>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321a:	4a05      	ldr	r2, [pc, #20]	@ (8003230 <SystemInit+0x20>)
 800321c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003220:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003234:	480d      	ldr	r0, [pc, #52]	@ (800326c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003236:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003238:	f7ff ffea 	bl	8003210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800323c:	480c      	ldr	r0, [pc, #48]	@ (8003270 <LoopForever+0x6>)
  ldr r1, =_edata
 800323e:	490d      	ldr	r1, [pc, #52]	@ (8003274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003240:	4a0d      	ldr	r2, [pc, #52]	@ (8003278 <LoopForever+0xe>)
  movs r3, #0
 8003242:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003244:	e002      	b.n	800324c <LoopCopyDataInit>

08003246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800324a:	3304      	adds	r3, #4

0800324c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800324c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800324e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003250:	d3f9      	bcc.n	8003246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003252:	4a0a      	ldr	r2, [pc, #40]	@ (800327c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003254:	4c0a      	ldr	r4, [pc, #40]	@ (8003280 <LoopForever+0x16>)
  movs r3, #0
 8003256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003258:	e001      	b.n	800325e <LoopFillZerobss>

0800325a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800325a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800325c:	3204      	adds	r2, #4

0800325e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800325e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003260:	d3fb      	bcc.n	800325a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003262:	f008 feff 	bl	800c064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003266:	f7fd fe53 	bl	8000f10 <main>

0800326a <LoopForever>:

LoopForever:
    b LoopForever
 800326a:	e7fe      	b.n	800326a <LoopForever>
  ldr   r0, =_estack
 800326c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003274:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003278:	0800c810 	.word	0x0800c810
  ldr r2, =_sbss
 800327c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003280:	20000a7c 	.word	0x20000a7c

08003284 <COMP4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003284:	e7fe      	b.n	8003284 <COMP4_IRQHandler>

08003286 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003290:	2003      	movs	r0, #3
 8003292:	f002 f943 	bl	800551c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003296:	200f      	movs	r0, #15
 8003298:	f000 f80e 	bl	80032b8 <HAL_InitTick>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	71fb      	strb	r3, [r7, #7]
 80032a6:	e001      	b.n	80032ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032a8:	f7ff fab2 	bl	8002810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032ac:	79fb      	ldrb	r3, [r7, #7]

}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80032c4:	4b16      	ldr	r3, [pc, #88]	@ (8003320 <HAL_InitTick+0x68>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d022      	beq.n	8003312 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80032cc:	4b15      	ldr	r3, [pc, #84]	@ (8003324 <HAL_InitTick+0x6c>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b13      	ldr	r3, [pc, #76]	@ (8003320 <HAL_InitTick+0x68>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80032d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	4618      	mov	r0, r3
 80032e2:	f002 f94e 	bl	8005582 <HAL_SYSTICK_Config>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10f      	bne.n	800330c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b0f      	cmp	r3, #15
 80032f0:	d809      	bhi.n	8003306 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032f2:	2200      	movs	r2, #0
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	f04f 30ff 	mov.w	r0, #4294967295
 80032fa:	f002 f91a 	bl	8005532 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003328 <HAL_InitTick+0x70>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	e007      	b.n	8003316 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	73fb      	strb	r3, [r7, #15]
 800330a:	e004      	b.n	8003316 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
 8003310:	e001      	b.n	8003316 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	2000000c 	.word	0x2000000c
 8003324:	20000004 	.word	0x20000004
 8003328:	20000008 	.word	0x20000008

0800332c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003330:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <HAL_IncTick+0x1c>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b05      	ldr	r3, [pc, #20]	@ (800334c <HAL_IncTick+0x20>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4413      	add	r3, r2
 800333a:	4a03      	ldr	r2, [pc, #12]	@ (8003348 <HAL_IncTick+0x1c>)
 800333c:	6013      	str	r3, [r2, #0]
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	20000940 	.word	0x20000940
 800334c:	2000000c 	.word	0x2000000c

08003350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return uwTick;
 8003354:	4b03      	ldr	r3, [pc, #12]	@ (8003364 <HAL_GetTick+0x14>)
 8003356:	681b      	ldr	r3, [r3, #0]
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000940 	.word	0x20000940

08003368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003370:	f7ff ffee 	bl	8003350 <HAL_GetTick>
 8003374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d004      	beq.n	800338c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003382:	4b09      	ldr	r3, [pc, #36]	@ (80033a8 <HAL_Delay+0x40>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4413      	add	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800338c:	bf00      	nop
 800338e:	f7ff ffdf 	bl	8003350 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	429a      	cmp	r2, r3
 800339c:	d8f7      	bhi.n	800338e <HAL_Delay+0x26>
  {
  }
}
 800339e:	bf00      	nop
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	2000000c 	.word	0x2000000c

080033ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	609a      	str	r2, [r3, #8]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	609a      	str	r2, [r3, #8]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3360      	adds	r3, #96	@ 0x60
 8003426:	461a      	mov	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4b08      	ldr	r3, [pc, #32]	@ (8003458 <LL_ADC_SetOffset+0x44>)
 8003436:	4013      	ands	r3, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	4313      	orrs	r3, r2
 8003444:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800344c:	bf00      	nop
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	03fff000 	.word	0x03fff000

0800345c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3360      	adds	r3, #96	@ 0x60
 800346a:	461a      	mov	r2, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	3360      	adds	r3, #96	@ 0x60
 8003498:	461a      	mov	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80034be:	b480      	push	{r7}
 80034c0:	b087      	sub	sp, #28
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3360      	adds	r3, #96	@ 0x60
 80034ce:	461a      	mov	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80034e8:	bf00      	nop
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3360      	adds	r3, #96	@ 0x60
 8003504:	461a      	mov	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	431a      	orrs	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	615a      	str	r2, [r3, #20]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003576:	b480      	push	{r7}
 8003578:	b087      	sub	sp, #28
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3330      	adds	r3, #48	@ 0x30
 8003586:	461a      	mov	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	4413      	add	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	211f      	movs	r1, #31
 80035a2:	fa01 f303 	lsl.w	r3, r1, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	401a      	ands	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	0e9b      	lsrs	r3, r3, #26
 80035ae:	f003 011f 	and.w	r1, r3, #31
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	fa01 f303 	lsl.w	r3, r1, r3
 80035bc:	431a      	orrs	r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035da:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3314      	adds	r3, #20
 8003604:	461a      	mov	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	0e5b      	lsrs	r3, r3, #25
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	4413      	add	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	0d1b      	lsrs	r3, r3, #20
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2107      	movs	r1, #7
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	401a      	ands	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	0d1b      	lsrs	r3, r3, #20
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	431a      	orrs	r2, r3
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003664:	43db      	mvns	r3, r3
 8003666:	401a      	ands	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f003 0318 	and.w	r3, r3, #24
 800366e:	4908      	ldr	r1, [pc, #32]	@ (8003690 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003670:	40d9      	lsrs	r1, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	400b      	ands	r3, r1
 8003676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367a:	431a      	orrs	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	0007ffff 	.word	0x0007ffff

08003694 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 031f 	and.w	r3, r3, #31
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80036dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6093      	str	r3, [r2, #8]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003704:	d101      	bne.n	800370a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003728:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800372c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003754:	d101      	bne.n	800375a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003778:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800377c:	f043 0201 	orr.w	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037a4:	f043 0202 	orr.w	r2, r3, #2
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <LL_ADC_IsEnabled+0x18>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <LL_ADC_IsEnabled+0x1a>
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d101      	bne.n	80037f6 <LL_ADC_IsDisableOngoing+0x18>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <LL_ADC_IsDisableOngoing+0x1a>
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003814:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003818:	f043 0204 	orr.w	r2, r3, #4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b04      	cmp	r3, #4
 800383e:	d101      	bne.n	8003844 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b08      	cmp	r3, #8
 8003864:	d101      	bne.n	800386a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b089      	sub	sp, #36	@ 0x24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e167      	b.n	8003b62 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389c:	2b00      	cmp	r3, #0
 800389e:	d109      	bne.n	80038b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7fe ffe9 	bl	8002878 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff19 	bl	80036f0 <LL_ADC_IsDeepPowerDownEnabled>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff feff 	bl	80036cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff ff34 	bl	8003740 <LL_ADC_IsInternalRegulatorEnabled>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d115      	bne.n	800390a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff ff18 	bl	8003718 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038e8:	4ba0      	ldr	r3, [pc, #640]	@ (8003b6c <HAL_ADC_Init+0x2f4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	099b      	lsrs	r3, r3, #6
 80038ee:	4aa0      	ldr	r2, [pc, #640]	@ (8003b70 <HAL_ADC_Init+0x2f8>)
 80038f0:	fba2 2303 	umull	r2, r3, r2, r3
 80038f4:	099b      	lsrs	r3, r3, #6
 80038f6:	3301      	adds	r3, #1
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80038fc:	e002      	b.n	8003904 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3b01      	subs	r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f9      	bne.n	80038fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff ff16 	bl	8003740 <LL_ADC_IsInternalRegulatorEnabled>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10d      	bne.n	8003936 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391e:	f043 0210 	orr.w	r2, r3, #16
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392a:	f043 0201 	orr.w	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff ff76 	bl	800382c <LL_ADC_REG_IsConversionOngoing>
 8003940:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b00      	cmp	r3, #0
 800394c:	f040 8100 	bne.w	8003b50 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f040 80fc 	bne.w	8003b50 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003960:	f043 0202 	orr.w	r2, r3, #2
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff23 	bl	80037b8 <LL_ADC_IsEnabled>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d111      	bne.n	800399c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003978:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800397c:	f7ff ff1c 	bl	80037b8 <LL_ADC_IsEnabled>
 8003980:	4604      	mov	r4, r0
 8003982:	487c      	ldr	r0, [pc, #496]	@ (8003b74 <HAL_ADC_Init+0x2fc>)
 8003984:	f7ff ff18 	bl	80037b8 <LL_ADC_IsEnabled>
 8003988:	4603      	mov	r3, r0
 800398a:	4323      	orrs	r3, r4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d105      	bne.n	800399c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4619      	mov	r1, r3
 8003996:	4878      	ldr	r0, [pc, #480]	@ (8003b78 <HAL_ADC_Init+0x300>)
 8003998:	f7ff fd08 	bl	80033ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	7f5b      	ldrb	r3, [r3, #29]
 80039a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80039ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80039b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d106      	bne.n	80039d8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ce:	3b01      	subs	r3, #1
 80039d0:	045b      	lsls	r3, r3, #17
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	4b60      	ldr	r3, [pc, #384]	@ (8003b7c <HAL_ADC_Init+0x304>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	69b9      	ldr	r1, [r7, #24]
 8003a04:	430b      	orrs	r3, r1
 8003a06:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff ff15 	bl	8003852 <LL_ADC_INJ_IsConversionOngoing>
 8003a28:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d16d      	bne.n	8003b0c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d16a      	bne.n	8003b0c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a3a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a42:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a52:	f023 0302 	bic.w	r3, r3, #2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	69b9      	ldr	r1, [r7, #24]
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d017      	beq.n	8003a98 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003a76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003a80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003a84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6911      	ldr	r1, [r2, #16]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003a96:	e013      	b.n	8003ac0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003aa6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ab8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003abc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d118      	bne.n	8003afc <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003ad4:	f023 0304 	bic.w	r3, r3, #4
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ae0:	4311      	orrs	r1, r2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003ae6:	4311      	orrs	r1, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003aec:	430a      	orrs	r2, r1
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	611a      	str	r2, [r3, #16]
 8003afa:	e007      	b.n	8003b0c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0201 	bic.w	r2, r2, #1
 8003b0a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d10c      	bne.n	8003b2e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	f023 010f 	bic.w	r1, r3, #15
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	1e5a      	subs	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b2c:	e007      	b.n	8003b3e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 020f 	bic.w	r2, r2, #15
 8003b3c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b42:	f023 0303 	bic.w	r3, r3, #3
 8003b46:	f043 0201 	orr.w	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b4e:	e007      	b.n	8003b60 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b54:	f043 0210 	orr.w	r2, r3, #16
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b60:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3724      	adds	r7, #36	@ 0x24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd90      	pop	{r4, r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000004 	.word	0x20000004
 8003b70:	053e2d63 	.word	0x053e2d63
 8003b74:	50000100 	.word	0x50000100
 8003b78:	50000300 	.word	0x50000300
 8003b7c:	fff04007 	.word	0xfff04007

08003b80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b8c:	4851      	ldr	r0, [pc, #324]	@ (8003cd4 <HAL_ADC_Start_DMA+0x154>)
 8003b8e:	f7ff fd81 	bl	8003694 <LL_ADC_GetMultimode>
 8003b92:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff fe47 	bl	800382c <LL_ADC_REG_IsConversionOngoing>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f040 808f 	bne.w	8003cc4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_Start_DMA+0x34>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e08a      	b.n	8003cca <HAL_ADC_Start_DMA+0x14a>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d002      	beq.n	8003bce <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	2b09      	cmp	r3, #9
 8003bcc:	d173      	bne.n	8003cb6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 feb2 	bl	8004938 <ADC_Enable>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d166      	bne.n	8003cac <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a38      	ldr	r2, [pc, #224]	@ (8003cd8 <HAL_ADC_Start_DMA+0x158>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d002      	beq.n	8003c02 <HAL_ADC_Start_DMA+0x82>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	e001      	b.n	8003c06 <HAL_ADC_Start_DMA+0x86>
 8003c02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d002      	beq.n	8003c14 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d105      	bne.n	8003c20 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d006      	beq.n	8003c3a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c30:	f023 0206 	bic.w	r2, r3, #6
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	661a      	str	r2, [r3, #96]	@ 0x60
 8003c38:	e002      	b.n	8003c40 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c44:	4a25      	ldr	r2, [pc, #148]	@ (8003cdc <HAL_ADC_Start_DMA+0x15c>)
 8003c46:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4c:	4a24      	ldr	r2, [pc, #144]	@ (8003ce0 <HAL_ADC_Start_DMA+0x160>)
 8003c4e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c54:	4a23      	ldr	r2, [pc, #140]	@ (8003ce4 <HAL_ADC_Start_DMA+0x164>)
 8003c56:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	221c      	movs	r2, #28
 8003c5e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0210 	orr.w	r2, r2, #16
 8003c76:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3340      	adds	r3, #64	@ 0x40
 8003c92:	4619      	mov	r1, r3
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f002 f808 	bl	8005cac <HAL_DMA_Start_IT>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fdad 	bl	8003804 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003caa:	e00d      	b.n	8003cc8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003cb4:	e008      	b.n	8003cc8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003cc2:	e001      	b.n	8003cc8 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	50000300 	.word	0x50000300
 8003cd8:	50000100 	.word	0x50000100
 8003cdc:	08004b03 	.word	0x08004b03
 8003ce0:	08004bdb 	.word	0x08004bdb
 8003ce4:	08004bf7 	.word	0x08004bf7

08003ce8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	@ 0x28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d04:	4883      	ldr	r0, [pc, #524]	@ (8003f14 <HAL_ADC_IRQHandler+0x22c>)
 8003d06:	f7ff fcc5 	bl	8003694 <LL_ADC_GetMultimode>
 8003d0a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d017      	beq.n	8003d46 <HAL_ADC_IRQHandler+0x5e>
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d012      	beq.n	8003d46 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d105      	bne.n	8003d38 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d30:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f001 f853 	bl	8004de4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2202      	movs	r2, #2
 8003d44:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d004      	beq.n	8003d5a <HAL_ADC_IRQHandler+0x72>
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8085 	beq.w	8003e70 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d07f      	beq.n	8003e70 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fbdf 	bl	8003550 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d064      	beq.n	8003e62 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a5e      	ldr	r2, [pc, #376]	@ (8003f18 <HAL_ADC_IRQHandler+0x230>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d002      	beq.n	8003da8 <HAL_ADC_IRQHandler+0xc0>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	e001      	b.n	8003dac <HAL_ADC_IRQHandler+0xc4>
 8003da8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d008      	beq.n	8003dc6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b05      	cmp	r3, #5
 8003dbe:	d002      	beq.n	8003dc6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b09      	cmp	r3, #9
 8003dc4:	d104      	bne.n	8003dd0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	623b      	str	r3, [r7, #32]
 8003dce:	e00d      	b.n	8003dec <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a50      	ldr	r2, [pc, #320]	@ (8003f18 <HAL_ADC_IRQHandler+0x230>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d002      	beq.n	8003de0 <HAL_ADC_IRQHandler+0xf8>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	e001      	b.n	8003de4 <HAL_ADC_IRQHandler+0xfc>
 8003de0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003de4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d135      	bne.n	8003e62 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d12e      	bne.n	8003e62 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fd0f 	bl	800382c <LL_ADC_REG_IsConversionOngoing>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d11a      	bne.n	8003e4a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 020c 	bic.w	r2, r2, #12
 8003e22:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d112      	bne.n	8003e62 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e40:	f043 0201 	orr.w	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e48:	e00b      	b.n	8003e62 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4e:	f043 0210 	orr.w	r2, r3, #16
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5a:	f043 0201 	orr.w	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fe f900 	bl	8002068 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	220c      	movs	r2, #12
 8003e6e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <HAL_ADC_IRQHandler+0x19c>
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10b      	bne.n	8003e9c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 809e 	beq.w	8003fcc <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 8098 	beq.w	8003fcc <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d105      	bne.n	8003eb4 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eac:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fb88 	bl	80035ce <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003ebe:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fb43 	bl	8003550 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003eca:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a11      	ldr	r2, [pc, #68]	@ (8003f18 <HAL_ADC_IRQHandler+0x230>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d002      	beq.n	8003edc <HAL_ADC_IRQHandler+0x1f4>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	e001      	b.n	8003ee0 <HAL_ADC_IRQHandler+0x1f8>
 8003edc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d008      	beq.n	8003efa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b06      	cmp	r3, #6
 8003ef2:	d002      	beq.n	8003efa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2b07      	cmp	r3, #7
 8003ef8:	d104      	bne.n	8003f04 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	623b      	str	r3, [r7, #32]
 8003f02:	e011      	b.n	8003f28 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a03      	ldr	r2, [pc, #12]	@ (8003f18 <HAL_ADC_IRQHandler+0x230>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d006      	beq.n	8003f1c <HAL_ADC_IRQHandler+0x234>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	e005      	b.n	8003f20 <HAL_ADC_IRQHandler+0x238>
 8003f14:	50000300 	.word	0x50000300
 8003f18:	50000100 	.word	0x50000100
 8003f1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f20:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d047      	beq.n	8003fbe <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <HAL_ADC_IRQHandler+0x260>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d03f      	beq.n	8003fbe <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d13a      	bne.n	8003fbe <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f52:	2b40      	cmp	r3, #64	@ 0x40
 8003f54:	d133      	bne.n	8003fbe <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d12e      	bne.n	8003fbe <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff fc74 	bl	8003852 <LL_ADC_INJ_IsConversionOngoing>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d11a      	bne.n	8003fa6 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f7e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d112      	bne.n	8003fbe <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9c:	f043 0201 	orr.w	r2, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fa4:	e00b      	b.n	8003fbe <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003faa:	f043 0210 	orr.w	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fee8 	bl	8004d94 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2260      	movs	r2, #96	@ 0x60
 8003fca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d011      	beq.n	8003ffa <HAL_ADC_IRQHandler+0x312>
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00c      	beq.n	8003ffa <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f89f 	bl	8004130 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2280      	movs	r2, #128	@ 0x80
 8003ff8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d012      	beq.n	800402a <HAL_ADC_IRQHandler+0x342>
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004012:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fece 	bl	8004dbc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004028:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004030:	2b00      	cmp	r3, #0
 8004032:	d012      	beq.n	800405a <HAL_ADC_IRQHandler+0x372>
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00d      	beq.n	800405a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004042:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fec0 	bl	8004dd0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004058:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	d036      	beq.n	80040d2 <HAL_ADC_IRQHandler+0x3ea>
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b00      	cmp	r3, #0
 800406c:	d031      	beq.n	80040d2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004076:	2301      	movs	r3, #1
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
 800407a:	e014      	b.n	80040a6 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004082:	4825      	ldr	r0, [pc, #148]	@ (8004118 <HAL_ADC_IRQHandler+0x430>)
 8004084:	f7ff fb14 	bl	80036b0 <LL_ADC_GetMultiDMATransfer>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800408e:	2301      	movs	r3, #1
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
 8004092:	e008      	b.n	80040a6 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80040a2:	2301      	movs	r3, #1
 80040a4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d10e      	bne.n	80040ca <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040bc:	f043 0202 	orr.w	r2, r3, #2
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f83d 	bl	8004144 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2210      	movs	r2, #16
 80040d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d018      	beq.n	800410e <HAL_ADC_IRQHandler+0x426>
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d013      	beq.n	800410e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ea:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f6:	f043 0208 	orr.w	r2, r3, #8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004106:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fe4d 	bl	8004da8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800410e:	bf00      	nop
 8004110:	3728      	adds	r7, #40	@ 0x28
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	50000300 	.word	0x50000300

0800411c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b0b6      	sub	sp, #216	@ 0xd8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_ADC_ConfigChannel+0x22>
 8004176:	2302      	movs	r3, #2
 8004178:	e3c8      	b.n	800490c <HAL_ADC_ConfigChannel+0x7b4>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fb50 	bl	800382c <LL_ADC_REG_IsConversionOngoing>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	f040 83ad 	bne.w	80048ee <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6859      	ldr	r1, [r3, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	f7ff f9e8 	bl	8003576 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fb3e 	bl	800382c <LL_ADC_REG_IsConversionOngoing>
 80041b0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fb4a 	bl	8003852 <LL_ADC_INJ_IsConversionOngoing>
 80041be:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f040 81d9 	bne.w	800457e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f040 81d4 	bne.w	800457e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041de:	d10f      	bne.n	8004200 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2200      	movs	r2, #0
 80041ea:	4619      	mov	r1, r3
 80041ec:	f7ff fa02 	bl	80035f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff f996 	bl	800352a <LL_ADC_SetSamplingTimeCommonConfig>
 80041fe:	e00e      	b.n	800421e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	6819      	ldr	r1, [r3, #0]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	461a      	mov	r2, r3
 800420e:	f7ff f9f1 	bl	80035f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff f986 	bl	800352a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	695a      	ldr	r2, [r3, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	08db      	lsrs	r3, r3, #3
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b04      	cmp	r3, #4
 800423e:	d022      	beq.n	8004286 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	6919      	ldr	r1, [r3, #16]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004250:	f7ff f8e0 	bl	8003414 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6919      	ldr	r1, [r3, #16]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	461a      	mov	r2, r3
 8004262:	f7ff f92c 	bl	80034be <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004272:	2b01      	cmp	r3, #1
 8004274:	d102      	bne.n	800427c <HAL_ADC_ConfigChannel+0x124>
 8004276:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800427a:	e000      	b.n	800427e <HAL_ADC_ConfigChannel+0x126>
 800427c:	2300      	movs	r3, #0
 800427e:	461a      	mov	r2, r3
 8004280:	f7ff f938 	bl	80034f4 <LL_ADC_SetOffsetSaturation>
 8004284:	e17b      	b.n	800457e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff f8e5 	bl	800345c <LL_ADC_GetOffsetChannel>
 8004292:	4603      	mov	r3, r0
 8004294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10a      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0x15a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2100      	movs	r1, #0
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff f8da 	bl	800345c <LL_ADC_GetOffsetChannel>
 80042a8:	4603      	mov	r3, r0
 80042aa:	0e9b      	lsrs	r3, r3, #26
 80042ac:	f003 021f 	and.w	r2, r3, #31
 80042b0:	e01e      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x198>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff f8cf 	bl	800345c <LL_ADC_GetOffsetChannel>
 80042be:	4603      	mov	r3, r0
 80042c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042c8:	fa93 f3a3 	rbit	r3, r3
 80042cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80042e0:	2320      	movs	r3, #32
 80042e2:	e004      	b.n	80042ee <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80042e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042e8:	fab3 f383 	clz	r3, r3
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x1b0>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	0e9b      	lsrs	r3, r3, #26
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	e018      	b.n	800433a <HAL_ADC_ConfigChannel+0x1e2>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004314:	fa93 f3a3 	rbit	r3, r3
 8004318:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800431c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004320:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004324:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800432c:	2320      	movs	r3, #32
 800432e:	e004      	b.n	800433a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004330:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004334:	fab3 f383 	clz	r3, r3
 8004338:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800433a:	429a      	cmp	r2, r3
 800433c:	d106      	bne.n	800434c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2200      	movs	r2, #0
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff f89e 	bl	8003488 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2101      	movs	r1, #1
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff f882 	bl	800345c <LL_ADC_GetOffsetChannel>
 8004358:	4603      	mov	r3, r0
 800435a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x220>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2101      	movs	r1, #1
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff f877 	bl	800345c <LL_ADC_GetOffsetChannel>
 800436e:	4603      	mov	r3, r0
 8004370:	0e9b      	lsrs	r3, r3, #26
 8004372:	f003 021f 	and.w	r2, r3, #31
 8004376:	e01e      	b.n	80043b6 <HAL_ADC_ConfigChannel+0x25e>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2101      	movs	r1, #1
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff f86c 	bl	800345c <LL_ADC_GetOffsetChannel>
 8004384:	4603      	mov	r3, r0
 8004386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800438e:	fa93 f3a3 	rbit	r3, r3
 8004392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800439a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800439e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80043a6:	2320      	movs	r3, #32
 80043a8:	e004      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80043aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80043ae:	fab3 f383 	clz	r3, r3
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d105      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x276>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	0e9b      	lsrs	r3, r3, #26
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	e018      	b.n	8004400 <HAL_ADC_ConfigChannel+0x2a8>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043da:	fa93 f3a3 	rbit	r3, r3
 80043de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80043e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80043ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80043f2:	2320      	movs	r3, #32
 80043f4:	e004      	b.n	8004400 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80043f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004400:	429a      	cmp	r2, r3
 8004402:	d106      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2200      	movs	r2, #0
 800440a:	2101      	movs	r1, #1
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff f83b 	bl	8003488 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2102      	movs	r1, #2
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff f81f 	bl	800345c <LL_ADC_GetOffsetChannel>
 800441e:	4603      	mov	r3, r0
 8004420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <HAL_ADC_ConfigChannel+0x2e6>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2102      	movs	r1, #2
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff f814 	bl	800345c <LL_ADC_GetOffsetChannel>
 8004434:	4603      	mov	r3, r0
 8004436:	0e9b      	lsrs	r3, r3, #26
 8004438:	f003 021f 	and.w	r2, r3, #31
 800443c:	e01e      	b.n	800447c <HAL_ADC_ConfigChannel+0x324>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2102      	movs	r1, #2
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff f809 	bl	800345c <LL_ADC_GetOffsetChannel>
 800444a:	4603      	mov	r3, r0
 800444c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004450:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800445c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004460:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004464:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800446c:	2320      	movs	r3, #32
 800446e:	e004      	b.n	800447a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004470:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004474:	fab3 f383 	clz	r3, r3
 8004478:	b2db      	uxtb	r3, r3
 800447a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x33c>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	0e9b      	lsrs	r3, r3, #26
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	e016      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x36a>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044a0:	fa93 f3a3 	rbit	r3, r3
 80044a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80044a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80044ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80044b4:	2320      	movs	r3, #32
 80044b6:	e004      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80044b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044bc:	fab3 f383 	clz	r3, r3
 80044c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d106      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2200      	movs	r2, #0
 80044cc:	2102      	movs	r1, #2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe ffda 	bl	8003488 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2103      	movs	r1, #3
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe ffbe 	bl	800345c <LL_ADC_GetOffsetChannel>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x3a8>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2103      	movs	r1, #3
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fe ffb3 	bl	800345c <LL_ADC_GetOffsetChannel>
 80044f6:	4603      	mov	r3, r0
 80044f8:	0e9b      	lsrs	r3, r3, #26
 80044fa:	f003 021f 	and.w	r2, r3, #31
 80044fe:	e017      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3d8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2103      	movs	r1, #3
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe ffa8 	bl	800345c <LL_ADC_GetOffsetChannel>
 800450c:	4603      	mov	r3, r0
 800450e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004510:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004512:	fa93 f3a3 	rbit	r3, r3
 8004516:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004518:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800451a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800451c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004522:	2320      	movs	r3, #32
 8004524:	e003      	b.n	800452e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004526:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004528:	fab3 f383 	clz	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x3f0>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	0e9b      	lsrs	r3, r3, #26
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	e011      	b.n	800456c <HAL_ADC_ConfigChannel+0x414>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004556:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004558:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800455a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004560:	2320      	movs	r3, #32
 8004562:	e003      	b.n	800456c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800456c:	429a      	cmp	r2, r3
 800456e:	d106      	bne.n	800457e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2200      	movs	r2, #0
 8004576:	2103      	movs	r1, #3
 8004578:	4618      	mov	r0, r3
 800457a:	f7fe ff85 	bl	8003488 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff f918 	bl	80037b8 <LL_ADC_IsEnabled>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	f040 8140 	bne.w	8004810 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	6819      	ldr	r1, [r3, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	461a      	mov	r2, r3
 800459e:	f7ff f855 	bl	800364c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	4a8f      	ldr	r2, [pc, #572]	@ (80047e4 <HAL_ADC_ConfigChannel+0x68c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	f040 8131 	bne.w	8004810 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <HAL_ADC_ConfigChannel+0x47e>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	0e9b      	lsrs	r3, r3, #26
 80045c4:	3301      	adds	r3, #1
 80045c6:	f003 031f 	and.w	r3, r3, #31
 80045ca:	2b09      	cmp	r3, #9
 80045cc:	bf94      	ite	ls
 80045ce:	2301      	movls	r3, #1
 80045d0:	2300      	movhi	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	e019      	b.n	800460a <HAL_ADC_ConfigChannel+0x4b2>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80045e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045e6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80045e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80045ee:	2320      	movs	r3, #32
 80045f0:	e003      	b.n	80045fa <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80045f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045f4:	fab3 f383 	clz	r3, r3
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	3301      	adds	r3, #1
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	2b09      	cmp	r3, #9
 8004602:	bf94      	ite	ls
 8004604:	2301      	movls	r3, #1
 8004606:	2300      	movhi	r3, #0
 8004608:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800460a:	2b00      	cmp	r3, #0
 800460c:	d079      	beq.n	8004702 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004616:	2b00      	cmp	r3, #0
 8004618:	d107      	bne.n	800462a <HAL_ADC_ConfigChannel+0x4d2>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	0e9b      	lsrs	r3, r3, #26
 8004620:	3301      	adds	r3, #1
 8004622:	069b      	lsls	r3, r3, #26
 8004624:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004628:	e015      	b.n	8004656 <HAL_ADC_ConfigChannel+0x4fe>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800463a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800463c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004642:	2320      	movs	r3, #32
 8004644:	e003      	b.n	800464e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004648:	fab3 f383 	clz	r3, r3
 800464c:	b2db      	uxtb	r3, r3
 800464e:	3301      	adds	r3, #1
 8004650:	069b      	lsls	r3, r3, #26
 8004652:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <HAL_ADC_ConfigChannel+0x51e>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	0e9b      	lsrs	r3, r3, #26
 8004668:	3301      	adds	r3, #1
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	2101      	movs	r1, #1
 8004670:	fa01 f303 	lsl.w	r3, r1, r3
 8004674:	e017      	b.n	80046a6 <HAL_ADC_ConfigChannel+0x54e>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800467e:	fa93 f3a3 	rbit	r3, r3
 8004682:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004686:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800468e:	2320      	movs	r3, #32
 8004690:	e003      	b.n	800469a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004694:	fab3 f383 	clz	r3, r3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	3301      	adds	r3, #1
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	2101      	movs	r1, #1
 80046a2:	fa01 f303 	lsl.w	r3, r1, r3
 80046a6:	ea42 0103 	orr.w	r1, r2, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x574>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	0e9b      	lsrs	r3, r3, #26
 80046bc:	3301      	adds	r3, #1
 80046be:	f003 021f 	and.w	r2, r3, #31
 80046c2:	4613      	mov	r3, r2
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	4413      	add	r3, r2
 80046c8:	051b      	lsls	r3, r3, #20
 80046ca:	e018      	b.n	80046fe <HAL_ADC_ConfigChannel+0x5a6>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d4:	fa93 f3a3 	rbit	r3, r3
 80046d8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80046da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80046de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80046e4:	2320      	movs	r3, #32
 80046e6:	e003      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80046e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ea:	fab3 f383 	clz	r3, r3
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	3301      	adds	r3, #1
 80046f2:	f003 021f 	and.w	r2, r3, #31
 80046f6:	4613      	mov	r3, r2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	4413      	add	r3, r2
 80046fc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046fe:	430b      	orrs	r3, r1
 8004700:	e081      	b.n	8004806 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800470a:	2b00      	cmp	r3, #0
 800470c:	d107      	bne.n	800471e <HAL_ADC_ConfigChannel+0x5c6>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	0e9b      	lsrs	r3, r3, #26
 8004714:	3301      	adds	r3, #1
 8004716:	069b      	lsls	r3, r3, #26
 8004718:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800471c:	e015      	b.n	800474a <HAL_ADC_ConfigChannel+0x5f2>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004726:	fa93 f3a3 	rbit	r3, r3
 800472a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800472c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004736:	2320      	movs	r3, #32
 8004738:	e003      	b.n	8004742 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800473a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473c:	fab3 f383 	clz	r3, r3
 8004740:	b2db      	uxtb	r3, r3
 8004742:	3301      	adds	r3, #1
 8004744:	069b      	lsls	r3, r3, #26
 8004746:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_ADC_ConfigChannel+0x612>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	0e9b      	lsrs	r3, r3, #26
 800475c:	3301      	adds	r3, #1
 800475e:	f003 031f 	and.w	r3, r3, #31
 8004762:	2101      	movs	r1, #1
 8004764:	fa01 f303 	lsl.w	r3, r1, r3
 8004768:	e017      	b.n	800479a <HAL_ADC_ConfigChannel+0x642>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	fa93 f3a3 	rbit	r3, r3
 8004776:	61fb      	str	r3, [r7, #28]
  return result;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004782:	2320      	movs	r3, #32
 8004784:	e003      	b.n	800478e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	fab3 f383 	clz	r3, r3
 800478c:	b2db      	uxtb	r3, r3
 800478e:	3301      	adds	r3, #1
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	2101      	movs	r1, #1
 8004796:	fa01 f303 	lsl.w	r3, r1, r3
 800479a:	ea42 0103 	orr.w	r1, r2, r3
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10d      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x66e>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	0e9b      	lsrs	r3, r3, #26
 80047b0:	3301      	adds	r3, #1
 80047b2:	f003 021f 	and.w	r2, r3, #31
 80047b6:	4613      	mov	r3, r2
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	4413      	add	r3, r2
 80047bc:	3b1e      	subs	r3, #30
 80047be:	051b      	lsls	r3, r3, #20
 80047c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80047c4:	e01e      	b.n	8004804 <HAL_ADC_ConfigChannel+0x6ac>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	fa93 f3a3 	rbit	r3, r3
 80047d2:	613b      	str	r3, [r7, #16]
  return result;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d104      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80047de:	2320      	movs	r3, #32
 80047e0:	e006      	b.n	80047f0 <HAL_ADC_ConfigChannel+0x698>
 80047e2:	bf00      	nop
 80047e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	fab3 f383 	clz	r3, r3
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	3301      	adds	r3, #1
 80047f2:	f003 021f 	and.w	r2, r3, #31
 80047f6:	4613      	mov	r3, r2
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	4413      	add	r3, r2
 80047fc:	3b1e      	subs	r3, #30
 80047fe:	051b      	lsls	r3, r3, #20
 8004800:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004804:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800480a:	4619      	mov	r1, r3
 800480c:	f7fe fef2 	bl	80035f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4b3f      	ldr	r3, [pc, #252]	@ (8004914 <HAL_ADC_ConfigChannel+0x7bc>)
 8004816:	4013      	ands	r3, r2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d071      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800481c:	483e      	ldr	r0, [pc, #248]	@ (8004918 <HAL_ADC_ConfigChannel+0x7c0>)
 800481e:	f7fe fdeb 	bl	80033f8 <LL_ADC_GetCommonPathInternalCh>
 8004822:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a3c      	ldr	r2, [pc, #240]	@ (800491c <HAL_ADC_ConfigChannel+0x7c4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_ADC_ConfigChannel+0x6e2>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a3a      	ldr	r2, [pc, #232]	@ (8004920 <HAL_ADC_ConfigChannel+0x7c8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d127      	bne.n	800488a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800483a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800483e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d121      	bne.n	800488a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800484e:	d157      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004854:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004858:	4619      	mov	r1, r3
 800485a:	482f      	ldr	r0, [pc, #188]	@ (8004918 <HAL_ADC_ConfigChannel+0x7c0>)
 800485c:	f7fe fdb9 	bl	80033d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004860:	4b30      	ldr	r3, [pc, #192]	@ (8004924 <HAL_ADC_ConfigChannel+0x7cc>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	099b      	lsrs	r3, r3, #6
 8004866:	4a30      	ldr	r2, [pc, #192]	@ (8004928 <HAL_ADC_ConfigChannel+0x7d0>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	099b      	lsrs	r3, r3, #6
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	4613      	mov	r3, r2
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800487a:	e002      	b.n	8004882 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3b01      	subs	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1f9      	bne.n	800487c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004888:	e03a      	b.n	8004900 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a27      	ldr	r2, [pc, #156]	@ (800492c <HAL_ADC_ConfigChannel+0x7d4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d113      	bne.n	80048bc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004894:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004898:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10d      	bne.n	80048bc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a22      	ldr	r2, [pc, #136]	@ (8004930 <HAL_ADC_ConfigChannel+0x7d8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d02a      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048b2:	4619      	mov	r1, r3
 80048b4:	4818      	ldr	r0, [pc, #96]	@ (8004918 <HAL_ADC_ConfigChannel+0x7c0>)
 80048b6:	f7fe fd8c 	bl	80033d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048ba:	e021      	b.n	8004900 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004934 <HAL_ADC_ConfigChannel+0x7dc>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d11c      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d116      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a16      	ldr	r2, [pc, #88]	@ (8004930 <HAL_ADC_ConfigChannel+0x7d8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d011      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048e4:	4619      	mov	r1, r3
 80048e6:	480c      	ldr	r0, [pc, #48]	@ (8004918 <HAL_ADC_ConfigChannel+0x7c0>)
 80048e8:	f7fe fd73 	bl	80033d2 <LL_ADC_SetCommonPathInternalCh>
 80048ec:	e008      	b.n	8004900 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f2:	f043 0220 	orr.w	r2, r3, #32
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004908:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800490c:	4618      	mov	r0, r3
 800490e:	37d8      	adds	r7, #216	@ 0xd8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	80080000 	.word	0x80080000
 8004918:	50000300 	.word	0x50000300
 800491c:	c3210000 	.word	0xc3210000
 8004920:	90c00010 	.word	0x90c00010
 8004924:	20000004 	.word	0x20000004
 8004928:	053e2d63 	.word	0x053e2d63
 800492c:	c7520000 	.word	0xc7520000
 8004930:	50000100 	.word	0x50000100
 8004934:	cb840000 	.word	0xcb840000

08004938 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004940:	2300      	movs	r3, #0
 8004942:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f7fe ff35 	bl	80037b8 <LL_ADC_IsEnabled>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d169      	bne.n	8004a28 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	4b36      	ldr	r3, [pc, #216]	@ (8004a34 <ADC_Enable+0xfc>)
 800495c:	4013      	ands	r3, r2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00d      	beq.n	800497e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004966:	f043 0210 	orr.w	r2, r3, #16
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004972:	f043 0201 	orr.w	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e055      	b.n	8004a2a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe fef0 	bl	8003768 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004988:	482b      	ldr	r0, [pc, #172]	@ (8004a38 <ADC_Enable+0x100>)
 800498a:	f7fe fd35 	bl	80033f8 <LL_ADC_GetCommonPathInternalCh>
 800498e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004990:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004994:	2b00      	cmp	r3, #0
 8004996:	d013      	beq.n	80049c0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004998:	4b28      	ldr	r3, [pc, #160]	@ (8004a3c <ADC_Enable+0x104>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	099b      	lsrs	r3, r3, #6
 800499e:	4a28      	ldr	r2, [pc, #160]	@ (8004a40 <ADC_Enable+0x108>)
 80049a0:	fba2 2303 	umull	r2, r3, r2, r3
 80049a4:	099b      	lsrs	r3, r3, #6
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	4613      	mov	r3, r2
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049b2:	e002      	b.n	80049ba <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f9      	bne.n	80049b4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049c0:	f7fe fcc6 	bl	8003350 <HAL_GetTick>
 80049c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049c6:	e028      	b.n	8004a1a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fe fef3 	bl	80037b8 <LL_ADC_IsEnabled>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d104      	bne.n	80049e2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fe fec3 	bl	8003768 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049e2:	f7fe fcb5 	bl	8003350 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d914      	bls.n	8004a1a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d00d      	beq.n	8004a1a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a02:	f043 0210 	orr.w	r2, r3, #16
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a0e:	f043 0201 	orr.w	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e007      	b.n	8004a2a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d1cf      	bne.n	80049c8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	8000003f 	.word	0x8000003f
 8004a38:	50000300 	.word	0x50000300
 8004a3c:	20000004 	.word	0x20000004
 8004a40:	053e2d63 	.word	0x053e2d63

08004a44 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fe fec4 	bl	80037de <LL_ADC_IsDisableOngoing>
 8004a56:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe feab 	bl	80037b8 <LL_ADC_IsEnabled>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d047      	beq.n	8004af8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d144      	bne.n	8004af8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 030d 	and.w	r3, r3, #13
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d10c      	bne.n	8004a96 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe fe85 	bl	8003790 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a8e:	f7fe fc5f 	bl	8003350 <HAL_GetTick>
 8004a92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a94:	e029      	b.n	8004aea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a9a:	f043 0210 	orr.w	r2, r3, #16
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa6:	f043 0201 	orr.w	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e023      	b.n	8004afa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ab2:	f7fe fc4d 	bl	8003350 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d914      	bls.n	8004aea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00d      	beq.n	8004aea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad2:	f043 0210 	orr.w	r2, r3, #16
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ade:	f043 0201 	orr.w	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e007      	b.n	8004afa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1dc      	bne.n	8004ab2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b14:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d14b      	bne.n	8004bb4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d021      	beq.n	8004b7a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fd08 	bl	8003550 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d032      	beq.n	8004bac <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d12b      	bne.n	8004bac <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d11f      	bne.n	8004bac <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b70:	f043 0201 	orr.w	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b78:	e018      	b.n	8004bac <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d111      	bne.n	8004bac <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d105      	bne.n	8004bac <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba4:	f043 0201 	orr.w	r2, r3, #1
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f7fd fa5b 	bl	8002068 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004bb2:	e00e      	b.n	8004bd2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f7ff fabf 	bl	8004144 <HAL_ADC_ErrorCallback>
}
 8004bc6:	e004      	b.n	8004bd2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f7ff fa97 	bl	800411c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c14:	f043 0204 	orr.w	r2, r3, #4
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f7ff fa91 	bl	8004144 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c22:	bf00      	nop
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <LL_ADC_IsEnabled>:
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <LL_ADC_IsEnabled+0x18>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <LL_ADC_IsEnabled+0x1a>
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <LL_ADC_StartCalibration>:
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004c62:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	609a      	str	r2, [r3, #8]
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <LL_ADC_IsCalibrationOnGoing>:
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c96:	d101      	bne.n	8004c9c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <LL_ADC_REG_IsConversionOngoing>:
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d101      	bne.n	8004cc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_ADCEx_Calibration_Start+0x1c>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e04d      	b.n	8004d88 <HAL_ADCEx_Calibration_Start+0xb8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff fea5 	bl	8004a44 <ADC_Disable>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d136      	bne.n	8004d72 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d08:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004d0c:	f023 0302 	bic.w	r3, r3, #2
 8004d10:	f043 0202 	orr.w	r2, r3, #2
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6839      	ldr	r1, [r7, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff ff96 	bl	8004c50 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d24:	e014      	b.n	8004d50 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4a18      	ldr	r2, [pc, #96]	@ (8004d90 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d90d      	bls.n	8004d50 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d38:	f023 0312 	bic.w	r3, r3, #18
 8004d3c:	f043 0210 	orr.w	r2, r3, #16
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e01b      	b.n	8004d88 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff ff94 	bl	8004c82 <LL_ADC_IsCalibrationOnGoing>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e2      	bne.n	8004d26 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d64:	f023 0303 	bic.w	r3, r3, #3
 8004d68:	f043 0201 	orr.w	r2, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d70:	e005      	b.n	8004d7e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d76:	f043 0210 	orr.w	r2, r3, #16
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	0004de01 	.word	0x0004de01

08004d94 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b0a1      	sub	sp, #132	@ 0x84
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e08b      	b.n	8004f2e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004e22:	2300      	movs	r3, #0
 8004e24:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e2e:	d102      	bne.n	8004e36 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e30:	4b41      	ldr	r3, [pc, #260]	@ (8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004e32:	60bb      	str	r3, [r7, #8]
 8004e34:	e001      	b.n	8004e3a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e36:	2300      	movs	r3, #0
 8004e38:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e44:	f043 0220 	orr.w	r2, r3, #32
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e06a      	b.n	8004f2e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff ff25 	bl	8004caa <LL_ADC_REG_IsConversionOngoing>
 8004e60:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff ff1f 	bl	8004caa <LL_ADC_REG_IsConversionOngoing>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d14c      	bne.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004e72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d149      	bne.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e78:	4b30      	ldr	r3, [pc, #192]	@ (8004f3c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004e7a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d028      	beq.n	8004ed6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004e84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	6859      	ldr	r1, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e96:	035b      	lsls	r3, r3, #13
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e9e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ea0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ea4:	f7ff fec1 	bl	8004c2a <LL_ADC_IsEnabled>
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	4823      	ldr	r0, [pc, #140]	@ (8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004eac:	f7ff febd 	bl	8004c2a <LL_ADC_IsEnabled>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4323      	orrs	r3, r4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d133      	bne.n	8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004eb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004ec0:	f023 030f 	bic.w	r3, r3, #15
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	6811      	ldr	r1, [r2, #0]
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	6892      	ldr	r2, [r2, #8]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ed2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ed4:	e024      	b.n	8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004ed6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ede:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ee0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ee2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ee6:	f7ff fea0 	bl	8004c2a <LL_ADC_IsEnabled>
 8004eea:	4604      	mov	r4, r0
 8004eec:	4812      	ldr	r0, [pc, #72]	@ (8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004eee:	f7ff fe9c 	bl	8004c2a <LL_ADC_IsEnabled>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	4323      	orrs	r3, r4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d112      	bne.n	8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004efa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004f02:	f023 030f 	bic.w	r3, r3, #15
 8004f06:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004f08:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f0a:	e009      	b.n	8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004f1e:	e000      	b.n	8004f22 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f2a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3784      	adds	r7, #132	@ 0x84
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd90      	pop	{r4, r7, pc}
 8004f36:	bf00      	nop
 8004f38:	50000100 	.word	0x50000100
 8004f3c:	50000300 	.word	0x50000300

08004f40 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004f48:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <LL_EXTI_EnableIT_0_31+0x20>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4904      	ldr	r1, [pc, #16]	@ (8004f60 <LL_EXTI_EnableIT_0_31+0x20>)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	600b      	str	r3, [r1, #0]
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40010400 	.word	0x40010400

08004f64 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004f6c:	4b06      	ldr	r3, [pc, #24]	@ (8004f88 <LL_EXTI_DisableIT_0_31+0x24>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	43db      	mvns	r3, r3
 8004f74:	4904      	ldr	r1, [pc, #16]	@ (8004f88 <LL_EXTI_DisableIT_0_31+0x24>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40010400 	.word	0x40010400

08004f8c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004f94:	4b05      	ldr	r3, [pc, #20]	@ (8004fac <LL_EXTI_EnableEvent_0_31+0x20>)
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	4904      	ldr	r1, [pc, #16]	@ (8004fac <LL_EXTI_EnableEvent_0_31+0x20>)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	604b      	str	r3, [r1, #4]

}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	40010400 	.word	0x40010400

08004fb0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004fb8:	4b06      	ldr	r3, [pc, #24]	@ (8004fd4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	4904      	ldr	r1, [pc, #16]	@ (8004fd4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	604b      	str	r3, [r1, #4]
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40010400 	.word	0x40010400

08004fd8 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004fe0:	4b05      	ldr	r3, [pc, #20]	@ (8004ff8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	4904      	ldr	r1, [pc, #16]	@ (8004ff8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	608b      	str	r3, [r1, #8]

}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40010400 	.word	0x40010400

08004ffc <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005004:	4b06      	ldr	r3, [pc, #24]	@ (8005020 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	43db      	mvns	r3, r3
 800500c:	4904      	ldr	r1, [pc, #16]	@ (8005020 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800500e:	4013      	ands	r3, r2
 8005010:	608b      	str	r3, [r1, #8]

}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40010400 	.word	0x40010400

08005024 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800502c:	4b05      	ldr	r3, [pc, #20]	@ (8005044 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	4904      	ldr	r1, [pc, #16]	@ (8005044 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4313      	orrs	r3, r2
 8005036:	60cb      	str	r3, [r1, #12]
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	40010400 	.word	0x40010400

08005048 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005050:	4b06      	ldr	r3, [pc, #24]	@ (800506c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	43db      	mvns	r3, r3
 8005058:	4904      	ldr	r1, [pc, #16]	@ (800506c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800505a:	4013      	ands	r3, r2
 800505c:	60cb      	str	r3, [r1, #12]
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010400 	.word	0x40010400

08005070 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005078:	4b07      	ldr	r3, [pc, #28]	@ (8005098 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4013      	ands	r3, r2
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	429a      	cmp	r2, r3
 8005084:	d101      	bne.n	800508a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8005086:	2301      	movs	r3, #1
 8005088:	e000      	b.n	800508c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	40010400 	.word	0x40010400

0800509c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80050a4:	4a04      	ldr	r2, [pc, #16]	@ (80050b8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6153      	str	r3, [r2, #20]
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40010400 	.word	0x40010400

080050bc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d102      	bne.n	80050d8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	77fb      	strb	r3, [r7, #31]
 80050d6:	e0bc      	b.n	8005252 <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050e6:	d102      	bne.n	80050ee <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e0b1      	b.n	8005252 <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	7f5b      	ldrb	r3, [r3, #29]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d108      	bne.n	800510a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7fd fcc9 	bl	8002a9c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005114:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	4b48      	ldr	r3, [pc, #288]	@ (800525c <HAL_COMP_Init+0x1a0>)
 800513c:	4013      	ands	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6812      	ldr	r2, [r2, #0]
 8005142:	6979      	ldr	r1, [r7, #20]
 8005144:	430b      	orrs	r3, r1
 8005146:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d016      	beq.n	8005184 <HAL_COMP_Init+0xc8>
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d113      	bne.n	8005184 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800515c:	4b40      	ldr	r3, [pc, #256]	@ (8005260 <HAL_COMP_Init+0x1a4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	099b      	lsrs	r3, r3, #6
 8005162:	4a40      	ldr	r2, [pc, #256]	@ (8005264 <HAL_COMP_Init+0x1a8>)
 8005164:	fba2 2303 	umull	r2, r3, r2, r3
 8005168:	099b      	lsrs	r3, r3, #6
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005176:	e002      	b.n	800517e <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3b01      	subs	r3, #1
 800517c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1f9      	bne.n	8005178 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a37      	ldr	r2, [pc, #220]	@ (8005268 <HAL_COMP_Init+0x1ac>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d012      	beq.n	80051b4 <HAL_COMP_Init+0xf8>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a36      	ldr	r2, [pc, #216]	@ (800526c <HAL_COMP_Init+0x1b0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00a      	beq.n	80051ae <HAL_COMP_Init+0xf2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a34      	ldr	r2, [pc, #208]	@ (8005270 <HAL_COMP_Init+0x1b4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d102      	bne.n	80051a8 <HAL_COMP_Init+0xec>
 80051a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80051a6:	e007      	b.n	80051b8 <HAL_COMP_Init+0xfc>
 80051a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80051ac:	e004      	b.n	80051b8 <HAL_COMP_Init+0xfc>
 80051ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80051b2:	e001      	b.n	80051b8 <HAL_COMP_Init+0xfc>
 80051b4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80051b8:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d037      	beq.n	8005236 <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80051d2:	6938      	ldr	r0, [r7, #16]
 80051d4:	f7ff ff00 	bl	8004fd8 <LL_EXTI_EnableRisingTrig_0_31>
 80051d8:	e002      	b.n	80051e0 <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80051da:	6938      	ldr	r0, [r7, #16]
 80051dc:	f7ff ff0e 	bl	8004ffc <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80051ec:	6938      	ldr	r0, [r7, #16]
 80051ee:	f7ff ff19 	bl	8005024 <LL_EXTI_EnableFallingTrig_0_31>
 80051f2:	e002      	b.n	80051fa <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80051f4:	6938      	ldr	r0, [r7, #16]
 80051f6:	f7ff ff27 	bl	8005048 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 80051fa:	6938      	ldr	r0, [r7, #16]
 80051fc:	f7ff ff4e 	bl	800509c <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 800520c:	6938      	ldr	r0, [r7, #16]
 800520e:	f7ff febd 	bl	8004f8c <LL_EXTI_EnableEvent_0_31>
 8005212:	e002      	b.n	800521a <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005214:	6938      	ldr	r0, [r7, #16]
 8005216:	f7ff fecb 	bl	8004fb0 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 8005226:	6938      	ldr	r0, [r7, #16]
 8005228:	f7ff fe8a 	bl	8004f40 <LL_EXTI_EnableIT_0_31>
 800522c:	e009      	b.n	8005242 <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 800522e:	6938      	ldr	r0, [r7, #16]
 8005230:	f7ff fe98 	bl	8004f64 <LL_EXTI_DisableIT_0_31>
 8005234:	e005      	b.n	8005242 <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 8005236:	6938      	ldr	r0, [r7, #16]
 8005238:	f7ff feba 	bl	8004fb0 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 800523c:	6938      	ldr	r0, [r7, #16]
 800523e:	f7ff fe91 	bl	8004f64 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	7f5b      	ldrb	r3, [r3, #29]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8005252:	7ffb      	ldrb	r3, [r7, #31]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3720      	adds	r7, #32
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	ff007e0f 	.word	0xff007e0f
 8005260:	20000004 	.word	0x20000004
 8005264:	053e2d63 	.word	0x053e2d63
 8005268:	40010200 	.word	0x40010200
 800526c:	40010204 	.word	0x40010204
 8005270:	40010208 	.word	0x40010208

08005274 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800527c:	2300      	movs	r3, #0
 800527e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d102      	bne.n	8005290 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	73fb      	strb	r3, [r7, #15]
 800528e:	e02e      	b.n	80052ee <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800529a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800529e:	d102      	bne.n	80052a6 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
 80052a4:	e023      	b.n	80052ee <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	7f5b      	ldrb	r3, [r3, #29]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d11c      	bne.n	80052ea <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 80052c6:	4b0d      	ldr	r3, [pc, #52]	@ (80052fc <HAL_COMP_Start+0x88>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a0d      	ldr	r2, [pc, #52]	@ (8005300 <HAL_COMP_Start+0x8c>)
 80052cc:	fba2 2303 	umull	r2, r3, r2, r3
 80052d0:	0cda      	lsrs	r2, r3, #19
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80052da:	e002      	b.n	80052e2 <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	3b01      	subs	r3, #1
 80052e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f9      	bne.n	80052dc <HAL_COMP_Start+0x68>
 80052e8:	e001      	b.n	80052ee <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	20000004 	.word	0x20000004
 8005300:	431bde83 	.word	0x431bde83

08005304 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a17      	ldr	r2, [pc, #92]	@ (8005370 <HAL_COMP_IRQHandler+0x6c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d012      	beq.n	800533c <HAL_COMP_IRQHandler+0x38>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a16      	ldr	r2, [pc, #88]	@ (8005374 <HAL_COMP_IRQHandler+0x70>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00a      	beq.n	8005336 <HAL_COMP_IRQHandler+0x32>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a14      	ldr	r2, [pc, #80]	@ (8005378 <HAL_COMP_IRQHandler+0x74>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d102      	bne.n	8005330 <HAL_COMP_IRQHandler+0x2c>
 800532a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800532e:	e007      	b.n	8005340 <HAL_COMP_IRQHandler+0x3c>
 8005330:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005334:	e004      	b.n	8005340 <HAL_COMP_IRQHandler+0x3c>
 8005336:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800533a:	e001      	b.n	8005340 <HAL_COMP_IRQHandler+0x3c>
 800533c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005340:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8005346:	68b8      	ldr	r0, [r7, #8]
 8005348:	f7ff fe92 	bl	8005070 <LL_EXTI_IsActiveFlag_0_31>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 8005352:	2301      	movs	r3, #1
 8005354:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d005      	beq.n	8005368 <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 800535c:	68b8      	ldr	r0, [r7, #8]
 800535e:	f7ff fe9d 	bl	800509c <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fd f8a4 	bl	80024b0 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40010200 	.word	0x40010200
 8005374:	40010204 	.word	0x40010204
 8005378:	40010208 	.word	0x40010208

0800537c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800538c:	4b0c      	ldr	r3, [pc, #48]	@ (80053c0 <__NVIC_SetPriorityGrouping+0x44>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005398:	4013      	ands	r3, r2
 800539a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80053a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053ae:	4a04      	ldr	r2, [pc, #16]	@ (80053c0 <__NVIC_SetPriorityGrouping+0x44>)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	60d3      	str	r3, [r2, #12]
}
 80053b4:	bf00      	nop
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	e000ed00 	.word	0xe000ed00

080053c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053c8:	4b04      	ldr	r3, [pc, #16]	@ (80053dc <__NVIC_GetPriorityGrouping+0x18>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	0a1b      	lsrs	r3, r3, #8
 80053ce:	f003 0307 	and.w	r3, r3, #7
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	e000ed00 	.word	0xe000ed00

080053e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	db0b      	blt.n	800540a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	f003 021f 	and.w	r2, r3, #31
 80053f8:	4907      	ldr	r1, [pc, #28]	@ (8005418 <__NVIC_EnableIRQ+0x38>)
 80053fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	2001      	movs	r0, #1
 8005402:	fa00 f202 	lsl.w	r2, r0, r2
 8005406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	e000e100 	.word	0xe000e100

0800541c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	6039      	str	r1, [r7, #0]
 8005426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542c:	2b00      	cmp	r3, #0
 800542e:	db0a      	blt.n	8005446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	b2da      	uxtb	r2, r3
 8005434:	490c      	ldr	r1, [pc, #48]	@ (8005468 <__NVIC_SetPriority+0x4c>)
 8005436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543a:	0112      	lsls	r2, r2, #4
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	440b      	add	r3, r1
 8005440:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005444:	e00a      	b.n	800545c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	b2da      	uxtb	r2, r3
 800544a:	4908      	ldr	r1, [pc, #32]	@ (800546c <__NVIC_SetPriority+0x50>)
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	3b04      	subs	r3, #4
 8005454:	0112      	lsls	r2, r2, #4
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	440b      	add	r3, r1
 800545a:	761a      	strb	r2, [r3, #24]
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	e000e100 	.word	0xe000e100
 800546c:	e000ed00 	.word	0xe000ed00

08005470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005470:	b480      	push	{r7}
 8005472:	b089      	sub	sp, #36	@ 0x24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f1c3 0307 	rsb	r3, r3, #7
 800548a:	2b04      	cmp	r3, #4
 800548c:	bf28      	it	cs
 800548e:	2304      	movcs	r3, #4
 8005490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	3304      	adds	r3, #4
 8005496:	2b06      	cmp	r3, #6
 8005498:	d902      	bls.n	80054a0 <NVIC_EncodePriority+0x30>
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3b03      	subs	r3, #3
 800549e:	e000      	b.n	80054a2 <NVIC_EncodePriority+0x32>
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054a4:	f04f 32ff 	mov.w	r2, #4294967295
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43da      	mvns	r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	401a      	ands	r2, r3
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054b8:	f04f 31ff 	mov.w	r1, #4294967295
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	fa01 f303 	lsl.w	r3, r1, r3
 80054c2:	43d9      	mvns	r1, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c8:	4313      	orrs	r3, r2
         );
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3724      	adds	r7, #36	@ 0x24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054e8:	d301      	bcc.n	80054ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054ea:	2301      	movs	r3, #1
 80054ec:	e00f      	b.n	800550e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005518 <SysTick_Config+0x40>)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054f6:	210f      	movs	r1, #15
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	f7ff ff8e 	bl	800541c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005500:	4b05      	ldr	r3, [pc, #20]	@ (8005518 <SysTick_Config+0x40>)
 8005502:	2200      	movs	r2, #0
 8005504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005506:	4b04      	ldr	r3, [pc, #16]	@ (8005518 <SysTick_Config+0x40>)
 8005508:	2207      	movs	r2, #7
 800550a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	e000e010 	.word	0xe000e010

0800551c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff ff29 	bl	800537c <__NVIC_SetPriorityGrouping>
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b086      	sub	sp, #24
 8005536:	af00      	add	r7, sp, #0
 8005538:	4603      	mov	r3, r0
 800553a:	60b9      	str	r1, [r7, #8]
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005540:	f7ff ff40 	bl	80053c4 <__NVIC_GetPriorityGrouping>
 8005544:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	6978      	ldr	r0, [r7, #20]
 800554c:	f7ff ff90 	bl	8005470 <NVIC_EncodePriority>
 8005550:	4602      	mov	r2, r0
 8005552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005556:	4611      	mov	r1, r2
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff ff5f 	bl	800541c <__NVIC_SetPriority>
}
 800555e:	bf00      	nop
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	4603      	mov	r3, r0
 800556e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff ff33 	bl	80053e0 <__NVIC_EnableIRQ>
}
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff ffa4 	bl	80054d8 <SysTick_Config>
 8005590:	4603      	mov	r3, r0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e014      	b.n	80055d6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	791b      	ldrb	r3, [r3, #4]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d105      	bne.n	80055c2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7fd fac9 	bl	8002b54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2202      	movs	r2, #2
 80055c6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e056      	b.n	80056a2 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	795b      	ldrb	r3, [r3, #5]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_DAC_Start+0x20>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e050      	b.n	80056a2 <HAL_DAC_Start+0xc2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2202      	movs	r2, #2
 800560a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6819      	ldr	r1, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2201      	movs	r2, #1
 800561a:	409a      	lsls	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005624:	4b22      	ldr	r3, [pc, #136]	@ (80056b0 <HAL_DAC_Start+0xd0>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	099b      	lsrs	r3, r3, #6
 800562a:	4a22      	ldr	r2, [pc, #136]	@ (80056b4 <HAL_DAC_Start+0xd4>)
 800562c:	fba2 2303 	umull	r2, r3, r2, r3
 8005630:	099b      	lsrs	r3, r3, #6
 8005632:	3301      	adds	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005636:	e002      	b.n	800563e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3b01      	subs	r3, #1
 800563c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f9      	bne.n	8005638 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10f      	bne.n	800566a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005654:	2b02      	cmp	r3, #2
 8005656:	d11d      	bne.n	8005694 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	e014      	b.n	8005694 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2102      	movs	r1, #2
 800567c:	fa01 f303 	lsl.w	r3, r1, r3
 8005680:	429a      	cmp	r2, r3
 8005682:	d107      	bne.n	8005694 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0202 	orr.w	r2, r2, #2
 8005692:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	20000004 	.word	0x20000004
 80056b4:	053e2d63 	.word	0x053e2d63

080056b8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ce:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01d      	beq.n	8005716 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d018      	beq.n	8005716 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2204      	movs	r2, #4
 80056e8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f043 0201 	orr.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80056fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800570e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f854 	bl	80057be <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01d      	beq.n	800575c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d018      	beq.n	800575c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2204      	movs	r2, #4
 800572e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f043 0202 	orr.w	r2, r3, #2
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005744:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005754:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f9f6 	bl	8005b48 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e018      	b.n	80057b2 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d105      	bne.n	800579e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4413      	add	r3, r2
 8005798:	3308      	adds	r3, #8
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e004      	b.n	80057a8 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4413      	add	r3, r2
 80057a4:	3314      	adds	r3, #20
 80057a6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	461a      	mov	r2, r3
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08a      	sub	sp, #40	@ 0x28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <HAL_DAC_ConfigChannel+0x1c>
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e1a1      	b.n	8005b38 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	795b      	ldrb	r3, [r3, #5]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <HAL_DAC_ConfigChannel+0x32>
 8005802:	2302      	movs	r3, #2
 8005804:	e198      	b.n	8005b38 <HAL_DAC_ConfigChannel+0x364>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2201      	movs	r2, #1
 800580a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2202      	movs	r2, #2
 8005810:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	2b04      	cmp	r3, #4
 8005818:	d17a      	bne.n	8005910 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800581a:	f7fd fd99 	bl	8003350 <HAL_GetTick>
 800581e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d13d      	bne.n	80058a2 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005826:	e018      	b.n	800585a <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005828:	f7fd fd92 	bl	8003350 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b01      	cmp	r3, #1
 8005834:	d911      	bls.n	800585a <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f043 0208 	orr.w	r2, r3, #8
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2203      	movs	r2, #3
 8005854:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e16e      	b.n	8005b38 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1df      	bne.n	8005828 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005870:	641a      	str	r2, [r3, #64]	@ 0x40
 8005872:	e020      	b.n	80058b6 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005874:	f7fd fd6c 	bl	8003350 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	d90f      	bls.n	80058a2 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005888:	2b00      	cmp	r3, #0
 800588a:	da0a      	bge.n	80058a2 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f043 0208 	orr.w	r2, r3, #8
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2203      	movs	r2, #3
 800589c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e14a      	b.n	8005b38 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	dbe3      	blt.n	8005874 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80058c6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ca:	43db      	mvns	r3, r3
 80058cc:	ea02 0103 	and.w	r1, r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	409a      	lsls	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	21ff      	movs	r1, #255	@ 0xff
 80058f2:	fa01 f303 	lsl.w	r3, r1, r3
 80058f6:	43db      	mvns	r3, r3
 80058f8:	ea02 0103 	and.w	r1, r2, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	409a      	lsls	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d11d      	bne.n	8005954 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f003 0310 	and.w	r3, r3, #16
 8005926:	221f      	movs	r2, #31
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	43db      	mvns	r3, r3
 800592e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005930:	4013      	ands	r3, r2
 8005932:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
 8005946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005948:	4313      	orrs	r3, r2
 800594a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005952:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2207      	movs	r2, #7
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	43db      	mvns	r3, r3
 800596a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800596c:	4013      	ands	r3, r2
 800596e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d102      	bne.n	800597e <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8005978:	2300      	movs	r3, #0
 800597a:	623b      	str	r3, [r7, #32]
 800597c:	e00f      	b.n	800599e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d102      	bne.n	800598c <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005986:	2301      	movs	r3, #1
 8005988:	623b      	str	r3, [r7, #32]
 800598a:	e008      	b.n	800599e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d102      	bne.n	800599a <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005994:	2301      	movs	r3, #1
 8005996:	623b      	str	r3, [r7, #32]
 8005998:	e001      	b.n	800599e <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800599a:	2300      	movs	r3, #0
 800599c:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	6a3a      	ldr	r2, [r7, #32]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	43db      	mvns	r3, r3
 80059be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059c0:	4013      	ands	r3, r2
 80059c2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	791b      	ldrb	r3, [r3, #4]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d102      	bne.n	80059d2 <HAL_DAC_ConfigChannel+0x1fe>
 80059cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059d0:	e000      	b.n	80059d4 <HAL_DAC_ConfigChannel+0x200>
 80059d2:	2300      	movs	r3, #0
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	43db      	mvns	r3, r3
 80059ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ec:	4013      	ands	r3, r2
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	795b      	ldrb	r3, [r3, #5]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d102      	bne.n	80059fe <HAL_DAC_ConfigChannel+0x22a>
 80059f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059fc:	e000      	b.n	8005a00 <HAL_DAC_ConfigChannel+0x22c>
 80059fe:	2300      	movs	r3, #0
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d114      	bne.n	8005a40 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005a16:	f001 fb41 	bl	800709c <HAL_RCC_GetHCLKFreq>
 8005a1a:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4a48      	ldr	r2, [pc, #288]	@ (8005b40 <HAL_DAC_ConfigChannel+0x36c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d904      	bls.n	8005a2e <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a2c:	e00f      	b.n	8005a4e <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	4a44      	ldr	r2, [pc, #272]	@ (8005b44 <HAL_DAC_ConfigChannel+0x370>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d90a      	bls.n	8005a4c <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a3e:	e006      	b.n	8005a4e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a46:	4313      	orrs	r3, r2
 8005a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a4a:	e000      	b.n	8005a4e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005a4c:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6819      	ldr	r1, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005a78:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7c:	43da      	mvns	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	400a      	ands	r2, r1
 8005a84:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6819      	ldr	r1, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	22c0      	movs	r2, #192	@ 0xc0
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	43da      	mvns	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	400a      	ands	r2, r1
 8005ade:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	089b      	lsrs	r3, r3, #2
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	089b      	lsrs	r3, r3, #2
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f003 0310 	and.w	r3, r3, #16
 8005b0a:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b12:	43db      	mvns	r3, r3
 8005b14:	ea02 0103 	and.w	r1, r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	409a      	lsls	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005b36:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3728      	adds	r7, #40	@ 0x28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	09896800 	.word	0x09896800
 8005b44:	04c4b400 	.word	0x04c4b400

08005b48 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e08d      	b.n	8005c8a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	4b47      	ldr	r3, [pc, #284]	@ (8005c94 <HAL_DMA_Init+0x138>)
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d80f      	bhi.n	8005b9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4b45      	ldr	r3, [pc, #276]	@ (8005c98 <HAL_DMA_Init+0x13c>)
 8005b82:	4413      	add	r3, r2
 8005b84:	4a45      	ldr	r2, [pc, #276]	@ (8005c9c <HAL_DMA_Init+0x140>)
 8005b86:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8a:	091b      	lsrs	r3, r3, #4
 8005b8c:	009a      	lsls	r2, r3, #2
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a42      	ldr	r2, [pc, #264]	@ (8005ca0 <HAL_DMA_Init+0x144>)
 8005b96:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b98:	e00e      	b.n	8005bb8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	4b40      	ldr	r3, [pc, #256]	@ (8005ca4 <HAL_DMA_Init+0x148>)
 8005ba2:	4413      	add	r3, r2
 8005ba4:	4a3d      	ldr	r2, [pc, #244]	@ (8005c9c <HAL_DMA_Init+0x140>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	091b      	lsrs	r3, r3, #4
 8005bac:	009a      	lsls	r2, r3, #2
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ca8 <HAL_DMA_Init+0x14c>)
 8005bb6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fa76 	bl	80060fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c18:	d102      	bne.n	8005c20 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c28:	b2d2      	uxtb	r2, r2
 8005c2a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c34:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d010      	beq.n	8005c60 <HAL_DMA_Init+0x104>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d80c      	bhi.n	8005c60 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fa96 	bl	8006178 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c5c:	605a      	str	r2, [r3, #4]
 8005c5e:	e008      	b.n	8005c72 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	40020407 	.word	0x40020407
 8005c98:	bffdfff8 	.word	0xbffdfff8
 8005c9c:	cccccccd 	.word	0xcccccccd
 8005ca0:	40020000 	.word	0x40020000
 8005ca4:	bffdfbf8 	.word	0xbffdfbf8
 8005ca8:	40020400 	.word	0x40020400

08005cac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_DMA_Start_IT+0x20>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e066      	b.n	8005d9a <HAL_DMA_Start_IT+0xee>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d155      	bne.n	8005d8c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f9bb 	bl	8006080 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 020e 	orr.w	r2, r2, #14
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	e00f      	b.n	8005d44 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0204 	bic.w	r2, r2, #4
 8005d32:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 020a 	orr.w	r2, r2, #10
 8005d42:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d007      	beq.n	8005d62 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d60:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d007      	beq.n	8005d7a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d78:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f042 0201 	orr.w	r2, r2, #1
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e005      	b.n	8005d98 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d94:	2302      	movs	r3, #2
 8005d96:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d005      	beq.n	8005dc6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2204      	movs	r2, #4
 8005dbe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
 8005dc4:	e037      	b.n	8005e36 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 020e 	bic.w	r2, r2, #14
 8005dd4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005de0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005de4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0201 	bic.w	r2, r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfa:	f003 021f 	and.w	r2, r3, #31
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e02:	2101      	movs	r1, #1
 8005e04:	fa01 f202 	lsl.w	r2, r1, r2
 8005e08:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e12:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00c      	beq.n	8005e36 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e2a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e34:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d00d      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2204      	movs	r2, #4
 8005e70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	73fb      	strb	r3, [r7, #15]
 8005e86:	e047      	b.n	8005f18 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 020e 	bic.w	r2, r2, #14
 8005e96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0201 	bic.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eb2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005eb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebc:	f003 021f 	and.w	r2, r3, #31
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8005eca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ed4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00c      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005eec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ef6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	4798      	blx	r3
    }
  }
  return status;
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	2204      	movs	r2, #4
 8005f44:	409a      	lsls	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d026      	beq.n	8005f9c <HAL_DMA_IRQHandler+0x7a>
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d021      	beq.n	8005f9c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d107      	bne.n	8005f76 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0204 	bic.w	r2, r2, #4
 8005f74:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7a:	f003 021f 	and.w	r2, r3, #31
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f82:	2104      	movs	r1, #4
 8005f84:	fa01 f202 	lsl.w	r2, r1, r2
 8005f88:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d071      	beq.n	8006076 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005f9a:	e06c      	b.n	8006076 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa0:	f003 031f 	and.w	r3, r3, #31
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	409a      	lsls	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4013      	ands	r3, r2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d02e      	beq.n	800600e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d029      	beq.n	800600e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0320 	and.w	r3, r3, #32
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10b      	bne.n	8005fe0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 020a 	bic.w	r2, r2, #10
 8005fd6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe4:	f003 021f 	and.w	r2, r3, #31
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fec:	2102      	movs	r1, #2
 8005fee:	fa01 f202 	lsl.w	r2, r1, r2
 8005ff2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006000:	2b00      	cmp	r3, #0
 8006002:	d038      	beq.n	8006076 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800600c:	e033      	b.n	8006076 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	2208      	movs	r2, #8
 8006018:	409a      	lsls	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4013      	ands	r3, r2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d02a      	beq.n	8006078 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d025      	beq.n	8006078 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 020e 	bic.w	r2, r2, #14
 800603a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006040:	f003 021f 	and.w	r2, r3, #31
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006048:	2101      	movs	r1, #1
 800604a:	fa01 f202 	lsl.w	r2, r1, r2
 800604e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006076:	bf00      	nop
 8006078:	bf00      	nop
}
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006096:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609c:	2b00      	cmp	r3, #0
 800609e:	d004      	beq.n	80060aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80060a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ae:	f003 021f 	and.w	r2, r3, #31
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b6:	2101      	movs	r1, #1
 80060b8:	fa01 f202 	lsl.w	r2, r1, r2
 80060bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	2b10      	cmp	r3, #16
 80060cc:	d108      	bne.n	80060e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80060de:	e007      	b.n	80060f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	60da      	str	r2, [r3, #12]
}
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	461a      	mov	r2, r3
 800610a:	4b16      	ldr	r3, [pc, #88]	@ (8006164 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800610c:	429a      	cmp	r2, r3
 800610e:	d802      	bhi.n	8006116 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006110:	4b15      	ldr	r3, [pc, #84]	@ (8006168 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	e001      	b.n	800611a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8006116:	4b15      	ldr	r3, [pc, #84]	@ (800616c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006118:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	3b08      	subs	r3, #8
 8006126:	4a12      	ldr	r2, [pc, #72]	@ (8006170 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006128:	fba2 2303 	umull	r2, r3, r2, r3
 800612c:	091b      	lsrs	r3, r3, #4
 800612e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006134:	089b      	lsrs	r3, r3, #2
 8006136:	009a      	lsls	r2, r3, #2
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	4413      	add	r3, r2
 800613c:	461a      	mov	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a0b      	ldr	r2, [pc, #44]	@ (8006174 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006146:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f003 031f 	and.w	r3, r3, #31
 800614e:	2201      	movs	r2, #1
 8006150:	409a      	lsls	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	40020407 	.word	0x40020407
 8006168:	40020800 	.word	0x40020800
 800616c:	40020820 	.word	0x40020820
 8006170:	cccccccd 	.word	0xcccccccd
 8006174:	40020880 	.word	0x40020880

08006178 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4b0b      	ldr	r3, [pc, #44]	@ (80061b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	461a      	mov	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a08      	ldr	r2, [pc, #32]	@ (80061bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800619a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3b01      	subs	r3, #1
 80061a0:	f003 031f 	and.w	r3, r3, #31
 80061a4:	2201      	movs	r2, #1
 80061a6:	409a      	lsls	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	1000823f 	.word	0x1000823f
 80061bc:	40020940 	.word	0x40020940

080061c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80061ce:	e15a      	b.n	8006486 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	2101      	movs	r1, #1
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	fa01 f303 	lsl.w	r3, r1, r3
 80061dc:	4013      	ands	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 814c 	beq.w	8006480 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f003 0303 	and.w	r3, r3, #3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d005      	beq.n	8006200 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d130      	bne.n	8006262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	2203      	movs	r2, #3
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	43db      	mvns	r3, r3
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4013      	ands	r3, r2
 8006216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	fa02 f303 	lsl.w	r3, r2, r3
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	4313      	orrs	r3, r2
 8006228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006236:	2201      	movs	r2, #1
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	fa02 f303 	lsl.w	r3, r2, r3
 800623e:	43db      	mvns	r3, r3
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4013      	ands	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	091b      	lsrs	r3, r3, #4
 800624c:	f003 0201 	and.w	r2, r3, #1
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	2b03      	cmp	r3, #3
 800626c:	d017      	beq.n	800629e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	2203      	movs	r2, #3
 800627a:	fa02 f303 	lsl.w	r3, r2, r3
 800627e:	43db      	mvns	r3, r3
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4013      	ands	r3, r2
 8006284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d123      	bne.n	80062f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	08da      	lsrs	r2, r3, #3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3208      	adds	r2, #8
 80062b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	220f      	movs	r2, #15
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	43db      	mvns	r3, r3
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4013      	ands	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	08da      	lsrs	r2, r3, #3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3208      	adds	r2, #8
 80062ec:	6939      	ldr	r1, [r7, #16]
 80062ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	2203      	movs	r2, #3
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	43db      	mvns	r3, r3
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4013      	ands	r3, r2
 8006308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f003 0203 	and.w	r2, r3, #3
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	fa02 f303 	lsl.w	r3, r2, r3
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 80a6 	beq.w	8006480 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006334:	4b5b      	ldr	r3, [pc, #364]	@ (80064a4 <HAL_GPIO_Init+0x2e4>)
 8006336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006338:	4a5a      	ldr	r2, [pc, #360]	@ (80064a4 <HAL_GPIO_Init+0x2e4>)
 800633a:	f043 0301 	orr.w	r3, r3, #1
 800633e:	6613      	str	r3, [r2, #96]	@ 0x60
 8006340:	4b58      	ldr	r3, [pc, #352]	@ (80064a4 <HAL_GPIO_Init+0x2e4>)
 8006342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800634c:	4a56      	ldr	r2, [pc, #344]	@ (80064a8 <HAL_GPIO_Init+0x2e8>)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	089b      	lsrs	r3, r3, #2
 8006352:	3302      	adds	r3, #2
 8006354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006358:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f003 0303 	and.w	r3, r3, #3
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	220f      	movs	r2, #15
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	43db      	mvns	r3, r3
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	4013      	ands	r3, r2
 800636e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006376:	d01f      	beq.n	80063b8 <HAL_GPIO_Init+0x1f8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a4c      	ldr	r2, [pc, #304]	@ (80064ac <HAL_GPIO_Init+0x2ec>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d019      	beq.n	80063b4 <HAL_GPIO_Init+0x1f4>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a4b      	ldr	r2, [pc, #300]	@ (80064b0 <HAL_GPIO_Init+0x2f0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d013      	beq.n	80063b0 <HAL_GPIO_Init+0x1f0>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a4a      	ldr	r2, [pc, #296]	@ (80064b4 <HAL_GPIO_Init+0x2f4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00d      	beq.n	80063ac <HAL_GPIO_Init+0x1ec>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a49      	ldr	r2, [pc, #292]	@ (80064b8 <HAL_GPIO_Init+0x2f8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d007      	beq.n	80063a8 <HAL_GPIO_Init+0x1e8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a48      	ldr	r2, [pc, #288]	@ (80064bc <HAL_GPIO_Init+0x2fc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d101      	bne.n	80063a4 <HAL_GPIO_Init+0x1e4>
 80063a0:	2305      	movs	r3, #5
 80063a2:	e00a      	b.n	80063ba <HAL_GPIO_Init+0x1fa>
 80063a4:	2306      	movs	r3, #6
 80063a6:	e008      	b.n	80063ba <HAL_GPIO_Init+0x1fa>
 80063a8:	2304      	movs	r3, #4
 80063aa:	e006      	b.n	80063ba <HAL_GPIO_Init+0x1fa>
 80063ac:	2303      	movs	r3, #3
 80063ae:	e004      	b.n	80063ba <HAL_GPIO_Init+0x1fa>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e002      	b.n	80063ba <HAL_GPIO_Init+0x1fa>
 80063b4:	2301      	movs	r3, #1
 80063b6:	e000      	b.n	80063ba <HAL_GPIO_Init+0x1fa>
 80063b8:	2300      	movs	r3, #0
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	f002 0203 	and.w	r2, r2, #3
 80063c0:	0092      	lsls	r2, r2, #2
 80063c2:	4093      	lsls	r3, r2
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063ca:	4937      	ldr	r1, [pc, #220]	@ (80064a8 <HAL_GPIO_Init+0x2e8>)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	089b      	lsrs	r3, r3, #2
 80063d0:	3302      	adds	r3, #2
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063d8:	4b39      	ldr	r3, [pc, #228]	@ (80064c0 <HAL_GPIO_Init+0x300>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	43db      	mvns	r3, r3
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	4013      	ands	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063fc:	4a30      	ldr	r2, [pc, #192]	@ (80064c0 <HAL_GPIO_Init+0x300>)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006402:	4b2f      	ldr	r3, [pc, #188]	@ (80064c0 <HAL_GPIO_Init+0x300>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	43db      	mvns	r3, r3
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	4013      	ands	r3, r2
 8006410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006426:	4a26      	ldr	r2, [pc, #152]	@ (80064c0 <HAL_GPIO_Init+0x300>)
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800642c:	4b24      	ldr	r3, [pc, #144]	@ (80064c0 <HAL_GPIO_Init+0x300>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	43db      	mvns	r3, r3
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4013      	ands	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4313      	orrs	r3, r2
 800644e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006450:	4a1b      	ldr	r2, [pc, #108]	@ (80064c0 <HAL_GPIO_Init+0x300>)
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006456:	4b1a      	ldr	r3, [pc, #104]	@ (80064c0 <HAL_GPIO_Init+0x300>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	43db      	mvns	r3, r3
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4013      	ands	r3, r2
 8006464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800647a:	4a11      	ldr	r2, [pc, #68]	@ (80064c0 <HAL_GPIO_Init+0x300>)
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	3301      	adds	r3, #1
 8006484:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	f47f ae9d 	bne.w	80061d0 <HAL_GPIO_Init+0x10>
  }
}
 8006496:	bf00      	nop
 8006498:	bf00      	nop
 800649a:	371c      	adds	r7, #28
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40021000 	.word	0x40021000
 80064a8:	40010000 	.word	0x40010000
 80064ac:	48000400 	.word	0x48000400
 80064b0:	48000800 	.word	0x48000800
 80064b4:	48000c00 	.word	0x48000c00
 80064b8:	48001000 	.word	0x48001000
 80064bc:	48001400 	.word	0x48001400
 80064c0:	40010400 	.word	0x40010400

080064c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	807b      	strh	r3, [r7, #2]
 80064d0:	4613      	mov	r3, r2
 80064d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064d4:	787b      	ldrb	r3, [r7, #1]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064da:	887a      	ldrh	r2, [r7, #2]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80064e0:	e002      	b.n	80064e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064e2:	887a      	ldrh	r2, [r7, #2]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80064fc:	4b2b      	ldr	r3, [pc, #172]	@ (80065ac <HAL_PWR_ConfigPVD+0xb8>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f023 020e 	bic.w	r2, r3, #14
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4928      	ldr	r1, [pc, #160]	@ (80065ac <HAL_PWR_ConfigPVD+0xb8>)
 800650a:	4313      	orrs	r3, r2
 800650c:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800650e:	4b28      	ldr	r3, [pc, #160]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	4a27      	ldr	r2, [pc, #156]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 8006514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006518:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800651a:	4b25      	ldr	r3, [pc, #148]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a24      	ldr	r2, [pc, #144]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 8006520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006524:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8006526:	4b22      	ldr	r3, [pc, #136]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	4a21      	ldr	r2, [pc, #132]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 800652c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006530:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8006532:	4b1f      	ldr	r3, [pc, #124]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	4a1e      	ldr	r2, [pc, #120]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 8006538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800653c:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800654a:	4b19      	ldr	r3, [pc, #100]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a18      	ldr	r2, [pc, #96]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 8006550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006554:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8006562:	4b13      	ldr	r3, [pc, #76]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	4a12      	ldr	r2, [pc, #72]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 8006568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800656c:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d005      	beq.n	8006586 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800657a:	4b0d      	ldr	r3, [pc, #52]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	4a0c      	ldr	r2, [pc, #48]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 8006580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006584:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8006592:	4b07      	ldr	r3, [pc, #28]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	4a06      	ldr	r2, [pc, #24]	@ (80065b0 <HAL_PWR_ConfigPVD+0xbc>)
 8006598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800659c:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	40007000 	.word	0x40007000
 80065b0:	40010400 	.word	0x40010400

080065b4 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80065b8:	4b05      	ldr	r3, [pc, #20]	@ (80065d0 <HAL_PWR_EnablePVD+0x1c>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	4a04      	ldr	r2, [pc, #16]	@ (80065d0 <HAL_PWR_EnablePVD+0x1c>)
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	6053      	str	r3, [r2, #4]
}
 80065c4:	bf00      	nop
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40007000 	.word	0x40007000

080065d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d141      	bne.n	8006666 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80065e2:	4b4b      	ldr	r3, [pc, #300]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80065ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ee:	d131      	bne.n	8006654 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065f0:	4b47      	ldr	r3, [pc, #284]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065f6:	4a46      	ldr	r2, [pc, #280]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006600:	4b43      	ldr	r3, [pc, #268]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006608:	4a41      	ldr	r2, [pc, #260]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800660a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800660e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006610:	4b40      	ldr	r3, [pc, #256]	@ (8006714 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2232      	movs	r2, #50	@ 0x32
 8006616:	fb02 f303 	mul.w	r3, r2, r3
 800661a:	4a3f      	ldr	r2, [pc, #252]	@ (8006718 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800661c:	fba2 2303 	umull	r2, r3, r2, r3
 8006620:	0c9b      	lsrs	r3, r3, #18
 8006622:	3301      	adds	r3, #1
 8006624:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006626:	e002      	b.n	800662e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3b01      	subs	r3, #1
 800662c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800662e:	4b38      	ldr	r3, [pc, #224]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800663a:	d102      	bne.n	8006642 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1f2      	bne.n	8006628 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006642:	4b33      	ldr	r3, [pc, #204]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800664a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800664e:	d158      	bne.n	8006702 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e057      	b.n	8006704 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006654:	4b2e      	ldr	r3, [pc, #184]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800665a:	4a2d      	ldr	r2, [pc, #180]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800665c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006660:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006664:	e04d      	b.n	8006702 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800666c:	d141      	bne.n	80066f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800666e:	4b28      	ldr	r3, [pc, #160]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800667a:	d131      	bne.n	80066e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800667c:	4b24      	ldr	r3, [pc, #144]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800667e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006682:	4a23      	ldr	r2, [pc, #140]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006688:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800668c:	4b20      	ldr	r3, [pc, #128]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006694:	4a1e      	ldr	r2, [pc, #120]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006696:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800669a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800669c:	4b1d      	ldr	r3, [pc, #116]	@ (8006714 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2232      	movs	r2, #50	@ 0x32
 80066a2:	fb02 f303 	mul.w	r3, r2, r3
 80066a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006718 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80066a8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ac:	0c9b      	lsrs	r3, r3, #18
 80066ae:	3301      	adds	r3, #1
 80066b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066b2:	e002      	b.n	80066ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066ba:	4b15      	ldr	r3, [pc, #84]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066c6:	d102      	bne.n	80066ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1f2      	bne.n	80066b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066ce:	4b10      	ldr	r3, [pc, #64]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066da:	d112      	bne.n	8006702 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e011      	b.n	8006704 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80066f0:	e007      	b.n	8006702 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80066f2:	4b07      	ldr	r3, [pc, #28]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80066fa:	4a05      	ldr	r2, [pc, #20]	@ (8006710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006700:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	40007000 	.word	0x40007000
 8006714:	20000004 	.word	0x20000004
 8006718:	431bde83 	.word	0x431bde83

0800671c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006720:	4b05      	ldr	r3, [pc, #20]	@ (8006738 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	4a04      	ldr	r2, [pc, #16]	@ (8006738 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006726:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800672a:	6093      	str	r3, [r2, #8]
}
 800672c:	bf00      	nop
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40007000 	.word	0x40007000

0800673c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e2fe      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d075      	beq.n	8006846 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800675a:	4b97      	ldr	r3, [pc, #604]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 030c 	and.w	r3, r3, #12
 8006762:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006764:	4b94      	ldr	r3, [pc, #592]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0303 	and.w	r3, r3, #3
 800676c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	2b0c      	cmp	r3, #12
 8006772:	d102      	bne.n	800677a <HAL_RCC_OscConfig+0x3e>
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2b03      	cmp	r3, #3
 8006778:	d002      	beq.n	8006780 <HAL_RCC_OscConfig+0x44>
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	2b08      	cmp	r3, #8
 800677e:	d10b      	bne.n	8006798 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006780:	4b8d      	ldr	r3, [pc, #564]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d05b      	beq.n	8006844 <HAL_RCC_OscConfig+0x108>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d157      	bne.n	8006844 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e2d9      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a0:	d106      	bne.n	80067b0 <HAL_RCC_OscConfig+0x74>
 80067a2:	4b85      	ldr	r3, [pc, #532]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a84      	ldr	r2, [pc, #528]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 80067a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	e01d      	b.n	80067ec <HAL_RCC_OscConfig+0xb0>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067b8:	d10c      	bne.n	80067d4 <HAL_RCC_OscConfig+0x98>
 80067ba:	4b7f      	ldr	r3, [pc, #508]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a7e      	ldr	r2, [pc, #504]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 80067c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	4b7c      	ldr	r3, [pc, #496]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a7b      	ldr	r2, [pc, #492]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 80067cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	e00b      	b.n	80067ec <HAL_RCC_OscConfig+0xb0>
 80067d4:	4b78      	ldr	r3, [pc, #480]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a77      	ldr	r2, [pc, #476]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 80067da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	4b75      	ldr	r3, [pc, #468]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a74      	ldr	r2, [pc, #464]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 80067e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d013      	beq.n	800681c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f4:	f7fc fdac 	bl	8003350 <HAL_GetTick>
 80067f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067fc:	f7fc fda8 	bl	8003350 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b64      	cmp	r3, #100	@ 0x64
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e29e      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800680e:	4b6a      	ldr	r3, [pc, #424]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0f0      	beq.n	80067fc <HAL_RCC_OscConfig+0xc0>
 800681a:	e014      	b.n	8006846 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681c:	f7fc fd98 	bl	8003350 <HAL_GetTick>
 8006820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006824:	f7fc fd94 	bl	8003350 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b64      	cmp	r3, #100	@ 0x64
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e28a      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006836:	4b60      	ldr	r3, [pc, #384]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1f0      	bne.n	8006824 <HAL_RCC_OscConfig+0xe8>
 8006842:	e000      	b.n	8006846 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d075      	beq.n	800693e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006852:	4b59      	ldr	r3, [pc, #356]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f003 030c 	and.w	r3, r3, #12
 800685a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800685c:	4b56      	ldr	r3, [pc, #344]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f003 0303 	and.w	r3, r3, #3
 8006864:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	2b0c      	cmp	r3, #12
 800686a:	d102      	bne.n	8006872 <HAL_RCC_OscConfig+0x136>
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2b02      	cmp	r3, #2
 8006870:	d002      	beq.n	8006878 <HAL_RCC_OscConfig+0x13c>
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	2b04      	cmp	r3, #4
 8006876:	d11f      	bne.n	80068b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006878:	4b4f      	ldr	r3, [pc, #316]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <HAL_RCC_OscConfig+0x154>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e25d      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006890:	4b49      	ldr	r3, [pc, #292]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	061b      	lsls	r3, r3, #24
 800689e:	4946      	ldr	r1, [pc, #280]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80068a4:	4b45      	ldr	r3, [pc, #276]	@ (80069bc <HAL_RCC_OscConfig+0x280>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fc fd05 	bl	80032b8 <HAL_InitTick>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d043      	beq.n	800693c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e249      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d023      	beq.n	8006908 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068c0:	4b3d      	ldr	r3, [pc, #244]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a3c      	ldr	r2, [pc, #240]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 80068c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068cc:	f7fc fd40 	bl	8003350 <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068d4:	f7fc fd3c 	bl	8003350 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e232      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068e6:	4b34      	ldr	r3, [pc, #208]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0f0      	beq.n	80068d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f2:	4b31      	ldr	r3, [pc, #196]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	061b      	lsls	r3, r3, #24
 8006900:	492d      	ldr	r1, [pc, #180]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 8006902:	4313      	orrs	r3, r2
 8006904:	604b      	str	r3, [r1, #4]
 8006906:	e01a      	b.n	800693e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006908:	4b2b      	ldr	r3, [pc, #172]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a2a      	ldr	r2, [pc, #168]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 800690e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006914:	f7fc fd1c 	bl	8003350 <HAL_GetTick>
 8006918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800691a:	e008      	b.n	800692e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800691c:	f7fc fd18 	bl	8003350 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d901      	bls.n	800692e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e20e      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800692e:	4b22      	ldr	r3, [pc, #136]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1f0      	bne.n	800691c <HAL_RCC_OscConfig+0x1e0>
 800693a:	e000      	b.n	800693e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800693c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d041      	beq.n	80069ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01c      	beq.n	800698c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006952:	4b19      	ldr	r3, [pc, #100]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 8006954:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006958:	4a17      	ldr	r2, [pc, #92]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 800695a:	f043 0301 	orr.w	r3, r3, #1
 800695e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006962:	f7fc fcf5 	bl	8003350 <HAL_GetTick>
 8006966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006968:	e008      	b.n	800697c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800696a:	f7fc fcf1 	bl	8003350 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e1e7      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800697c:	4b0e      	ldr	r3, [pc, #56]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 800697e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0ef      	beq.n	800696a <HAL_RCC_OscConfig+0x22e>
 800698a:	e020      	b.n	80069ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800698c:	4b0a      	ldr	r3, [pc, #40]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 800698e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006992:	4a09      	ldr	r2, [pc, #36]	@ (80069b8 <HAL_RCC_OscConfig+0x27c>)
 8006994:	f023 0301 	bic.w	r3, r3, #1
 8006998:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699c:	f7fc fcd8 	bl	8003350 <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069a2:	e00d      	b.n	80069c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069a4:	f7fc fcd4 	bl	8003350 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d906      	bls.n	80069c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e1ca      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
 80069b6:	bf00      	nop
 80069b8:	40021000 	.word	0x40021000
 80069bc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069c0:	4b8c      	ldr	r3, [pc, #560]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 80069c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1ea      	bne.n	80069a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 80a6 	beq.w	8006b28 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069dc:	2300      	movs	r3, #0
 80069de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069e0:	4b84      	ldr	r3, [pc, #528]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 80069e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <HAL_RCC_OscConfig+0x2b4>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e000      	b.n	80069f2 <HAL_RCC_OscConfig+0x2b6>
 80069f0:	2300      	movs	r3, #0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00d      	beq.n	8006a12 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069f6:	4b7f      	ldr	r3, [pc, #508]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 80069f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069fa:	4a7e      	ldr	r2, [pc, #504]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 80069fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a00:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a02:	4b7c      	ldr	r3, [pc, #496]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a12:	4b79      	ldr	r3, [pc, #484]	@ (8006bf8 <HAL_RCC_OscConfig+0x4bc>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d118      	bne.n	8006a50 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a1e:	4b76      	ldr	r3, [pc, #472]	@ (8006bf8 <HAL_RCC_OscConfig+0x4bc>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a75      	ldr	r2, [pc, #468]	@ (8006bf8 <HAL_RCC_OscConfig+0x4bc>)
 8006a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a2a:	f7fc fc91 	bl	8003350 <HAL_GetTick>
 8006a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a30:	e008      	b.n	8006a44 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a32:	f7fc fc8d 	bl	8003350 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e183      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a44:	4b6c      	ldr	r3, [pc, #432]	@ (8006bf8 <HAL_RCC_OscConfig+0x4bc>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0f0      	beq.n	8006a32 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d108      	bne.n	8006a6a <HAL_RCC_OscConfig+0x32e>
 8006a58:	4b66      	ldr	r3, [pc, #408]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a5e:	4a65      	ldr	r2, [pc, #404]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006a60:	f043 0301 	orr.w	r3, r3, #1
 8006a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a68:	e024      	b.n	8006ab4 <HAL_RCC_OscConfig+0x378>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b05      	cmp	r3, #5
 8006a70:	d110      	bne.n	8006a94 <HAL_RCC_OscConfig+0x358>
 8006a72:	4b60      	ldr	r3, [pc, #384]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a78:	4a5e      	ldr	r2, [pc, #376]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006a7a:	f043 0304 	orr.w	r3, r3, #4
 8006a7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a82:	4b5c      	ldr	r3, [pc, #368]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a88:	4a5a      	ldr	r2, [pc, #360]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006a8a:	f043 0301 	orr.w	r3, r3, #1
 8006a8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a92:	e00f      	b.n	8006ab4 <HAL_RCC_OscConfig+0x378>
 8006a94:	4b57      	ldr	r3, [pc, #348]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a9a:	4a56      	ldr	r2, [pc, #344]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006a9c:	f023 0301 	bic.w	r3, r3, #1
 8006aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006aa4:	4b53      	ldr	r3, [pc, #332]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aaa:	4a52      	ldr	r2, [pc, #328]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006aac:	f023 0304 	bic.w	r3, r3, #4
 8006ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d016      	beq.n	8006aea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006abc:	f7fc fc48 	bl	8003350 <HAL_GetTick>
 8006ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ac2:	e00a      	b.n	8006ada <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ac4:	f7fc fc44 	bl	8003350 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e138      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ada:	4b46      	ldr	r3, [pc, #280]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0ed      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x388>
 8006ae8:	e015      	b.n	8006b16 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aea:	f7fc fc31 	bl	8003350 <HAL_GetTick>
 8006aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006af0:	e00a      	b.n	8006b08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006af2:	f7fc fc2d 	bl	8003350 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e121      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b08:	4b3a      	ldr	r3, [pc, #232]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1ed      	bne.n	8006af2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b16:	7ffb      	ldrb	r3, [r7, #31]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d105      	bne.n	8006b28 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b1c:	4b35      	ldr	r3, [pc, #212]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b20:	4a34      	ldr	r2, [pc, #208]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006b22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b26:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0320 	and.w	r3, r3, #32
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d03c      	beq.n	8006bae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01c      	beq.n	8006b76 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b42:	4a2c      	ldr	r2, [pc, #176]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006b44:	f043 0301 	orr.w	r3, r3, #1
 8006b48:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4c:	f7fc fc00 	bl	8003350 <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b54:	f7fc fbfc 	bl	8003350 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e0f2      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b66:	4b23      	ldr	r3, [pc, #140]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d0ef      	beq.n	8006b54 <HAL_RCC_OscConfig+0x418>
 8006b74:	e01b      	b.n	8006bae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b76:	4b1f      	ldr	r3, [pc, #124]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006b7e:	f023 0301 	bic.w	r3, r3, #1
 8006b82:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b86:	f7fc fbe3 	bl	8003350 <HAL_GetTick>
 8006b8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b8e:	f7fc fbdf 	bl	8003350 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e0d5      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ba0:	4b14      	ldr	r3, [pc, #80]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1ef      	bne.n	8006b8e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 80c9 	beq.w	8006d4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f003 030c 	and.w	r3, r3, #12
 8006bc0:	2b0c      	cmp	r3, #12
 8006bc2:	f000 8083 	beq.w	8006ccc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d15e      	bne.n	8006c8c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bce:	4b09      	ldr	r3, [pc, #36]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a08      	ldr	r2, [pc, #32]	@ (8006bf4 <HAL_RCC_OscConfig+0x4b8>)
 8006bd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bda:	f7fc fbb9 	bl	8003350 <HAL_GetTick>
 8006bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006be0:	e00c      	b.n	8006bfc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be2:	f7fc fbb5 	bl	8003350 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d905      	bls.n	8006bfc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e0ab      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bfc:	4b55      	ldr	r3, [pc, #340]	@ (8006d54 <HAL_RCC_OscConfig+0x618>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1ec      	bne.n	8006be2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c08:	4b52      	ldr	r3, [pc, #328]	@ (8006d54 <HAL_RCC_OscConfig+0x618>)
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	4b52      	ldr	r3, [pc, #328]	@ (8006d58 <HAL_RCC_OscConfig+0x61c>)
 8006c0e:	4013      	ands	r3, r2
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	6a11      	ldr	r1, [r2, #32]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c18:	3a01      	subs	r2, #1
 8006c1a:	0112      	lsls	r2, r2, #4
 8006c1c:	4311      	orrs	r1, r2
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006c22:	0212      	lsls	r2, r2, #8
 8006c24:	4311      	orrs	r1, r2
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c2a:	0852      	lsrs	r2, r2, #1
 8006c2c:	3a01      	subs	r2, #1
 8006c2e:	0552      	lsls	r2, r2, #21
 8006c30:	4311      	orrs	r1, r2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006c36:	0852      	lsrs	r2, r2, #1
 8006c38:	3a01      	subs	r2, #1
 8006c3a:	0652      	lsls	r2, r2, #25
 8006c3c:	4311      	orrs	r1, r2
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006c42:	06d2      	lsls	r2, r2, #27
 8006c44:	430a      	orrs	r2, r1
 8006c46:	4943      	ldr	r1, [pc, #268]	@ (8006d54 <HAL_RCC_OscConfig+0x618>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c4c:	4b41      	ldr	r3, [pc, #260]	@ (8006d54 <HAL_RCC_OscConfig+0x618>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a40      	ldr	r2, [pc, #256]	@ (8006d54 <HAL_RCC_OscConfig+0x618>)
 8006c52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c58:	4b3e      	ldr	r3, [pc, #248]	@ (8006d54 <HAL_RCC_OscConfig+0x618>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	4a3d      	ldr	r2, [pc, #244]	@ (8006d54 <HAL_RCC_OscConfig+0x618>)
 8006c5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c64:	f7fc fb74 	bl	8003350 <HAL_GetTick>
 8006c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c6a:	e008      	b.n	8006c7e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c6c:	f7fc fb70 	bl	8003350 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d901      	bls.n	8006c7e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e066      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c7e:	4b35      	ldr	r3, [pc, #212]	@ (8006d54 <HAL_RCC_OscConfig+0x618>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0f0      	beq.n	8006c6c <HAL_RCC_OscConfig+0x530>
 8006c8a:	e05e      	b.n	8006d4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8c:	4b31      	ldr	r3, [pc, #196]	@ (8006d54 <HAL_RCC_OscConfig+0x618>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a30      	ldr	r2, [pc, #192]	@ (8006d54 <HAL_RCC_OscConfig+0x618>)
 8006c92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c98:	f7fc fb5a 	bl	8003350 <HAL_GetTick>
 8006c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ca0:	f7fc fb56 	bl	8003350 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e04c      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cb2:	4b28      	ldr	r3, [pc, #160]	@ (8006d54 <HAL_RCC_OscConfig+0x618>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f0      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006cbe:	4b25      	ldr	r3, [pc, #148]	@ (8006d54 <HAL_RCC_OscConfig+0x618>)
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	4924      	ldr	r1, [pc, #144]	@ (8006d54 <HAL_RCC_OscConfig+0x618>)
 8006cc4:	4b25      	ldr	r3, [pc, #148]	@ (8006d5c <HAL_RCC_OscConfig+0x620>)
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	60cb      	str	r3, [r1, #12]
 8006cca:	e03e      	b.n	8006d4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e039      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8006d54 <HAL_RCC_OscConfig+0x618>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f003 0203 	and.w	r2, r3, #3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d12c      	bne.n	8006d46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d123      	bne.n	8006d46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d11b      	bne.n	8006d46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d113      	bne.n	8006d46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d28:	085b      	lsrs	r3, r3, #1
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d109      	bne.n	8006d46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d3c:	085b      	lsrs	r3, r3, #1
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d001      	beq.n	8006d4a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e000      	b.n	8006d4c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3720      	adds	r7, #32
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	40021000 	.word	0x40021000
 8006d58:	019f800c 	.word	0x019f800c
 8006d5c:	feeefffc 	.word	0xfeeefffc

08006d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e11e      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d78:	4b91      	ldr	r3, [pc, #580]	@ (8006fc0 <HAL_RCC_ClockConfig+0x260>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d910      	bls.n	8006da8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d86:	4b8e      	ldr	r3, [pc, #568]	@ (8006fc0 <HAL_RCC_ClockConfig+0x260>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f023 020f 	bic.w	r2, r3, #15
 8006d8e:	498c      	ldr	r1, [pc, #560]	@ (8006fc0 <HAL_RCC_ClockConfig+0x260>)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d96:	4b8a      	ldr	r3, [pc, #552]	@ (8006fc0 <HAL_RCC_ClockConfig+0x260>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d001      	beq.n	8006da8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e106      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d073      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d129      	bne.n	8006e10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dbc:	4b81      	ldr	r3, [pc, #516]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e0f4      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006dcc:	f000 f99e 	bl	800710c <RCC_GetSysClockFreqFromPLLSource>
 8006dd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	4a7c      	ldr	r2, [pc, #496]	@ (8006fc8 <HAL_RCC_ClockConfig+0x268>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d93f      	bls.n	8006e5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006dda:	4b7a      	ldr	r3, [pc, #488]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d033      	beq.n	8006e5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d12f      	bne.n	8006e5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006dfa:	4b72      	ldr	r3, [pc, #456]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e02:	4a70      	ldr	r2, [pc, #448]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006e0a:	2380      	movs	r3, #128	@ 0x80
 8006e0c:	617b      	str	r3, [r7, #20]
 8006e0e:	e024      	b.n	8006e5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d107      	bne.n	8006e28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e18:	4b6a      	ldr	r3, [pc, #424]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e0c6      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e28:	4b66      	ldr	r3, [pc, #408]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e0be      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006e38:	f000 f8ce 	bl	8006fd8 <HAL_RCC_GetSysClockFreq>
 8006e3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	4a61      	ldr	r2, [pc, #388]	@ (8006fc8 <HAL_RCC_ClockConfig+0x268>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d909      	bls.n	8006e5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e46:	4b5f      	ldr	r3, [pc, #380]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e4e:	4a5d      	ldr	r2, [pc, #372]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006e56:	2380      	movs	r3, #128	@ 0x80
 8006e58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e5a:	4b5a      	ldr	r3, [pc, #360]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f023 0203 	bic.w	r2, r3, #3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	4957      	ldr	r1, [pc, #348]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e6c:	f7fc fa70 	bl	8003350 <HAL_GetTick>
 8006e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e72:	e00a      	b.n	8006e8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e74:	f7fc fa6c 	bl	8003350 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e095      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e8a:	4b4e      	ldr	r3, [pc, #312]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f003 020c 	and.w	r2, r3, #12
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d1eb      	bne.n	8006e74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d023      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006eb4:	4b43      	ldr	r3, [pc, #268]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	4a42      	ldr	r2, [pc, #264]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006eba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006ebe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d007      	beq.n	8006edc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ed4:	4a3b      	ldr	r2, [pc, #236]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006ed6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006eda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006edc:	4b39      	ldr	r3, [pc, #228]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	4936      	ldr	r1, [pc, #216]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	608b      	str	r3, [r1, #8]
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2b80      	cmp	r3, #128	@ 0x80
 8006ef4:	d105      	bne.n	8006f02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006ef6:	4b33      	ldr	r3, [pc, #204]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	4a32      	ldr	r2, [pc, #200]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006efc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f02:	4b2f      	ldr	r3, [pc, #188]	@ (8006fc0 <HAL_RCC_ClockConfig+0x260>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d21d      	bcs.n	8006f4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f10:	4b2b      	ldr	r3, [pc, #172]	@ (8006fc0 <HAL_RCC_ClockConfig+0x260>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f023 020f 	bic.w	r2, r3, #15
 8006f18:	4929      	ldr	r1, [pc, #164]	@ (8006fc0 <HAL_RCC_ClockConfig+0x260>)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006f20:	f7fc fa16 	bl	8003350 <HAL_GetTick>
 8006f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f26:	e00a      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f28:	f7fc fa12 	bl	8003350 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e03b      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f3e:	4b20      	ldr	r3, [pc, #128]	@ (8006fc0 <HAL_RCC_ClockConfig+0x260>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d1ed      	bne.n	8006f28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d008      	beq.n	8006f6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f58:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	4917      	ldr	r1, [pc, #92]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0308 	and.w	r3, r3, #8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d009      	beq.n	8006f8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f76:	4b13      	ldr	r3, [pc, #76]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	490f      	ldr	r1, [pc, #60]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f8a:	f000 f825 	bl	8006fd8 <HAL_RCC_GetSysClockFreq>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc4 <HAL_RCC_ClockConfig+0x264>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	091b      	lsrs	r3, r3, #4
 8006f96:	f003 030f 	and.w	r3, r3, #15
 8006f9a:	490c      	ldr	r1, [pc, #48]	@ (8006fcc <HAL_RCC_ClockConfig+0x26c>)
 8006f9c:	5ccb      	ldrb	r3, [r1, r3]
 8006f9e:	f003 031f 	and.w	r3, r3, #31
 8006fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8006fd0 <HAL_RCC_ClockConfig+0x270>)
 8006fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006faa:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd4 <HAL_RCC_ClockConfig+0x274>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fc f982 	bl	80032b8 <HAL_InitTick>
 8006fb4:	4603      	mov	r3, r0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	40022000 	.word	0x40022000
 8006fc4:	40021000 	.word	0x40021000
 8006fc8:	04c4b400 	.word	0x04c4b400
 8006fcc:	0800c7bc 	.word	0x0800c7bc
 8006fd0:	20000004 	.word	0x20000004
 8006fd4:	20000008 	.word	0x20000008

08006fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006fde:	4b2c      	ldr	r3, [pc, #176]	@ (8007090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 030c 	and.w	r3, r3, #12
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d102      	bne.n	8006ff0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006fea:	4b2a      	ldr	r3, [pc, #168]	@ (8007094 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	e047      	b.n	8007080 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006ff0:	4b27      	ldr	r3, [pc, #156]	@ (8007090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f003 030c 	and.w	r3, r3, #12
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d102      	bne.n	8007002 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ffc:	4b26      	ldr	r3, [pc, #152]	@ (8007098 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ffe:	613b      	str	r3, [r7, #16]
 8007000:	e03e      	b.n	8007080 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007002:	4b23      	ldr	r3, [pc, #140]	@ (8007090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 030c 	and.w	r3, r3, #12
 800700a:	2b0c      	cmp	r3, #12
 800700c:	d136      	bne.n	800707c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800700e:	4b20      	ldr	r3, [pc, #128]	@ (8007090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007018:	4b1d      	ldr	r3, [pc, #116]	@ (8007090 <HAL_RCC_GetSysClockFreq+0xb8>)
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	091b      	lsrs	r3, r3, #4
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	3301      	adds	r3, #1
 8007024:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b03      	cmp	r3, #3
 800702a:	d10c      	bne.n	8007046 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800702c:	4a1a      	ldr	r2, [pc, #104]	@ (8007098 <HAL_RCC_GetSysClockFreq+0xc0>)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	fbb2 f3f3 	udiv	r3, r2, r3
 8007034:	4a16      	ldr	r2, [pc, #88]	@ (8007090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007036:	68d2      	ldr	r2, [r2, #12]
 8007038:	0a12      	lsrs	r2, r2, #8
 800703a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800703e:	fb02 f303 	mul.w	r3, r2, r3
 8007042:	617b      	str	r3, [r7, #20]
      break;
 8007044:	e00c      	b.n	8007060 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007046:	4a13      	ldr	r2, [pc, #76]	@ (8007094 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	fbb2 f3f3 	udiv	r3, r2, r3
 800704e:	4a10      	ldr	r2, [pc, #64]	@ (8007090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007050:	68d2      	ldr	r2, [r2, #12]
 8007052:	0a12      	lsrs	r2, r2, #8
 8007054:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007058:	fb02 f303 	mul.w	r3, r2, r3
 800705c:	617b      	str	r3, [r7, #20]
      break;
 800705e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007060:	4b0b      	ldr	r3, [pc, #44]	@ (8007090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	0e5b      	lsrs	r3, r3, #25
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	3301      	adds	r3, #1
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	fbb2 f3f3 	udiv	r3, r2, r3
 8007078:	613b      	str	r3, [r7, #16]
 800707a:	e001      	b.n	8007080 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007080:	693b      	ldr	r3, [r7, #16]
}
 8007082:	4618      	mov	r0, r3
 8007084:	371c      	adds	r7, #28
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	40021000 	.word	0x40021000
 8007094:	00f42400 	.word	0x00f42400
 8007098:	007a1200 	.word	0x007a1200

0800709c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070a0:	4b03      	ldr	r3, [pc, #12]	@ (80070b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070a2:	681b      	ldr	r3, [r3, #0]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	20000004 	.word	0x20000004

080070b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80070b8:	f7ff fff0 	bl	800709c <HAL_RCC_GetHCLKFreq>
 80070bc:	4602      	mov	r2, r0
 80070be:	4b06      	ldr	r3, [pc, #24]	@ (80070d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	0a1b      	lsrs	r3, r3, #8
 80070c4:	f003 0307 	and.w	r3, r3, #7
 80070c8:	4904      	ldr	r1, [pc, #16]	@ (80070dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80070ca:	5ccb      	ldrb	r3, [r1, r3]
 80070cc:	f003 031f 	and.w	r3, r3, #31
 80070d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	40021000 	.word	0x40021000
 80070dc:	0800c7cc 	.word	0x0800c7cc

080070e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80070e4:	f7ff ffda 	bl	800709c <HAL_RCC_GetHCLKFreq>
 80070e8:	4602      	mov	r2, r0
 80070ea:	4b06      	ldr	r3, [pc, #24]	@ (8007104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	0adb      	lsrs	r3, r3, #11
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	4904      	ldr	r1, [pc, #16]	@ (8007108 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070f6:	5ccb      	ldrb	r3, [r1, r3]
 80070f8:	f003 031f 	and.w	r3, r3, #31
 80070fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007100:	4618      	mov	r0, r3
 8007102:	bd80      	pop	{r7, pc}
 8007104:	40021000 	.word	0x40021000
 8007108:	0800c7cc 	.word	0x0800c7cc

0800710c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007112:	4b1e      	ldr	r3, [pc, #120]	@ (800718c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800711c:	4b1b      	ldr	r3, [pc, #108]	@ (800718c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	091b      	lsrs	r3, r3, #4
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	3301      	adds	r3, #1
 8007128:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b03      	cmp	r3, #3
 800712e:	d10c      	bne.n	800714a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007130:	4a17      	ldr	r2, [pc, #92]	@ (8007190 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	fbb2 f3f3 	udiv	r3, r2, r3
 8007138:	4a14      	ldr	r2, [pc, #80]	@ (800718c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800713a:	68d2      	ldr	r2, [r2, #12]
 800713c:	0a12      	lsrs	r2, r2, #8
 800713e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007142:	fb02 f303 	mul.w	r3, r2, r3
 8007146:	617b      	str	r3, [r7, #20]
    break;
 8007148:	e00c      	b.n	8007164 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800714a:	4a12      	ldr	r2, [pc, #72]	@ (8007194 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007152:	4a0e      	ldr	r2, [pc, #56]	@ (800718c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007154:	68d2      	ldr	r2, [r2, #12]
 8007156:	0a12      	lsrs	r2, r2, #8
 8007158:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800715c:	fb02 f303 	mul.w	r3, r2, r3
 8007160:	617b      	str	r3, [r7, #20]
    break;
 8007162:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007164:	4b09      	ldr	r3, [pc, #36]	@ (800718c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	0e5b      	lsrs	r3, r3, #25
 800716a:	f003 0303 	and.w	r3, r3, #3
 800716e:	3301      	adds	r3, #1
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	fbb2 f3f3 	udiv	r3, r2, r3
 800717c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800717e:	687b      	ldr	r3, [r7, #4]
}
 8007180:	4618      	mov	r0, r3
 8007182:	371c      	adds	r7, #28
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	40021000 	.word	0x40021000
 8007190:	007a1200 	.word	0x007a1200
 8007194:	00f42400 	.word	0x00f42400

08007198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80071a0:	2300      	movs	r3, #0
 80071a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071a4:	2300      	movs	r3, #0
 80071a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 8098 	beq.w	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071b6:	2300      	movs	r3, #0
 80071b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071ba:	4b43      	ldr	r3, [pc, #268]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10d      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071c6:	4b40      	ldr	r3, [pc, #256]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ca:	4a3f      	ldr	r2, [pc, #252]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80071d2:	4b3d      	ldr	r3, [pc, #244]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071da:	60bb      	str	r3, [r7, #8]
 80071dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071de:	2301      	movs	r3, #1
 80071e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071e2:	4b3a      	ldr	r3, [pc, #232]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a39      	ldr	r2, [pc, #228]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071ee:	f7fc f8af 	bl	8003350 <HAL_GetTick>
 80071f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071f4:	e009      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f6:	f7fc f8ab 	bl	8003350 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d902      	bls.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	74fb      	strb	r3, [r7, #19]
        break;
 8007208:	e005      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800720a:	4b30      	ldr	r3, [pc, #192]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0ef      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007216:	7cfb      	ldrb	r3, [r7, #19]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d159      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800721c:	4b2a      	ldr	r3, [pc, #168]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007226:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d01e      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	429a      	cmp	r2, r3
 8007236:	d019      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007238:	4b23      	ldr	r3, [pc, #140]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800723a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800723e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007242:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007244:	4b20      	ldr	r3, [pc, #128]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800724a:	4a1f      	ldr	r2, [pc, #124]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800724c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007254:	4b1c      	ldr	r3, [pc, #112]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800725a:	4a1b      	ldr	r2, [pc, #108]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800725c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007264:	4a18      	ldr	r2, [pc, #96]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d016      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007276:	f7fc f86b 	bl	8003350 <HAL_GetTick>
 800727a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800727c:	e00b      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800727e:	f7fc f867 	bl	8003350 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800728c:	4293      	cmp	r3, r2
 800728e:	d902      	bls.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	74fb      	strb	r3, [r7, #19]
            break;
 8007294:	e006      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007296:	4b0c      	ldr	r3, [pc, #48]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0ec      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80072a4:	7cfb      	ldrb	r3, [r7, #19]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10b      	bne.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072aa:	4b07      	ldr	r3, [pc, #28]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b8:	4903      	ldr	r1, [pc, #12]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80072c0:	e008      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072c2:	7cfb      	ldrb	r3, [r7, #19]
 80072c4:	74bb      	strb	r3, [r7, #18]
 80072c6:	e005      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80072c8:	40021000 	.word	0x40021000
 80072cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d0:	7cfb      	ldrb	r3, [r7, #19]
 80072d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072d4:	7c7b      	ldrb	r3, [r7, #17]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d105      	bne.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072da:	4ba6      	ldr	r3, [pc, #664]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072de:	4aa5      	ldr	r2, [pc, #660]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00a      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072f2:	4ba0      	ldr	r3, [pc, #640]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f8:	f023 0203 	bic.w	r2, r3, #3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	499c      	ldr	r1, [pc, #624]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007302:	4313      	orrs	r3, r2
 8007304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0302 	and.w	r3, r3, #2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00a      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007314:	4b97      	ldr	r3, [pc, #604]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800731a:	f023 020c 	bic.w	r2, r3, #12
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	4994      	ldr	r1, [pc, #592]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007324:	4313      	orrs	r3, r2
 8007326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007336:	4b8f      	ldr	r3, [pc, #572]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800733c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	498b      	ldr	r1, [pc, #556]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007346:	4313      	orrs	r3, r2
 8007348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0308 	and.w	r3, r3, #8
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00a      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007358:	4b86      	ldr	r3, [pc, #536]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800735a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800735e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	4983      	ldr	r1, [pc, #524]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007368:	4313      	orrs	r3, r2
 800736a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800737a:	4b7e      	ldr	r3, [pc, #504]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800737c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007380:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	497a      	ldr	r1, [pc, #488]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800738a:	4313      	orrs	r3, r2
 800738c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800739c:	4b75      	ldr	r3, [pc, #468]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800739e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	4972      	ldr	r1, [pc, #456]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073be:	4b6d      	ldr	r3, [pc, #436]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	4969      	ldr	r1, [pc, #420]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00a      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073e0:	4b64      	ldr	r3, [pc, #400]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	4961      	ldr	r1, [pc, #388]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007402:	4b5c      	ldr	r3, [pc, #368]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007408:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007410:	4958      	ldr	r1, [pc, #352]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007412:	4313      	orrs	r3, r2
 8007414:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007420:	2b00      	cmp	r3, #0
 8007422:	d015      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007424:	4b53      	ldr	r3, [pc, #332]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800742a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007432:	4950      	ldr	r1, [pc, #320]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007434:	4313      	orrs	r3, r2
 8007436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800743e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007442:	d105      	bne.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007444:	4b4b      	ldr	r3, [pc, #300]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	4a4a      	ldr	r2, [pc, #296]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800744a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800744e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007458:	2b00      	cmp	r3, #0
 800745a:	d015      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800745c:	4b45      	ldr	r3, [pc, #276]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800745e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007462:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746a:	4942      	ldr	r1, [pc, #264]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800746c:	4313      	orrs	r3, r2
 800746e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007476:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800747a:	d105      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800747c:	4b3d      	ldr	r3, [pc, #244]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	4a3c      	ldr	r2, [pc, #240]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007486:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d015      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007494:	4b37      	ldr	r3, [pc, #220]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800749a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a2:	4934      	ldr	r1, [pc, #208]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074b2:	d105      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074b4:	4b2f      	ldr	r3, [pc, #188]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	4a2e      	ldr	r2, [pc, #184]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d015      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074cc:	4b29      	ldr	r3, [pc, #164]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074da:	4926      	ldr	r1, [pc, #152]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074ea:	d105      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074ec:	4b21      	ldr	r3, [pc, #132]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	4a20      	ldr	r2, [pc, #128]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d015      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007504:	4b1b      	ldr	r3, [pc, #108]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800750a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007512:	4918      	ldr	r1, [pc, #96]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007514:	4313      	orrs	r3, r2
 8007516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007522:	d105      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007524:	4b13      	ldr	r3, [pc, #76]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	4a12      	ldr	r2, [pc, #72]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800752a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800752e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d015      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800753c:	4b0d      	ldr	r3, [pc, #52]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800753e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007542:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800754a:	490a      	ldr	r1, [pc, #40]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800754c:	4313      	orrs	r3, r2
 800754e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007556:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800755a:	d105      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800755c:	4b05      	ldr	r3, [pc, #20]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	4a04      	ldr	r2, [pc, #16]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007566:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007568:	7cbb      	ldrb	r3, [r7, #18]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	40021000 	.word	0x40021000

08007578 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e09d      	b.n	80076c6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758e:	2b00      	cmp	r3, #0
 8007590:	d108      	bne.n	80075a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800759a:	d009      	beq.n	80075b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	61da      	str	r2, [r3, #28]
 80075a2:	e005      	b.n	80075b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fb fae8 	bl	8002ba0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80075f0:	d902      	bls.n	80075f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80075f2:	2300      	movs	r3, #0
 80075f4:	60fb      	str	r3, [r7, #12]
 80075f6:	e002      	b.n	80075fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80075f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80075fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007606:	d007      	beq.n	8007618 <HAL_SPI_Init+0xa0>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007610:	d002      	beq.n	8007618 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007628:	431a      	orrs	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	431a      	orrs	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	431a      	orrs	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007650:	431a      	orrs	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800765a:	ea42 0103 	orr.w	r1, r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007662:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	0c1b      	lsrs	r3, r3, #16
 8007674:	f003 0204 	and.w	r2, r3, #4
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007686:	f003 0308 	and.w	r3, r3, #8
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007694:	ea42 0103 	orr.w	r1, r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69da      	ldr	r2, [r3, #28]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b088      	sub	sp, #32
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10e      	bne.n	8007710 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d009      	beq.n	8007710 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	d004      	beq.n	8007710 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	4798      	blx	r3
    return;
 800770e:	e0ce      	b.n	80078ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d009      	beq.n	800772e <HAL_SPI_IRQHandler+0x5e>
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	4798      	blx	r3
    return;
 800772c:	e0bf      	b.n	80078ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	f003 0320 	and.w	r3, r3, #32
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10a      	bne.n	800774e <HAL_SPI_IRQHandler+0x7e>
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773e:	2b00      	cmp	r3, #0
 8007740:	d105      	bne.n	800774e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 80b0 	beq.w	80078ae <HAL_SPI_IRQHandler+0x1de>
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 80aa 	beq.w	80078ae <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007760:	2b00      	cmp	r3, #0
 8007762:	d023      	beq.n	80077ac <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b03      	cmp	r3, #3
 800776e:	d011      	beq.n	8007794 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007774:	f043 0204 	orr.w	r2, r3, #4
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800777c:	2300      	movs	r3, #0
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	e00b      	b.n	80077ac <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007794:	2300      	movs	r3, #0
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	613b      	str	r3, [r7, #16]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	613b      	str	r3, [r7, #16]
 80077a8:	693b      	ldr	r3, [r7, #16]
        return;
 80077aa:	e080      	b.n	80078ae <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	f003 0320 	and.w	r3, r3, #32
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d014      	beq.n	80077e0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077ba:	f043 0201 	orr.w	r2, r3, #1
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00c      	beq.n	8007804 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077ee:	f043 0208 	orr.w	r2, r3, #8
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80077f6:	2300      	movs	r3, #0
 80077f8:	60bb      	str	r3, [r7, #8]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	60bb      	str	r3, [r7, #8]
 8007802:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007808:	2b00      	cmp	r3, #0
 800780a:	d04f      	beq.n	80078ac <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800781a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d104      	bne.n	8007838 <HAL_SPI_IRQHandler+0x168>
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d034      	beq.n	80078a2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0203 	bic.w	r2, r2, #3
 8007846:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784c:	2b00      	cmp	r3, #0
 800784e:	d011      	beq.n	8007874 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007854:	4a17      	ldr	r2, [pc, #92]	@ (80078b4 <HAL_SPI_IRQHandler+0x1e4>)
 8007856:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800785c:	4618      	mov	r0, r3
 800785e:	f7fe faf9 	bl	8005e54 <HAL_DMA_Abort_IT>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d005      	beq.n	8007874 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800786c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007878:	2b00      	cmp	r3, #0
 800787a:	d016      	beq.n	80078aa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007880:	4a0c      	ldr	r2, [pc, #48]	@ (80078b4 <HAL_SPI_IRQHandler+0x1e4>)
 8007882:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007888:	4618      	mov	r0, r3
 800788a:	f7fe fae3 	bl	8005e54 <HAL_DMA_Abort_IT>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00a      	beq.n	80078aa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007898:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80078a0:	e003      	b.n	80078aa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f808 	bl	80078b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80078a8:	e000      	b.n	80078ac <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80078aa:	bf00      	nop
    return;
 80078ac:	bf00      	nop
  }
}
 80078ae:	3720      	adds	r7, #32
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	080078cd 	.word	0x080078cd

080078b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f7ff ffe5 	bl	80078b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078ee:	bf00      	nop
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b082      	sub	sp, #8
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e049      	b.n	800799c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d106      	bne.n	8007922 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7fb f989 	bl	8002c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2202      	movs	r2, #2
 8007926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3304      	adds	r3, #4
 8007932:	4619      	mov	r1, r3
 8007934:	4610      	mov	r0, r2
 8007936:	f001 fa61 	bl	8008dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d001      	beq.n	80079bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e042      	b.n	8007a42 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a21      	ldr	r2, [pc, #132]	@ (8007a50 <HAL_TIM_Base_Start+0xac>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d018      	beq.n	8007a00 <HAL_TIM_Base_Start+0x5c>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d6:	d013      	beq.n	8007a00 <HAL_TIM_Base_Start+0x5c>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007a54 <HAL_TIM_Base_Start+0xb0>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d00e      	beq.n	8007a00 <HAL_TIM_Base_Start+0x5c>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1c      	ldr	r2, [pc, #112]	@ (8007a58 <HAL_TIM_Base_Start+0xb4>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d009      	beq.n	8007a00 <HAL_TIM_Base_Start+0x5c>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a1a      	ldr	r2, [pc, #104]	@ (8007a5c <HAL_TIM_Base_Start+0xb8>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d004      	beq.n	8007a00 <HAL_TIM_Base_Start+0x5c>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a19      	ldr	r2, [pc, #100]	@ (8007a60 <HAL_TIM_Base_Start+0xbc>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d115      	bne.n	8007a2c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	4b17      	ldr	r3, [pc, #92]	@ (8007a64 <HAL_TIM_Base_Start+0xc0>)
 8007a08:	4013      	ands	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b06      	cmp	r3, #6
 8007a10:	d015      	beq.n	8007a3e <HAL_TIM_Base_Start+0x9a>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a18:	d011      	beq.n	8007a3e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f042 0201 	orr.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a2a:	e008      	b.n	8007a3e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 0201 	orr.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e000      	b.n	8007a40 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	40012c00 	.word	0x40012c00
 8007a54:	40000400 	.word	0x40000400
 8007a58:	40000800 	.word	0x40000800
 8007a5c:	40013400 	.word	0x40013400
 8007a60:	40014000 	.word	0x40014000
 8007a64:	00010007 	.word	0x00010007

08007a68 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6a1a      	ldr	r2, [r3, #32]
 8007a76:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10f      	bne.n	8007aa0 <HAL_TIM_Base_Stop+0x38>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6a1a      	ldr	r2, [r3, #32]
 8007a86:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d107      	bne.n	8007aa0 <HAL_TIM_Base_Stop+0x38>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0201 	bic.w	r2, r2, #1
 8007a9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
	...

08007ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d001      	beq.n	8007ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e04a      	b.n	8007b66 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f042 0201 	orr.w	r2, r2, #1
 8007ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a21      	ldr	r2, [pc, #132]	@ (8007b74 <HAL_TIM_Base_Start_IT+0xbc>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d018      	beq.n	8007b24 <HAL_TIM_Base_Start_IT+0x6c>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007afa:	d013      	beq.n	8007b24 <HAL_TIM_Base_Start_IT+0x6c>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a1d      	ldr	r2, [pc, #116]	@ (8007b78 <HAL_TIM_Base_Start_IT+0xc0>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d00e      	beq.n	8007b24 <HAL_TIM_Base_Start_IT+0x6c>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8007b7c <HAL_TIM_Base_Start_IT+0xc4>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d009      	beq.n	8007b24 <HAL_TIM_Base_Start_IT+0x6c>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a1a      	ldr	r2, [pc, #104]	@ (8007b80 <HAL_TIM_Base_Start_IT+0xc8>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d004      	beq.n	8007b24 <HAL_TIM_Base_Start_IT+0x6c>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a19      	ldr	r2, [pc, #100]	@ (8007b84 <HAL_TIM_Base_Start_IT+0xcc>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d115      	bne.n	8007b50 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689a      	ldr	r2, [r3, #8]
 8007b2a:	4b17      	ldr	r3, [pc, #92]	@ (8007b88 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b06      	cmp	r3, #6
 8007b34:	d015      	beq.n	8007b62 <HAL_TIM_Base_Start_IT+0xaa>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b3c:	d011      	beq.n	8007b62 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f042 0201 	orr.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b4e:	e008      	b.n	8007b62 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0201 	orr.w	r2, r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	e000      	b.n	8007b64 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	40012c00 	.word	0x40012c00
 8007b78:	40000400 	.word	0x40000400
 8007b7c:	40000800 	.word	0x40000800
 8007b80:	40013400 	.word	0x40013400
 8007b84:	40014000 	.word	0x40014000
 8007b88:	00010007 	.word	0x00010007

08007b8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e049      	b.n	8007c32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d106      	bne.n	8007bb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f841 	bl	8007c3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4610      	mov	r0, r2
 8007bcc:	f001 f916 	bl	8008dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c42:	bf00      	nop
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
	...

08007c50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d109      	bne.n	8007c74 <HAL_TIM_PWM_Start+0x24>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	bf14      	ite	ne
 8007c6c:	2301      	movne	r3, #1
 8007c6e:	2300      	moveq	r3, #0
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	e03c      	b.n	8007cee <HAL_TIM_PWM_Start+0x9e>
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d109      	bne.n	8007c8e <HAL_TIM_PWM_Start+0x3e>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	bf14      	ite	ne
 8007c86:	2301      	movne	r3, #1
 8007c88:	2300      	moveq	r3, #0
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	e02f      	b.n	8007cee <HAL_TIM_PWM_Start+0x9e>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	d109      	bne.n	8007ca8 <HAL_TIM_PWM_Start+0x58>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	bf14      	ite	ne
 8007ca0:	2301      	movne	r3, #1
 8007ca2:	2300      	moveq	r3, #0
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	e022      	b.n	8007cee <HAL_TIM_PWM_Start+0x9e>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2b0c      	cmp	r3, #12
 8007cac:	d109      	bne.n	8007cc2 <HAL_TIM_PWM_Start+0x72>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	bf14      	ite	ne
 8007cba:	2301      	movne	r3, #1
 8007cbc:	2300      	moveq	r3, #0
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	e015      	b.n	8007cee <HAL_TIM_PWM_Start+0x9e>
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b10      	cmp	r3, #16
 8007cc6:	d109      	bne.n	8007cdc <HAL_TIM_PWM_Start+0x8c>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	bf14      	ite	ne
 8007cd4:	2301      	movne	r3, #1
 8007cd6:	2300      	moveq	r3, #0
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	e008      	b.n	8007cee <HAL_TIM_PWM_Start+0x9e>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	bf14      	ite	ne
 8007ce8:	2301      	movne	r3, #1
 8007cea:	2300      	moveq	r3, #0
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e097      	b.n	8007e26 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d104      	bne.n	8007d06 <HAL_TIM_PWM_Start+0xb6>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d04:	e023      	b.n	8007d4e <HAL_TIM_PWM_Start+0xfe>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d104      	bne.n	8007d16 <HAL_TIM_PWM_Start+0xc6>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d14:	e01b      	b.n	8007d4e <HAL_TIM_PWM_Start+0xfe>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	d104      	bne.n	8007d26 <HAL_TIM_PWM_Start+0xd6>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d24:	e013      	b.n	8007d4e <HAL_TIM_PWM_Start+0xfe>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b0c      	cmp	r3, #12
 8007d2a:	d104      	bne.n	8007d36 <HAL_TIM_PWM_Start+0xe6>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d34:	e00b      	b.n	8007d4e <HAL_TIM_PWM_Start+0xfe>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b10      	cmp	r3, #16
 8007d3a:	d104      	bne.n	8007d46 <HAL_TIM_PWM_Start+0xf6>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d44:	e003      	b.n	8007d4e <HAL_TIM_PWM_Start+0xfe>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2201      	movs	r2, #1
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f001 fe60 	bl	8009a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a33      	ldr	r2, [pc, #204]	@ (8007e30 <HAL_TIM_PWM_Start+0x1e0>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d013      	beq.n	8007d8e <HAL_TIM_PWM_Start+0x13e>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a32      	ldr	r2, [pc, #200]	@ (8007e34 <HAL_TIM_PWM_Start+0x1e4>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d00e      	beq.n	8007d8e <HAL_TIM_PWM_Start+0x13e>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a30      	ldr	r2, [pc, #192]	@ (8007e38 <HAL_TIM_PWM_Start+0x1e8>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d009      	beq.n	8007d8e <HAL_TIM_PWM_Start+0x13e>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a2f      	ldr	r2, [pc, #188]	@ (8007e3c <HAL_TIM_PWM_Start+0x1ec>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d004      	beq.n	8007d8e <HAL_TIM_PWM_Start+0x13e>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a2d      	ldr	r2, [pc, #180]	@ (8007e40 <HAL_TIM_PWM_Start+0x1f0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d101      	bne.n	8007d92 <HAL_TIM_PWM_Start+0x142>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e000      	b.n	8007d94 <HAL_TIM_PWM_Start+0x144>
 8007d92:	2300      	movs	r3, #0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d007      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007da6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a20      	ldr	r2, [pc, #128]	@ (8007e30 <HAL_TIM_PWM_Start+0x1e0>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d018      	beq.n	8007de4 <HAL_TIM_PWM_Start+0x194>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dba:	d013      	beq.n	8007de4 <HAL_TIM_PWM_Start+0x194>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a20      	ldr	r2, [pc, #128]	@ (8007e44 <HAL_TIM_PWM_Start+0x1f4>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d00e      	beq.n	8007de4 <HAL_TIM_PWM_Start+0x194>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a1f      	ldr	r2, [pc, #124]	@ (8007e48 <HAL_TIM_PWM_Start+0x1f8>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d009      	beq.n	8007de4 <HAL_TIM_PWM_Start+0x194>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a17      	ldr	r2, [pc, #92]	@ (8007e34 <HAL_TIM_PWM_Start+0x1e4>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d004      	beq.n	8007de4 <HAL_TIM_PWM_Start+0x194>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a16      	ldr	r2, [pc, #88]	@ (8007e38 <HAL_TIM_PWM_Start+0x1e8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d115      	bne.n	8007e10 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689a      	ldr	r2, [r3, #8]
 8007dea:	4b18      	ldr	r3, [pc, #96]	@ (8007e4c <HAL_TIM_PWM_Start+0x1fc>)
 8007dec:	4013      	ands	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b06      	cmp	r3, #6
 8007df4:	d015      	beq.n	8007e22 <HAL_TIM_PWM_Start+0x1d2>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dfc:	d011      	beq.n	8007e22 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f042 0201 	orr.w	r2, r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e0e:	e008      	b.n	8007e22 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0201 	orr.w	r2, r2, #1
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	e000      	b.n	8007e24 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	40012c00 	.word	0x40012c00
 8007e34:	40013400 	.word	0x40013400
 8007e38:	40014000 	.word	0x40014000
 8007e3c:	40014400 	.word	0x40014400
 8007e40:	40014800 	.word	0x40014800
 8007e44:	40000400 	.word	0x40000400
 8007e48:	40000800 	.word	0x40000800
 8007e4c:	00010007 	.word	0x00010007

08007e50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f001 fdda 	bl	8009a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a3e      	ldr	r2, [pc, #248]	@ (8007f68 <HAL_TIM_PWM_Stop+0x118>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d013      	beq.n	8007e9a <HAL_TIM_PWM_Stop+0x4a>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a3d      	ldr	r2, [pc, #244]	@ (8007f6c <HAL_TIM_PWM_Stop+0x11c>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d00e      	beq.n	8007e9a <HAL_TIM_PWM_Stop+0x4a>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a3b      	ldr	r2, [pc, #236]	@ (8007f70 <HAL_TIM_PWM_Stop+0x120>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d009      	beq.n	8007e9a <HAL_TIM_PWM_Stop+0x4a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a3a      	ldr	r2, [pc, #232]	@ (8007f74 <HAL_TIM_PWM_Stop+0x124>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d004      	beq.n	8007e9a <HAL_TIM_PWM_Stop+0x4a>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a38      	ldr	r2, [pc, #224]	@ (8007f78 <HAL_TIM_PWM_Stop+0x128>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d101      	bne.n	8007e9e <HAL_TIM_PWM_Stop+0x4e>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <HAL_TIM_PWM_Stop+0x50>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d017      	beq.n	8007ed4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6a1a      	ldr	r2, [r3, #32]
 8007eaa:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007eae:	4013      	ands	r3, r2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10f      	bne.n	8007ed4 <HAL_TIM_PWM_Stop+0x84>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6a1a      	ldr	r2, [r3, #32]
 8007eba:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d107      	bne.n	8007ed4 <HAL_TIM_PWM_Stop+0x84>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ed2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6a1a      	ldr	r2, [r3, #32]
 8007eda:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007ede:	4013      	ands	r3, r2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10f      	bne.n	8007f04 <HAL_TIM_PWM_Stop+0xb4>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6a1a      	ldr	r2, [r3, #32]
 8007eea:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007eee:	4013      	ands	r3, r2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d107      	bne.n	8007f04 <HAL_TIM_PWM_Stop+0xb4>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0201 	bic.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d104      	bne.n	8007f14 <HAL_TIM_PWM_Stop+0xc4>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f12:	e023      	b.n	8007f5c <HAL_TIM_PWM_Stop+0x10c>
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	d104      	bne.n	8007f24 <HAL_TIM_PWM_Stop+0xd4>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f22:	e01b      	b.n	8007f5c <HAL_TIM_PWM_Stop+0x10c>
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2b08      	cmp	r3, #8
 8007f28:	d104      	bne.n	8007f34 <HAL_TIM_PWM_Stop+0xe4>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f32:	e013      	b.n	8007f5c <HAL_TIM_PWM_Stop+0x10c>
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2b0c      	cmp	r3, #12
 8007f38:	d104      	bne.n	8007f44 <HAL_TIM_PWM_Stop+0xf4>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f42:	e00b      	b.n	8007f5c <HAL_TIM_PWM_Stop+0x10c>
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2b10      	cmp	r3, #16
 8007f48:	d104      	bne.n	8007f54 <HAL_TIM_PWM_Stop+0x104>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f52:	e003      	b.n	8007f5c <HAL_TIM_PWM_Stop+0x10c>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	40012c00 	.word	0x40012c00
 8007f6c:	40013400 	.word	0x40013400
 8007f70:	40014000 	.word	0x40014000
 8007f74:	40014400 	.word	0x40014400
 8007f78:	40014800 	.word	0x40014800

08007f7c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d109      	bne.n	8007fa4 <HAL_TIM_PWM_Start_IT+0x28>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	bf14      	ite	ne
 8007f9c:	2301      	movne	r3, #1
 8007f9e:	2300      	moveq	r3, #0
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	e03c      	b.n	800801e <HAL_TIM_PWM_Start_IT+0xa2>
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	d109      	bne.n	8007fbe <HAL_TIM_PWM_Start_IT+0x42>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	bf14      	ite	ne
 8007fb6:	2301      	movne	r3, #1
 8007fb8:	2300      	moveq	r3, #0
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	e02f      	b.n	800801e <HAL_TIM_PWM_Start_IT+0xa2>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b08      	cmp	r3, #8
 8007fc2:	d109      	bne.n	8007fd8 <HAL_TIM_PWM_Start_IT+0x5c>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	bf14      	ite	ne
 8007fd0:	2301      	movne	r3, #1
 8007fd2:	2300      	moveq	r3, #0
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	e022      	b.n	800801e <HAL_TIM_PWM_Start_IT+0xa2>
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2b0c      	cmp	r3, #12
 8007fdc:	d109      	bne.n	8007ff2 <HAL_TIM_PWM_Start_IT+0x76>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	bf14      	ite	ne
 8007fea:	2301      	movne	r3, #1
 8007fec:	2300      	moveq	r3, #0
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	e015      	b.n	800801e <HAL_TIM_PWM_Start_IT+0xa2>
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b10      	cmp	r3, #16
 8007ff6:	d109      	bne.n	800800c <HAL_TIM_PWM_Start_IT+0x90>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b01      	cmp	r3, #1
 8008002:	bf14      	ite	ne
 8008004:	2301      	movne	r3, #1
 8008006:	2300      	moveq	r3, #0
 8008008:	b2db      	uxtb	r3, r3
 800800a:	e008      	b.n	800801e <HAL_TIM_PWM_Start_IT+0xa2>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b01      	cmp	r3, #1
 8008016:	bf14      	ite	ne
 8008018:	2301      	movne	r3, #1
 800801a:	2300      	moveq	r3, #0
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e0e2      	b.n	80081ec <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d104      	bne.n	8008036 <HAL_TIM_PWM_Start_IT+0xba>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008034:	e023      	b.n	800807e <HAL_TIM_PWM_Start_IT+0x102>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b04      	cmp	r3, #4
 800803a:	d104      	bne.n	8008046 <HAL_TIM_PWM_Start_IT+0xca>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008044:	e01b      	b.n	800807e <HAL_TIM_PWM_Start_IT+0x102>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b08      	cmp	r3, #8
 800804a:	d104      	bne.n	8008056 <HAL_TIM_PWM_Start_IT+0xda>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2202      	movs	r2, #2
 8008050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008054:	e013      	b.n	800807e <HAL_TIM_PWM_Start_IT+0x102>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b0c      	cmp	r3, #12
 800805a:	d104      	bne.n	8008066 <HAL_TIM_PWM_Start_IT+0xea>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008064:	e00b      	b.n	800807e <HAL_TIM_PWM_Start_IT+0x102>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b10      	cmp	r3, #16
 800806a:	d104      	bne.n	8008076 <HAL_TIM_PWM_Start_IT+0xfa>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008074:	e003      	b.n	800807e <HAL_TIM_PWM_Start_IT+0x102>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2202      	movs	r2, #2
 800807a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b0c      	cmp	r3, #12
 8008082:	d841      	bhi.n	8008108 <HAL_TIM_PWM_Start_IT+0x18c>
 8008084:	a201      	add	r2, pc, #4	@ (adr r2, 800808c <HAL_TIM_PWM_Start_IT+0x110>)
 8008086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808a:	bf00      	nop
 800808c:	080080c1 	.word	0x080080c1
 8008090:	08008109 	.word	0x08008109
 8008094:	08008109 	.word	0x08008109
 8008098:	08008109 	.word	0x08008109
 800809c:	080080d3 	.word	0x080080d3
 80080a0:	08008109 	.word	0x08008109
 80080a4:	08008109 	.word	0x08008109
 80080a8:	08008109 	.word	0x08008109
 80080ac:	080080e5 	.word	0x080080e5
 80080b0:	08008109 	.word	0x08008109
 80080b4:	08008109 	.word	0x08008109
 80080b8:	08008109 	.word	0x08008109
 80080bc:	080080f7 	.word	0x080080f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68da      	ldr	r2, [r3, #12]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0202 	orr.w	r2, r2, #2
 80080ce:	60da      	str	r2, [r3, #12]
      break;
 80080d0:	e01d      	b.n	800810e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68da      	ldr	r2, [r3, #12]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f042 0204 	orr.w	r2, r2, #4
 80080e0:	60da      	str	r2, [r3, #12]
      break;
 80080e2:	e014      	b.n	800810e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f042 0208 	orr.w	r2, r2, #8
 80080f2:	60da      	str	r2, [r3, #12]
      break;
 80080f4:	e00b      	b.n	800810e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68da      	ldr	r2, [r3, #12]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f042 0210 	orr.w	r2, r2, #16
 8008104:	60da      	str	r2, [r3, #12]
      break;
 8008106:	e002      	b.n	800810e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	73fb      	strb	r3, [r7, #15]
      break;
 800810c:	bf00      	nop
  }

  if (status == HAL_OK)
 800810e:	7bfb      	ldrb	r3, [r7, #15]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d16a      	bne.n	80081ea <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2201      	movs	r2, #1
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	4618      	mov	r0, r3
 800811e:	f001 fc7d 	bl	8009a1c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a33      	ldr	r2, [pc, #204]	@ (80081f4 <HAL_TIM_PWM_Start_IT+0x278>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d013      	beq.n	8008154 <HAL_TIM_PWM_Start_IT+0x1d8>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a31      	ldr	r2, [pc, #196]	@ (80081f8 <HAL_TIM_PWM_Start_IT+0x27c>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d00e      	beq.n	8008154 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a30      	ldr	r2, [pc, #192]	@ (80081fc <HAL_TIM_PWM_Start_IT+0x280>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d009      	beq.n	8008154 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a2e      	ldr	r2, [pc, #184]	@ (8008200 <HAL_TIM_PWM_Start_IT+0x284>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d004      	beq.n	8008154 <HAL_TIM_PWM_Start_IT+0x1d8>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a2d      	ldr	r2, [pc, #180]	@ (8008204 <HAL_TIM_PWM_Start_IT+0x288>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d101      	bne.n	8008158 <HAL_TIM_PWM_Start_IT+0x1dc>
 8008154:	2301      	movs	r3, #1
 8008156:	e000      	b.n	800815a <HAL_TIM_PWM_Start_IT+0x1de>
 8008158:	2300      	movs	r3, #0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d007      	beq.n	800816e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800816c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a20      	ldr	r2, [pc, #128]	@ (80081f4 <HAL_TIM_PWM_Start_IT+0x278>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d018      	beq.n	80081aa <HAL_TIM_PWM_Start_IT+0x22e>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008180:	d013      	beq.n	80081aa <HAL_TIM_PWM_Start_IT+0x22e>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a20      	ldr	r2, [pc, #128]	@ (8008208 <HAL_TIM_PWM_Start_IT+0x28c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d00e      	beq.n	80081aa <HAL_TIM_PWM_Start_IT+0x22e>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1e      	ldr	r2, [pc, #120]	@ (800820c <HAL_TIM_PWM_Start_IT+0x290>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d009      	beq.n	80081aa <HAL_TIM_PWM_Start_IT+0x22e>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a17      	ldr	r2, [pc, #92]	@ (80081f8 <HAL_TIM_PWM_Start_IT+0x27c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d004      	beq.n	80081aa <HAL_TIM_PWM_Start_IT+0x22e>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a15      	ldr	r2, [pc, #84]	@ (80081fc <HAL_TIM_PWM_Start_IT+0x280>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d115      	bne.n	80081d6 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	4b17      	ldr	r3, [pc, #92]	@ (8008210 <HAL_TIM_PWM_Start_IT+0x294>)
 80081b2:	4013      	ands	r3, r2
 80081b4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b06      	cmp	r3, #6
 80081ba:	d015      	beq.n	80081e8 <HAL_TIM_PWM_Start_IT+0x26c>
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081c2:	d011      	beq.n	80081e8 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f042 0201 	orr.w	r2, r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d4:	e008      	b.n	80081e8 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f042 0201 	orr.w	r2, r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	e000      	b.n	80081ea <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	40012c00 	.word	0x40012c00
 80081f8:	40013400 	.word	0x40013400
 80081fc:	40014000 	.word	0x40014000
 8008200:	40014400 	.word	0x40014400
 8008204:	40014800 	.word	0x40014800
 8008208:	40000400 	.word	0x40000400
 800820c:	40000800 	.word	0x40000800
 8008210:	00010007 	.word	0x00010007

08008214 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e049      	b.n	80082ba <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d106      	bne.n	8008240 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f841 	bl	80082c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3304      	adds	r3, #4
 8008250:	4619      	mov	r1, r3
 8008252:	4610      	mov	r0, r2
 8008254:	f000 fdd2 	bl	8008dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b083      	sub	sp, #12
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80082ca:	bf00      	nop
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
	...

080082d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d104      	bne.n	80082f6 <HAL_TIM_IC_Start_IT+0x1e>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	e023      	b.n	800833e <HAL_TIM_IC_Start_IT+0x66>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b04      	cmp	r3, #4
 80082fa:	d104      	bne.n	8008306 <HAL_TIM_IC_Start_IT+0x2e>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008302:	b2db      	uxtb	r3, r3
 8008304:	e01b      	b.n	800833e <HAL_TIM_IC_Start_IT+0x66>
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b08      	cmp	r3, #8
 800830a:	d104      	bne.n	8008316 <HAL_TIM_IC_Start_IT+0x3e>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008312:	b2db      	uxtb	r3, r3
 8008314:	e013      	b.n	800833e <HAL_TIM_IC_Start_IT+0x66>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b0c      	cmp	r3, #12
 800831a:	d104      	bne.n	8008326 <HAL_TIM_IC_Start_IT+0x4e>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008322:	b2db      	uxtb	r3, r3
 8008324:	e00b      	b.n	800833e <HAL_TIM_IC_Start_IT+0x66>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b10      	cmp	r3, #16
 800832a:	d104      	bne.n	8008336 <HAL_TIM_IC_Start_IT+0x5e>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008332:	b2db      	uxtb	r3, r3
 8008334:	e003      	b.n	800833e <HAL_TIM_IC_Start_IT+0x66>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800833c:	b2db      	uxtb	r3, r3
 800833e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d104      	bne.n	8008350 <HAL_TIM_IC_Start_IT+0x78>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800834c:	b2db      	uxtb	r3, r3
 800834e:	e013      	b.n	8008378 <HAL_TIM_IC_Start_IT+0xa0>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2b04      	cmp	r3, #4
 8008354:	d104      	bne.n	8008360 <HAL_TIM_IC_Start_IT+0x88>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800835c:	b2db      	uxtb	r3, r3
 800835e:	e00b      	b.n	8008378 <HAL_TIM_IC_Start_IT+0xa0>
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	2b08      	cmp	r3, #8
 8008364:	d104      	bne.n	8008370 <HAL_TIM_IC_Start_IT+0x98>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800836c:	b2db      	uxtb	r3, r3
 800836e:	e003      	b.n	8008378 <HAL_TIM_IC_Start_IT+0xa0>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008376:	b2db      	uxtb	r3, r3
 8008378:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d102      	bne.n	8008386 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008380:	7b7b      	ldrb	r3, [r7, #13]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d001      	beq.n	800838a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e0d8      	b.n	800853c <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d104      	bne.n	800839a <HAL_TIM_IC_Start_IT+0xc2>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008398:	e023      	b.n	80083e2 <HAL_TIM_IC_Start_IT+0x10a>
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2b04      	cmp	r3, #4
 800839e:	d104      	bne.n	80083aa <HAL_TIM_IC_Start_IT+0xd2>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083a8:	e01b      	b.n	80083e2 <HAL_TIM_IC_Start_IT+0x10a>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d104      	bne.n	80083ba <HAL_TIM_IC_Start_IT+0xe2>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2202      	movs	r2, #2
 80083b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083b8:	e013      	b.n	80083e2 <HAL_TIM_IC_Start_IT+0x10a>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b0c      	cmp	r3, #12
 80083be:	d104      	bne.n	80083ca <HAL_TIM_IC_Start_IT+0xf2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80083c8:	e00b      	b.n	80083e2 <HAL_TIM_IC_Start_IT+0x10a>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b10      	cmp	r3, #16
 80083ce:	d104      	bne.n	80083da <HAL_TIM_IC_Start_IT+0x102>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083d8:	e003      	b.n	80083e2 <HAL_TIM_IC_Start_IT+0x10a>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2202      	movs	r2, #2
 80083de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d104      	bne.n	80083f2 <HAL_TIM_IC_Start_IT+0x11a>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083f0:	e013      	b.n	800841a <HAL_TIM_IC_Start_IT+0x142>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	d104      	bne.n	8008402 <HAL_TIM_IC_Start_IT+0x12a>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008400:	e00b      	b.n	800841a <HAL_TIM_IC_Start_IT+0x142>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b08      	cmp	r3, #8
 8008406:	d104      	bne.n	8008412 <HAL_TIM_IC_Start_IT+0x13a>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008410:	e003      	b.n	800841a <HAL_TIM_IC_Start_IT+0x142>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2202      	movs	r2, #2
 8008416:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b0c      	cmp	r3, #12
 800841e:	d841      	bhi.n	80084a4 <HAL_TIM_IC_Start_IT+0x1cc>
 8008420:	a201      	add	r2, pc, #4	@ (adr r2, 8008428 <HAL_TIM_IC_Start_IT+0x150>)
 8008422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008426:	bf00      	nop
 8008428:	0800845d 	.word	0x0800845d
 800842c:	080084a5 	.word	0x080084a5
 8008430:	080084a5 	.word	0x080084a5
 8008434:	080084a5 	.word	0x080084a5
 8008438:	0800846f 	.word	0x0800846f
 800843c:	080084a5 	.word	0x080084a5
 8008440:	080084a5 	.word	0x080084a5
 8008444:	080084a5 	.word	0x080084a5
 8008448:	08008481 	.word	0x08008481
 800844c:	080084a5 	.word	0x080084a5
 8008450:	080084a5 	.word	0x080084a5
 8008454:	080084a5 	.word	0x080084a5
 8008458:	08008493 	.word	0x08008493
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68da      	ldr	r2, [r3, #12]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0202 	orr.w	r2, r2, #2
 800846a:	60da      	str	r2, [r3, #12]
      break;
 800846c:	e01d      	b.n	80084aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f042 0204 	orr.w	r2, r2, #4
 800847c:	60da      	str	r2, [r3, #12]
      break;
 800847e:	e014      	b.n	80084aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f042 0208 	orr.w	r2, r2, #8
 800848e:	60da      	str	r2, [r3, #12]
      break;
 8008490:	e00b      	b.n	80084aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68da      	ldr	r2, [r3, #12]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f042 0210 	orr.w	r2, r2, #16
 80084a0:	60da      	str	r2, [r3, #12]
      break;
 80084a2:	e002      	b.n	80084aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	73fb      	strb	r3, [r7, #15]
      break;
 80084a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d144      	bne.n	800853a <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2201      	movs	r2, #1
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f001 faaf 	bl	8009a1c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a20      	ldr	r2, [pc, #128]	@ (8008544 <HAL_TIM_IC_Start_IT+0x26c>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d018      	beq.n	80084fa <HAL_TIM_IC_Start_IT+0x222>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084d0:	d013      	beq.n	80084fa <HAL_TIM_IC_Start_IT+0x222>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008548 <HAL_TIM_IC_Start_IT+0x270>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d00e      	beq.n	80084fa <HAL_TIM_IC_Start_IT+0x222>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a1a      	ldr	r2, [pc, #104]	@ (800854c <HAL_TIM_IC_Start_IT+0x274>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d009      	beq.n	80084fa <HAL_TIM_IC_Start_IT+0x222>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a19      	ldr	r2, [pc, #100]	@ (8008550 <HAL_TIM_IC_Start_IT+0x278>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d004      	beq.n	80084fa <HAL_TIM_IC_Start_IT+0x222>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a17      	ldr	r2, [pc, #92]	@ (8008554 <HAL_TIM_IC_Start_IT+0x27c>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d115      	bne.n	8008526 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	689a      	ldr	r2, [r3, #8]
 8008500:	4b15      	ldr	r3, [pc, #84]	@ (8008558 <HAL_TIM_IC_Start_IT+0x280>)
 8008502:	4013      	ands	r3, r2
 8008504:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b06      	cmp	r3, #6
 800850a:	d015      	beq.n	8008538 <HAL_TIM_IC_Start_IT+0x260>
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008512:	d011      	beq.n	8008538 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f042 0201 	orr.w	r2, r2, #1
 8008522:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008524:	e008      	b.n	8008538 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f042 0201 	orr.w	r2, r2, #1
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	e000      	b.n	800853a <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008538:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800853a:	7bfb      	ldrb	r3, [r7, #15]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	40012c00 	.word	0x40012c00
 8008548:	40000400 	.word	0x40000400
 800854c:	40000800 	.word	0x40000800
 8008550:	40013400 	.word	0x40013400
 8008554:	40014000 	.word	0x40014000
 8008558:	00010007 	.word	0x00010007

0800855c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	2b00      	cmp	r3, #0
 800857c:	d020      	beq.n	80085c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d01b      	beq.n	80085c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f06f 0202 	mvn.w	r2, #2
 8008590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	f003 0303 	and.w	r3, r3, #3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7f9 ff6e 	bl	8002488 <HAL_TIM_IC_CaptureCallback>
 80085ac:	e005      	b.n	80085ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fc10 	bl	8008dd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7f9 ff91 	bl	80024dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f003 0304 	and.w	r3, r3, #4
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d020      	beq.n	800860c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d01b      	beq.n	800860c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f06f 0204 	mvn.w	r2, #4
 80085dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2202      	movs	r2, #2
 80085e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7f9 ff48 	bl	8002488 <HAL_TIM_IC_CaptureCallback>
 80085f8:	e005      	b.n	8008606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fbea 	bl	8008dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7f9 ff6b 	bl	80024dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f003 0308 	and.w	r3, r3, #8
 8008612:	2b00      	cmp	r3, #0
 8008614:	d020      	beq.n	8008658 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f003 0308 	and.w	r3, r3, #8
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01b      	beq.n	8008658 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f06f 0208 	mvn.w	r2, #8
 8008628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2204      	movs	r2, #4
 800862e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	f003 0303 	and.w	r3, r3, #3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7f9 ff22 	bl	8002488 <HAL_TIM_IC_CaptureCallback>
 8008644:	e005      	b.n	8008652 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fbc4 	bl	8008dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7f9 ff45 	bl	80024dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	f003 0310 	and.w	r3, r3, #16
 800865e:	2b00      	cmp	r3, #0
 8008660:	d020      	beq.n	80086a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f003 0310 	and.w	r3, r3, #16
 8008668:	2b00      	cmp	r3, #0
 800866a:	d01b      	beq.n	80086a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f06f 0210 	mvn.w	r2, #16
 8008674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2208      	movs	r2, #8
 800867a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7f9 fefc 	bl	8002488 <HAL_TIM_IC_CaptureCallback>
 8008690:	e005      	b.n	800869e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fb9e 	bl	8008dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7f9 ff1f 	bl	80024dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00c      	beq.n	80086c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d007      	beq.n	80086c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f06f 0201 	mvn.w	r2, #1
 80086c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7f9 ff6c 	bl	80025a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d104      	bne.n	80086dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00c      	beq.n	80086f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d007      	beq.n	80086f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80086ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 fb85 	bl	8009e00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00c      	beq.n	800871a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008706:	2b00      	cmp	r3, #0
 8008708:	d007      	beq.n	800871a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 fb7d 	bl	8009e14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00c      	beq.n	800873e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800872a:	2b00      	cmp	r3, #0
 800872c:	d007      	beq.n	800873e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fb55 	bl	8008de8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	f003 0320 	and.w	r3, r3, #32
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00c      	beq.n	8008762 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b00      	cmp	r3, #0
 8008750:	d007      	beq.n	8008762 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f06f 0220 	mvn.w	r2, #32
 800875a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f001 fb45 	bl	8009dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00c      	beq.n	8008786 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d007      	beq.n	8008786 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800877e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f001 fb51 	bl	8009e28 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00c      	beq.n	80087aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d007      	beq.n	80087aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80087a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 fb49 	bl	8009e3c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00c      	beq.n	80087ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d007      	beq.n	80087ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80087c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 fb41 	bl	8009e50 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00c      	beq.n	80087f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d007      	beq.n	80087f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80087ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f001 fb39 	bl	8009e64 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087f2:	bf00      	nop
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b086      	sub	sp, #24
 80087fe:	af00      	add	r7, sp, #0
 8008800:	60f8      	str	r0, [r7, #12]
 8008802:	60b9      	str	r1, [r7, #8]
 8008804:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008810:	2b01      	cmp	r3, #1
 8008812:	d101      	bne.n	8008818 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008814:	2302      	movs	r3, #2
 8008816:	e088      	b.n	800892a <HAL_TIM_IC_ConfigChannel+0x130>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d11b      	bne.n	800885e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008836:	f000 ff37 	bl	80096a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	699a      	ldr	r2, [r3, #24]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f022 020c 	bic.w	r2, r2, #12
 8008848:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	6999      	ldr	r1, [r3, #24]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	689a      	ldr	r2, [r3, #8]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	430a      	orrs	r2, r1
 800885a:	619a      	str	r2, [r3, #24]
 800885c:	e060      	b.n	8008920 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b04      	cmp	r3, #4
 8008862:	d11c      	bne.n	800889e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008874:	f000 ffaf 	bl	80097d6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	699a      	ldr	r2, [r3, #24]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008886:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6999      	ldr	r1, [r3, #24]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	021a      	lsls	r2, r3, #8
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	619a      	str	r2, [r3, #24]
 800889c:	e040      	b.n	8008920 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b08      	cmp	r3, #8
 80088a2:	d11b      	bne.n	80088dc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80088b4:	f000 fffc 	bl	80098b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	69da      	ldr	r2, [r3, #28]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 020c 	bic.w	r2, r2, #12
 80088c6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	69d9      	ldr	r1, [r3, #28]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	689a      	ldr	r2, [r3, #8]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	61da      	str	r2, [r3, #28]
 80088da:	e021      	b.n	8008920 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b0c      	cmp	r3, #12
 80088e0:	d11c      	bne.n	800891c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80088f2:	f001 f819 	bl	8009928 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	69da      	ldr	r2, [r3, #28]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008904:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69d9      	ldr	r1, [r3, #28]
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	021a      	lsls	r2, r3, #8
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	61da      	str	r2, [r3, #28]
 800891a:	e001      	b.n	8008920 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008928:	7dfb      	ldrb	r3, [r7, #23]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
	...

08008934 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800894a:	2b01      	cmp	r3, #1
 800894c:	d101      	bne.n	8008952 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800894e:	2302      	movs	r3, #2
 8008950:	e0ff      	b.n	8008b52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2201      	movs	r2, #1
 8008956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b14      	cmp	r3, #20
 800895e:	f200 80f0 	bhi.w	8008b42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008962:	a201      	add	r2, pc, #4	@ (adr r2, 8008968 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	080089bd 	.word	0x080089bd
 800896c:	08008b43 	.word	0x08008b43
 8008970:	08008b43 	.word	0x08008b43
 8008974:	08008b43 	.word	0x08008b43
 8008978:	080089fd 	.word	0x080089fd
 800897c:	08008b43 	.word	0x08008b43
 8008980:	08008b43 	.word	0x08008b43
 8008984:	08008b43 	.word	0x08008b43
 8008988:	08008a3f 	.word	0x08008a3f
 800898c:	08008b43 	.word	0x08008b43
 8008990:	08008b43 	.word	0x08008b43
 8008994:	08008b43 	.word	0x08008b43
 8008998:	08008a7f 	.word	0x08008a7f
 800899c:	08008b43 	.word	0x08008b43
 80089a0:	08008b43 	.word	0x08008b43
 80089a4:	08008b43 	.word	0x08008b43
 80089a8:	08008ac1 	.word	0x08008ac1
 80089ac:	08008b43 	.word	0x08008b43
 80089b0:	08008b43 	.word	0x08008b43
 80089b4:	08008b43 	.word	0x08008b43
 80089b8:	08008b01 	.word	0x08008b01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68b9      	ldr	r1, [r7, #8]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 fab6 	bl	8008f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	699a      	ldr	r2, [r3, #24]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 0208 	orr.w	r2, r2, #8
 80089d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	699a      	ldr	r2, [r3, #24]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f022 0204 	bic.w	r2, r2, #4
 80089e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6999      	ldr	r1, [r3, #24]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	691a      	ldr	r2, [r3, #16]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	430a      	orrs	r2, r1
 80089f8:	619a      	str	r2, [r3, #24]
      break;
 80089fa:	e0a5      	b.n	8008b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68b9      	ldr	r1, [r7, #8]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 fb26 	bl	8009054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699a      	ldr	r2, [r3, #24]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	699a      	ldr	r2, [r3, #24]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6999      	ldr	r1, [r3, #24]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	021a      	lsls	r2, r3, #8
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	619a      	str	r2, [r3, #24]
      break;
 8008a3c:	e084      	b.n	8008b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68b9      	ldr	r1, [r7, #8]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fb8f 	bl	8009168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69da      	ldr	r2, [r3, #28]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f042 0208 	orr.w	r2, r2, #8
 8008a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69da      	ldr	r2, [r3, #28]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f022 0204 	bic.w	r2, r2, #4
 8008a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69d9      	ldr	r1, [r3, #28]
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	691a      	ldr	r2, [r3, #16]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	430a      	orrs	r2, r1
 8008a7a:	61da      	str	r2, [r3, #28]
      break;
 8008a7c:	e064      	b.n	8008b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68b9      	ldr	r1, [r7, #8]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 fbf7 	bl	8009278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69da      	ldr	r2, [r3, #28]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	69da      	ldr	r2, [r3, #28]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	69d9      	ldr	r1, [r3, #28]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	021a      	lsls	r2, r3, #8
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	61da      	str	r2, [r3, #28]
      break;
 8008abe:	e043      	b.n	8008b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68b9      	ldr	r1, [r7, #8]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 fc60 	bl	800938c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f042 0208 	orr.w	r2, r2, #8
 8008ada:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f022 0204 	bic.w	r2, r2, #4
 8008aea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	691a      	ldr	r2, [r3, #16]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	430a      	orrs	r2, r1
 8008afc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008afe:	e023      	b.n	8008b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68b9      	ldr	r1, [r7, #8]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 fca4 	bl	8009454 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b2a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	021a      	lsls	r2, r3, #8
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008b40:	e002      	b.n	8008b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	75fb      	strb	r3, [r7, #23]
      break;
 8008b46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3718      	adds	r7, #24
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop

08008b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d101      	bne.n	8008b78 <HAL_TIM_ConfigClockSource+0x1c>
 8008b74:	2302      	movs	r3, #2
 8008b76:	e0de      	b.n	8008d36 <HAL_TIM_ConfigClockSource+0x1da>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2202      	movs	r2, #2
 8008b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008b96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ba2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a63      	ldr	r2, [pc, #396]	@ (8008d40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	f000 80a9 	beq.w	8008d0a <HAL_TIM_ConfigClockSource+0x1ae>
 8008bb8:	4a61      	ldr	r2, [pc, #388]	@ (8008d40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	f200 80ae 	bhi.w	8008d1c <HAL_TIM_ConfigClockSource+0x1c0>
 8008bc0:	4a60      	ldr	r2, [pc, #384]	@ (8008d44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	f000 80a1 	beq.w	8008d0a <HAL_TIM_ConfigClockSource+0x1ae>
 8008bc8:	4a5e      	ldr	r2, [pc, #376]	@ (8008d44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	f200 80a6 	bhi.w	8008d1c <HAL_TIM_ConfigClockSource+0x1c0>
 8008bd0:	4a5d      	ldr	r2, [pc, #372]	@ (8008d48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	f000 8099 	beq.w	8008d0a <HAL_TIM_ConfigClockSource+0x1ae>
 8008bd8:	4a5b      	ldr	r2, [pc, #364]	@ (8008d48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	f200 809e 	bhi.w	8008d1c <HAL_TIM_ConfigClockSource+0x1c0>
 8008be0:	4a5a      	ldr	r2, [pc, #360]	@ (8008d4c <HAL_TIM_ConfigClockSource+0x1f0>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	f000 8091 	beq.w	8008d0a <HAL_TIM_ConfigClockSource+0x1ae>
 8008be8:	4a58      	ldr	r2, [pc, #352]	@ (8008d4c <HAL_TIM_ConfigClockSource+0x1f0>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	f200 8096 	bhi.w	8008d1c <HAL_TIM_ConfigClockSource+0x1c0>
 8008bf0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008bf4:	f000 8089 	beq.w	8008d0a <HAL_TIM_ConfigClockSource+0x1ae>
 8008bf8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008bfc:	f200 808e 	bhi.w	8008d1c <HAL_TIM_ConfigClockSource+0x1c0>
 8008c00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c04:	d03e      	beq.n	8008c84 <HAL_TIM_ConfigClockSource+0x128>
 8008c06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c0a:	f200 8087 	bhi.w	8008d1c <HAL_TIM_ConfigClockSource+0x1c0>
 8008c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c12:	f000 8086 	beq.w	8008d22 <HAL_TIM_ConfigClockSource+0x1c6>
 8008c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c1a:	d87f      	bhi.n	8008d1c <HAL_TIM_ConfigClockSource+0x1c0>
 8008c1c:	2b70      	cmp	r3, #112	@ 0x70
 8008c1e:	d01a      	beq.n	8008c56 <HAL_TIM_ConfigClockSource+0xfa>
 8008c20:	2b70      	cmp	r3, #112	@ 0x70
 8008c22:	d87b      	bhi.n	8008d1c <HAL_TIM_ConfigClockSource+0x1c0>
 8008c24:	2b60      	cmp	r3, #96	@ 0x60
 8008c26:	d050      	beq.n	8008cca <HAL_TIM_ConfigClockSource+0x16e>
 8008c28:	2b60      	cmp	r3, #96	@ 0x60
 8008c2a:	d877      	bhi.n	8008d1c <HAL_TIM_ConfigClockSource+0x1c0>
 8008c2c:	2b50      	cmp	r3, #80	@ 0x50
 8008c2e:	d03c      	beq.n	8008caa <HAL_TIM_ConfigClockSource+0x14e>
 8008c30:	2b50      	cmp	r3, #80	@ 0x50
 8008c32:	d873      	bhi.n	8008d1c <HAL_TIM_ConfigClockSource+0x1c0>
 8008c34:	2b40      	cmp	r3, #64	@ 0x40
 8008c36:	d058      	beq.n	8008cea <HAL_TIM_ConfigClockSource+0x18e>
 8008c38:	2b40      	cmp	r3, #64	@ 0x40
 8008c3a:	d86f      	bhi.n	8008d1c <HAL_TIM_ConfigClockSource+0x1c0>
 8008c3c:	2b30      	cmp	r3, #48	@ 0x30
 8008c3e:	d064      	beq.n	8008d0a <HAL_TIM_ConfigClockSource+0x1ae>
 8008c40:	2b30      	cmp	r3, #48	@ 0x30
 8008c42:	d86b      	bhi.n	8008d1c <HAL_TIM_ConfigClockSource+0x1c0>
 8008c44:	2b20      	cmp	r3, #32
 8008c46:	d060      	beq.n	8008d0a <HAL_TIM_ConfigClockSource+0x1ae>
 8008c48:	2b20      	cmp	r3, #32
 8008c4a:	d867      	bhi.n	8008d1c <HAL_TIM_ConfigClockSource+0x1c0>
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d05c      	beq.n	8008d0a <HAL_TIM_ConfigClockSource+0x1ae>
 8008c50:	2b10      	cmp	r3, #16
 8008c52:	d05a      	beq.n	8008d0a <HAL_TIM_ConfigClockSource+0x1ae>
 8008c54:	e062      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c66:	f000 feb9 	bl	80099dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008c78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	609a      	str	r2, [r3, #8]
      break;
 8008c82:	e04f      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c94:	f000 fea2 	bl	80099dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689a      	ldr	r2, [r3, #8]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ca6:	609a      	str	r2, [r3, #8]
      break;
 8008ca8:	e03c      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	f000 fd5e 	bl	8009778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2150      	movs	r1, #80	@ 0x50
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fe6d 	bl	80099a2 <TIM_ITRx_SetConfig>
      break;
 8008cc8:	e02c      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	f000 fdba 	bl	8009850 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2160      	movs	r1, #96	@ 0x60
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 fe5d 	bl	80099a2 <TIM_ITRx_SetConfig>
      break;
 8008ce8:	e01c      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f000 fd3e 	bl	8009778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2140      	movs	r1, #64	@ 0x40
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 fe4d 	bl	80099a2 <TIM_ITRx_SetConfig>
      break;
 8008d08:	e00c      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4619      	mov	r1, r3
 8008d14:	4610      	mov	r0, r2
 8008d16:	f000 fe44 	bl	80099a2 <TIM_ITRx_SetConfig>
      break;
 8008d1a:	e003      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d20:	e000      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	00100070 	.word	0x00100070
 8008d44:	00100040 	.word	0x00100040
 8008d48:	00100030 	.word	0x00100030
 8008d4c:	00100020 	.word	0x00100020

08008d50 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d101      	bne.n	8008d68 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008d64:	2302      	movs	r3, #2
 8008d66:	e031      	b.n	8008dcc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2202      	movs	r2, #2
 8008d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fbd0 	bl	8009520 <TIM_SlaveTimer_SetConfig>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d009      	beq.n	8008d9a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e018      	b.n	8008dcc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68da      	ldr	r2, [r3, #12]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008da8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008db8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a42      	ldr	r2, [pc, #264]	@ (8008f18 <TIM_Base_SetConfig+0x11c>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d00f      	beq.n	8008e34 <TIM_Base_SetConfig+0x38>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e1a:	d00b      	beq.n	8008e34 <TIM_Base_SetConfig+0x38>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8008f1c <TIM_Base_SetConfig+0x120>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d007      	beq.n	8008e34 <TIM_Base_SetConfig+0x38>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a3e      	ldr	r2, [pc, #248]	@ (8008f20 <TIM_Base_SetConfig+0x124>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d003      	beq.n	8008e34 <TIM_Base_SetConfig+0x38>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8008f24 <TIM_Base_SetConfig+0x128>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d108      	bne.n	8008e46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a33      	ldr	r2, [pc, #204]	@ (8008f18 <TIM_Base_SetConfig+0x11c>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d01b      	beq.n	8008e86 <TIM_Base_SetConfig+0x8a>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e54:	d017      	beq.n	8008e86 <TIM_Base_SetConfig+0x8a>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a30      	ldr	r2, [pc, #192]	@ (8008f1c <TIM_Base_SetConfig+0x120>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d013      	beq.n	8008e86 <TIM_Base_SetConfig+0x8a>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a2f      	ldr	r2, [pc, #188]	@ (8008f20 <TIM_Base_SetConfig+0x124>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d00f      	beq.n	8008e86 <TIM_Base_SetConfig+0x8a>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a2e      	ldr	r2, [pc, #184]	@ (8008f24 <TIM_Base_SetConfig+0x128>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d00b      	beq.n	8008e86 <TIM_Base_SetConfig+0x8a>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a2d      	ldr	r2, [pc, #180]	@ (8008f28 <TIM_Base_SetConfig+0x12c>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d007      	beq.n	8008e86 <TIM_Base_SetConfig+0x8a>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a2c      	ldr	r2, [pc, #176]	@ (8008f2c <TIM_Base_SetConfig+0x130>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d003      	beq.n	8008e86 <TIM_Base_SetConfig+0x8a>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a2b      	ldr	r2, [pc, #172]	@ (8008f30 <TIM_Base_SetConfig+0x134>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d108      	bne.n	8008e98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	689a      	ldr	r2, [r3, #8]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a16      	ldr	r2, [pc, #88]	@ (8008f18 <TIM_Base_SetConfig+0x11c>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d00f      	beq.n	8008ee4 <TIM_Base_SetConfig+0xe8>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a17      	ldr	r2, [pc, #92]	@ (8008f24 <TIM_Base_SetConfig+0x128>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d00b      	beq.n	8008ee4 <TIM_Base_SetConfig+0xe8>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a16      	ldr	r2, [pc, #88]	@ (8008f28 <TIM_Base_SetConfig+0x12c>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d007      	beq.n	8008ee4 <TIM_Base_SetConfig+0xe8>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a15      	ldr	r2, [pc, #84]	@ (8008f2c <TIM_Base_SetConfig+0x130>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d003      	beq.n	8008ee4 <TIM_Base_SetConfig+0xe8>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a14      	ldr	r2, [pc, #80]	@ (8008f30 <TIM_Base_SetConfig+0x134>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d103      	bne.n	8008eec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	691a      	ldr	r2, [r3, #16]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d105      	bne.n	8008f0a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	f023 0201 	bic.w	r2, r3, #1
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	611a      	str	r2, [r3, #16]
  }
}
 8008f0a:	bf00      	nop
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	40012c00 	.word	0x40012c00
 8008f1c:	40000400 	.word	0x40000400
 8008f20:	40000800 	.word	0x40000800
 8008f24:	40013400 	.word	0x40013400
 8008f28:	40014000 	.word	0x40014000
 8008f2c:	40014400 	.word	0x40014400
 8008f30:	40014800 	.word	0x40014800

08008f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a1b      	ldr	r3, [r3, #32]
 8008f48:	f023 0201 	bic.w	r2, r3, #1
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f023 0303 	bic.w	r3, r3, #3
 8008f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f023 0302 	bic.w	r3, r3, #2
 8008f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8009040 <TIM_OC1_SetConfig+0x10c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d00f      	beq.n	8008fb4 <TIM_OC1_SetConfig+0x80>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a2b      	ldr	r2, [pc, #172]	@ (8009044 <TIM_OC1_SetConfig+0x110>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d00b      	beq.n	8008fb4 <TIM_OC1_SetConfig+0x80>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8009048 <TIM_OC1_SetConfig+0x114>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d007      	beq.n	8008fb4 <TIM_OC1_SetConfig+0x80>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a29      	ldr	r2, [pc, #164]	@ (800904c <TIM_OC1_SetConfig+0x118>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d003      	beq.n	8008fb4 <TIM_OC1_SetConfig+0x80>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a28      	ldr	r2, [pc, #160]	@ (8009050 <TIM_OC1_SetConfig+0x11c>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d10c      	bne.n	8008fce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	f023 0308 	bic.w	r3, r3, #8
 8008fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	f023 0304 	bic.w	r3, r3, #4
 8008fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8009040 <TIM_OC1_SetConfig+0x10c>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d00f      	beq.n	8008ff6 <TIM_OC1_SetConfig+0xc2>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8009044 <TIM_OC1_SetConfig+0x110>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d00b      	beq.n	8008ff6 <TIM_OC1_SetConfig+0xc2>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a19      	ldr	r2, [pc, #100]	@ (8009048 <TIM_OC1_SetConfig+0x114>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d007      	beq.n	8008ff6 <TIM_OC1_SetConfig+0xc2>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a18      	ldr	r2, [pc, #96]	@ (800904c <TIM_OC1_SetConfig+0x118>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d003      	beq.n	8008ff6 <TIM_OC1_SetConfig+0xc2>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a17      	ldr	r2, [pc, #92]	@ (8009050 <TIM_OC1_SetConfig+0x11c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d111      	bne.n	800901a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	4313      	orrs	r3, r2
 800900e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	4313      	orrs	r3, r2
 8009018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	621a      	str	r2, [r3, #32]
}
 8009034:	bf00      	nop
 8009036:	371c      	adds	r7, #28
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	40012c00 	.word	0x40012c00
 8009044:	40013400 	.word	0x40013400
 8009048:	40014000 	.word	0x40014000
 800904c:	40014400 	.word	0x40014400
 8009050:	40014800 	.word	0x40014800

08009054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009054:	b480      	push	{r7}
 8009056:	b087      	sub	sp, #28
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	f023 0210 	bic.w	r2, r3, #16
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800908e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	021b      	lsls	r3, r3, #8
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	4313      	orrs	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	f023 0320 	bic.w	r3, r3, #32
 80090a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	011b      	lsls	r3, r3, #4
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a28      	ldr	r2, [pc, #160]	@ (8009154 <TIM_OC2_SetConfig+0x100>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d003      	beq.n	80090c0 <TIM_OC2_SetConfig+0x6c>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a27      	ldr	r2, [pc, #156]	@ (8009158 <TIM_OC2_SetConfig+0x104>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d10d      	bne.n	80090dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	011b      	lsls	r3, r3, #4
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a1d      	ldr	r2, [pc, #116]	@ (8009154 <TIM_OC2_SetConfig+0x100>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d00f      	beq.n	8009104 <TIM_OC2_SetConfig+0xb0>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a1c      	ldr	r2, [pc, #112]	@ (8009158 <TIM_OC2_SetConfig+0x104>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d00b      	beq.n	8009104 <TIM_OC2_SetConfig+0xb0>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a1b      	ldr	r2, [pc, #108]	@ (800915c <TIM_OC2_SetConfig+0x108>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d007      	beq.n	8009104 <TIM_OC2_SetConfig+0xb0>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a1a      	ldr	r2, [pc, #104]	@ (8009160 <TIM_OC2_SetConfig+0x10c>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d003      	beq.n	8009104 <TIM_OC2_SetConfig+0xb0>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a19      	ldr	r2, [pc, #100]	@ (8009164 <TIM_OC2_SetConfig+0x110>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d113      	bne.n	800912c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800910a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	4313      	orrs	r3, r2
 800911e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	4313      	orrs	r3, r2
 800912a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	621a      	str	r2, [r3, #32]
}
 8009146:	bf00      	nop
 8009148:	371c      	adds	r7, #28
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	40012c00 	.word	0x40012c00
 8009158:	40013400 	.word	0x40013400
 800915c:	40014000 	.word	0x40014000
 8009160:	40014400 	.word	0x40014400
 8009164:	40014800 	.word	0x40014800

08009168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009168:	b480      	push	{r7}
 800916a:	b087      	sub	sp, #28
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800919a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f023 0303 	bic.w	r3, r3, #3
 80091a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	021b      	lsls	r3, r3, #8
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	4313      	orrs	r3, r2
 80091c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a27      	ldr	r2, [pc, #156]	@ (8009264 <TIM_OC3_SetConfig+0xfc>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d003      	beq.n	80091d2 <TIM_OC3_SetConfig+0x6a>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a26      	ldr	r2, [pc, #152]	@ (8009268 <TIM_OC3_SetConfig+0x100>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d10d      	bne.n	80091ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	021b      	lsls	r3, r3, #8
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80091ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a1c      	ldr	r2, [pc, #112]	@ (8009264 <TIM_OC3_SetConfig+0xfc>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d00f      	beq.n	8009216 <TIM_OC3_SetConfig+0xae>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a1b      	ldr	r2, [pc, #108]	@ (8009268 <TIM_OC3_SetConfig+0x100>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d00b      	beq.n	8009216 <TIM_OC3_SetConfig+0xae>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a1a      	ldr	r2, [pc, #104]	@ (800926c <TIM_OC3_SetConfig+0x104>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d007      	beq.n	8009216 <TIM_OC3_SetConfig+0xae>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a19      	ldr	r2, [pc, #100]	@ (8009270 <TIM_OC3_SetConfig+0x108>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d003      	beq.n	8009216 <TIM_OC3_SetConfig+0xae>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a18      	ldr	r2, [pc, #96]	@ (8009274 <TIM_OC3_SetConfig+0x10c>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d113      	bne.n	800923e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800921c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	011b      	lsls	r3, r3, #4
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	4313      	orrs	r3, r2
 8009230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	011b      	lsls	r3, r3, #4
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	4313      	orrs	r3, r2
 800923c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	621a      	str	r2, [r3, #32]
}
 8009258:	bf00      	nop
 800925a:	371c      	adds	r7, #28
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr
 8009264:	40012c00 	.word	0x40012c00
 8009268:	40013400 	.word	0x40013400
 800926c:	40014000 	.word	0x40014000
 8009270:	40014400 	.word	0x40014400
 8009274:	40014800 	.word	0x40014800

08009278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009278:	b480      	push	{r7}
 800927a:	b087      	sub	sp, #28
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	021b      	lsls	r3, r3, #8
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	4313      	orrs	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80092c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	031b      	lsls	r3, r3, #12
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a28      	ldr	r2, [pc, #160]	@ (8009378 <TIM_OC4_SetConfig+0x100>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d003      	beq.n	80092e4 <TIM_OC4_SetConfig+0x6c>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a27      	ldr	r2, [pc, #156]	@ (800937c <TIM_OC4_SetConfig+0x104>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d10d      	bne.n	8009300 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80092ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	031b      	lsls	r3, r3, #12
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a1d      	ldr	r2, [pc, #116]	@ (8009378 <TIM_OC4_SetConfig+0x100>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d00f      	beq.n	8009328 <TIM_OC4_SetConfig+0xb0>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a1c      	ldr	r2, [pc, #112]	@ (800937c <TIM_OC4_SetConfig+0x104>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d00b      	beq.n	8009328 <TIM_OC4_SetConfig+0xb0>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a1b      	ldr	r2, [pc, #108]	@ (8009380 <TIM_OC4_SetConfig+0x108>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d007      	beq.n	8009328 <TIM_OC4_SetConfig+0xb0>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a1a      	ldr	r2, [pc, #104]	@ (8009384 <TIM_OC4_SetConfig+0x10c>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d003      	beq.n	8009328 <TIM_OC4_SetConfig+0xb0>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a19      	ldr	r2, [pc, #100]	@ (8009388 <TIM_OC4_SetConfig+0x110>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d113      	bne.n	8009350 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800932e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009336:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	019b      	lsls	r3, r3, #6
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	4313      	orrs	r3, r2
 8009342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	019b      	lsls	r3, r3, #6
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	4313      	orrs	r3, r2
 800934e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	621a      	str	r2, [r3, #32]
}
 800936a:	bf00      	nop
 800936c:	371c      	adds	r7, #28
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	40012c00 	.word	0x40012c00
 800937c:	40013400 	.word	0x40013400
 8009380:	40014000 	.word	0x40014000
 8009384:	40014400 	.word	0x40014400
 8009388:	40014800 	.word	0x40014800

0800938c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a1b      	ldr	r3, [r3, #32]
 80093a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80093d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	041b      	lsls	r3, r3, #16
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	4313      	orrs	r3, r2
 80093dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a17      	ldr	r2, [pc, #92]	@ (8009440 <TIM_OC5_SetConfig+0xb4>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d00f      	beq.n	8009406 <TIM_OC5_SetConfig+0x7a>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a16      	ldr	r2, [pc, #88]	@ (8009444 <TIM_OC5_SetConfig+0xb8>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d00b      	beq.n	8009406 <TIM_OC5_SetConfig+0x7a>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a15      	ldr	r2, [pc, #84]	@ (8009448 <TIM_OC5_SetConfig+0xbc>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d007      	beq.n	8009406 <TIM_OC5_SetConfig+0x7a>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a14      	ldr	r2, [pc, #80]	@ (800944c <TIM_OC5_SetConfig+0xc0>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d003      	beq.n	8009406 <TIM_OC5_SetConfig+0x7a>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a13      	ldr	r2, [pc, #76]	@ (8009450 <TIM_OC5_SetConfig+0xc4>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d109      	bne.n	800941a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800940c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	021b      	lsls	r3, r3, #8
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	4313      	orrs	r3, r2
 8009418:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	685a      	ldr	r2, [r3, #4]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	621a      	str	r2, [r3, #32]
}
 8009434:	bf00      	nop
 8009436:	371c      	adds	r7, #28
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	40012c00 	.word	0x40012c00
 8009444:	40013400 	.word	0x40013400
 8009448:	40014000 	.word	0x40014000
 800944c:	40014400 	.word	0x40014400
 8009450:	40014800 	.word	0x40014800

08009454 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009454:	b480      	push	{r7}
 8009456:	b087      	sub	sp, #28
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a1b      	ldr	r3, [r3, #32]
 8009468:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800947a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	021b      	lsls	r3, r3, #8
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	4313      	orrs	r3, r2
 8009492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800949a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	051b      	lsls	r3, r3, #20
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a18      	ldr	r2, [pc, #96]	@ (800950c <TIM_OC6_SetConfig+0xb8>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d00f      	beq.n	80094d0 <TIM_OC6_SetConfig+0x7c>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a17      	ldr	r2, [pc, #92]	@ (8009510 <TIM_OC6_SetConfig+0xbc>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d00b      	beq.n	80094d0 <TIM_OC6_SetConfig+0x7c>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a16      	ldr	r2, [pc, #88]	@ (8009514 <TIM_OC6_SetConfig+0xc0>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d007      	beq.n	80094d0 <TIM_OC6_SetConfig+0x7c>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a15      	ldr	r2, [pc, #84]	@ (8009518 <TIM_OC6_SetConfig+0xc4>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d003      	beq.n	80094d0 <TIM_OC6_SetConfig+0x7c>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a14      	ldr	r2, [pc, #80]	@ (800951c <TIM_OC6_SetConfig+0xc8>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d109      	bne.n	80094e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80094d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	695b      	ldr	r3, [r3, #20]
 80094dc:	029b      	lsls	r3, r3, #10
 80094de:	697a      	ldr	r2, [r7, #20]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	621a      	str	r2, [r3, #32]
}
 80094fe:	bf00      	nop
 8009500:	371c      	adds	r7, #28
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	40012c00 	.word	0x40012c00
 8009510:	40013400 	.word	0x40013400
 8009514:	40014000 	.word	0x40014000
 8009518:	40014400 	.word	0x40014400
 800951c:	40014800 	.word	0x40014800

08009520 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800953c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009540:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	4313      	orrs	r3, r2
 800954a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009552:	f023 0307 	bic.w	r3, r3, #7
 8009556:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	4313      	orrs	r3, r2
 8009560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	4a4a      	ldr	r2, [pc, #296]	@ (8009698 <TIM_SlaveTimer_SetConfig+0x178>)
 8009570:	4293      	cmp	r3, r2
 8009572:	f000 808a 	beq.w	800968a <TIM_SlaveTimer_SetConfig+0x16a>
 8009576:	4a48      	ldr	r2, [pc, #288]	@ (8009698 <TIM_SlaveTimer_SetConfig+0x178>)
 8009578:	4293      	cmp	r3, r2
 800957a:	f200 8083 	bhi.w	8009684 <TIM_SlaveTimer_SetConfig+0x164>
 800957e:	4a47      	ldr	r2, [pc, #284]	@ (800969c <TIM_SlaveTimer_SetConfig+0x17c>)
 8009580:	4293      	cmp	r3, r2
 8009582:	f000 8082 	beq.w	800968a <TIM_SlaveTimer_SetConfig+0x16a>
 8009586:	4a45      	ldr	r2, [pc, #276]	@ (800969c <TIM_SlaveTimer_SetConfig+0x17c>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d87b      	bhi.n	8009684 <TIM_SlaveTimer_SetConfig+0x164>
 800958c:	4a44      	ldr	r2, [pc, #272]	@ (80096a0 <TIM_SlaveTimer_SetConfig+0x180>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d07b      	beq.n	800968a <TIM_SlaveTimer_SetConfig+0x16a>
 8009592:	4a43      	ldr	r2, [pc, #268]	@ (80096a0 <TIM_SlaveTimer_SetConfig+0x180>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d875      	bhi.n	8009684 <TIM_SlaveTimer_SetConfig+0x164>
 8009598:	4a42      	ldr	r2, [pc, #264]	@ (80096a4 <TIM_SlaveTimer_SetConfig+0x184>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d075      	beq.n	800968a <TIM_SlaveTimer_SetConfig+0x16a>
 800959e:	4a41      	ldr	r2, [pc, #260]	@ (80096a4 <TIM_SlaveTimer_SetConfig+0x184>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d86f      	bhi.n	8009684 <TIM_SlaveTimer_SetConfig+0x164>
 80095a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80095a8:	d06f      	beq.n	800968a <TIM_SlaveTimer_SetConfig+0x16a>
 80095aa:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80095ae:	d869      	bhi.n	8009684 <TIM_SlaveTimer_SetConfig+0x164>
 80095b0:	2b70      	cmp	r3, #112	@ 0x70
 80095b2:	d01a      	beq.n	80095ea <TIM_SlaveTimer_SetConfig+0xca>
 80095b4:	2b70      	cmp	r3, #112	@ 0x70
 80095b6:	d865      	bhi.n	8009684 <TIM_SlaveTimer_SetConfig+0x164>
 80095b8:	2b60      	cmp	r3, #96	@ 0x60
 80095ba:	d059      	beq.n	8009670 <TIM_SlaveTimer_SetConfig+0x150>
 80095bc:	2b60      	cmp	r3, #96	@ 0x60
 80095be:	d861      	bhi.n	8009684 <TIM_SlaveTimer_SetConfig+0x164>
 80095c0:	2b50      	cmp	r3, #80	@ 0x50
 80095c2:	d04b      	beq.n	800965c <TIM_SlaveTimer_SetConfig+0x13c>
 80095c4:	2b50      	cmp	r3, #80	@ 0x50
 80095c6:	d85d      	bhi.n	8009684 <TIM_SlaveTimer_SetConfig+0x164>
 80095c8:	2b40      	cmp	r3, #64	@ 0x40
 80095ca:	d019      	beq.n	8009600 <TIM_SlaveTimer_SetConfig+0xe0>
 80095cc:	2b40      	cmp	r3, #64	@ 0x40
 80095ce:	d859      	bhi.n	8009684 <TIM_SlaveTimer_SetConfig+0x164>
 80095d0:	2b30      	cmp	r3, #48	@ 0x30
 80095d2:	d05a      	beq.n	800968a <TIM_SlaveTimer_SetConfig+0x16a>
 80095d4:	2b30      	cmp	r3, #48	@ 0x30
 80095d6:	d855      	bhi.n	8009684 <TIM_SlaveTimer_SetConfig+0x164>
 80095d8:	2b20      	cmp	r3, #32
 80095da:	d056      	beq.n	800968a <TIM_SlaveTimer_SetConfig+0x16a>
 80095dc:	2b20      	cmp	r3, #32
 80095de:	d851      	bhi.n	8009684 <TIM_SlaveTimer_SetConfig+0x164>
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d052      	beq.n	800968a <TIM_SlaveTimer_SetConfig+0x16a>
 80095e4:	2b10      	cmp	r3, #16
 80095e6:	d050      	beq.n	800968a <TIM_SlaveTimer_SetConfig+0x16a>
 80095e8:	e04c      	b.n	8009684 <TIM_SlaveTimer_SetConfig+0x164>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80095fa:	f000 f9ef 	bl	80099dc <TIM_ETR_SetConfig>
      break;
 80095fe:	e045      	b.n	800968c <TIM_SlaveTimer_SetConfig+0x16c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b05      	cmp	r3, #5
 8009606:	d004      	beq.n	8009612 <TIM_SlaveTimer_SetConfig+0xf2>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800960c:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8009610:	d101      	bne.n	8009616 <TIM_SlaveTimer_SetConfig+0xf6>
      {
        return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e03b      	b.n	800968e <TIM_SlaveTimer_SetConfig+0x16e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6a1b      	ldr	r3, [r3, #32]
 800961c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	6a1a      	ldr	r2, [r3, #32]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f022 0201 	bic.w	r2, r2, #1
 800962c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800963c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	011b      	lsls	r3, r3, #4
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	4313      	orrs	r3, r2
 8009648:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	621a      	str	r2, [r3, #32]
      break;
 800965a:	e017      	b.n	800968c <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009668:	461a      	mov	r2, r3
 800966a:	f000 f885 	bl	8009778 <TIM_TI1_ConfigInputStage>
      break;
 800966e:	e00d      	b.n	800968c <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800967c:	461a      	mov	r2, r3
 800967e:	f000 f8e7 	bl	8009850 <TIM_TI2_ConfigInputStage>
      break;
 8009682:	e003      	b.n	800968c <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	75fb      	strb	r3, [r7, #23]
      break;
 8009688:	e000      	b.n	800968c <TIM_SlaveTimer_SetConfig+0x16c>
      break;
 800968a:	bf00      	nop
  }

  return status;
 800968c:	7dfb      	ldrb	r3, [r7, #23]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3718      	adds	r7, #24
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	00100070 	.word	0x00100070
 800969c:	00100040 	.word	0x00100040
 80096a0:	00100030 	.word	0x00100030
 80096a4:	00100020 	.word	0x00100020

080096a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a1b      	ldr	r3, [r3, #32]
 80096c0:	f023 0201 	bic.w	r2, r3, #1
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	4a24      	ldr	r2, [pc, #144]	@ (8009764 <TIM_TI1_SetConfig+0xbc>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d013      	beq.n	80096fe <TIM_TI1_SetConfig+0x56>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096dc:	d00f      	beq.n	80096fe <TIM_TI1_SetConfig+0x56>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	4a21      	ldr	r2, [pc, #132]	@ (8009768 <TIM_TI1_SetConfig+0xc0>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d00b      	beq.n	80096fe <TIM_TI1_SetConfig+0x56>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	4a20      	ldr	r2, [pc, #128]	@ (800976c <TIM_TI1_SetConfig+0xc4>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d007      	beq.n	80096fe <TIM_TI1_SetConfig+0x56>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	4a1f      	ldr	r2, [pc, #124]	@ (8009770 <TIM_TI1_SetConfig+0xc8>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d003      	beq.n	80096fe <TIM_TI1_SetConfig+0x56>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	4a1e      	ldr	r2, [pc, #120]	@ (8009774 <TIM_TI1_SetConfig+0xcc>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d101      	bne.n	8009702 <TIM_TI1_SetConfig+0x5a>
 80096fe:	2301      	movs	r3, #1
 8009700:	e000      	b.n	8009704 <TIM_TI1_SetConfig+0x5c>
 8009702:	2300      	movs	r3, #0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d008      	beq.n	800971a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f023 0303 	bic.w	r3, r3, #3
 800970e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009710:	697a      	ldr	r2, [r7, #20]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4313      	orrs	r3, r2
 8009716:	617b      	str	r3, [r7, #20]
 8009718:	e003      	b.n	8009722 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f043 0301 	orr.w	r3, r3, #1
 8009720:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	011b      	lsls	r3, r3, #4
 800972e:	b2db      	uxtb	r3, r3
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	4313      	orrs	r3, r2
 8009734:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f023 030a 	bic.w	r3, r3, #10
 800973c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	f003 030a 	and.w	r3, r3, #10
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	4313      	orrs	r3, r2
 8009748:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	621a      	str	r2, [r3, #32]
}
 8009756:	bf00      	nop
 8009758:	371c      	adds	r7, #28
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	40012c00 	.word	0x40012c00
 8009768:	40000400 	.word	0x40000400
 800976c:	40000800 	.word	0x40000800
 8009770:	40013400 	.word	0x40013400
 8009774:	40014000 	.word	0x40014000

08009778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6a1b      	ldr	r3, [r3, #32]
 8009788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	f023 0201 	bic.w	r2, r3, #1
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80097a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f023 030a 	bic.w	r3, r3, #10
 80097b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	621a      	str	r2, [r3, #32]
}
 80097ca:	bf00      	nop
 80097cc:	371c      	adds	r7, #28
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b087      	sub	sp, #28
 80097da:	af00      	add	r7, sp, #0
 80097dc:	60f8      	str	r0, [r7, #12]
 80097de:	60b9      	str	r1, [r7, #8]
 80097e0:	607a      	str	r2, [r7, #4]
 80097e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
 80097e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	f023 0210 	bic.w	r2, r3, #16
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	021b      	lsls	r3, r3, #8
 8009808:	693a      	ldr	r2, [r7, #16]
 800980a:	4313      	orrs	r3, r2
 800980c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	031b      	lsls	r3, r3, #12
 800981a:	b29b      	uxth	r3, r3
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	4313      	orrs	r3, r2
 8009820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009828:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	011b      	lsls	r3, r3, #4
 800982e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	4313      	orrs	r3, r2
 8009836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	693a      	ldr	r2, [r7, #16]
 800983c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	697a      	ldr	r2, [r7, #20]
 8009842:	621a      	str	r2, [r3, #32]
}
 8009844:	bf00      	nop
 8009846:	371c      	adds	r7, #28
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009850:	b480      	push	{r7}
 8009852:	b087      	sub	sp, #28
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	f023 0210 	bic.w	r2, r3, #16
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800987a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	031b      	lsls	r3, r3, #12
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	4313      	orrs	r3, r2
 8009884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800988c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	011b      	lsls	r3, r3, #4
 8009892:	697a      	ldr	r2, [r7, #20]
 8009894:	4313      	orrs	r3, r2
 8009896:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	621a      	str	r2, [r3, #32]
}
 80098a4:	bf00      	nop
 80098a6:	371c      	adds	r7, #28
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	69db      	ldr	r3, [r3, #28]
 80098d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	f023 0303 	bic.w	r3, r3, #3
 80098dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	011b      	lsls	r3, r3, #4
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009900:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	021b      	lsls	r3, r3, #8
 8009906:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	4313      	orrs	r3, r2
 800990e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	621a      	str	r2, [r3, #32]
}
 800991c:	bf00      	nop
 800991e:	371c      	adds	r7, #28
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009928:	b480      	push	{r7}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
 8009934:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6a1b      	ldr	r3, [r3, #32]
 8009940:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009954:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	021b      	lsls	r3, r3, #8
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	4313      	orrs	r3, r2
 800995e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009966:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	031b      	lsls	r3, r3, #12
 800996c:	b29b      	uxth	r3, r3
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	4313      	orrs	r3, r2
 8009972:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800997a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	031b      	lsls	r3, r3, #12
 8009980:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009984:	697a      	ldr	r2, [r7, #20]
 8009986:	4313      	orrs	r3, r2
 8009988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	621a      	str	r2, [r3, #32]
}
 8009996:	bf00      	nop
 8009998:	371c      	adds	r7, #28
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b085      	sub	sp, #20
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80099b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	f043 0307 	orr.w	r3, r3, #7
 80099c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	609a      	str	r2, [r3, #8]
}
 80099d0:	bf00      	nop
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099dc:	b480      	push	{r7}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
 80099e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	021a      	lsls	r2, r3, #8
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	431a      	orrs	r2, r3
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	609a      	str	r2, [r3, #8]
}
 8009a10:	bf00      	nop
 8009a12:	371c      	adds	r7, #28
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f003 031f 	and.w	r3, r3, #31
 8009a2e:	2201      	movs	r2, #1
 8009a30:	fa02 f303 	lsl.w	r3, r2, r3
 8009a34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6a1a      	ldr	r2, [r3, #32]
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	43db      	mvns	r3, r3
 8009a3e:	401a      	ands	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6a1a      	ldr	r2, [r3, #32]
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	f003 031f 	and.w	r3, r3, #31
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	fa01 f303 	lsl.w	r3, r1, r3
 8009a54:	431a      	orrs	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	621a      	str	r2, [r3, #32]
}
 8009a5a:	bf00      	nop
 8009a5c:	371c      	adds	r7, #28
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
	...

08009a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d101      	bne.n	8009a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	e065      	b.n	8009b4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8009b58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d004      	beq.n	8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a2b      	ldr	r2, [pc, #172]	@ (8009b5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d108      	bne.n	8009ac6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009aba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ad0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8009b58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d018      	beq.n	8009b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009af6:	d013      	beq.n	8009b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a18      	ldr	r2, [pc, #96]	@ (8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d00e      	beq.n	8009b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a17      	ldr	r2, [pc, #92]	@ (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d009      	beq.n	8009b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a12      	ldr	r2, [pc, #72]	@ (8009b5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d004      	beq.n	8009b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a13      	ldr	r2, [pc, #76]	@ (8009b68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d10c      	bne.n	8009b3a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr
 8009b58:	40012c00 	.word	0x40012c00
 8009b5c:	40013400 	.word	0x40013400
 8009b60:	40000400 	.word	0x40000400
 8009b64:	40000800 	.word	0x40000800
 8009b68:	40014000 	.word	0x40014000

08009b6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b76:	2300      	movs	r3, #0
 8009b78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d101      	bne.n	8009b88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b84:	2302      	movs	r3, #2
 8009b86:	e073      	b.n	8009c70 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	041b      	lsls	r3, r3, #16
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	69db      	ldr	r3, [r3, #28]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a19      	ldr	r2, [pc, #100]	@ (8009c7c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d004      	beq.n	8009c24 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a18      	ldr	r2, [pc, #96]	@ (8009c80 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d11c      	bne.n	8009c5e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c2e:	051b      	lsls	r3, r3, #20
 8009c30:	4313      	orrs	r3, r2
 8009c32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	40012c00 	.word	0x40012c00
 8009c80:	40013400 	.word	0x40013400

08009c84 <HAL_TIMEx_RemapConfig>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  __HAL_LOCK(htim);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d101      	bne.n	8009c9c <HAL_TIMEx_RemapConfig+0x18>
 8009c98:	2302      	movs	r3, #2
 8009c9a:	e012      	b.n	8009cc2 <HAL_TIMEx_RemapConfig+0x3e>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  MODIFY_REG(htim->Instance->AF1, TIM1_AF1_ETRSEL_Msk, Remap);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009caa:	f423 3170 	bic.w	r1, r3, #245760	@ 0x3c000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	430a      	orrs	r2, r1
 8009cb6:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(htim);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	370c      	adds	r7, #12
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
	...

08009cd0 <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b087      	sub	sp, #28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d101      	bne.n	8009cee <HAL_TIMEx_TISelection+0x1e>
 8009cea:	2302      	movs	r3, #2
 8009cec:	e073      	b.n	8009dd6 <HAL_TIMEx_TISelection+0x106>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b0c      	cmp	r3, #12
 8009cfa:	d864      	bhi.n	8009dc6 <HAL_TIMEx_TISelection+0xf6>
 8009cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8009d04 <HAL_TIMEx_TISelection+0x34>)
 8009cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d02:	bf00      	nop
 8009d04:	08009d39 	.word	0x08009d39
 8009d08:	08009dc7 	.word	0x08009dc7
 8009d0c:	08009dc7 	.word	0x08009dc7
 8009d10:	08009dc7 	.word	0x08009dc7
 8009d14:	08009d85 	.word	0x08009d85
 8009d18:	08009dc7 	.word	0x08009dc7
 8009d1c:	08009dc7 	.word	0x08009dc7
 8009d20:	08009dc7 	.word	0x08009dc7
 8009d24:	08009d9b 	.word	0x08009d9b
 8009d28:	08009dc7 	.word	0x08009dc7
 8009d2c:	08009dc7 	.word	0x08009dc7
 8009d30:	08009dc7 	.word	0x08009dc7
 8009d34:	08009db1 	.word	0x08009db1
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d3e:	f023 010f 	bic.w	r1, r3, #15
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	430a      	orrs	r2, r1
 8009d4a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a24      	ldr	r2, [pc, #144]	@ (8009de4 <HAL_TIMEx_TISelection+0x114>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d004      	beq.n	8009d60 <HAL_TIMEx_TISelection+0x90>
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a23      	ldr	r2, [pc, #140]	@ (8009de8 <HAL_TIMEx_TISelection+0x118>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d108      	bne.n	8009d72 <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f042 0201 	orr.w	r2, r2, #1
 8009d6e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 8009d70:	e02c      	b.n	8009dcc <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 0201 	bic.w	r2, r2, #1
 8009d80:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8009d82:	e023      	b.n	8009dcc <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d8a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	430a      	orrs	r2, r1
 8009d96:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8009d98:	e018      	b.n	8009dcc <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009da0:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	430a      	orrs	r2, r1
 8009dac:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8009dae:	e00d      	b.n	8009dcc <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009db6:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8009dc4:	e002      	b.n	8009dcc <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8009dca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	40014400 	.word	0x40014400
 8009de8:	40014800 	.word	0x40014800

08009dec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009df4:	bf00      	nop
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	e04a      	b.n	8009f20 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d106      	bne.n	8009ea2 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7f9 f871 	bl	8002f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2224      	movs	r2, #36	@ 0x24
 8009ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f022 0201 	bic.w	r2, r2, #1
 8009eb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d002      	beq.n	8009ec8 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fefe 	bl	800acc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 fc2f 	bl	800a72c <UART_SetConfig>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d101      	bne.n	8009ed8 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e023      	b.n	8009f20 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	685a      	ldr	r2, [r3, #4]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009ee6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689a      	ldr	r2, [r3, #8]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8009ef6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689a      	ldr	r2, [r3, #8]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f042 0208 	orr.w	r2, r2, #8
 8009f06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f042 0201 	orr.w	r2, r2, #1
 8009f16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 ff75 	bl	800ae08 <UART_CheckIdleState>
 8009f1e:	4603      	mov	r3, r0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b08a      	sub	sp, #40	@ 0x28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	4613      	mov	r3, r2
 8009f34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f3c:	2b20      	cmp	r3, #32
 8009f3e:	d137      	bne.n	8009fb0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <HAL_UART_Receive_IT+0x24>
 8009f46:	88fb      	ldrh	r3, [r7, #6]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e030      	b.n	8009fb2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a18      	ldr	r2, [pc, #96]	@ (8009fbc <HAL_UART_Receive_IT+0x94>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d01f      	beq.n	8009fa0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d018      	beq.n	8009fa0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	e853 3f00 	ldrex	r3, [r3]
 8009f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	461a      	mov	r2, r3
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8c:	623b      	str	r3, [r7, #32]
 8009f8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f90:	69f9      	ldr	r1, [r7, #28]
 8009f92:	6a3a      	ldr	r2, [r7, #32]
 8009f94:	e841 2300 	strex	r3, r2, [r1]
 8009f98:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d1e6      	bne.n	8009f6e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009fa0:	88fb      	ldrh	r3, [r7, #6]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	68b9      	ldr	r1, [r7, #8]
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f001 f846 	bl	800b038 <UART_Start_Receive_IT>
 8009fac:	4603      	mov	r3, r0
 8009fae:	e000      	b.n	8009fb2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009fb0:	2302      	movs	r3, #2
  }
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3728      	adds	r7, #40	@ 0x28
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	40008000 	.word	0x40008000

08009fc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b0ba      	sub	sp, #232	@ 0xe8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	69db      	ldr	r3, [r3, #28]
 8009fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009fe6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009fea:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009fee:	4013      	ands	r3, r2
 8009ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009ff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d11b      	bne.n	800a034 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a000:	f003 0320 	and.w	r3, r3, #32
 800a004:	2b00      	cmp	r3, #0
 800a006:	d015      	beq.n	800a034 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a00c:	f003 0320 	and.w	r3, r3, #32
 800a010:	2b00      	cmp	r3, #0
 800a012:	d105      	bne.n	800a020 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d009      	beq.n	800a034 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a024:	2b00      	cmp	r3, #0
 800a026:	f000 8300 	beq.w	800a62a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	4798      	blx	r3
      }
      return;
 800a032:	e2fa      	b.n	800a62a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 8123 	beq.w	800a284 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a03e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a042:	4b8d      	ldr	r3, [pc, #564]	@ (800a278 <HAL_UART_IRQHandler+0x2b8>)
 800a044:	4013      	ands	r3, r2
 800a046:	2b00      	cmp	r3, #0
 800a048:	d106      	bne.n	800a058 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a04a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a04e:	4b8b      	ldr	r3, [pc, #556]	@ (800a27c <HAL_UART_IRQHandler+0x2bc>)
 800a050:	4013      	ands	r3, r2
 800a052:	2b00      	cmp	r3, #0
 800a054:	f000 8116 	beq.w	800a284 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a05c:	f003 0301 	and.w	r3, r3, #1
 800a060:	2b00      	cmp	r3, #0
 800a062:	d011      	beq.n	800a088 <HAL_UART_IRQHandler+0xc8>
 800a064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00b      	beq.n	800a088 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2201      	movs	r2, #1
 800a076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a07e:	f043 0201 	orr.w	r2, r3, #1
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a08c:	f003 0302 	and.w	r3, r3, #2
 800a090:	2b00      	cmp	r3, #0
 800a092:	d011      	beq.n	800a0b8 <HAL_UART_IRQHandler+0xf8>
 800a094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a098:	f003 0301 	and.w	r3, r3, #1
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00b      	beq.n	800a0b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2202      	movs	r2, #2
 800a0a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0ae:	f043 0204 	orr.w	r2, r3, #4
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0bc:	f003 0304 	and.w	r3, r3, #4
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d011      	beq.n	800a0e8 <HAL_UART_IRQHandler+0x128>
 800a0c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0c8:	f003 0301 	and.w	r3, r3, #1
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00b      	beq.n	800a0e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2204      	movs	r2, #4
 800a0d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0de:	f043 0202 	orr.w	r2, r3, #2
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a0e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0ec:	f003 0308 	and.w	r3, r3, #8
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d017      	beq.n	800a124 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0f8:	f003 0320 	and.w	r3, r3, #32
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d105      	bne.n	800a10c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a100:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a104:	4b5c      	ldr	r3, [pc, #368]	@ (800a278 <HAL_UART_IRQHandler+0x2b8>)
 800a106:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00b      	beq.n	800a124 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2208      	movs	r2, #8
 800a112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a11a:	f043 0208 	orr.w	r2, r3, #8
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d012      	beq.n	800a156 <HAL_UART_IRQHandler+0x196>
 800a130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a134:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00c      	beq.n	800a156 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a14c:	f043 0220 	orr.w	r2, r3, #32
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f000 8266 	beq.w	800a62e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a166:	f003 0320 	and.w	r3, r3, #32
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d013      	beq.n	800a196 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a16e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a172:	f003 0320 	and.w	r3, r3, #32
 800a176:	2b00      	cmp	r3, #0
 800a178:	d105      	bne.n	800a186 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a17a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a17e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a182:	2b00      	cmp	r3, #0
 800a184:	d007      	beq.n	800a196 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a19c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1aa:	2b40      	cmp	r3, #64	@ 0x40
 800a1ac:	d005      	beq.n	800a1ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a1ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a1b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d054      	beq.n	800a264 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f001 f85e 	bl	800b27c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1ca:	2b40      	cmp	r3, #64	@ 0x40
 800a1cc:	d146      	bne.n	800a25c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3308      	adds	r3, #8
 800a1d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a1dc:	e853 3f00 	ldrex	r3, [r3]
 800a1e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a1e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a1e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	3308      	adds	r3, #8
 800a1f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a1fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a1fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a202:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a206:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a20a:	e841 2300 	strex	r3, r2, [r1]
 800a20e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1d9      	bne.n	800a1ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a220:	2b00      	cmp	r3, #0
 800a222:	d017      	beq.n	800a254 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a22a:	4a15      	ldr	r2, [pc, #84]	@ (800a280 <HAL_UART_IRQHandler+0x2c0>)
 800a22c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a234:	4618      	mov	r0, r3
 800a236:	f7fb fe0d 	bl	8005e54 <HAL_DMA_Abort_IT>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d019      	beq.n	800a274 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a24e:	4610      	mov	r0, r2
 800a250:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a252:	e00f      	b.n	800a274 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f9ff 	bl	800a658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a25a:	e00b      	b.n	800a274 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f9fb 	bl	800a658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a262:	e007      	b.n	800a274 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 f9f7 	bl	800a658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a272:	e1dc      	b.n	800a62e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a274:	bf00      	nop
    return;
 800a276:	e1da      	b.n	800a62e <HAL_UART_IRQHandler+0x66e>
 800a278:	10000001 	.word	0x10000001
 800a27c:	04000120 	.word	0x04000120
 800a280:	0800b349 	.word	0x0800b349

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a288:	2b01      	cmp	r3, #1
 800a28a:	f040 8170 	bne.w	800a56e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a28e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a292:	f003 0310 	and.w	r3, r3, #16
 800a296:	2b00      	cmp	r3, #0
 800a298:	f000 8169 	beq.w	800a56e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a29c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2a0:	f003 0310 	and.w	r3, r3, #16
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f000 8162 	beq.w	800a56e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2210      	movs	r2, #16
 800a2b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2bc:	2b40      	cmp	r3, #64	@ 0x40
 800a2be:	f040 80d8 	bne.w	800a472 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a2d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 80af 	beq.w	800a438 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	f080 80a7 	bcs.w	800a438 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a2f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f003 0320 	and.w	r3, r3, #32
 800a302:	2b00      	cmp	r3, #0
 800a304:	f040 8087 	bne.w	800a416 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a310:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a314:	e853 3f00 	ldrex	r3, [r3]
 800a318:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a31c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a324:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	461a      	mov	r2, r3
 800a32e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a332:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a336:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a33e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a342:	e841 2300 	strex	r3, r2, [r1]
 800a346:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a34a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1da      	bne.n	800a308 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3308      	adds	r3, #8
 800a358:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a35c:	e853 3f00 	ldrex	r3, [r3]
 800a360:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a362:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a364:	f023 0301 	bic.w	r3, r3, #1
 800a368:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	3308      	adds	r3, #8
 800a372:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a376:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a37a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a37e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a382:	e841 2300 	strex	r3, r2, [r1]
 800a386:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a388:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1e1      	bne.n	800a352 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3308      	adds	r3, #8
 800a394:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a396:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a398:	e853 3f00 	ldrex	r3, [r3]
 800a39c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a39e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a3b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a3b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a3b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a3c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e3      	bne.n	800a38e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3dc:	e853 3f00 	ldrex	r3, [r3]
 800a3e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a3e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3e4:	f023 0310 	bic.w	r3, r3, #16
 800a3e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3fe:	e841 2300 	strex	r3, r2, [r1]
 800a402:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1e4      	bne.n	800a3d4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a410:	4618      	mov	r0, r3
 800a412:	f7fb fcc6 	bl	8005da2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2202      	movs	r2, #2
 800a41a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a428:	b29b      	uxth	r3, r3
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	4619      	mov	r1, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 f91b 	bl	800a66c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a436:	e0fc      	b.n	800a632 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a43e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a442:	429a      	cmp	r2, r3
 800a444:	f040 80f5 	bne.w	800a632 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0320 	and.w	r3, r3, #32
 800a456:	2b20      	cmp	r3, #32
 800a458:	f040 80eb 	bne.w	800a632 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2202      	movs	r2, #2
 800a460:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a468:	4619      	mov	r1, r3
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 f8fe 	bl	800a66c <HAL_UARTEx_RxEventCallback>
      return;
 800a470:	e0df      	b.n	800a632 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a47e:	b29b      	uxth	r3, r3
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f000 80d1 	beq.w	800a636 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800a494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 80cc 	beq.w	800a636 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a6:	e853 3f00 	ldrex	r3, [r3]
 800a4aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a4c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4c8:	e841 2300 	strex	r3, r2, [r1]
 800a4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e4      	bne.n	800a49e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3308      	adds	r3, #8
 800a4da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4de:	e853 3f00 	ldrex	r3, [r3]
 800a4e2:	623b      	str	r3, [r7, #32]
   return(result);
 800a4e4:	6a3b      	ldr	r3, [r7, #32]
 800a4e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a4ea:	f023 0301 	bic.w	r3, r3, #1
 800a4ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3308      	adds	r3, #8
 800a4f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a4fc:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a500:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a504:	e841 2300 	strex	r3, r2, [r1]
 800a508:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1e1      	bne.n	800a4d4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2220      	movs	r2, #32
 800a514:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	e853 3f00 	ldrex	r3, [r3]
 800a530:	60fb      	str	r3, [r7, #12]
   return(result);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f023 0310 	bic.w	r3, r3, #16
 800a538:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	461a      	mov	r2, r3
 800a542:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a546:	61fb      	str	r3, [r7, #28]
 800a548:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54a:	69b9      	ldr	r1, [r7, #24]
 800a54c:	69fa      	ldr	r2, [r7, #28]
 800a54e:	e841 2300 	strex	r3, r2, [r1]
 800a552:	617b      	str	r3, [r7, #20]
   return(result);
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1e4      	bne.n	800a524 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2202      	movs	r2, #2
 800a55e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a560:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f880 	bl	800a66c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a56c:	e063      	b.n	800a636 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a56e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a572:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00e      	beq.n	800a598 <HAL_UART_IRQHandler+0x5d8>
 800a57a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a57e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a582:	2b00      	cmp	r3, #0
 800a584:	d008      	beq.n	800a598 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a58e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f001 fc37 	bl	800be04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a596:	e051      	b.n	800a63c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a59c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d014      	beq.n	800a5ce <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a5a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d105      	bne.n	800a5bc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a5b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d008      	beq.n	800a5ce <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d03a      	beq.n	800a63a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	4798      	blx	r3
    }
    return;
 800a5cc:	e035      	b.n	800a63a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d009      	beq.n	800a5ee <HAL_UART_IRQHandler+0x62e>
 800a5da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fec0 	bl	800b36c <UART_EndTransmit_IT>
    return;
 800a5ec:	e026      	b.n	800a63c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d009      	beq.n	800a60e <HAL_UART_IRQHandler+0x64e>
 800a5fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5fe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a602:	2b00      	cmp	r3, #0
 800a604:	d003      	beq.n	800a60e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f001 fc10 	bl	800be2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a60c:	e016      	b.n	800a63c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a60e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a612:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a616:	2b00      	cmp	r3, #0
 800a618:	d010      	beq.n	800a63c <HAL_UART_IRQHandler+0x67c>
 800a61a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	da0c      	bge.n	800a63c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f001 fbf8 	bl	800be18 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a628:	e008      	b.n	800a63c <HAL_UART_IRQHandler+0x67c>
      return;
 800a62a:	bf00      	nop
 800a62c:	e006      	b.n	800a63c <HAL_UART_IRQHandler+0x67c>
    return;
 800a62e:	bf00      	nop
 800a630:	e004      	b.n	800a63c <HAL_UART_IRQHandler+0x67c>
      return;
 800a632:	bf00      	nop
 800a634:	e002      	b.n	800a63c <HAL_UART_IRQHandler+0x67c>
      return;
 800a636:	bf00      	nop
 800a638:	e000      	b.n	800a63c <HAL_UART_IRQHandler+0x67c>
    return;
 800a63a:	bf00      	nop
  }
}
 800a63c:	37e8      	adds	r7, #232	@ 0xe8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop

0800a644 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a678:	bf00      	nop
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800a684:	b480      	push	{r7}
 800a686:	b08f      	sub	sp, #60	@ 0x3c
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a692:	2b01      	cmp	r3, #1
 800a694:	d101      	bne.n	800a69a <HAL_HalfDuplex_EnableReceiver+0x16>
 800a696:	2302      	movs	r3, #2
 800a698:	e042      	b.n	800a720 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2201      	movs	r2, #1
 800a69e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2224      	movs	r2, #36	@ 0x24
 800a6a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	e853 3f00 	ldrex	r3, [r3]
 800a6b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	f023 030c 	bic.w	r3, r3, #12
 800a6be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6d0:	e841 2300 	strex	r3, r2, [r1]
 800a6d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1e6      	bne.n	800a6aa <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	e853 3f00 	ldrex	r3, [r3]
 800a6e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	f043 0304 	orr.w	r3, r3, #4
 800a6f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fa:	61bb      	str	r3, [r7, #24]
 800a6fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fe:	6979      	ldr	r1, [r7, #20]
 800a700:	69ba      	ldr	r2, [r7, #24]
 800a702:	e841 2300 	strex	r3, r2, [r1]
 800a706:	613b      	str	r3, [r7, #16]
   return(result);
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1e6      	bne.n	800a6dc <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2220      	movs	r2, #32
 800a712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	373c      	adds	r7, #60	@ 0x3c
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a72c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a730:	b08c      	sub	sp, #48	@ 0x30
 800a732:	af00      	add	r7, sp, #0
 800a734:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	689a      	ldr	r2, [r3, #8]
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	431a      	orrs	r2, r3
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	431a      	orrs	r2, r3
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	69db      	ldr	r3, [r3, #28]
 800a750:	4313      	orrs	r3, r2
 800a752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	4bab      	ldr	r3, [pc, #684]	@ (800aa08 <UART_SetConfig+0x2dc>)
 800a75c:	4013      	ands	r3, r2
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	6812      	ldr	r2, [r2, #0]
 800a762:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a764:	430b      	orrs	r3, r1
 800a766:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	68da      	ldr	r2, [r3, #12]
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	430a      	orrs	r2, r1
 800a77c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4aa0      	ldr	r2, [pc, #640]	@ (800aa0c <UART_SetConfig+0x2e0>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d004      	beq.n	800a798 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	6a1b      	ldr	r3, [r3, #32]
 800a792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a794:	4313      	orrs	r3, r2
 800a796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a7a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a7a6:	697a      	ldr	r2, [r7, #20]
 800a7a8:	6812      	ldr	r2, [r2, #0]
 800a7aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7ac:	430b      	orrs	r3, r1
 800a7ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7b6:	f023 010f 	bic.w	r1, r3, #15
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	430a      	orrs	r2, r1
 800a7c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a91      	ldr	r2, [pc, #580]	@ (800aa10 <UART_SetConfig+0x2e4>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d125      	bne.n	800a81c <UART_SetConfig+0xf0>
 800a7d0:	4b90      	ldr	r3, [pc, #576]	@ (800aa14 <UART_SetConfig+0x2e8>)
 800a7d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7d6:	f003 0303 	and.w	r3, r3, #3
 800a7da:	2b03      	cmp	r3, #3
 800a7dc:	d81a      	bhi.n	800a814 <UART_SetConfig+0xe8>
 800a7de:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e4 <UART_SetConfig+0xb8>)
 800a7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e4:	0800a7f5 	.word	0x0800a7f5
 800a7e8:	0800a805 	.word	0x0800a805
 800a7ec:	0800a7fd 	.word	0x0800a7fd
 800a7f0:	0800a80d 	.word	0x0800a80d
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7fa:	e0d6      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a802:	e0d2      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a804:	2304      	movs	r3, #4
 800a806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a80a:	e0ce      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a80c:	2308      	movs	r3, #8
 800a80e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a812:	e0ca      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a814:	2310      	movs	r3, #16
 800a816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a81a:	e0c6      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a7d      	ldr	r2, [pc, #500]	@ (800aa18 <UART_SetConfig+0x2ec>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d138      	bne.n	800a898 <UART_SetConfig+0x16c>
 800a826:	4b7b      	ldr	r3, [pc, #492]	@ (800aa14 <UART_SetConfig+0x2e8>)
 800a828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a82c:	f003 030c 	and.w	r3, r3, #12
 800a830:	2b0c      	cmp	r3, #12
 800a832:	d82d      	bhi.n	800a890 <UART_SetConfig+0x164>
 800a834:	a201      	add	r2, pc, #4	@ (adr r2, 800a83c <UART_SetConfig+0x110>)
 800a836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83a:	bf00      	nop
 800a83c:	0800a871 	.word	0x0800a871
 800a840:	0800a891 	.word	0x0800a891
 800a844:	0800a891 	.word	0x0800a891
 800a848:	0800a891 	.word	0x0800a891
 800a84c:	0800a881 	.word	0x0800a881
 800a850:	0800a891 	.word	0x0800a891
 800a854:	0800a891 	.word	0x0800a891
 800a858:	0800a891 	.word	0x0800a891
 800a85c:	0800a879 	.word	0x0800a879
 800a860:	0800a891 	.word	0x0800a891
 800a864:	0800a891 	.word	0x0800a891
 800a868:	0800a891 	.word	0x0800a891
 800a86c:	0800a889 	.word	0x0800a889
 800a870:	2300      	movs	r3, #0
 800a872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a876:	e098      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a878:	2302      	movs	r3, #2
 800a87a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a87e:	e094      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a880:	2304      	movs	r3, #4
 800a882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a886:	e090      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a888:	2308      	movs	r3, #8
 800a88a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a88e:	e08c      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a890:	2310      	movs	r3, #16
 800a892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a896:	e088      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a5f      	ldr	r2, [pc, #380]	@ (800aa1c <UART_SetConfig+0x2f0>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d125      	bne.n	800a8ee <UART_SetConfig+0x1c2>
 800a8a2:	4b5c      	ldr	r3, [pc, #368]	@ (800aa14 <UART_SetConfig+0x2e8>)
 800a8a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a8ac:	2b30      	cmp	r3, #48	@ 0x30
 800a8ae:	d016      	beq.n	800a8de <UART_SetConfig+0x1b2>
 800a8b0:	2b30      	cmp	r3, #48	@ 0x30
 800a8b2:	d818      	bhi.n	800a8e6 <UART_SetConfig+0x1ba>
 800a8b4:	2b20      	cmp	r3, #32
 800a8b6:	d00a      	beq.n	800a8ce <UART_SetConfig+0x1a2>
 800a8b8:	2b20      	cmp	r3, #32
 800a8ba:	d814      	bhi.n	800a8e6 <UART_SetConfig+0x1ba>
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d002      	beq.n	800a8c6 <UART_SetConfig+0x19a>
 800a8c0:	2b10      	cmp	r3, #16
 800a8c2:	d008      	beq.n	800a8d6 <UART_SetConfig+0x1aa>
 800a8c4:	e00f      	b.n	800a8e6 <UART_SetConfig+0x1ba>
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8cc:	e06d      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a8ce:	2302      	movs	r3, #2
 800a8d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8d4:	e069      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a8d6:	2304      	movs	r3, #4
 800a8d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8dc:	e065      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a8de:	2308      	movs	r3, #8
 800a8e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8e4:	e061      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a8e6:	2310      	movs	r3, #16
 800a8e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8ec:	e05d      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a4b      	ldr	r2, [pc, #300]	@ (800aa20 <UART_SetConfig+0x2f4>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d125      	bne.n	800a944 <UART_SetConfig+0x218>
 800a8f8:	4b46      	ldr	r3, [pc, #280]	@ (800aa14 <UART_SetConfig+0x2e8>)
 800a8fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a902:	2bc0      	cmp	r3, #192	@ 0xc0
 800a904:	d016      	beq.n	800a934 <UART_SetConfig+0x208>
 800a906:	2bc0      	cmp	r3, #192	@ 0xc0
 800a908:	d818      	bhi.n	800a93c <UART_SetConfig+0x210>
 800a90a:	2b80      	cmp	r3, #128	@ 0x80
 800a90c:	d00a      	beq.n	800a924 <UART_SetConfig+0x1f8>
 800a90e:	2b80      	cmp	r3, #128	@ 0x80
 800a910:	d814      	bhi.n	800a93c <UART_SetConfig+0x210>
 800a912:	2b00      	cmp	r3, #0
 800a914:	d002      	beq.n	800a91c <UART_SetConfig+0x1f0>
 800a916:	2b40      	cmp	r3, #64	@ 0x40
 800a918:	d008      	beq.n	800a92c <UART_SetConfig+0x200>
 800a91a:	e00f      	b.n	800a93c <UART_SetConfig+0x210>
 800a91c:	2300      	movs	r3, #0
 800a91e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a922:	e042      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a924:	2302      	movs	r3, #2
 800a926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a92a:	e03e      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a92c:	2304      	movs	r3, #4
 800a92e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a932:	e03a      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a934:	2308      	movs	r3, #8
 800a936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a93a:	e036      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a93c:	2310      	movs	r3, #16
 800a93e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a942:	e032      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a30      	ldr	r2, [pc, #192]	@ (800aa0c <UART_SetConfig+0x2e0>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d12a      	bne.n	800a9a4 <UART_SetConfig+0x278>
 800a94e:	4b31      	ldr	r3, [pc, #196]	@ (800aa14 <UART_SetConfig+0x2e8>)
 800a950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a954:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a958:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a95c:	d01a      	beq.n	800a994 <UART_SetConfig+0x268>
 800a95e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a962:	d81b      	bhi.n	800a99c <UART_SetConfig+0x270>
 800a964:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a968:	d00c      	beq.n	800a984 <UART_SetConfig+0x258>
 800a96a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a96e:	d815      	bhi.n	800a99c <UART_SetConfig+0x270>
 800a970:	2b00      	cmp	r3, #0
 800a972:	d003      	beq.n	800a97c <UART_SetConfig+0x250>
 800a974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a978:	d008      	beq.n	800a98c <UART_SetConfig+0x260>
 800a97a:	e00f      	b.n	800a99c <UART_SetConfig+0x270>
 800a97c:	2300      	movs	r3, #0
 800a97e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a982:	e012      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a984:	2302      	movs	r3, #2
 800a986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a98a:	e00e      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a98c:	2304      	movs	r3, #4
 800a98e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a992:	e00a      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a994:	2308      	movs	r3, #8
 800a996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a99a:	e006      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a99c:	2310      	movs	r3, #16
 800a99e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9a2:	e002      	b.n	800a9aa <UART_SetConfig+0x27e>
 800a9a4:	2310      	movs	r3, #16
 800a9a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a17      	ldr	r2, [pc, #92]	@ (800aa0c <UART_SetConfig+0x2e0>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	f040 80a8 	bne.w	800ab06 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a9b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a9ba:	2b08      	cmp	r3, #8
 800a9bc:	d834      	bhi.n	800aa28 <UART_SetConfig+0x2fc>
 800a9be:	a201      	add	r2, pc, #4	@ (adr r2, 800a9c4 <UART_SetConfig+0x298>)
 800a9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c4:	0800a9e9 	.word	0x0800a9e9
 800a9c8:	0800aa29 	.word	0x0800aa29
 800a9cc:	0800a9f1 	.word	0x0800a9f1
 800a9d0:	0800aa29 	.word	0x0800aa29
 800a9d4:	0800a9f7 	.word	0x0800a9f7
 800a9d8:	0800aa29 	.word	0x0800aa29
 800a9dc:	0800aa29 	.word	0x0800aa29
 800a9e0:	0800aa29 	.word	0x0800aa29
 800a9e4:	0800a9ff 	.word	0x0800a9ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9e8:	f7fc fb64 	bl	80070b4 <HAL_RCC_GetPCLK1Freq>
 800a9ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9ee:	e021      	b.n	800aa34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a9f0:	4b0c      	ldr	r3, [pc, #48]	@ (800aa24 <UART_SetConfig+0x2f8>)
 800a9f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9f4:	e01e      	b.n	800aa34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9f6:	f7fc faef 	bl	8006fd8 <HAL_RCC_GetSysClockFreq>
 800a9fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9fc:	e01a      	b.n	800aa34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa04:	e016      	b.n	800aa34 <UART_SetConfig+0x308>
 800aa06:	bf00      	nop
 800aa08:	cfff69f3 	.word	0xcfff69f3
 800aa0c:	40008000 	.word	0x40008000
 800aa10:	40013800 	.word	0x40013800
 800aa14:	40021000 	.word	0x40021000
 800aa18:	40004400 	.word	0x40004400
 800aa1c:	40004800 	.word	0x40004800
 800aa20:	40004c00 	.word	0x40004c00
 800aa24:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aa32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f000 812a 	beq.w	800ac90 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa40:	4a9e      	ldr	r2, [pc, #632]	@ (800acbc <UART_SetConfig+0x590>)
 800aa42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa46:	461a      	mov	r2, r3
 800aa48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa4e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	685a      	ldr	r2, [r3, #4]
 800aa54:	4613      	mov	r3, r2
 800aa56:	005b      	lsls	r3, r3, #1
 800aa58:	4413      	add	r3, r2
 800aa5a:	69ba      	ldr	r2, [r7, #24]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d305      	bcc.n	800aa6c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa66:	69ba      	ldr	r2, [r7, #24]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d903      	bls.n	800aa74 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aa72:	e10d      	b.n	800ac90 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa76:	2200      	movs	r2, #0
 800aa78:	60bb      	str	r3, [r7, #8]
 800aa7a:	60fa      	str	r2, [r7, #12]
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa80:	4a8e      	ldr	r2, [pc, #568]	@ (800acbc <UART_SetConfig+0x590>)
 800aa82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	2200      	movs	r2, #0
 800aa8a:	603b      	str	r3, [r7, #0]
 800aa8c:	607a      	str	r2, [r7, #4]
 800aa8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa96:	f7f6 f8c3 	bl	8000c20 <__aeabi_uldivmod>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	f04f 0200 	mov.w	r2, #0
 800aaa6:	f04f 0300 	mov.w	r3, #0
 800aaaa:	020b      	lsls	r3, r1, #8
 800aaac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aab0:	0202      	lsls	r2, r0, #8
 800aab2:	6979      	ldr	r1, [r7, #20]
 800aab4:	6849      	ldr	r1, [r1, #4]
 800aab6:	0849      	lsrs	r1, r1, #1
 800aab8:	2000      	movs	r0, #0
 800aaba:	460c      	mov	r4, r1
 800aabc:	4605      	mov	r5, r0
 800aabe:	eb12 0804 	adds.w	r8, r2, r4
 800aac2:	eb43 0905 	adc.w	r9, r3, r5
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	469a      	mov	sl, r3
 800aace:	4693      	mov	fp, r2
 800aad0:	4652      	mov	r2, sl
 800aad2:	465b      	mov	r3, fp
 800aad4:	4640      	mov	r0, r8
 800aad6:	4649      	mov	r1, r9
 800aad8:	f7f6 f8a2 	bl	8000c20 <__aeabi_uldivmod>
 800aadc:	4602      	mov	r2, r0
 800aade:	460b      	mov	r3, r1
 800aae0:	4613      	mov	r3, r2
 800aae2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aae4:	6a3b      	ldr	r3, [r7, #32]
 800aae6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aaea:	d308      	bcc.n	800aafe <UART_SetConfig+0x3d2>
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aaf2:	d204      	bcs.n	800aafe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	6a3a      	ldr	r2, [r7, #32]
 800aafa:	60da      	str	r2, [r3, #12]
 800aafc:	e0c8      	b.n	800ac90 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ab04:	e0c4      	b.n	800ac90 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	69db      	ldr	r3, [r3, #28]
 800ab0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab0e:	d167      	bne.n	800abe0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800ab10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ab14:	2b08      	cmp	r3, #8
 800ab16:	d828      	bhi.n	800ab6a <UART_SetConfig+0x43e>
 800ab18:	a201      	add	r2, pc, #4	@ (adr r2, 800ab20 <UART_SetConfig+0x3f4>)
 800ab1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab1e:	bf00      	nop
 800ab20:	0800ab45 	.word	0x0800ab45
 800ab24:	0800ab4d 	.word	0x0800ab4d
 800ab28:	0800ab55 	.word	0x0800ab55
 800ab2c:	0800ab6b 	.word	0x0800ab6b
 800ab30:	0800ab5b 	.word	0x0800ab5b
 800ab34:	0800ab6b 	.word	0x0800ab6b
 800ab38:	0800ab6b 	.word	0x0800ab6b
 800ab3c:	0800ab6b 	.word	0x0800ab6b
 800ab40:	0800ab63 	.word	0x0800ab63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab44:	f7fc fab6 	bl	80070b4 <HAL_RCC_GetPCLK1Freq>
 800ab48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab4a:	e014      	b.n	800ab76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab4c:	f7fc fac8 	bl	80070e0 <HAL_RCC_GetPCLK2Freq>
 800ab50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab52:	e010      	b.n	800ab76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab54:	4b5a      	ldr	r3, [pc, #360]	@ (800acc0 <UART_SetConfig+0x594>)
 800ab56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab58:	e00d      	b.n	800ab76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab5a:	f7fc fa3d 	bl	8006fd8 <HAL_RCC_GetSysClockFreq>
 800ab5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab60:	e009      	b.n	800ab76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab68:	e005      	b.n	800ab76 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ab74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f000 8089 	beq.w	800ac90 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab82:	4a4e      	ldr	r2, [pc, #312]	@ (800acbc <UART_SetConfig+0x590>)
 800ab84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab88:	461a      	mov	r2, r3
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab90:	005a      	lsls	r2, r3, #1
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	085b      	lsrs	r3, r3, #1
 800ab98:	441a      	add	r2, r3
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	2b0f      	cmp	r3, #15
 800aba8:	d916      	bls.n	800abd8 <UART_SetConfig+0x4ac>
 800abaa:	6a3b      	ldr	r3, [r7, #32]
 800abac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abb0:	d212      	bcs.n	800abd8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800abb2:	6a3b      	ldr	r3, [r7, #32]
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	f023 030f 	bic.w	r3, r3, #15
 800abba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800abbc:	6a3b      	ldr	r3, [r7, #32]
 800abbe:	085b      	lsrs	r3, r3, #1
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	f003 0307 	and.w	r3, r3, #7
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	8bfb      	ldrh	r3, [r7, #30]
 800abca:	4313      	orrs	r3, r2
 800abcc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	8bfa      	ldrh	r2, [r7, #30]
 800abd4:	60da      	str	r2, [r3, #12]
 800abd6:	e05b      	b.n	800ac90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800abde:	e057      	b.n	800ac90 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800abe0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800abe4:	2b08      	cmp	r3, #8
 800abe6:	d828      	bhi.n	800ac3a <UART_SetConfig+0x50e>
 800abe8:	a201      	add	r2, pc, #4	@ (adr r2, 800abf0 <UART_SetConfig+0x4c4>)
 800abea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abee:	bf00      	nop
 800abf0:	0800ac15 	.word	0x0800ac15
 800abf4:	0800ac1d 	.word	0x0800ac1d
 800abf8:	0800ac25 	.word	0x0800ac25
 800abfc:	0800ac3b 	.word	0x0800ac3b
 800ac00:	0800ac2b 	.word	0x0800ac2b
 800ac04:	0800ac3b 	.word	0x0800ac3b
 800ac08:	0800ac3b 	.word	0x0800ac3b
 800ac0c:	0800ac3b 	.word	0x0800ac3b
 800ac10:	0800ac33 	.word	0x0800ac33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac14:	f7fc fa4e 	bl	80070b4 <HAL_RCC_GetPCLK1Freq>
 800ac18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac1a:	e014      	b.n	800ac46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac1c:	f7fc fa60 	bl	80070e0 <HAL_RCC_GetPCLK2Freq>
 800ac20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac22:	e010      	b.n	800ac46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac24:	4b26      	ldr	r3, [pc, #152]	@ (800acc0 <UART_SetConfig+0x594>)
 800ac26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac28:	e00d      	b.n	800ac46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac2a:	f7fc f9d5 	bl	8006fd8 <HAL_RCC_GetSysClockFreq>
 800ac2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac30:	e009      	b.n	800ac46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac38:	e005      	b.n	800ac46 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ac44:	bf00      	nop
    }

    if (pclk != 0U)
 800ac46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d021      	beq.n	800ac90 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac50:	4a1a      	ldr	r2, [pc, #104]	@ (800acbc <UART_SetConfig+0x590>)
 800ac52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac56:	461a      	mov	r2, r3
 800ac58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	085b      	lsrs	r3, r3, #1
 800ac64:	441a      	add	r2, r3
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac70:	6a3b      	ldr	r3, [r7, #32]
 800ac72:	2b0f      	cmp	r3, #15
 800ac74:	d909      	bls.n	800ac8a <UART_SetConfig+0x55e>
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac7c:	d205      	bcs.n	800ac8a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	60da      	str	r2, [r3, #12]
 800ac88:	e002      	b.n	800ac90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	2200      	movs	r2, #0
 800aca4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	2200      	movs	r2, #0
 800acaa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800acac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3730      	adds	r7, #48	@ 0x30
 800acb4:	46bd      	mov	sp, r7
 800acb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acba:	bf00      	nop
 800acbc:	0800c7d4 	.word	0x0800c7d4
 800acc0:	00f42400 	.word	0x00f42400

0800acc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acd0:	f003 0308 	and.w	r3, r3, #8
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00a      	beq.n	800acee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	430a      	orrs	r2, r1
 800acec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00a      	beq.n	800ad10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	430a      	orrs	r2, r1
 800ad0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad14:	f003 0302 	and.w	r3, r3, #2
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00a      	beq.n	800ad32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad36:	f003 0304 	and.w	r3, r3, #4
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00a      	beq.n	800ad54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	430a      	orrs	r2, r1
 800ad52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad58:	f003 0310 	and.w	r3, r3, #16
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00a      	beq.n	800ad76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	430a      	orrs	r2, r1
 800ad74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad7a:	f003 0320 	and.w	r3, r3, #32
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	430a      	orrs	r2, r1
 800ad96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d01a      	beq.n	800adda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800adc2:	d10a      	bne.n	800adda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	430a      	orrs	r2, r1
 800add8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00a      	beq.n	800adfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	605a      	str	r2, [r3, #4]
  }
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b098      	sub	sp, #96	@ 0x60
 800ae0c:	af02      	add	r7, sp, #8
 800ae0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae18:	f7f8 fa9a 	bl	8003350 <HAL_GetTick>
 800ae1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 0308 	and.w	r3, r3, #8
 800ae28:	2b08      	cmp	r3, #8
 800ae2a:	d12f      	bne.n	800ae8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae30:	9300      	str	r3, [sp, #0]
 800ae32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae34:	2200      	movs	r2, #0
 800ae36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f88e 	bl	800af5c <UART_WaitOnFlagUntilTimeout>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d022      	beq.n	800ae8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4e:	e853 3f00 	ldrex	r3, [r3]
 800ae52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	461a      	mov	r2, r3
 800ae62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae64:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae6c:	e841 2300 	strex	r3, r2, [r1]
 800ae70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1e6      	bne.n	800ae46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2220      	movs	r2, #32
 800ae7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae88:	2303      	movs	r3, #3
 800ae8a:	e063      	b.n	800af54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 0304 	and.w	r3, r3, #4
 800ae96:	2b04      	cmp	r3, #4
 800ae98:	d149      	bne.n	800af2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aea2:	2200      	movs	r2, #0
 800aea4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f857 	bl	800af5c <UART_WaitOnFlagUntilTimeout>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d03c      	beq.n	800af2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebc:	e853 3f00 	ldrex	r3, [r3]
 800aec0:	623b      	str	r3, [r7, #32]
   return(result);
 800aec2:	6a3b      	ldr	r3, [r7, #32]
 800aec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aed2:	633b      	str	r3, [r7, #48]	@ 0x30
 800aed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeda:	e841 2300 	strex	r3, r2, [r1]
 800aede:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1e6      	bne.n	800aeb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3308      	adds	r3, #8
 800aeec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	e853 3f00 	ldrex	r3, [r3]
 800aef4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f023 0301 	bic.w	r3, r3, #1
 800aefc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	3308      	adds	r3, #8
 800af04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af06:	61fa      	str	r2, [r7, #28]
 800af08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0a:	69b9      	ldr	r1, [r7, #24]
 800af0c:	69fa      	ldr	r2, [r7, #28]
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	617b      	str	r3, [r7, #20]
   return(result);
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e5      	bne.n	800aee6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2220      	movs	r2, #32
 800af1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af2a:	2303      	movs	r3, #3
 800af2c:	e012      	b.n	800af54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2220      	movs	r2, #32
 800af32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2220      	movs	r2, #32
 800af3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3758      	adds	r7, #88	@ 0x58
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	4613      	mov	r3, r2
 800af6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af6c:	e04f      	b.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af74:	d04b      	beq.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af76:	f7f8 f9eb 	bl	8003350 <HAL_GetTick>
 800af7a:	4602      	mov	r2, r0
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	1ad3      	subs	r3, r2, r3
 800af80:	69ba      	ldr	r2, [r7, #24]
 800af82:	429a      	cmp	r2, r3
 800af84:	d302      	bcc.n	800af8c <UART_WaitOnFlagUntilTimeout+0x30>
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e04e      	b.n	800b02e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f003 0304 	and.w	r3, r3, #4
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d037      	beq.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2b80      	cmp	r3, #128	@ 0x80
 800afa2:	d034      	beq.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	2b40      	cmp	r3, #64	@ 0x40
 800afa8:	d031      	beq.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	69db      	ldr	r3, [r3, #28]
 800afb0:	f003 0308 	and.w	r3, r3, #8
 800afb4:	2b08      	cmp	r3, #8
 800afb6:	d110      	bne.n	800afda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2208      	movs	r2, #8
 800afbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f000 f95b 	bl	800b27c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2208      	movs	r2, #8
 800afca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	e029      	b.n	800b02e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	69db      	ldr	r3, [r3, #28]
 800afe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800afe8:	d111      	bne.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f000 f941 	bl	800b27c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2220      	movs	r2, #32
 800affe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b00a:	2303      	movs	r3, #3
 800b00c:	e00f      	b.n	800b02e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	69da      	ldr	r2, [r3, #28]
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	4013      	ands	r3, r2
 800b018:	68ba      	ldr	r2, [r7, #8]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	bf0c      	ite	eq
 800b01e:	2301      	moveq	r3, #1
 800b020:	2300      	movne	r3, #0
 800b022:	b2db      	uxtb	r3, r3
 800b024:	461a      	mov	r2, r3
 800b026:	79fb      	ldrb	r3, [r7, #7]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d0a0      	beq.n	800af6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
	...

0800b038 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b038:	b480      	push	{r7}
 800b03a:	b0a3      	sub	sp, #140	@ 0x8c
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	4613      	mov	r3, r2
 800b044:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	88fa      	ldrh	r2, [r7, #6]
 800b050:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	88fa      	ldrh	r2, [r7, #6]
 800b058:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2200      	movs	r2, #0
 800b060:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b06a:	d10e      	bne.n	800b08a <UART_Start_Receive_IT+0x52>
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d105      	bne.n	800b080 <UART_Start_Receive_IT+0x48>
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b07a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b07e:	e02d      	b.n	800b0dc <UART_Start_Receive_IT+0xa4>
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	22ff      	movs	r2, #255	@ 0xff
 800b084:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b088:	e028      	b.n	800b0dc <UART_Start_Receive_IT+0xa4>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10d      	bne.n	800b0ae <UART_Start_Receive_IT+0x76>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d104      	bne.n	800b0a4 <UART_Start_Receive_IT+0x6c>
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	22ff      	movs	r2, #255	@ 0xff
 800b09e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b0a2:	e01b      	b.n	800b0dc <UART_Start_Receive_IT+0xa4>
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	227f      	movs	r2, #127	@ 0x7f
 800b0a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b0ac:	e016      	b.n	800b0dc <UART_Start_Receive_IT+0xa4>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0b6:	d10d      	bne.n	800b0d4 <UART_Start_Receive_IT+0x9c>
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d104      	bne.n	800b0ca <UART_Start_Receive_IT+0x92>
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	227f      	movs	r2, #127	@ 0x7f
 800b0c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b0c8:	e008      	b.n	800b0dc <UART_Start_Receive_IT+0xa4>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	223f      	movs	r2, #63	@ 0x3f
 800b0ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b0d2:	e003      	b.n	800b0dc <UART_Start_Receive_IT+0xa4>
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2222      	movs	r2, #34	@ 0x22
 800b0e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	3308      	adds	r3, #8
 800b0f2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0f6:	e853 3f00 	ldrex	r3, [r3]
 800b0fa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b0fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b0fe:	f043 0301 	orr.w	r3, r3, #1
 800b102:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3308      	adds	r3, #8
 800b10c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b110:	673a      	str	r2, [r7, #112]	@ 0x70
 800b112:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b114:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b116:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b118:	e841 2300 	strex	r3, r2, [r1]
 800b11c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b11e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b120:	2b00      	cmp	r3, #0
 800b122:	d1e3      	bne.n	800b0ec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b12c:	d14f      	bne.n	800b1ce <UART_Start_Receive_IT+0x196>
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b134:	88fa      	ldrh	r2, [r7, #6]
 800b136:	429a      	cmp	r2, r3
 800b138:	d349      	bcc.n	800b1ce <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b142:	d107      	bne.n	800b154 <UART_Start_Receive_IT+0x11c>
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d103      	bne.n	800b154 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4a47      	ldr	r2, [pc, #284]	@ (800b26c <UART_Start_Receive_IT+0x234>)
 800b150:	675a      	str	r2, [r3, #116]	@ 0x74
 800b152:	e002      	b.n	800b15a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	4a46      	ldr	r2, [pc, #280]	@ (800b270 <UART_Start_Receive_IT+0x238>)
 800b158:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d01a      	beq.n	800b198 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b16a:	e853 3f00 	ldrex	r3, [r3]
 800b16e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b176:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b186:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b188:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b18a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b18c:	e841 2300 	strex	r3, r2, [r1]
 800b190:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1e4      	bne.n	800b162 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	3308      	adds	r3, #8
 800b19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1a2:	e853 3f00 	ldrex	r3, [r3]
 800b1a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b1ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	3308      	adds	r3, #8
 800b1b6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b1b8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b1ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b1be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1c0:	e841 2300 	strex	r3, r2, [r1]
 800b1c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b1c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1e5      	bne.n	800b198 <UART_Start_Receive_IT+0x160>
 800b1cc:	e046      	b.n	800b25c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1d6:	d107      	bne.n	800b1e8 <UART_Start_Receive_IT+0x1b0>
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	691b      	ldr	r3, [r3, #16]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d103      	bne.n	800b1e8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	4a24      	ldr	r2, [pc, #144]	@ (800b274 <UART_Start_Receive_IT+0x23c>)
 800b1e4:	675a      	str	r2, [r3, #116]	@ 0x74
 800b1e6:	e002      	b.n	800b1ee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	4a23      	ldr	r2, [pc, #140]	@ (800b278 <UART_Start_Receive_IT+0x240>)
 800b1ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d019      	beq.n	800b22a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fe:	e853 3f00 	ldrex	r3, [r3]
 800b202:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b206:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b20a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	461a      	mov	r2, r3
 800b212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b214:	637b      	str	r3, [r7, #52]	@ 0x34
 800b216:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b218:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b21a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b21c:	e841 2300 	strex	r3, r2, [r1]
 800b220:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1e6      	bne.n	800b1f6 <UART_Start_Receive_IT+0x1be>
 800b228:	e018      	b.n	800b25c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	e853 3f00 	ldrex	r3, [r3]
 800b236:	613b      	str	r3, [r7, #16]
   return(result);
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	f043 0320 	orr.w	r3, r3, #32
 800b23e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	461a      	mov	r2, r3
 800b246:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b248:	623b      	str	r3, [r7, #32]
 800b24a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24c:	69f9      	ldr	r1, [r7, #28]
 800b24e:	6a3a      	ldr	r2, [r7, #32]
 800b250:	e841 2300 	strex	r3, r2, [r1]
 800b254:	61bb      	str	r3, [r7, #24]
   return(result);
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d1e6      	bne.n	800b22a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	378c      	adds	r7, #140	@ 0x8c
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	0800ba99 	.word	0x0800ba99
 800b270:	0800b735 	.word	0x0800b735
 800b274:	0800b57d 	.word	0x0800b57d
 800b278:	0800b3c5 	.word	0x0800b3c5

0800b27c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b095      	sub	sp, #84	@ 0x54
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b28c:	e853 3f00 	ldrex	r3, [r3]
 800b290:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b298:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b2a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b2aa:	e841 2300 	strex	r3, r2, [r1]
 800b2ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1e6      	bne.n	800b284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	3308      	adds	r3, #8
 800b2bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2be:	6a3b      	ldr	r3, [r7, #32]
 800b2c0:	e853 3f00 	ldrex	r3, [r3]
 800b2c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2cc:	f023 0301 	bic.w	r3, r3, #1
 800b2d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	3308      	adds	r3, #8
 800b2d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b2dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2e2:	e841 2300 	strex	r3, r2, [r1]
 800b2e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1e3      	bne.n	800b2b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d118      	bne.n	800b328 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	e853 3f00 	ldrex	r3, [r3]
 800b302:	60bb      	str	r3, [r7, #8]
   return(result);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	f023 0310 	bic.w	r3, r3, #16
 800b30a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	461a      	mov	r2, r3
 800b312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b314:	61bb      	str	r3, [r7, #24]
 800b316:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b318:	6979      	ldr	r1, [r7, #20]
 800b31a:	69ba      	ldr	r2, [r7, #24]
 800b31c:	e841 2300 	strex	r3, r2, [r1]
 800b320:	613b      	str	r3, [r7, #16]
   return(result);
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1e6      	bne.n	800b2f6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2220      	movs	r2, #32
 800b32c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b33c:	bf00      	nop
 800b33e:	3754      	adds	r7, #84	@ 0x54
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b354:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f7ff f97a 	bl	800a658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b364:	bf00      	nop
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b088      	sub	sp, #32
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	e853 3f00 	ldrex	r3, [r3]
 800b380:	60bb      	str	r3, [r7, #8]
   return(result);
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b388:	61fb      	str	r3, [r7, #28]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	461a      	mov	r2, r3
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	61bb      	str	r3, [r7, #24]
 800b394:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b396:	6979      	ldr	r1, [r7, #20]
 800b398:	69ba      	ldr	r2, [r7, #24]
 800b39a:	e841 2300 	strex	r3, r2, [r1]
 800b39e:	613b      	str	r3, [r7, #16]
   return(result);
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d1e6      	bne.n	800b374 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2220      	movs	r2, #32
 800b3aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f7ff f945 	bl	800a644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3ba:	bf00      	nop
 800b3bc:	3720      	adds	r7, #32
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
	...

0800b3c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b09c      	sub	sp, #112	@ 0x70
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b3d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3dc:	2b22      	cmp	r3, #34	@ 0x22
 800b3de:	f040 80be 	bne.w	800b55e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b3ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b3f0:	b2d9      	uxtb	r1, r3
 800b3f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b3f6:	b2da      	uxtb	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3fc:	400a      	ands	r2, r1
 800b3fe:	b2d2      	uxtb	r2, r2
 800b400:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b406:	1c5a      	adds	r2, r3, #1
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b412:	b29b      	uxth	r3, r3
 800b414:	3b01      	subs	r3, #1
 800b416:	b29a      	uxth	r2, r3
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b424:	b29b      	uxth	r3, r3
 800b426:	2b00      	cmp	r3, #0
 800b428:	f040 80a1 	bne.w	800b56e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b434:	e853 3f00 	ldrex	r3, [r3]
 800b438:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b43a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b43c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b440:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	461a      	mov	r2, r3
 800b448:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b44a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b44c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b44e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b450:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b452:	e841 2300 	strex	r3, r2, [r1]
 800b456:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b458:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d1e6      	bne.n	800b42c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	3308      	adds	r3, #8
 800b464:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b468:	e853 3f00 	ldrex	r3, [r3]
 800b46c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b46e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b470:	f023 0301 	bic.w	r3, r3, #1
 800b474:	667b      	str	r3, [r7, #100]	@ 0x64
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3308      	adds	r3, #8
 800b47c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b47e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b480:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b482:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b484:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b486:	e841 2300 	strex	r3, r2, [r1]
 800b48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b48c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1e5      	bne.n	800b45e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2220      	movs	r2, #32
 800b496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a33      	ldr	r2, [pc, #204]	@ (800b578 <UART_RxISR_8BIT+0x1b4>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d01f      	beq.n	800b4f0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d018      	beq.n	800b4f0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c6:	e853 3f00 	ldrex	r3, [r3]
 800b4ca:	623b      	str	r3, [r7, #32]
   return(result);
 800b4cc:	6a3b      	ldr	r3, [r7, #32]
 800b4ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b4d2:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	461a      	mov	r2, r3
 800b4da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b4dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4e4:	e841 2300 	strex	r3, r2, [r1]
 800b4e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1e6      	bne.n	800b4be <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d12e      	bne.n	800b556 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	e853 3f00 	ldrex	r3, [r3]
 800b50a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f023 0310 	bic.w	r3, r3, #16
 800b512:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	461a      	mov	r2, r3
 800b51a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b51c:	61fb      	str	r3, [r7, #28]
 800b51e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b520:	69b9      	ldr	r1, [r7, #24]
 800b522:	69fa      	ldr	r2, [r7, #28]
 800b524:	e841 2300 	strex	r3, r2, [r1]
 800b528:	617b      	str	r3, [r7, #20]
   return(result);
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1e6      	bne.n	800b4fe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	69db      	ldr	r3, [r3, #28]
 800b536:	f003 0310 	and.w	r3, r3, #16
 800b53a:	2b10      	cmp	r3, #16
 800b53c:	d103      	bne.n	800b546 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2210      	movs	r2, #16
 800b544:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b54c:	4619      	mov	r1, r3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f7ff f88c 	bl	800a66c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b554:	e00b      	b.n	800b56e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7f7 f8d8 	bl	800270c <HAL_UART_RxCpltCallback>
}
 800b55c:	e007      	b.n	800b56e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	699a      	ldr	r2, [r3, #24]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f042 0208 	orr.w	r2, r2, #8
 800b56c:	619a      	str	r2, [r3, #24]
}
 800b56e:	bf00      	nop
 800b570:	3770      	adds	r7, #112	@ 0x70
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	40008000 	.word	0x40008000

0800b57c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b09c      	sub	sp, #112	@ 0x70
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b58a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b594:	2b22      	cmp	r3, #34	@ 0x22
 800b596:	f040 80be 	bne.w	800b716 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b5aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b5ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b5b2:	4013      	ands	r3, r2
 800b5b4:	b29a      	uxth	r2, r3
 800b5b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b5b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5be:	1c9a      	adds	r2, r3, #2
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	b29a      	uxth	r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f040 80a1 	bne.w	800b726 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5ec:	e853 3f00 	ldrex	r3, [r3]
 800b5f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b5f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	461a      	mov	r2, r3
 800b600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b602:	657b      	str	r3, [r7, #84]	@ 0x54
 800b604:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b606:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b608:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b60a:	e841 2300 	strex	r3, r2, [r1]
 800b60e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1e6      	bne.n	800b5e4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3308      	adds	r3, #8
 800b61c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b620:	e853 3f00 	ldrex	r3, [r3]
 800b624:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b628:	f023 0301 	bic.w	r3, r3, #1
 800b62c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	3308      	adds	r3, #8
 800b634:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b636:	643a      	str	r2, [r7, #64]	@ 0x40
 800b638:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b63c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b63e:	e841 2300 	strex	r3, r2, [r1]
 800b642:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1e5      	bne.n	800b616 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2220      	movs	r2, #32
 800b64e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a33      	ldr	r2, [pc, #204]	@ (800b730 <UART_RxISR_16BIT+0x1b4>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d01f      	beq.n	800b6a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b672:	2b00      	cmp	r3, #0
 800b674:	d018      	beq.n	800b6a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67c:	6a3b      	ldr	r3, [r7, #32]
 800b67e:	e853 3f00 	ldrex	r3, [r3]
 800b682:	61fb      	str	r3, [r7, #28]
   return(result);
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b68a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	461a      	mov	r2, r3
 800b692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b694:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b696:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b69a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b69c:	e841 2300 	strex	r3, r2, [r1]
 800b6a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1e6      	bne.n	800b676 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d12e      	bne.n	800b70e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	e853 3f00 	ldrex	r3, [r3]
 800b6c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	f023 0310 	bic.w	r3, r3, #16
 800b6ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6d4:	61bb      	str	r3, [r7, #24]
 800b6d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d8:	6979      	ldr	r1, [r7, #20]
 800b6da:	69ba      	ldr	r2, [r7, #24]
 800b6dc:	e841 2300 	strex	r3, r2, [r1]
 800b6e0:	613b      	str	r3, [r7, #16]
   return(result);
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1e6      	bne.n	800b6b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	69db      	ldr	r3, [r3, #28]
 800b6ee:	f003 0310 	and.w	r3, r3, #16
 800b6f2:	2b10      	cmp	r3, #16
 800b6f4:	d103      	bne.n	800b6fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2210      	movs	r2, #16
 800b6fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f7fe ffb0 	bl	800a66c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b70c:	e00b      	b.n	800b726 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7f6 fffc 	bl	800270c <HAL_UART_RxCpltCallback>
}
 800b714:	e007      	b.n	800b726 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	699a      	ldr	r2, [r3, #24]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f042 0208 	orr.w	r2, r2, #8
 800b724:	619a      	str	r2, [r3, #24]
}
 800b726:	bf00      	nop
 800b728:	3770      	adds	r7, #112	@ 0x70
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	40008000 	.word	0x40008000

0800b734 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b0ac      	sub	sp, #176	@ 0xb0
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b742:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	69db      	ldr	r3, [r3, #28]
 800b74c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b76a:	2b22      	cmp	r3, #34	@ 0x22
 800b76c:	f040 8183 	bne.w	800ba76 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b776:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b77a:	e126      	b.n	800b9ca <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b782:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b786:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b78a:	b2d9      	uxtb	r1, r3
 800b78c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b790:	b2da      	uxtb	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b796:	400a      	ands	r2, r1
 800b798:	b2d2      	uxtb	r2, r2
 800b79a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	69db      	ldr	r3, [r3, #28]
 800b7be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b7c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b7c6:	f003 0307 	and.w	r3, r3, #7
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d053      	beq.n	800b876 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b7d2:	f003 0301 	and.w	r3, r3, #1
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d011      	beq.n	800b7fe <UART_RxISR_8BIT_FIFOEN+0xca>
 800b7da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b7de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00b      	beq.n	800b7fe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7f4:	f043 0201 	orr.w	r2, r3, #1
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b802:	f003 0302 	and.w	r3, r3, #2
 800b806:	2b00      	cmp	r3, #0
 800b808:	d011      	beq.n	800b82e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b80a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00b      	beq.n	800b82e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2202      	movs	r2, #2
 800b81c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b824:	f043 0204 	orr.w	r2, r3, #4
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b82e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b832:	f003 0304 	and.w	r3, r3, #4
 800b836:	2b00      	cmp	r3, #0
 800b838:	d011      	beq.n	800b85e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b83a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b83e:	f003 0301 	and.w	r3, r3, #1
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00b      	beq.n	800b85e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2204      	movs	r2, #4
 800b84c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b854:	f043 0202 	orr.w	r2, r3, #2
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b864:	2b00      	cmp	r3, #0
 800b866:	d006      	beq.n	800b876 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f7fe fef5 	bl	800a658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f040 80a3 	bne.w	800b9ca <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b88c:	e853 3f00 	ldrex	r3, [r3]
 800b890:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b898:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b8a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b8a8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8aa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b8ac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b8ae:	e841 2300 	strex	r3, r2, [r1]
 800b8b2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b8b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1e4      	bne.n	800b884 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	3308      	adds	r3, #8
 800b8c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8c4:	e853 3f00 	ldrex	r3, [r3]
 800b8c8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b8ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8d0:	f023 0301 	bic.w	r3, r3, #1
 800b8d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	3308      	adds	r3, #8
 800b8de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b8e2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b8e4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b8e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b8ea:	e841 2300 	strex	r3, r2, [r1]
 800b8ee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b8f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d1e1      	bne.n	800b8ba <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2220      	movs	r2, #32
 800b8fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a60      	ldr	r2, [pc, #384]	@ (800ba90 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d021      	beq.n	800b958 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d01a      	beq.n	800b958 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b92a:	e853 3f00 	ldrex	r3, [r3]
 800b92e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b932:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b936:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	461a      	mov	r2, r3
 800b940:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b944:	657b      	str	r3, [r7, #84]	@ 0x54
 800b946:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b948:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b94a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b94c:	e841 2300 	strex	r3, r2, [r1]
 800b950:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b954:	2b00      	cmp	r3, #0
 800b956:	d1e4      	bne.n	800b922 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d130      	bne.n	800b9c2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b96e:	e853 3f00 	ldrex	r3, [r3]
 800b972:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b976:	f023 0310 	bic.w	r3, r3, #16
 800b97a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	461a      	mov	r2, r3
 800b984:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b988:	643b      	str	r3, [r7, #64]	@ 0x40
 800b98a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b98e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b990:	e841 2300 	strex	r3, r2, [r1]
 800b994:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d1e4      	bne.n	800b966 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	69db      	ldr	r3, [r3, #28]
 800b9a2:	f003 0310 	and.w	r3, r3, #16
 800b9a6:	2b10      	cmp	r3, #16
 800b9a8:	d103      	bne.n	800b9b2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2210      	movs	r2, #16
 800b9b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f7fe fe56 	bl	800a66c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b9c0:	e00e      	b.n	800b9e0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f7f6 fea2 	bl	800270c <HAL_UART_RxCpltCallback>
        break;
 800b9c8:	e00a      	b.n	800b9e0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b9ca:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d006      	beq.n	800b9e0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800b9d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9d6:	f003 0320 	and.w	r3, r3, #32
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f47f aece 	bne.w	800b77c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b9e6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b9ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d049      	beq.n	800ba86 <UART_RxISR_8BIT_FIFOEN+0x352>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b9f8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d242      	bcs.n	800ba86 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	3308      	adds	r3, #8
 800ba06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba08:	6a3b      	ldr	r3, [r7, #32]
 800ba0a:	e853 3f00 	ldrex	r3, [r3]
 800ba0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3308      	adds	r3, #8
 800ba20:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ba24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba2c:	e841 2300 	strex	r3, r2, [r1]
 800ba30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1e3      	bne.n	800ba00 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a16      	ldr	r2, [pc, #88]	@ (800ba94 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800ba3c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	e853 3f00 	ldrex	r3, [r3]
 800ba4a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	f043 0320 	orr.w	r3, r3, #32
 800ba52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ba60:	61bb      	str	r3, [r7, #24]
 800ba62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba64:	6979      	ldr	r1, [r7, #20]
 800ba66:	69ba      	ldr	r2, [r7, #24]
 800ba68:	e841 2300 	strex	r3, r2, [r1]
 800ba6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1e4      	bne.n	800ba3e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba74:	e007      	b.n	800ba86 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	699a      	ldr	r2, [r3, #24]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f042 0208 	orr.w	r2, r2, #8
 800ba84:	619a      	str	r2, [r3, #24]
}
 800ba86:	bf00      	nop
 800ba88:	37b0      	adds	r7, #176	@ 0xb0
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	40008000 	.word	0x40008000
 800ba94:	0800b3c5 	.word	0x0800b3c5

0800ba98 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b0ae      	sub	sp, #184	@ 0xb8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800baa6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	69db      	ldr	r3, [r3, #28]
 800bab0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bace:	2b22      	cmp	r3, #34	@ 0x22
 800bad0:	f040 8187 	bne.w	800bde2 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bada:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bade:	e12a      	b.n	800bd36 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800baee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800baf2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800baf6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800bafa:	4013      	ands	r3, r2
 800bafc:	b29a      	uxth	r2, r3
 800bafe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bb02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb08:	1c9a      	adds	r2, r3, #2
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	3b01      	subs	r3, #1
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	69db      	ldr	r3, [r3, #28]
 800bb26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bb2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb2e:	f003 0307 	and.w	r3, r3, #7
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d053      	beq.n	800bbde <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb3a:	f003 0301 	and.w	r3, r3, #1
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d011      	beq.n	800bb66 <UART_RxISR_16BIT_FIFOEN+0xce>
 800bb42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00b      	beq.n	800bb66 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2201      	movs	r2, #1
 800bb54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb5c:	f043 0201 	orr.w	r2, r3, #1
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb6a:	f003 0302 	and.w	r3, r3, #2
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d011      	beq.n	800bb96 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800bb72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00b      	beq.n	800bb96 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2202      	movs	r2, #2
 800bb84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb8c:	f043 0204 	orr.w	r2, r3, #4
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb9a:	f003 0304 	and.w	r3, r3, #4
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d011      	beq.n	800bbc6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800bba2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bba6:	f003 0301 	and.w	r3, r3, #1
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00b      	beq.n	800bbc6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2204      	movs	r2, #4
 800bbb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbbc:	f043 0202 	orr.w	r2, r3, #2
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d006      	beq.n	800bbde <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7fe fd41 	bl	800a658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f040 80a5 	bne.w	800bd36 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bbf4:	e853 3f00 	ldrex	r3, [r3]
 800bbf8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bbfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bbfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	461a      	mov	r2, r3
 800bc0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bc0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bc12:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bc16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bc1a:	e841 2300 	strex	r3, r2, [r1]
 800bc1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bc20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1e2      	bne.n	800bbec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc30:	e853 3f00 	ldrex	r3, [r3]
 800bc34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bc36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc3c:	f023 0301 	bic.w	r3, r3, #1
 800bc40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	3308      	adds	r3, #8
 800bc4a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800bc4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bc50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bc54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bc56:	e841 2300 	strex	r3, r2, [r1]
 800bc5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bc5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d1e1      	bne.n	800bc26 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2220      	movs	r2, #32
 800bc66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a60      	ldr	r2, [pc, #384]	@ (800bdfc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d021      	beq.n	800bcc4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d01a      	beq.n	800bcc4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc96:	e853 3f00 	ldrex	r3, [r3]
 800bc9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bc9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bca2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	461a      	mov	r2, r3
 800bcac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bcb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bcb2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bcb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bcb8:	e841 2300 	strex	r3, r2, [r1]
 800bcbc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bcbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d1e4      	bne.n	800bc8e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d130      	bne.n	800bd2e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcda:	e853 3f00 	ldrex	r3, [r3]
 800bcde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bce2:	f023 0310 	bic.w	r3, r3, #16
 800bce6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bcf4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bcf6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bcfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bcfc:	e841 2300 	strex	r3, r2, [r1]
 800bd00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d1e4      	bne.n	800bcd2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	69db      	ldr	r3, [r3, #28]
 800bd0e:	f003 0310 	and.w	r3, r3, #16
 800bd12:	2b10      	cmp	r3, #16
 800bd14:	d103      	bne.n	800bd1e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2210      	movs	r2, #16
 800bd1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bd24:	4619      	mov	r1, r3
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f7fe fca0 	bl	800a66c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800bd2c:	e00e      	b.n	800bd4c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f7f6 fcec 	bl	800270c <HAL_UART_RxCpltCallback>
        break;
 800bd34:	e00a      	b.n	800bd4c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bd36:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d006      	beq.n	800bd4c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800bd3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bd42:	f003 0320 	and.w	r3, r3, #32
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	f47f aeca 	bne.w	800bae0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd52:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bd56:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d049      	beq.n	800bdf2 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bd64:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d242      	bcs.n	800bdf2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	3308      	adds	r3, #8
 800bd72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd76:	e853 3f00 	ldrex	r3, [r3]
 800bd7a:	623b      	str	r3, [r7, #32]
   return(result);
 800bd7c:	6a3b      	ldr	r3, [r7, #32]
 800bd7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bd82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	3308      	adds	r3, #8
 800bd8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800bd90:	633a      	str	r2, [r7, #48]	@ 0x30
 800bd92:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd98:	e841 2300 	strex	r3, r2, [r1]
 800bd9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1e3      	bne.n	800bd6c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4a16      	ldr	r2, [pc, #88]	@ (800be00 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800bda8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	e853 3f00 	ldrex	r3, [r3]
 800bdb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f043 0320 	orr.w	r3, r3, #32
 800bdbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bdcc:	61fb      	str	r3, [r7, #28]
 800bdce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd0:	69b9      	ldr	r1, [r7, #24]
 800bdd2:	69fa      	ldr	r2, [r7, #28]
 800bdd4:	e841 2300 	strex	r3, r2, [r1]
 800bdd8:	617b      	str	r3, [r7, #20]
   return(result);
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d1e4      	bne.n	800bdaa <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bde0:	e007      	b.n	800bdf2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	699a      	ldr	r2, [r3, #24]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f042 0208 	orr.w	r2, r2, #8
 800bdf0:	619a      	str	r2, [r3, #24]
}
 800bdf2:	bf00      	nop
 800bdf4:	37b8      	adds	r7, #184	@ 0xb8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	40008000 	.word	0x40008000
 800be00:	0800b57d 	.word	0x0800b57d

0800be04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800be0c:	bf00      	nop
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d101      	bne.n	800be56 <HAL_UARTEx_DisableFifoMode+0x16>
 800be52:	2302      	movs	r3, #2
 800be54:	e027      	b.n	800bea6 <HAL_UARTEx_DisableFifoMode+0x66>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2201      	movs	r2, #1
 800be5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2224      	movs	r2, #36	@ 0x24
 800be62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f022 0201 	bic.w	r2, r2, #1
 800be7c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800be84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2220      	movs	r2, #32
 800be98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3714      	adds	r7, #20
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b084      	sub	sp, #16
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d101      	bne.n	800beca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bec6:	2302      	movs	r3, #2
 800bec8:	e02d      	b.n	800bf26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2201      	movs	r2, #1
 800bece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2224      	movs	r2, #36	@ 0x24
 800bed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f022 0201 	bic.w	r2, r2, #1
 800bef0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	683a      	ldr	r2, [r7, #0]
 800bf02:	430a      	orrs	r2, r1
 800bf04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f850 	bl	800bfac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2220      	movs	r2, #32
 800bf18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b084      	sub	sp, #16
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d101      	bne.n	800bf46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf42:	2302      	movs	r3, #2
 800bf44:	e02d      	b.n	800bfa2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2224      	movs	r2, #36	@ 0x24
 800bf52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f022 0201 	bic.w	r2, r2, #1
 800bf6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	683a      	ldr	r2, [r7, #0]
 800bf7e:	430a      	orrs	r2, r1
 800bf80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 f812 	bl	800bfac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2220      	movs	r2, #32
 800bf94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
	...

0800bfac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d108      	bne.n	800bfce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bfcc:	e031      	b.n	800c032 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bfce:	2308      	movs	r3, #8
 800bfd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bfd2:	2308      	movs	r3, #8
 800bfd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	0e5b      	lsrs	r3, r3, #25
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	f003 0307 	and.w	r3, r3, #7
 800bfe4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	0f5b      	lsrs	r3, r3, #29
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	f003 0307 	and.w	r3, r3, #7
 800bff4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bff6:	7bbb      	ldrb	r3, [r7, #14]
 800bff8:	7b3a      	ldrb	r2, [r7, #12]
 800bffa:	4911      	ldr	r1, [pc, #68]	@ (800c040 <UARTEx_SetNbDataToProcess+0x94>)
 800bffc:	5c8a      	ldrb	r2, [r1, r2]
 800bffe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c002:	7b3a      	ldrb	r2, [r7, #12]
 800c004:	490f      	ldr	r1, [pc, #60]	@ (800c044 <UARTEx_SetNbDataToProcess+0x98>)
 800c006:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c008:	fb93 f3f2 	sdiv	r3, r3, r2
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c014:	7bfb      	ldrb	r3, [r7, #15]
 800c016:	7b7a      	ldrb	r2, [r7, #13]
 800c018:	4909      	ldr	r1, [pc, #36]	@ (800c040 <UARTEx_SetNbDataToProcess+0x94>)
 800c01a:	5c8a      	ldrb	r2, [r1, r2]
 800c01c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c020:	7b7a      	ldrb	r2, [r7, #13]
 800c022:	4908      	ldr	r1, [pc, #32]	@ (800c044 <UARTEx_SetNbDataToProcess+0x98>)
 800c024:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c026:	fb93 f3f2 	sdiv	r3, r3, r2
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c032:	bf00      	nop
 800c034:	3714      	adds	r7, #20
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	0800c7ec 	.word	0x0800c7ec
 800c044:	0800c7f4 	.word	0x0800c7f4

0800c048 <memset>:
 800c048:	4402      	add	r2, r0
 800c04a:	4603      	mov	r3, r0
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d100      	bne.n	800c052 <memset+0xa>
 800c050:	4770      	bx	lr
 800c052:	f803 1b01 	strb.w	r1, [r3], #1
 800c056:	e7f9      	b.n	800c04c <memset+0x4>

0800c058 <__errno>:
 800c058:	4b01      	ldr	r3, [pc, #4]	@ (800c060 <__errno+0x8>)
 800c05a:	6818      	ldr	r0, [r3, #0]
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop
 800c060:	20000010 	.word	0x20000010

0800c064 <__libc_init_array>:
 800c064:	b570      	push	{r4, r5, r6, lr}
 800c066:	4d0d      	ldr	r5, [pc, #52]	@ (800c09c <__libc_init_array+0x38>)
 800c068:	4c0d      	ldr	r4, [pc, #52]	@ (800c0a0 <__libc_init_array+0x3c>)
 800c06a:	1b64      	subs	r4, r4, r5
 800c06c:	10a4      	asrs	r4, r4, #2
 800c06e:	2600      	movs	r6, #0
 800c070:	42a6      	cmp	r6, r4
 800c072:	d109      	bne.n	800c088 <__libc_init_array+0x24>
 800c074:	4d0b      	ldr	r5, [pc, #44]	@ (800c0a4 <__libc_init_array+0x40>)
 800c076:	4c0c      	ldr	r4, [pc, #48]	@ (800c0a8 <__libc_init_array+0x44>)
 800c078:	f000 fb94 	bl	800c7a4 <_init>
 800c07c:	1b64      	subs	r4, r4, r5
 800c07e:	10a4      	asrs	r4, r4, #2
 800c080:	2600      	movs	r6, #0
 800c082:	42a6      	cmp	r6, r4
 800c084:	d105      	bne.n	800c092 <__libc_init_array+0x2e>
 800c086:	bd70      	pop	{r4, r5, r6, pc}
 800c088:	f855 3b04 	ldr.w	r3, [r5], #4
 800c08c:	4798      	blx	r3
 800c08e:	3601      	adds	r6, #1
 800c090:	e7ee      	b.n	800c070 <__libc_init_array+0xc>
 800c092:	f855 3b04 	ldr.w	r3, [r5], #4
 800c096:	4798      	blx	r3
 800c098:	3601      	adds	r6, #1
 800c09a:	e7f2      	b.n	800c082 <__libc_init_array+0x1e>
 800c09c:	0800c808 	.word	0x0800c808
 800c0a0:	0800c808 	.word	0x0800c808
 800c0a4:	0800c808 	.word	0x0800c808
 800c0a8:	0800c80c 	.word	0x0800c80c

0800c0ac <acos>:
 800c0ac:	b538      	push	{r3, r4, r5, lr}
 800c0ae:	ed2d 8b02 	vpush	{d8}
 800c0b2:	ec55 4b10 	vmov	r4, r5, d0
 800c0b6:	f000 f83f 	bl	800c138 <__ieee754_acos>
 800c0ba:	4622      	mov	r2, r4
 800c0bc:	462b      	mov	r3, r5
 800c0be:	4620      	mov	r0, r4
 800c0c0:	4629      	mov	r1, r5
 800c0c2:	eeb0 8a40 	vmov.f32	s16, s0
 800c0c6:	eef0 8a60 	vmov.f32	s17, s1
 800c0ca:	f7f4 fcfb 	bl	8000ac4 <__aeabi_dcmpun>
 800c0ce:	b9a8      	cbnz	r0, 800c0fc <acos+0x50>
 800c0d0:	ec45 4b10 	vmov	d0, r4, r5
 800c0d4:	f000 f81e 	bl	800c114 <fabs>
 800c0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800c10c <acos+0x60>)
 800c0da:	ec51 0b10 	vmov	r0, r1, d0
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f7f4 fce6 	bl	8000ab0 <__aeabi_dcmpgt>
 800c0e4:	b150      	cbz	r0, 800c0fc <acos+0x50>
 800c0e6:	f7ff ffb7 	bl	800c058 <__errno>
 800c0ea:	ecbd 8b02 	vpop	{d8}
 800c0ee:	2321      	movs	r3, #33	@ 0x21
 800c0f0:	6003      	str	r3, [r0, #0]
 800c0f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0f6:	4806      	ldr	r0, [pc, #24]	@ (800c110 <acos+0x64>)
 800c0f8:	f000 b816 	b.w	800c128 <nan>
 800c0fc:	eeb0 0a48 	vmov.f32	s0, s16
 800c100:	eef0 0a68 	vmov.f32	s1, s17
 800c104:	ecbd 8b02 	vpop	{d8}
 800c108:	bd38      	pop	{r3, r4, r5, pc}
 800c10a:	bf00      	nop
 800c10c:	3ff00000 	.word	0x3ff00000
 800c110:	0800c7fc 	.word	0x0800c7fc

0800c114 <fabs>:
 800c114:	ec51 0b10 	vmov	r0, r1, d0
 800c118:	4602      	mov	r2, r0
 800c11a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c11e:	ec43 2b10 	vmov	d0, r2, r3
 800c122:	4770      	bx	lr
 800c124:	0000      	movs	r0, r0
	...

0800c128 <nan>:
 800c128:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c130 <nan+0x8>
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop
 800c130:	00000000 	.word	0x00000000
 800c134:	7ff80000 	.word	0x7ff80000

0800c138 <__ieee754_acos>:
 800c138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13c:	ec55 4b10 	vmov	r4, r5, d0
 800c140:	49b7      	ldr	r1, [pc, #732]	@ (800c420 <__ieee754_acos+0x2e8>)
 800c142:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c146:	428b      	cmp	r3, r1
 800c148:	d919      	bls.n	800c17e <__ieee754_acos+0x46>
 800c14a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800c14e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800c152:	4323      	orrs	r3, r4
 800c154:	d106      	bne.n	800c164 <__ieee754_acos+0x2c>
 800c156:	2d00      	cmp	r5, #0
 800c158:	f340 8210 	ble.w	800c57c <__ieee754_acos+0x444>
 800c15c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800c3b0 <__ieee754_acos+0x278>
 800c160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c164:	4622      	mov	r2, r4
 800c166:	462b      	mov	r3, r5
 800c168:	4620      	mov	r0, r4
 800c16a:	4629      	mov	r1, r5
 800c16c:	f7f4 f858 	bl	8000220 <__aeabi_dsub>
 800c170:	4602      	mov	r2, r0
 800c172:	460b      	mov	r3, r1
 800c174:	f7f4 fb36 	bl	80007e4 <__aeabi_ddiv>
 800c178:	ec41 0b10 	vmov	d0, r0, r1
 800c17c:	e7f0      	b.n	800c160 <__ieee754_acos+0x28>
 800c17e:	49a9      	ldr	r1, [pc, #676]	@ (800c424 <__ieee754_acos+0x2ec>)
 800c180:	428b      	cmp	r3, r1
 800c182:	f200 8085 	bhi.w	800c290 <__ieee754_acos+0x158>
 800c186:	4aa8      	ldr	r2, [pc, #672]	@ (800c428 <__ieee754_acos+0x2f0>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	f240 81fa 	bls.w	800c582 <__ieee754_acos+0x44a>
 800c18e:	4622      	mov	r2, r4
 800c190:	462b      	mov	r3, r5
 800c192:	4620      	mov	r0, r4
 800c194:	4629      	mov	r1, r5
 800c196:	f7f4 f9fb 	bl	8000590 <__aeabi_dmul>
 800c19a:	a387      	add	r3, pc, #540	@ (adr r3, 800c3b8 <__ieee754_acos+0x280>)
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	4606      	mov	r6, r0
 800c1a2:	460f      	mov	r7, r1
 800c1a4:	f7f4 f9f4 	bl	8000590 <__aeabi_dmul>
 800c1a8:	a385      	add	r3, pc, #532	@ (adr r3, 800c3c0 <__ieee754_acos+0x288>)
 800c1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ae:	f7f4 f839 	bl	8000224 <__adddf3>
 800c1b2:	4632      	mov	r2, r6
 800c1b4:	463b      	mov	r3, r7
 800c1b6:	f7f4 f9eb 	bl	8000590 <__aeabi_dmul>
 800c1ba:	a383      	add	r3, pc, #524	@ (adr r3, 800c3c8 <__ieee754_acos+0x290>)
 800c1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c0:	f7f4 f82e 	bl	8000220 <__aeabi_dsub>
 800c1c4:	4632      	mov	r2, r6
 800c1c6:	463b      	mov	r3, r7
 800c1c8:	f7f4 f9e2 	bl	8000590 <__aeabi_dmul>
 800c1cc:	a380      	add	r3, pc, #512	@ (adr r3, 800c3d0 <__ieee754_acos+0x298>)
 800c1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d2:	f7f4 f827 	bl	8000224 <__adddf3>
 800c1d6:	4632      	mov	r2, r6
 800c1d8:	463b      	mov	r3, r7
 800c1da:	f7f4 f9d9 	bl	8000590 <__aeabi_dmul>
 800c1de:	a37e      	add	r3, pc, #504	@ (adr r3, 800c3d8 <__ieee754_acos+0x2a0>)
 800c1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e4:	f7f4 f81c 	bl	8000220 <__aeabi_dsub>
 800c1e8:	4632      	mov	r2, r6
 800c1ea:	463b      	mov	r3, r7
 800c1ec:	f7f4 f9d0 	bl	8000590 <__aeabi_dmul>
 800c1f0:	a37b      	add	r3, pc, #492	@ (adr r3, 800c3e0 <__ieee754_acos+0x2a8>)
 800c1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f6:	f7f4 f815 	bl	8000224 <__adddf3>
 800c1fa:	4632      	mov	r2, r6
 800c1fc:	463b      	mov	r3, r7
 800c1fe:	f7f4 f9c7 	bl	8000590 <__aeabi_dmul>
 800c202:	a379      	add	r3, pc, #484	@ (adr r3, 800c3e8 <__ieee754_acos+0x2b0>)
 800c204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c208:	4680      	mov	r8, r0
 800c20a:	4689      	mov	r9, r1
 800c20c:	4630      	mov	r0, r6
 800c20e:	4639      	mov	r1, r7
 800c210:	f7f4 f9be 	bl	8000590 <__aeabi_dmul>
 800c214:	a376      	add	r3, pc, #472	@ (adr r3, 800c3f0 <__ieee754_acos+0x2b8>)
 800c216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21a:	f7f4 f801 	bl	8000220 <__aeabi_dsub>
 800c21e:	4632      	mov	r2, r6
 800c220:	463b      	mov	r3, r7
 800c222:	f7f4 f9b5 	bl	8000590 <__aeabi_dmul>
 800c226:	a374      	add	r3, pc, #464	@ (adr r3, 800c3f8 <__ieee754_acos+0x2c0>)
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	f7f3 fffa 	bl	8000224 <__adddf3>
 800c230:	4632      	mov	r2, r6
 800c232:	463b      	mov	r3, r7
 800c234:	f7f4 f9ac 	bl	8000590 <__aeabi_dmul>
 800c238:	a371      	add	r3, pc, #452	@ (adr r3, 800c400 <__ieee754_acos+0x2c8>)
 800c23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23e:	f7f3 ffef 	bl	8000220 <__aeabi_dsub>
 800c242:	4632      	mov	r2, r6
 800c244:	463b      	mov	r3, r7
 800c246:	f7f4 f9a3 	bl	8000590 <__aeabi_dmul>
 800c24a:	4b78      	ldr	r3, [pc, #480]	@ (800c42c <__ieee754_acos+0x2f4>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	f7f3 ffe9 	bl	8000224 <__adddf3>
 800c252:	4602      	mov	r2, r0
 800c254:	460b      	mov	r3, r1
 800c256:	4640      	mov	r0, r8
 800c258:	4649      	mov	r1, r9
 800c25a:	f7f4 fac3 	bl	80007e4 <__aeabi_ddiv>
 800c25e:	4622      	mov	r2, r4
 800c260:	462b      	mov	r3, r5
 800c262:	f7f4 f995 	bl	8000590 <__aeabi_dmul>
 800c266:	4602      	mov	r2, r0
 800c268:	460b      	mov	r3, r1
 800c26a:	a167      	add	r1, pc, #412	@ (adr r1, 800c408 <__ieee754_acos+0x2d0>)
 800c26c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c270:	f7f3 ffd6 	bl	8000220 <__aeabi_dsub>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	4620      	mov	r0, r4
 800c27a:	4629      	mov	r1, r5
 800c27c:	f7f3 ffd0 	bl	8000220 <__aeabi_dsub>
 800c280:	4602      	mov	r2, r0
 800c282:	460b      	mov	r3, r1
 800c284:	a162      	add	r1, pc, #392	@ (adr r1, 800c410 <__ieee754_acos+0x2d8>)
 800c286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c28a:	f7f3 ffc9 	bl	8000220 <__aeabi_dsub>
 800c28e:	e773      	b.n	800c178 <__ieee754_acos+0x40>
 800c290:	2d00      	cmp	r5, #0
 800c292:	f280 80cf 	bge.w	800c434 <__ieee754_acos+0x2fc>
 800c296:	4b65      	ldr	r3, [pc, #404]	@ (800c42c <__ieee754_acos+0x2f4>)
 800c298:	2200      	movs	r2, #0
 800c29a:	4620      	mov	r0, r4
 800c29c:	4629      	mov	r1, r5
 800c29e:	f7f3 ffc1 	bl	8000224 <__adddf3>
 800c2a2:	4b63      	ldr	r3, [pc, #396]	@ (800c430 <__ieee754_acos+0x2f8>)
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	f7f4 f973 	bl	8000590 <__aeabi_dmul>
 800c2aa:	a343      	add	r3, pc, #268	@ (adr r3, 800c3b8 <__ieee754_acos+0x280>)
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	4604      	mov	r4, r0
 800c2b2:	460d      	mov	r5, r1
 800c2b4:	f7f4 f96c 	bl	8000590 <__aeabi_dmul>
 800c2b8:	a341      	add	r3, pc, #260	@ (adr r3, 800c3c0 <__ieee754_acos+0x288>)
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	f7f3 ffb1 	bl	8000224 <__adddf3>
 800c2c2:	4622      	mov	r2, r4
 800c2c4:	462b      	mov	r3, r5
 800c2c6:	f7f4 f963 	bl	8000590 <__aeabi_dmul>
 800c2ca:	a33f      	add	r3, pc, #252	@ (adr r3, 800c3c8 <__ieee754_acos+0x290>)
 800c2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d0:	f7f3 ffa6 	bl	8000220 <__aeabi_dsub>
 800c2d4:	4622      	mov	r2, r4
 800c2d6:	462b      	mov	r3, r5
 800c2d8:	f7f4 f95a 	bl	8000590 <__aeabi_dmul>
 800c2dc:	a33c      	add	r3, pc, #240	@ (adr r3, 800c3d0 <__ieee754_acos+0x298>)
 800c2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e2:	f7f3 ff9f 	bl	8000224 <__adddf3>
 800c2e6:	4622      	mov	r2, r4
 800c2e8:	462b      	mov	r3, r5
 800c2ea:	f7f4 f951 	bl	8000590 <__aeabi_dmul>
 800c2ee:	a33a      	add	r3, pc, #232	@ (adr r3, 800c3d8 <__ieee754_acos+0x2a0>)
 800c2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f4:	f7f3 ff94 	bl	8000220 <__aeabi_dsub>
 800c2f8:	4622      	mov	r2, r4
 800c2fa:	462b      	mov	r3, r5
 800c2fc:	f7f4 f948 	bl	8000590 <__aeabi_dmul>
 800c300:	a337      	add	r3, pc, #220	@ (adr r3, 800c3e0 <__ieee754_acos+0x2a8>)
 800c302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c306:	f7f3 ff8d 	bl	8000224 <__adddf3>
 800c30a:	4622      	mov	r2, r4
 800c30c:	462b      	mov	r3, r5
 800c30e:	f7f4 f93f 	bl	8000590 <__aeabi_dmul>
 800c312:	a335      	add	r3, pc, #212	@ (adr r3, 800c3e8 <__ieee754_acos+0x2b0>)
 800c314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c318:	4606      	mov	r6, r0
 800c31a:	460f      	mov	r7, r1
 800c31c:	4620      	mov	r0, r4
 800c31e:	4629      	mov	r1, r5
 800c320:	f7f4 f936 	bl	8000590 <__aeabi_dmul>
 800c324:	a332      	add	r3, pc, #200	@ (adr r3, 800c3f0 <__ieee754_acos+0x2b8>)
 800c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32a:	f7f3 ff79 	bl	8000220 <__aeabi_dsub>
 800c32e:	4622      	mov	r2, r4
 800c330:	462b      	mov	r3, r5
 800c332:	f7f4 f92d 	bl	8000590 <__aeabi_dmul>
 800c336:	a330      	add	r3, pc, #192	@ (adr r3, 800c3f8 <__ieee754_acos+0x2c0>)
 800c338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33c:	f7f3 ff72 	bl	8000224 <__adddf3>
 800c340:	4622      	mov	r2, r4
 800c342:	462b      	mov	r3, r5
 800c344:	f7f4 f924 	bl	8000590 <__aeabi_dmul>
 800c348:	a32d      	add	r3, pc, #180	@ (adr r3, 800c400 <__ieee754_acos+0x2c8>)
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	f7f3 ff67 	bl	8000220 <__aeabi_dsub>
 800c352:	4622      	mov	r2, r4
 800c354:	462b      	mov	r3, r5
 800c356:	f7f4 f91b 	bl	8000590 <__aeabi_dmul>
 800c35a:	4b34      	ldr	r3, [pc, #208]	@ (800c42c <__ieee754_acos+0x2f4>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	f7f3 ff61 	bl	8000224 <__adddf3>
 800c362:	ec45 4b10 	vmov	d0, r4, r5
 800c366:	4680      	mov	r8, r0
 800c368:	4689      	mov	r9, r1
 800c36a:	f000 f941 	bl	800c5f0 <__ieee754_sqrt>
 800c36e:	ec55 4b10 	vmov	r4, r5, d0
 800c372:	4642      	mov	r2, r8
 800c374:	464b      	mov	r3, r9
 800c376:	4630      	mov	r0, r6
 800c378:	4639      	mov	r1, r7
 800c37a:	f7f4 fa33 	bl	80007e4 <__aeabi_ddiv>
 800c37e:	4622      	mov	r2, r4
 800c380:	462b      	mov	r3, r5
 800c382:	f7f4 f905 	bl	8000590 <__aeabi_dmul>
 800c386:	a320      	add	r3, pc, #128	@ (adr r3, 800c408 <__ieee754_acos+0x2d0>)
 800c388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38c:	f7f3 ff48 	bl	8000220 <__aeabi_dsub>
 800c390:	4622      	mov	r2, r4
 800c392:	462b      	mov	r3, r5
 800c394:	f7f3 ff46 	bl	8000224 <__adddf3>
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	f7f3 ff42 	bl	8000224 <__adddf3>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	a11c      	add	r1, pc, #112	@ (adr r1, 800c418 <__ieee754_acos+0x2e0>)
 800c3a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3aa:	e76e      	b.n	800c28a <__ieee754_acos+0x152>
 800c3ac:	f3af 8000 	nop.w
	...
 800c3b8:	0dfdf709 	.word	0x0dfdf709
 800c3bc:	3f023de1 	.word	0x3f023de1
 800c3c0:	7501b288 	.word	0x7501b288
 800c3c4:	3f49efe0 	.word	0x3f49efe0
 800c3c8:	b5688f3b 	.word	0xb5688f3b
 800c3cc:	3fa48228 	.word	0x3fa48228
 800c3d0:	0e884455 	.word	0x0e884455
 800c3d4:	3fc9c155 	.word	0x3fc9c155
 800c3d8:	03eb6f7d 	.word	0x03eb6f7d
 800c3dc:	3fd4d612 	.word	0x3fd4d612
 800c3e0:	55555555 	.word	0x55555555
 800c3e4:	3fc55555 	.word	0x3fc55555
 800c3e8:	b12e9282 	.word	0xb12e9282
 800c3ec:	3fb3b8c5 	.word	0x3fb3b8c5
 800c3f0:	1b8d0159 	.word	0x1b8d0159
 800c3f4:	3fe6066c 	.word	0x3fe6066c
 800c3f8:	9c598ac8 	.word	0x9c598ac8
 800c3fc:	40002ae5 	.word	0x40002ae5
 800c400:	1c8a2d4b 	.word	0x1c8a2d4b
 800c404:	40033a27 	.word	0x40033a27
 800c408:	33145c07 	.word	0x33145c07
 800c40c:	3c91a626 	.word	0x3c91a626
 800c410:	54442d18 	.word	0x54442d18
 800c414:	3ff921fb 	.word	0x3ff921fb
 800c418:	54442d18 	.word	0x54442d18
 800c41c:	400921fb 	.word	0x400921fb
 800c420:	3fefffff 	.word	0x3fefffff
 800c424:	3fdfffff 	.word	0x3fdfffff
 800c428:	3c600000 	.word	0x3c600000
 800c42c:	3ff00000 	.word	0x3ff00000
 800c430:	3fe00000 	.word	0x3fe00000
 800c434:	4622      	mov	r2, r4
 800c436:	462b      	mov	r3, r5
 800c438:	496b      	ldr	r1, [pc, #428]	@ (800c5e8 <__ieee754_acos+0x4b0>)
 800c43a:	2000      	movs	r0, #0
 800c43c:	f7f3 fef0 	bl	8000220 <__aeabi_dsub>
 800c440:	4b6a      	ldr	r3, [pc, #424]	@ (800c5ec <__ieee754_acos+0x4b4>)
 800c442:	2200      	movs	r2, #0
 800c444:	f7f4 f8a4 	bl	8000590 <__aeabi_dmul>
 800c448:	4604      	mov	r4, r0
 800c44a:	460d      	mov	r5, r1
 800c44c:	ec45 4b10 	vmov	d0, r4, r5
 800c450:	f000 f8ce 	bl	800c5f0 <__ieee754_sqrt>
 800c454:	a34c      	add	r3, pc, #304	@ (adr r3, 800c588 <__ieee754_acos+0x450>)
 800c456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45a:	4620      	mov	r0, r4
 800c45c:	4629      	mov	r1, r5
 800c45e:	ec59 8b10 	vmov	r8, r9, d0
 800c462:	f7f4 f895 	bl	8000590 <__aeabi_dmul>
 800c466:	a34a      	add	r3, pc, #296	@ (adr r3, 800c590 <__ieee754_acos+0x458>)
 800c468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46c:	f7f3 feda 	bl	8000224 <__adddf3>
 800c470:	4622      	mov	r2, r4
 800c472:	462b      	mov	r3, r5
 800c474:	f7f4 f88c 	bl	8000590 <__aeabi_dmul>
 800c478:	a347      	add	r3, pc, #284	@ (adr r3, 800c598 <__ieee754_acos+0x460>)
 800c47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47e:	f7f3 fecf 	bl	8000220 <__aeabi_dsub>
 800c482:	4622      	mov	r2, r4
 800c484:	462b      	mov	r3, r5
 800c486:	f7f4 f883 	bl	8000590 <__aeabi_dmul>
 800c48a:	a345      	add	r3, pc, #276	@ (adr r3, 800c5a0 <__ieee754_acos+0x468>)
 800c48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c490:	f7f3 fec8 	bl	8000224 <__adddf3>
 800c494:	4622      	mov	r2, r4
 800c496:	462b      	mov	r3, r5
 800c498:	f7f4 f87a 	bl	8000590 <__aeabi_dmul>
 800c49c:	a342      	add	r3, pc, #264	@ (adr r3, 800c5a8 <__ieee754_acos+0x470>)
 800c49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a2:	f7f3 febd 	bl	8000220 <__aeabi_dsub>
 800c4a6:	4622      	mov	r2, r4
 800c4a8:	462b      	mov	r3, r5
 800c4aa:	f7f4 f871 	bl	8000590 <__aeabi_dmul>
 800c4ae:	a340      	add	r3, pc, #256	@ (adr r3, 800c5b0 <__ieee754_acos+0x478>)
 800c4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b4:	f7f3 feb6 	bl	8000224 <__adddf3>
 800c4b8:	4622      	mov	r2, r4
 800c4ba:	462b      	mov	r3, r5
 800c4bc:	f7f4 f868 	bl	8000590 <__aeabi_dmul>
 800c4c0:	a33d      	add	r3, pc, #244	@ (adr r3, 800c5b8 <__ieee754_acos+0x480>)
 800c4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c6:	4682      	mov	sl, r0
 800c4c8:	468b      	mov	fp, r1
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	4629      	mov	r1, r5
 800c4ce:	f7f4 f85f 	bl	8000590 <__aeabi_dmul>
 800c4d2:	a33b      	add	r3, pc, #236	@ (adr r3, 800c5c0 <__ieee754_acos+0x488>)
 800c4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d8:	f7f3 fea2 	bl	8000220 <__aeabi_dsub>
 800c4dc:	4622      	mov	r2, r4
 800c4de:	462b      	mov	r3, r5
 800c4e0:	f7f4 f856 	bl	8000590 <__aeabi_dmul>
 800c4e4:	a338      	add	r3, pc, #224	@ (adr r3, 800c5c8 <__ieee754_acos+0x490>)
 800c4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ea:	f7f3 fe9b 	bl	8000224 <__adddf3>
 800c4ee:	4622      	mov	r2, r4
 800c4f0:	462b      	mov	r3, r5
 800c4f2:	f7f4 f84d 	bl	8000590 <__aeabi_dmul>
 800c4f6:	a336      	add	r3, pc, #216	@ (adr r3, 800c5d0 <__ieee754_acos+0x498>)
 800c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fc:	f7f3 fe90 	bl	8000220 <__aeabi_dsub>
 800c500:	4622      	mov	r2, r4
 800c502:	462b      	mov	r3, r5
 800c504:	f7f4 f844 	bl	8000590 <__aeabi_dmul>
 800c508:	4b37      	ldr	r3, [pc, #220]	@ (800c5e8 <__ieee754_acos+0x4b0>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	f7f3 fe8a 	bl	8000224 <__adddf3>
 800c510:	4602      	mov	r2, r0
 800c512:	460b      	mov	r3, r1
 800c514:	4650      	mov	r0, sl
 800c516:	4659      	mov	r1, fp
 800c518:	f7f4 f964 	bl	80007e4 <__aeabi_ddiv>
 800c51c:	4642      	mov	r2, r8
 800c51e:	464b      	mov	r3, r9
 800c520:	f7f4 f836 	bl	8000590 <__aeabi_dmul>
 800c524:	2600      	movs	r6, #0
 800c526:	4682      	mov	sl, r0
 800c528:	468b      	mov	fp, r1
 800c52a:	4632      	mov	r2, r6
 800c52c:	464b      	mov	r3, r9
 800c52e:	4630      	mov	r0, r6
 800c530:	4649      	mov	r1, r9
 800c532:	f7f4 f82d 	bl	8000590 <__aeabi_dmul>
 800c536:	4602      	mov	r2, r0
 800c538:	460b      	mov	r3, r1
 800c53a:	4620      	mov	r0, r4
 800c53c:	4629      	mov	r1, r5
 800c53e:	f7f3 fe6f 	bl	8000220 <__aeabi_dsub>
 800c542:	4632      	mov	r2, r6
 800c544:	4604      	mov	r4, r0
 800c546:	460d      	mov	r5, r1
 800c548:	464b      	mov	r3, r9
 800c54a:	4640      	mov	r0, r8
 800c54c:	4649      	mov	r1, r9
 800c54e:	f7f3 fe69 	bl	8000224 <__adddf3>
 800c552:	4602      	mov	r2, r0
 800c554:	460b      	mov	r3, r1
 800c556:	4620      	mov	r0, r4
 800c558:	4629      	mov	r1, r5
 800c55a:	f7f4 f943 	bl	80007e4 <__aeabi_ddiv>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	4650      	mov	r0, sl
 800c564:	4659      	mov	r1, fp
 800c566:	f7f3 fe5d 	bl	8000224 <__adddf3>
 800c56a:	4632      	mov	r2, r6
 800c56c:	464b      	mov	r3, r9
 800c56e:	f7f3 fe59 	bl	8000224 <__adddf3>
 800c572:	4602      	mov	r2, r0
 800c574:	460b      	mov	r3, r1
 800c576:	f7f3 fe55 	bl	8000224 <__adddf3>
 800c57a:	e5fd      	b.n	800c178 <__ieee754_acos+0x40>
 800c57c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800c5d8 <__ieee754_acos+0x4a0>
 800c580:	e5ee      	b.n	800c160 <__ieee754_acos+0x28>
 800c582:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800c5e0 <__ieee754_acos+0x4a8>
 800c586:	e5eb      	b.n	800c160 <__ieee754_acos+0x28>
 800c588:	0dfdf709 	.word	0x0dfdf709
 800c58c:	3f023de1 	.word	0x3f023de1
 800c590:	7501b288 	.word	0x7501b288
 800c594:	3f49efe0 	.word	0x3f49efe0
 800c598:	b5688f3b 	.word	0xb5688f3b
 800c59c:	3fa48228 	.word	0x3fa48228
 800c5a0:	0e884455 	.word	0x0e884455
 800c5a4:	3fc9c155 	.word	0x3fc9c155
 800c5a8:	03eb6f7d 	.word	0x03eb6f7d
 800c5ac:	3fd4d612 	.word	0x3fd4d612
 800c5b0:	55555555 	.word	0x55555555
 800c5b4:	3fc55555 	.word	0x3fc55555
 800c5b8:	b12e9282 	.word	0xb12e9282
 800c5bc:	3fb3b8c5 	.word	0x3fb3b8c5
 800c5c0:	1b8d0159 	.word	0x1b8d0159
 800c5c4:	3fe6066c 	.word	0x3fe6066c
 800c5c8:	9c598ac8 	.word	0x9c598ac8
 800c5cc:	40002ae5 	.word	0x40002ae5
 800c5d0:	1c8a2d4b 	.word	0x1c8a2d4b
 800c5d4:	40033a27 	.word	0x40033a27
 800c5d8:	54442d18 	.word	0x54442d18
 800c5dc:	400921fb 	.word	0x400921fb
 800c5e0:	54442d18 	.word	0x54442d18
 800c5e4:	3ff921fb 	.word	0x3ff921fb
 800c5e8:	3ff00000 	.word	0x3ff00000
 800c5ec:	3fe00000 	.word	0x3fe00000

0800c5f0 <__ieee754_sqrt>:
 800c5f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f4:	4a68      	ldr	r2, [pc, #416]	@ (800c798 <__ieee754_sqrt+0x1a8>)
 800c5f6:	ec55 4b10 	vmov	r4, r5, d0
 800c5fa:	43aa      	bics	r2, r5
 800c5fc:	462b      	mov	r3, r5
 800c5fe:	4621      	mov	r1, r4
 800c600:	d110      	bne.n	800c624 <__ieee754_sqrt+0x34>
 800c602:	4622      	mov	r2, r4
 800c604:	4620      	mov	r0, r4
 800c606:	4629      	mov	r1, r5
 800c608:	f7f3 ffc2 	bl	8000590 <__aeabi_dmul>
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	4620      	mov	r0, r4
 800c612:	4629      	mov	r1, r5
 800c614:	f7f3 fe06 	bl	8000224 <__adddf3>
 800c618:	4604      	mov	r4, r0
 800c61a:	460d      	mov	r5, r1
 800c61c:	ec45 4b10 	vmov	d0, r4, r5
 800c620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c624:	2d00      	cmp	r5, #0
 800c626:	dc0e      	bgt.n	800c646 <__ieee754_sqrt+0x56>
 800c628:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c62c:	4322      	orrs	r2, r4
 800c62e:	d0f5      	beq.n	800c61c <__ieee754_sqrt+0x2c>
 800c630:	b19d      	cbz	r5, 800c65a <__ieee754_sqrt+0x6a>
 800c632:	4622      	mov	r2, r4
 800c634:	4620      	mov	r0, r4
 800c636:	4629      	mov	r1, r5
 800c638:	f7f3 fdf2 	bl	8000220 <__aeabi_dsub>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	f7f4 f8d0 	bl	80007e4 <__aeabi_ddiv>
 800c644:	e7e8      	b.n	800c618 <__ieee754_sqrt+0x28>
 800c646:	152a      	asrs	r2, r5, #20
 800c648:	d115      	bne.n	800c676 <__ieee754_sqrt+0x86>
 800c64a:	2000      	movs	r0, #0
 800c64c:	e009      	b.n	800c662 <__ieee754_sqrt+0x72>
 800c64e:	0acb      	lsrs	r3, r1, #11
 800c650:	3a15      	subs	r2, #21
 800c652:	0549      	lsls	r1, r1, #21
 800c654:	2b00      	cmp	r3, #0
 800c656:	d0fa      	beq.n	800c64e <__ieee754_sqrt+0x5e>
 800c658:	e7f7      	b.n	800c64a <__ieee754_sqrt+0x5a>
 800c65a:	462a      	mov	r2, r5
 800c65c:	e7fa      	b.n	800c654 <__ieee754_sqrt+0x64>
 800c65e:	005b      	lsls	r3, r3, #1
 800c660:	3001      	adds	r0, #1
 800c662:	02dc      	lsls	r4, r3, #11
 800c664:	d5fb      	bpl.n	800c65e <__ieee754_sqrt+0x6e>
 800c666:	1e44      	subs	r4, r0, #1
 800c668:	1b12      	subs	r2, r2, r4
 800c66a:	f1c0 0420 	rsb	r4, r0, #32
 800c66e:	fa21 f404 	lsr.w	r4, r1, r4
 800c672:	4323      	orrs	r3, r4
 800c674:	4081      	lsls	r1, r0
 800c676:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c67a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c67e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c682:	07d2      	lsls	r2, r2, #31
 800c684:	bf5c      	itt	pl
 800c686:	005b      	lslpl	r3, r3, #1
 800c688:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c68c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c690:	bf58      	it	pl
 800c692:	0049      	lslpl	r1, r1, #1
 800c694:	2600      	movs	r6, #0
 800c696:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c69a:	106d      	asrs	r5, r5, #1
 800c69c:	0049      	lsls	r1, r1, #1
 800c69e:	2016      	movs	r0, #22
 800c6a0:	4632      	mov	r2, r6
 800c6a2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c6a6:	1917      	adds	r7, r2, r4
 800c6a8:	429f      	cmp	r7, r3
 800c6aa:	bfde      	ittt	le
 800c6ac:	193a      	addle	r2, r7, r4
 800c6ae:	1bdb      	suble	r3, r3, r7
 800c6b0:	1936      	addle	r6, r6, r4
 800c6b2:	0fcf      	lsrs	r7, r1, #31
 800c6b4:	3801      	subs	r0, #1
 800c6b6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c6ba:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c6be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c6c2:	d1f0      	bne.n	800c6a6 <__ieee754_sqrt+0xb6>
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	2720      	movs	r7, #32
 800c6c8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	eb00 0e0c 	add.w	lr, r0, ip
 800c6d2:	db02      	blt.n	800c6da <__ieee754_sqrt+0xea>
 800c6d4:	d113      	bne.n	800c6fe <__ieee754_sqrt+0x10e>
 800c6d6:	458e      	cmp	lr, r1
 800c6d8:	d811      	bhi.n	800c6fe <__ieee754_sqrt+0x10e>
 800c6da:	f1be 0f00 	cmp.w	lr, #0
 800c6de:	eb0e 000c 	add.w	r0, lr, ip
 800c6e2:	da42      	bge.n	800c76a <__ieee754_sqrt+0x17a>
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	db40      	blt.n	800c76a <__ieee754_sqrt+0x17a>
 800c6e8:	f102 0801 	add.w	r8, r2, #1
 800c6ec:	1a9b      	subs	r3, r3, r2
 800c6ee:	458e      	cmp	lr, r1
 800c6f0:	bf88      	it	hi
 800c6f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c6f6:	eba1 010e 	sub.w	r1, r1, lr
 800c6fa:	4464      	add	r4, ip
 800c6fc:	4642      	mov	r2, r8
 800c6fe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c702:	3f01      	subs	r7, #1
 800c704:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c708:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c70c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c710:	d1dc      	bne.n	800c6cc <__ieee754_sqrt+0xdc>
 800c712:	4319      	orrs	r1, r3
 800c714:	d01b      	beq.n	800c74e <__ieee754_sqrt+0x15e>
 800c716:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c79c <__ieee754_sqrt+0x1ac>
 800c71a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c7a0 <__ieee754_sqrt+0x1b0>
 800c71e:	e9da 0100 	ldrd	r0, r1, [sl]
 800c722:	e9db 2300 	ldrd	r2, r3, [fp]
 800c726:	f7f3 fd7b 	bl	8000220 <__aeabi_dsub>
 800c72a:	e9da 8900 	ldrd	r8, r9, [sl]
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	4640      	mov	r0, r8
 800c734:	4649      	mov	r1, r9
 800c736:	f7f4 f9a7 	bl	8000a88 <__aeabi_dcmple>
 800c73a:	b140      	cbz	r0, 800c74e <__ieee754_sqrt+0x15e>
 800c73c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c740:	e9da 0100 	ldrd	r0, r1, [sl]
 800c744:	e9db 2300 	ldrd	r2, r3, [fp]
 800c748:	d111      	bne.n	800c76e <__ieee754_sqrt+0x17e>
 800c74a:	3601      	adds	r6, #1
 800c74c:	463c      	mov	r4, r7
 800c74e:	1072      	asrs	r2, r6, #1
 800c750:	0863      	lsrs	r3, r4, #1
 800c752:	07f1      	lsls	r1, r6, #31
 800c754:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c758:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c75c:	bf48      	it	mi
 800c75e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c762:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c766:	4618      	mov	r0, r3
 800c768:	e756      	b.n	800c618 <__ieee754_sqrt+0x28>
 800c76a:	4690      	mov	r8, r2
 800c76c:	e7be      	b.n	800c6ec <__ieee754_sqrt+0xfc>
 800c76e:	f7f3 fd59 	bl	8000224 <__adddf3>
 800c772:	e9da 8900 	ldrd	r8, r9, [sl]
 800c776:	4602      	mov	r2, r0
 800c778:	460b      	mov	r3, r1
 800c77a:	4640      	mov	r0, r8
 800c77c:	4649      	mov	r1, r9
 800c77e:	f7f4 f979 	bl	8000a74 <__aeabi_dcmplt>
 800c782:	b120      	cbz	r0, 800c78e <__ieee754_sqrt+0x19e>
 800c784:	1ca0      	adds	r0, r4, #2
 800c786:	bf08      	it	eq
 800c788:	3601      	addeq	r6, #1
 800c78a:	3402      	adds	r4, #2
 800c78c:	e7df      	b.n	800c74e <__ieee754_sqrt+0x15e>
 800c78e:	1c63      	adds	r3, r4, #1
 800c790:	f023 0401 	bic.w	r4, r3, #1
 800c794:	e7db      	b.n	800c74e <__ieee754_sqrt+0x15e>
 800c796:	bf00      	nop
 800c798:	7ff00000 	.word	0x7ff00000
 800c79c:	20000068 	.word	0x20000068
 800c7a0:	20000060 	.word	0x20000060

0800c7a4 <_init>:
 800c7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a6:	bf00      	nop
 800c7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7aa:	bc08      	pop	{r3}
 800c7ac:	469e      	mov	lr, r3
 800c7ae:	4770      	bx	lr

0800c7b0 <_fini>:
 800c7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b2:	bf00      	nop
 800c7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7b6:	bc08      	pop	{r3}
 800c7b8:	469e      	mov	lr, r3
 800c7ba:	4770      	bx	lr
